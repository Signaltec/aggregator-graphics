(function() {
  var $$, app, log_error, report_error, set_language;

  report_error = function(message) {
    return alert(message);
  };

  log_error = function(error) {
    return console.error(error);
  };

  window.onerror = function(msg, url, line, col, error) {
    var extra, ref, ref1;
    log_error(error);
    extra = (ref = !col) != null ? ref : {
      '': '\ncolumn: ' + col
    };
    extra += (ref1 = !error) != null ? ref1 : {
      '': '\nerror: ' + error
    };
    report_error("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
    return true;
  };

  angular.module('ErrorCatcher', []).factory('$exceptionHandler', function() {
    return function(exception, cause) {
      log_error(exception);
      return report_error(exception.message);
    };
  });

  $$ = angular.element;

  app = angular.module("app", ['ngRoute', 'ngSanitize', 'ngMessages', 'ui.bootstrap', 'lvl.directives.dragdrop', 'angular-svg-round-progress', 'angularFileUpload', 'pascalprecht.translate', 'ErrorCatcher']).config(["$translateProvider", function($translateProvider) {
    var key, value;
    for (key in i18n) {
      value = i18n[key];
      $translateProvider.translations(key, value);
      $translateProvider.useSanitizeValueStrategy('escape');
    }
    return $translateProvider.fallbackLanguage('en_US');
  }]);

  this.$$ = jQuery;

  this.app = app;

  $$(document).ready(function() {
    var html;
    html = document.getElementsByTagName('html')[0];
    html.setAttribute('ng-app', 'app');
    html.dataset.ngApp = 'app';
    return angular.bootstrap(html, ['app']);
  });

  set_language = (function(_this) {
    return function(language, $translate) {
      var i, len, page, ref, results;
      $translate.use(language);
      ref = _this.pages;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        page = ref[i];
        results.push(page.title = $translate.instant("page." + page.page + ".title"));
      }
      return results;
    };
  })(this);

  app.controller("AppCtrl", ["$scope", "$rootScope", "$location", "$filter", "$q", "$timeout", "$translate", "log", "api", "Device", "Device_routing", "Device_GUI", "GUI", "Port", "Rule", "Configuration", "Configurations", "Enums", "Status", "Model", "Device_settings", "Version", "Login", "translate", "Routing_model_errors", "Port_view", "Port_numeration", "Promises", "Browser", function($scope, $rootScope, $location, $filter, $q, $timeout, $translate, log, api, Device, Device_routing, Device_GUI, GUI, Port, Rule, Configuration, Configurations, Enums, Status, Model, Device_settings, Version, Login, translate, Routing_model_errors, Port_view, Port_numeration, Promises, Browser) {
    var default_route, determine_current_page, proceed_loading, when_device_is_booted;
    report_error = function(message) {
      return Status.error(message);
    };
    log_error = function(error) {
      console.error(error);
      return log.error(error);
    };
    $scope.key_handlers = [];
    $scope.on_key = function(action) {
      var handler_id;
      handler_id = Keyboard_listener.on(action);
      this.key_handlers.push(handler_id);
      return handler_id;
    };
    $scope.off_key = function(handler_id) {
      this.key_handlers.remove(handler_id);
      return Keyboard_listener.off(handler_id);
    };
    Keyboard_listener.on(function(key) {
      if (key.is('F1', {
        swallow: true
      })) {
        return log.download();
      }
    });
    $rootScope.countWatchers = function() {
      var q, scope, watchers;
      q = [$rootScope];
      watchers = 0;
      scope = void 0;
      while (q.length > 0) {
        scope = q.pop();
        if (scope.$$watchers) {
          watchers += scope.$$watchers.length;
        }
        if (scope.$$childHead) {
          q.push(scope.$$childHead);
        }
        if (scope.$$nextSibling) {
          q.push(scope.$$nextSibling);
        }
      }
      window.console.log('Watchers count ----', watchers);
    };
    $$(document).on('keydown', (function(_this) {
      return function(event) {
        if (event.keyCode !== 27) {
          return;
        }
        return $scope.$apply(function() {
          if (window.closeable_by_escape && !window.closeable_by_escape.is_empty()) {
            return window.closeable_by_escape.pop()();
          }
        });
      };
    })(this));
    $rootScope.state = {};
    $scope.state.is_application_loaded = false;
    $scope.when_loaded = function(action) {
      var unbind;
      if ($rootScope.state.is_application_loaded) {
        return action();
      }
      return unbind = $scope.$on('application loaded', function() {
        unbind();
        return action();
      });
    };
    $scope.initialize_page_with = function(initializer) {
      var initialization;
      initialization = function() {
        var finish, promise;
        $rootScope.loading_page = true;
        promise = initializer();
        finish = function() {
          return $rootScope.safeApply(function() {
            return $rootScope.loading_page = false;
          });
        };
        if ((promise == null) || (promise["finally"] == null)) {
          return finish();
        } else {
          return promise.then(finish);
        }
      };
      $rootScope.page_initializer = initialization;
      return $scope.when_loaded(initialization);
    };
    $rootScope.initialize_page = function() {
      if ($rootScope.page_initializer != null) {
        return $rootScope.page_initializer();
      }
    };
    $rootScope.application_loaded = function() {
      $rootScope.state.is_application_loaded = true;
      return $rootScope.$broadcast('application loaded');
    };
    $scope.on_upload_configuration = function(files) {
      return Configurations.upload(files[0]);
    };
    $rootScope.block_event = function(event) {
      event.stopPropagation();
      return event.preventDefault();
    };
    $rootScope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn && typeof fn === 'function') {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    $scope.remember = function() {
      var key, rem;
      key = 'rem' + $location.path().replace('/', '-');
      rem = localStorage.getItem(key);
      rem = rem ? JSON.parse(rem) : {};
      switch (arguments.length) {
        case 1:
          return rem[arguments[0]];
        case 2:
          rem[arguments[0]] = arguments[1];
          localStorage.setItem(key, JSON.stringify(rem));
          return arguments[1];
      }
    };
    $scope.periodical_promised = function(action, period) {
      var again, is_cancelled, tick, timeout;
      timeout = null;
      is_cancelled = false;
      again = function() {
        if (is_cancelled) {
          return;
        }
        return timeout = $timeout(tick, period);
      };
      tick = function() {
        return action()["finally"](again);
      };
      tick();
      return {
        cancel: function() {
          is_cancelled = true;
          if (timeout) {
            $timeout.cancel(timeout);
            return timeout = null;
          }
        }
      };
    };
    $rootScope.initialize_application = function() {
      Status.busy();
      return Device_routing.LBG.Hash_profile.fetch_all().then(function() {
        return Configuration.Network.load_into_model();
      }).then(function() {
        Model.rules = [];
        return Configuration.read_local_routing_configuration().then(function() {
          return Model.rules = $rootScope.routing.rules;
        }).then(function() {
          return Status.idle();
        }).then(function() {
          if (Browser.validate() === false) {
            return Status.progress(Browser.getErrorMessage());
          }
        })["catch"](function(error) {
          if (api.is_api_error(error)) {
            return;
          }
          if (Routing_model_errors.is(error)) {
            return Status.error(Routing_model_errors.message(error));
          }
          log.error(error);
          return Status.error(translate('configuration.error.configuration_upload_failed'));
        });
      }).then(function() {
        return $scope.application_loaded();
      }).then(function() {
        return Device_GUI.refresh_port_coordinates();
      });
    };
    $rootScope.urge_port_refresh = function() {
      if ($rootScope.port_refresher) {
        $rootScope.port_refresher.cancel();
      }
      $rootScope.start_periodical_port_refresh();
      return true;
    };
    $rootScope.start_periodical_port_refresh = function() {
      return $rootScope.port_refresher = $scope.periodical_promised(Device.refresh_ports, $scope._port_state_refresh_interval * 1000);
    };
    $rootScope.scroll_by = function(scroll_by) {
      var delayed;
      $rootScope.window_scroll_by = false;
      delayed = function() {
        return $rootScope.safeApply(function() {
          return $rootScope.window_scroll_by = scroll_by;
        });
      };
      return delayed.delay(0);
    };
    $rootScope.not_authenticated = function() {
      Status.not_authenticated();
      return Login.not_authenticated();
    };
    $rootScope.show_navigation_confirmation = function() {
      return $rootScope.next_route;
    };
    $rootScope.dont_navigate_away = function() {
      return $rootScope.next_route = null;
    };
    $rootScope.navigate_away = function() {
      if (Promises.pending()) {
        Promises.cancel();
        Promises.reset();
        Status.not_busy();
      }
      $location.path($rootScope.next_route.$$route.originalPath);
      return $rootScope.next_route = null;
    };
    $rootScope.log = log;
    $rootScope.Enums = Enums;
    $rootScope.GUI = GUI;
    $rootScope.Device_GUI = Device_GUI;
    $rootScope.Port = Port;
    $rootScope.Port_view = Port_view;
    $rootScope.Port_numeration = Port_numeration;
    $rootScope.Rule = Rule;
    $rootScope.Configuration = Configuration;
    $rootScope.Configurations = Configurations;
    $rootScope.model = Model;
    $rootScope.Status = Status;
    $rootScope.Device_settings = Device_settings;
    $rootScope.Login = Login;
    $scope.pages = pages;
    $scope.floor = Math.floor;
    $scope.ceiling = Math.ceil;
    $scope.is_set = function(x) {
      return x != null;
    };
    $rootScope.unmasked_acl_filter_types = ['ethernet_protocol', 'IP_protocol', 'multi_IP_address', 'IP_protocol_source', 'IP_protocol_destination', 'Level4_data'];
    $scope.now = new Date();
    $rootScope.timeouts = [];
    Promises.reset();
    $rootScope.data = {};
    $rootScope.stats = {
      ports: {}
    };
    $rootScope.view = {
      ports: {}
    };
    $rootScope.groups = [];
    $scope._port_state_refresh_interval = 2;
    if ($location.path() === "/") {
      default_route = pages.filter(function(route) {
        return route.first_screen;
      })[0];
      if (default_route) {
        $location.url(default_route.url, true);
      }
    }
    $scope.body = $$(document.body);
    $scope.location = $location;
    determine_current_page = function() {
      $rootScope.this_page = pages.filter(function(route) {
        return route.url === $location.$$path;
      })[0];
      document.title = $rootScope.this_page.title;
      return $timeout(function() {
        var i, len, results, route;
        results = [];
        for (i = 0, len = pages.length; i < len; i++) {
          route = pages[i];
          if ($rootScope.this_page === route) {
            results.push($scope.body.addClass(route.page + '_page'));
          } else {
            results.push($scope.body.removeClass(route.page + '_page'));
          }
        }
        return results;
      });
    };
    determine_current_page();
    $scope.$on('$routeChangeStart', function(event, next, current) {
      var handler_id, i, len, ref;
      if (!Promises.pending()) {
        ref = $scope.key_handlers;
        for (i = 0, len = ref.length; i < len; i++) {
          handler_id = ref[i];
          $scope.off_key(handler_id);
        }
        return;
      }
      event.preventDefault();
      $rootScope.next_route = next;
      Promises.wait();
      return Promises.when_done(function() {
        if ($rootScope.next_route !== next) {
          return;
        }
        return $rootScope.safeApply(function() {
          return $rootScope.navigate_away();
        });
      });
    });
    $scope.$on('$routeChangeSuccess', function(scope, next, current) {
      var i, len, ref, timeout;
      determine_current_page();
      ref = $rootScope.timeouts;
      for (i = 0, len = ref.length; i < len; i++) {
        timeout = ref[i];
        log.info('Cancelling timeout');
        $timeout.cancel(timeout);
      }
      return $rootScope.timeouts = [];
    });
    Status.busy();
    configuration.version = Version(configuration.version);
    $rootScope.configuration = configuration;
    set_language(configuration.language, $translate);
    angular.extend(Device_settings, $rootScope.configuration.device);
    delete $rootScope.configuration.device;
    Enums.ACL_Filter.Level4_data.mask.bits = Device_settings.level_4_data_max_bytes * 8;
    proceed_loading = function() {
      return Device.initialize().then(function(result) {
        $rootScope.safeApply(function() {
          return $rootScope.device_is_booting = false;
        });
        return when_device_is_booted(result);
      })["catch"](api.error.device_is_booting_up, function(error) {
        $rootScope.safeApply(function() {
          return $rootScope.device_is_booting = true;
        });
        return setTimeout(proceed_loading, 1000);
      })["catch"](function(error) {
        log.error(error);
        return Status.error(error);
      });
    };
    proceed_loading();
    return when_device_is_booted = function() {
      return Promise.resolve(true).then(function() {
        return $scope.safeApply(function() {
          Device_GUI.initialize();
          if ($rootScope.this_page.page !== 'debug') {
            $rootScope.start_periodical_port_refresh();
          }
          $rootScope.application_view_ready = true;
          return true;
        });
      }).then(function() {
        return Login.authenticate();
      }).then(function(user) {
        $rootScope.user = user;
        $rootScope.$broadcast('refresh height');
        return $rootScope.initialize_application();
      })["catch"](api.error.not_authenticated, function(error) {
        if (!$rootScope.application_view_ready) {
          alert(translate('error.unauthenticated'));
          return log.error(error);
        } else {
          Status.idle();
          return $scope.safeApply(function() {
            return Login.not_authenticated();
          });
        }
      })["catch"](function(error) {
        log.error(error);
        return Status.error(error.message);
      });
    };
  }]);

  app.config(["$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
    var i, len, page, results, route;
    $locationProvider.html5Mode(true);
    results = [];
    for (i = 0, len = pages.length; i < len; i++) {
      route = pages[i];
      page = {
        templateUrl: '/pages/' + route.page + '.html'
      };
      if (route.controller) {
        page.controller = route.controller;
      }
      results.push($routeProvider.when(route.url, page));
    }
    return results;
  }]);

}).call(this);

(function() {
  function getSymbol(translate) {
    var symbol = ['bps', 'kbps', 'Mbps', 'Gbps'];
    return symbol.map(function (rate) {
      return translate('network.rate.' + rate)
    });
  }
  /* Округление */
  function precise_round(num, decimals) { return num.toFixed(decimals); }

  // Фильтр для нахождения элемента по ключу
  app.filter("findkey", function() {
    return function(array, keyname, keyval, fieldname) {
      if (typeof(array) !== 'undefined') {
        var o = $.grep(array, function(i){ return (i[keyname] == keyval) });
        if (o.length) { if (fieldname) return o[0][fieldname]; else return o[0]; }
        return false;
      }
    }
  });

  // Фильтр для нахождения списка элемента по ключу
  app.filter("findkeyarr", function() {
    return function(array, keyname, keyval, exist) {
      if (typeof(array) !== 'undefined') {
        var o = $.grep(array, function(i){ return (!exist) ? i[keyname] != keyval : i[keyname] == keyval; });
        return o;
      }
    }
  });

  /* Форматирование скорости передачи данных. Вход: байты ("октеты") в секунду */
  app.filter("rateformat", ["translate", function(translate) {
    return function(rate) {
      // градации

      var symbol = getSymbol(translate);

      var base = 1000, rank = 0;
      // преобразовать из байтов ("октетов") в секунду в биты в секунду
      rate = (!rate || +rate<=0 ) ? 0 : rate*8;
      // выяснить наибольший rank данной величины
      if (rate!=0) {for (var i=1; i<=3; i++) if (rate >= base) {rate = rate / base; rank = i} }
      // округлить величину до первого знака после запятой (с учётом rank'а)
      rate = (rank>=1) ? precise_round(rate, 1) : precise_round(rate, 0);
      // вывести вместе с единицей измерения
      return (rate.toString().replace(/(\d)(?=(\d{3})+([^\d]|$))/g, "$1 ").replace(".", ",") + "\u00A0" + symbol[rank]);
    }
  }]);

  /* Форматирование скорости передачи данных. Вход: байты ("октеты") в секунду */
  app.filter("rateformatSpecial", ["translate", function(translate) {
    return function(rate) {
      // градации
      var symbol = getSymbol(translate), base = 1000, rank = 0;
      // преобразовать из байтов ("октетов") в секунду в биты в секунду
      rate = (!rate || +rate<=0 ) ? 0 : rate*8;

      if (rate == 0) return "—";

      // выяснить наибольший rank данной величины
      if (rate!=0) {for (var i=1; i<=3; i++) if (rate >= base) {rate = rate / base; rank = i} }
      // округлить величину до первого знака после запятой (с учётом rank'а)
      rate = (rank>=1) ? precise_round(rate, 1) : precise_round(rate, 0);
      // вывести вместе с единицей измерения
      return (rate.toString().replace(/(\d)(?=(\d{3})+([^\d]|$))/g, "$1 ").replace(".", ",") + "\u00A0" + symbol[rank]);
    }
  }]);

  // Фильтр, пропускающий только те значения, которые ещё не выбраны
  app.filter('unused_filter', function() {
    return function(complete_list, options) {
      return complete_list.filter(function(list_item) {
        return !options.is_used(list_item)
      });
    };
  });

  // Сначала нечётные
  app.filter('odd_first', function() {
    return function(values) {
      var result = [];

      var i;

      i = 0;
      while (i < values.length) {
        result.push(values[i]);
        i += 2;
      }

      i = 1;
      while (i < values.length) {
        result.push(values[i]);
        i += 2;
      }

      return result;
    };
  });
  /**
   * Фильтр для силы сигнала
   */
  app.filter('percent_number', function() {
    return function(value) {
      return value
        ? value + '%'
        : '';
    }
  });
  /**
   * Удаление "С" в конце значения температуры и добавление "°".
   */
  app.filter('sfp_temperature', function() {
    return function(value) {
      return value
        ? parseInt(value, 10) + '°'
        : value;
    };
  });
  /**
   * Установка пробела в строках между значением и единицой измерения
   * при их слитности.
   */
  app.filter('space_delimiter', function() {
    return function(value) {

      return value.replace(/[\d.\-+]+(?=[a-zA-Zа-яА-ЯёЁ])/g, function(part) {
        return part + ' ';
      })
    };
  });

})();
(function() {
  this.pages = [
    {
      url: "/ports",
      page: "ports",
      controller: "PortsCtrl",
      menu: true,
      first_screen: true
    }, {
      url: "/rules",
      page: "routing",
      controller: "RulesCtrl",
      menu: true,
      notitle: true,
      nopaddings: true
    }, {
      url: "/settings",
      page: "settings",
      controller: "SettingsCtrl",
      menu: true
    }, {
      url: "/debug",
      page: "debug",
      controller: "DebugCtrl",
      status: false
    }, {
      url: "/admin",
      page: "admin",
      controller: "AdminCtrl"
    }
  ];

}).call(this);

// Usage:
//
// $(document).on('keydown.global_hotkey', function(event)
// {
// 	if (Keyboard.is('Ctrl', 'z', event))
// 	{
// 		undo()
//		event.preventDefault()
// 		return false
// 	}
// }

var Keyboard =
{
	Backspace: 8,
	Tab: 9,
	
	Enter: 13,
	
	Ctrl: 18,
	Alt: 17,
	Shift: 16,
	
	Pause: 19,
	Escape: 27,
	
	Space: 32,
	
	Page_up: 33,
	Page_down: 34,
	
	End: 35,
	Home: 36,
	
	Left: 37,
	
	Up: 38,
	
	Right: 39,
	
	Down: 40,
	
	Insert: 45,
	
	Delete: 46,
	
	'0': 48,
	'1': 49,
	'2': 50,
	'3': 51,
	'4': 52,
	'5': 53,
	'6': 54,
	'7': 55,
	'8': 56,
	'9': 57,
	
	A: 65,
	B: 66,
	C: 67,
	D: 68,
	E: 69,
	F: 70,
	G: 71,
	H: 72,
	I: 73,
	J: 74,
	K: 75,
	L: 76,
	M: 77,
	N: 78,
	O: 79,
	P: 80,
	Q: 81,
	R: 82,
	S: 83,
	T: 84,
	U: 85,
	V: 86,
	W: 87,
	X: 88,
	Y: 89,
	Z: 90,
	
	hyphen: 189,
	
	'-': 109,
	'+': 107,
	
	F1: 112,
	F2: 113,
	F3: 114,
	F4: 115,
	
	F5: 116,
	F6: 117,
	F7: 118,
	F8: 119,
	
	F9: 120,
	F10: 121,
	F11: 122,
	F12: 123,
	
	/*
	a: 97,
	b: 98,
	c: 99,
	d: 100,
	e: 101,
	f: 102,
	g: 103,
	h: 104,
	i: 105,
	j: 106,
	k: 107,
	l: 108,
	m: 109,
	n: 110,
	o: 111,
	p: 112,
	q: 113,
	r: 114,
	s: 115,
	t: 116,
	u: 117,
	v: 118,
	w: 119,
	x: 120,
	y: 121,
	z: 122,
	*/
	
	';': 186,
	'=': 187,
	',': 188,
	'-': 189,
	'.': 190,
	'/': 191,
	'`': 192,
	
	'[': 221,
	']': 223,
	
	/*
	F1: 112,
	F2: 113,
	F3: 114,
	F4: 115,
	F5: 116,
	F6: 117,
	F7: 118,
	F8: 119,
	F9: 120,
	F10: 121,
	F11: 122,
	F12: 123,
	*/

	disable: function()
	{
		this.disabled = true
	},
	
	enable: function()
	{
		this.disabled = false
	},
	
	// внутренний метод
	has: function(key, code)
	{
		if (typeof code !== 'number')
		{
			var event = code
			code = event.which || event.keyCode
			
			switch (key)
			{
				case 'Ctrl':
					if (event.ctrlKey)
						return true
					break
					
				case 'Alt':
					if (event.altKey)
						return true
					break
					
				case 'Shift':
					if (event.shiftKey)
						return true
					break
					
				case 'Command':
					if (event.cmdKey)
						return true
					break
			}
		}
		
		if (this[key] instanceof Array)
		{
			var i = 0
			while (i < this[key].length)
			{
				if (code === this[key][i])
					return true
				i++
			}
		}
		else if (code === this[key])
			return true
			
		return false
	},
	
	// Определяет, была ли нажата данная комбинация клавиш.
	// 
	// Использование:
	// Keyboard.is('Ctrl', 'Shift', 'N', event)
	is: function()
	{
		var meta = false
		var ctrl = false
		var alt = false
		var shift = false
	
		var keys
		var event
		var code
		
		if (arguments[0] instanceof Array)
		{
			// copy
			keys = arguments[0].map(function(key) { return key })
			var event_or_code = arguments[1]
			
			if (typeof event_or_code === 'number')
				code = event_or_code
			else
				event = event_or_code
		}
		else
		{
			var args = Array.prototype.slice.call(arguments)
			
			var event_or_code = args.pop()
			
			if (typeof event_or_code === 'number')
				code = event_or_code
			else
				event = event_or_code
			
			// copy
			keys = args
		}
		
		if (event)
		{
			if (event.which)
				code = event.which
			else
				code = event.keyCode
		}
			
		if (keys.has('Command'))
		{
			meta = true
			keys.remove('Command')
		}
		
		if (keys.has('Ctrl'))
		{
			ctrl = true
			keys.remove('Ctrl')
		}
			
		if (keys.has('Alt'))
		{
			alt = true
			keys.remove('Alt')
		}
			
		if (keys.has('Shift'))
		{
			shift = true
			keys.remove('Shift')
		}

		if (!event && (meta || ctrl || alt || shift))
			throw 'Event wasn\'t provided for this functionality'
		
		if (meta)
		{
			if (!event.metaKey)
				return false
		}
		else if (event)
		{
			if (event.metaKey)
				return false
		}

		if (ctrl)
		{
			if (!event.ctrlKey)
				return false
		}
		else if (event)
		{
			if (event.ctrlKey)
				return false
		}
		
		if (alt)
		{
			if (!event.altKey)
				return false
		}
		else if (event)
		{
			if (event.altKey)
				return false
		}
				
		if (shift)
		{
			if (!event.shiftKey)
				return false
		}
		else if (event)
		{
			if (event.shiftKey)
				return false
		}
		
		if (keys.length === 0)
		{
			//alert(event.keyCode)
			return true
		}
			
		if (keys.length !== 1)
			throw 'Too much character keys. Only one allowed.'
		
		var key = keys[0]
		
		if (key.length === 1)				
			if (shift)
				key = key.toUpperCase()
		
		return this.has(key, code)
	},
	
	// Определяет по событию, какая комбинация клавиш была нажата
	what: function(event)
	{
		var keys = []
			
		if (event.metaKey)
		{
			keys.push('Command')
		}
			
		if (event.ctrlKey)
		{
			keys.push('Ctrl')
		}
			
		if (event.altKey)
		{
			keys.push('Alt')
		}
			
		if (event.shiftKey)
		{
			keys.push('Shift')
		}
		
		var code
		
		if (event.which)
			code = event.which
		else
			code = event.keyCode
		
		var the_key
		
		Object.for_each(this, function(key, value)
		{
			if (value instanceof Array)
			{
				var i = 0
				while (i < value.length)
				{
					if (code === value[i])
						return the_key = key
					i++
				}
			}
			else if (typeof value === 'number')
			{
				if (value === code)
					the_key = key
			}
		})
		
		switch (code)
		{
			case 16:
			case 17:
			case 18:
				return
		}
		
		if (!event.keyCode)
			return
		
		if (!the_key)
			throw 'Key code not recognized: ' + code
		
		keys.push(the_key)
		
		return keys
	},
	
	// navigating: function(event)
	// {
	// 	if (Keyboard.is('Влево', event) ||
	// 		Keyboard.is('Вправо', event) ||
	// 		Keyboard.is('Вверх', event) ||
	// 		Keyboard.is('Вниз', event) ||
	// 		Keyboard.is('Home', event) ||
	// 		Keyboard.is('End', event) ||
	// 		Keyboard.is('Page_up', event) ||
	// 		Keyboard.is('Page_down', event))
	// 	{
	// 		return true
	// 	}
	// },
	
	// print_combination: function(keys)
	// {
	// 	return keys.map(function(key) { return '«' + key + '»' }).join(', ')
	// },
	
	// sorted: function(keys)
	// {
	// 	keys = Array.clone(keys)
		
	// 	var sorted = []
		
	// 	var meta_keys = ['Command', 'Ctrl', 'Alt', 'Shift']
		
	// 	meta_keys.forEach(function(meta_key)
	// 	{
	// 		if (keys.has(meta_key))
	// 		{
	// 			sorted.push(meta_key)
	// 			keys.remove(meta_key)
	// 		}
	// 	})
		
	// 	sorted.append(keys.sort())
		
	// 	return sorted
	// },
}

var Keyboard_listener = {

	key_handlers: {},
	
	// добавляет обработчик события keydown
	on: function(action)
	{
		function generate_unique_key_in_object(target)
		{
			var key = Math.random().toString()
			
			if (typeof target[key] === 'undefined')
				return key
			
			return generate_unique_key_in_object(target)
		}
		
		var handler_id = generate_unique_key_in_object(this.key_handlers)

		this.key_handlers[handler_id] = function(event) {
			var helper = {
				is: function() {
					var args = Array.prototype.slice.call(arguments)

					var options
					if (typeof args.last() === 'object') {
						options = args.pop()
					}

					args.push(event)

					var result = Keyboard.is.apply(Keyboard, args)

					if (result) {
						if (!options || options.swallow) {
							helper.stop()
						}
					}

					return result
				},
				stop: function() {
					event.preventDefault()
					event.stopImmediatePropagation()
					return true
				},
				event: event
			}

			return action(helper)
		}

		return handler_id
	},
	
	// убирает обработчик события keydown
	off: function(id)
	{
		delete this.key_handlers[id]
	}
	
	// on_element: function(element, keys, action)
	// {
	// 	element.on('keydown', function(event)
	// 	{
	// 		if (Keyboard.is(keys, event))
	// 		{
	// 			event.preventDefault()
	// 			action()
	// 		}
	// 	})
	// },
}

$(document).on('keydown.keys', function(event)
{
	if (Keyboard.disabled)
	{
		event.preventDefault()
		return
	}
	
	Object.for_each(Keyboard_listener.key_handlers, function(id, handler)
	{
		handler(event)
	})
});
(function() {
  this.i18n = {};

}).call(this);

var module = angular.module("lvl.directives.dragdrop", ['lvl.services']);

module.directive('lvlDraggable', ['$rootScope', 'uuid', function($rootScope, uuid) {

    return {
        restrict: 'A',
        scope: {
        	lvlDraggable: '=',
            onDrag: '&',
            multiple: '='
        },
        link: function(scope, el, attrs, controller) {
			var $element = angular.element(el);

			scope.$watch('lvlDraggable', function(value) {
				$element.attr("draggable", value);
			})
            
            var id = $element.attr("id");
            if (!id) {
                id = uuid.new()
                $element.attr("id", id);
            }
          
            el.bind("dragstart", function(e) {
                
                //console.log('Dragstart');
            	
                if ($element.hasClass('nodrag')) {
            		return false;
            	}

                e.dataTransfer.setData('text', id);

                // Проверка браузера. Например, в Safari e.dataTransfer.setDragImage немедленно вызывает  dragend и соотв. таскание не работает!
                // Для других браузеров тоже может понадобиться проверка
                var isSafari = navigator.vendor.indexOf("Apple")==0 && /\sSafari\//.test(navigator.userAgent); // true or false
              
	            // Для множественного выделения подменяется картинка
                if (scope.multiple && e.dataTransfer.setDragImage && !isSafari) {
					var dx = 0;
					var dy = 0;
					var drag_image = document.getElementById('dragimage').cloneNode();
					drag_image.display = 'block';
			        e.dataTransfer.setDragImage(drag_image, dx, dy);
                }

                $rootScope.$emit("LVL-DRAG-START");
				scope.$apply(scope.onDrag);

            });
            
            el.bind("dragend", function(e) {
                //console.log('dragEnd---');
                $rootScope.$emit("LVL-DRAG-END");
            });
        }
	}
}]);

module.directive('lvlDropTarget', ['$rootScope', 'uuid', function($rootScope, uuid) {
	return {
		restrict: 'A',
		link: function(scope, element, attrs, controller) {

			var onDrop = function(data) { scope.$eval(attrs.onDrop, data) };

			var node = element[0];
			var $element = angular.element(element);

			function is_active() {
				return !$element.hasClass("nodrop")
			}

			// может быть этого не требуется
			var id = $element.attr("id");
			if (!id) {
				id = uuid.new()
				$element.attr("id", id);
			}

			function highest_parent_or_drop_zone(element) {
				if (element === node) {
					return element;
				}
				return highest_parent_or_drop_zone(element.parentNode);
			}

			$element.on("drop", function (event) {

				if (event.preventDefault) {
					event.preventDefault(); // Necessary. Allows us to drop.
				}

				if (event.stopPropagation) {
					event.stopPropagation(); // Necessary. Allows us to drop.
				}

				var id = event.dataTransfer.getData("text");

				if (is_active()) {
					onDrop({ elements: {dragged: document.getElementById(id), dropped: element} });
				}
			});

			element.on("dragover", function(event) {
				if (event.preventDefault) {
					event.preventDefault(); // Necessary. Allows us to drop.
				}
				event.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
				return false;
			});

			jQuery(element).dragster({
				enter: function(dragsterEvent, event) {
					if (is_active()) {
						$element.addClass('dragged-over');
					}
				},

				leave: function(dragsterEvent, event) {
					$element.removeClass('dragged-over');
				},

				drop: function(dragsterEvent, event) {
					$element.removeClass('dragged-over');
				}
			})

			$rootScope.$on("LVL-DRAG-START", function() {
				element.addClass("lvl-target");
			});

			$rootScope.$on("LVL-DRAG-END", function() {
				element.removeClass("lvl-target");
			});
		}
	}
}]);
(function() {
  i18n.en_US = {
    language_name: 'English',
    title: 'Traffic Aggregator',
    login: {
      title: 'Login',
      password: {
        tooltip: 'Enter password'
      }
    },
    ACL: {
      rule: {
        action: {
          balance: 'Balance',
          redirect: 'Redirect',
          mirror: 'Mirror',
          dubbing: 'Dubbing',
          drop: 'Drop',
          permit: 'Permit'
        },
        filter: {
          none: 'None',
          permit: 'Permit',
          drop: 'Drop',
          type: {
            ethernet_protocol: 'EtherType',
            source_MAC_address: 'Source MAC address',
            destination_MAC_address: 'Destination MAC address',
            source_IP_address: 'Source IP address',
            destination_IP_address: 'Destination IP address',
            multi_IP_address: 'Multi IP address',
            IP_protocol: 'IP protocol',
            IP_protocol_source: 'Destination port',
            IP_protocol_destination: 'Source port',
            VLAN: 'VLAN',
            VLAN2: 'VLAN2',
            Level4_data: 'L4 packet content (DPI)'
          }
        }
      }
    },
    page: {
      ports: {
        title: 'Ports',
        sfp: 'SFP module installed',
        sfp_info: {
          port: 'Port',
          info: 'SFP-module info',
          identifier: 'Identifier',
          spec_comp: 'Type',
          vendor_name: 'Vendor',
          part_number: 'Part number',
          temperature: 'Temperature',
          rx_power: 'RX power',
          tx_power: 'TX power'
        },
        action: {
          reset_counters: 'Reset counters',
          show_graphs: 'Graphs'
        },
        add_comment: 'edit',
        table: {
          number: 'Port No',
          rx: 'RX',
          tx: 'TX',
          rx_rate: 'RX,\nbitrate',
          tx_rate: 'TX,\nbitrate',
          rx_octets: 'RX,\noctets',
          rx_signal: 'RX,\nsignal',
          tx_octets: 'TX,\noctets',
          mode: 'Mode',
          comments: 'Comments',
          crc: 'CRC\nerrors',
          drops: 'Dropped\npackets',
          parser_level: 'Parser\nlevel',
          graph: 'Graph',
          dpi: 'DPI'
        },
        force_up_description: 'Force link up without RX',
        loopback_description: 'Internal routing TX to RX',
        loopback_confirm: 'Do you want to activate internal routing TX to RX?'
      },
      routing: {
        title: 'Rules',
        action: {
          new_rule: 'Add rule',
          delete_all: 'Delete all',
          edit_rule_inputs: 'Ctrl+E. Manual control',
          edit_rule_inputs_title: 'Manual control mode. Edit ports by enter port numbers in textarea.',
          enable_all: 'Enable all',
          disable_all: 'Disable all'
        },
        developer_mode: 'You are in developer mode. Rules you saved the last time are not the same as the current rules on the device.',
        reset: 'Reset all rules on the device?',
        clear: 'Clear all rules?',
        rule: {
          inputs: 'Input ports',
          outputs: 'Output ports',
          name: "Rule No {{id}}",
          delete_confirmation: 'Delete rule «{{rule}}»?',
          is_filtered: 'Filtered',
          balance: {
            by: 'Balance by',
            output_ports_required: 'Output ports required for balancing'
          },
          action: {
            lower_priority: 'Lower priority',
            higher_priority: 'Higher priority',
            duplicate: 'Duplicate',
            "delete": 'Delete',
            aggregation: 'Aggregation'
          },
          graph: {
            graph: 'Graph',
            sum: 'Sum',
            "in": 'Input',
            ins: 'Inputs',
            out: 'Output',
            outs: 'Outputs',
            port_number: 'Port No'
          },
          filtering: {
            filter: 'Filter',
            value: 'Value',
            mask: 'Mask',
            set_interval: 'Interval',
            add_mask: 'Mask',
            remove_filter: 'Remove',
            add_filter: 'Add filter',
            error: {
              invalid_mask: 'Invalid mask'
            }
          },
          error: {
            input_ports_required: 'Specify input ports',
            output_ports_required: 'Specify output ports',
            can_redirect_to_a_single_port_only: 'Each redirect rule can have a single output port only',
            only_the_first_subport_of_40g_port_can_be_used_in_rules: 'If a joint port is set to 40G mode then only the first port of this joint port can be used in rules',
            filters: 'There\'s an error in this rule\'s filters',
            port_filter_requires_ip_protocol: 'You must first set IP protocol filter (usually TCP or UDP) in order to be able to filter by port number',
            too_many_intervals_in_filters: 'Applying rules failed: too many intervals in rules\' filters',
            redirecting_to_several_ports_is_balancing: 'Redirecting to several ports is actually balancing',
            exit_port_editing_mode: 'Exit port editing mode',
            invalid_inputs_text: 'Invalid rule inputs text',
            invalid_outputs_text: 'Invalid rule outputs text',
            invalid_multi_ip_count: 'Maximum number is {{count}}',
            invalid_format: 'Invalid format'
          }
        },
        status: {
          loading_rules_into_device: 'Loading rules into the device',
          reading_rules_from_device: 'Reading rules',
          rules_saved: 'Rules saved',
          errors_in_rules: 'There are errors in the rules',
          applying_rules: 'Applying rules'
        }
      },
      settings: {
        title: 'Settings',
        manual: 'Manual',
        dhcp: 'DHCP',
        ip_address: 'IP address',
        subnet_mask: 'Subnet mask',
        gateway: 'Gateway',
        platform: 'Platform',
        change_password: 'Change password',
        new_password: 'New password',
        confirm_password: 'Confirm password',
        password_changed: 'Password changed',
        current_password: 'Сurrent password',
        license: {
          title: 'Licensing',
          drag_n_drop: 'Drop the license file here',
          serial: 'In order to purchase the licence you will need the device serial number',
          serial_extra: 'Each license corresponds to a specific set of features'
        },
        firmware: {
          title: 'Updating device firmware',
          drag_n_drop: 'Drop the firmware file here'
        },
        action: {
          reset: 'Reset all settings'
        },
        error: {
          form_errors: 'The values you entered have errors',
          ip_address_required: 'Enter an IP address',
          invalid_ip_address: 'Invalid IP address',
          subnet_mask_required: 'Enter a subnet mask',
          invalid_subnet_mask: 'Invalid subnet mask',
          gateway_required: 'Enter a gateway IP address',
          invalid_gateway: 'Invalid gateway IP address',
          password_required: 'Enter a password'
        },
        status: {
          uploading_firmware: 'Uploading firmware',
          updating_firmware: 'Updating firmware. Wait...',
          validating_firmware: 'Validating firmware',
          firmware_update_failed: 'Firmware update failed',
          uploading_license: 'Uploading license',
          validating_license: 'Validating license',
          license_update_failed: 'License update failed',
          rebooting: 'Settings saved. Rebooting device...'
        }
      },
      debug: {
        title: 'Debug',
        command: {
          name: 'Command',
          parameters: 'Parameters',
          output: 'Result',
          output_mode: {
            tree: 'tree',
            code: 'code'
          },
          error: {
            command_name_required: 'Enter command name',
            command_parameters_required: 'Enter command parameters',
            json: 'Syntax error in the input JSON:\n\n{{error}}'
          }
        },
        commands: {
          name: 'Commands (batch)',
          error: {
            commands_required: 'Enter commands',
            batch_format: 'Invalid Json Rpc batch format. It must be an array of Json Rpc commands.',
            batch_json: 'Syntex error in batch input JSON:\n\n{{error}}'
          }
        },
        configuration: {
          section_title: 'Device configuration',
          output_title: 'Configuration',
          refreshing: 'Refreshing...',
          download: 'download',
          download_batch: 'batch',
          portset: 'Portset',
          ports: 'Ports',
          hash_profile: 'Hashing profile',
          lbg: 'Load Balancing Groups',
          mirror_groups: 'Mirroring Groups',
          mappers: 'Mappers',
          acl: 'Access Control Lists',
          network: 'Network',
          routing: 'Rules',
          ta_rules: 'Ta rules',
          users: 'Users'
        },
        administration: {
          section_title: 'Administration',
          configuration: 'Configuration',
          language: 'Language',
          error: {
            configuration_required: 'Configuration JSON required',
            configuration_json: 'Syntax error in device configuration JSON:\n\n{{error}}'
          }
        },
        program_information: {
          version: 'Version',
          revision: 'revision'
        },
        error: {
          generic: 'Error {{status}}: {{data}}'
        },
        notification: {
          restart_gulp: 'Restart your gulp now'
        }
      },
      admin: {
        title: 'Administration'
      }
    },
    action: {
      apply: 'Apply',
      execute: 'Execute',
      save: 'Save',
      ok: 'OK',
      cancel: 'Cancel',
      yes: 'Yes',
      no: 'No'
    },
    file_upload: {
      choose_file: 'Choose a file',
      uploading: 'Uploading file…'
    },
    menu: {
      configuration: {
        title: 'Configuration',
        open: {
          title: 'Open',
          tooltip: 'Load configuration from file'
        },
        save: {
          title: 'Save',
          tooltip: 'Save configuration to file'
        }
      },
      logout: 'Logout',
      log: 'Log',
      debug: 'Debug'
    },
    network: {
      rate: {
        bps: 'bps',
        kbps: 'kbps',
        Mbps: 'Mbps',
        Gbps: 'Gbps'
      }
    },
    error: {
      javascript: 'Javascript is disabled in your web browser. Enable Javascript in order to make this application work.',
      generic: 'Error: {{message}}',
      wrong_password: 'Wrong password',
      unauthenticated: 'The requested operation requires authentication',
      old_browser: 'Update your browser. Supported browsers: {{browsers}}',
      device: {
        reset_failed: 'Device reset failed'
      }
    },
    configuration: {
      status: {
        application_restarting: 'Restarting the application',
        saved: 'Configuration saved',
        applying: 'Applying configuration',
        loaded: 'Configuration loaded',
        deleted: 'Configuration deleted'
      },
      error: {
        filter_should_not_have_a_mask: 'Filter «{{filter}}» should not have a mask',
        invalid: 'Invalid configuration',
        inconsistent: 'The configuration doesn\'t fit this device',
        configuration_upload_failed: 'Configuration upload failed',
        too_many_intervals_in_filters: 'Unable to apply rules: too many intervals in filters',
        max_mirroring_ports: 'Too many mirroring destination ports (max {{max}})',
        max_acls: 'Too many input ports in rules (max {{max}})'
      },
      confirm_reset: 'All the settings will be reset on the device. Are you sure?',
      confirm_deletion: 'Do you really want to delete configuration «{{name}}»?'
    },
    device: {
      status: {
        unknown_platform: 'Unknown platform',
        connecting: 'Waiting for device...',
        applying_rules: 'Applying rules on the device',
        rebooting: 'Rebooting device. Wait...',
        routing_configuration_applied: 'Rules have been saved'
      }
    },
    graph: {
      time: {
        minutes: 'Minutes',
        hours: 'Hours',
        days: 'Days',
        months: 'Months'
      },
      value: {
        type: {
          rate: 'Rate',
          rx_rate: 'RX rate',
          tx_rate: 'TX rate',
          crc: 'CRC errors',
          drops: 'Drops'
        }
      }
    },
    status: {
      loading_page: 'Loading page'
    },
    enter_system_password: 'Enter system password',
    operations_pending_on_page: 'Operations pending on this page. Are you sure you want to cancel everything and navigate away from this page?',
    device_is_booting: 'Device is booting'
  };

}).call(this);

var module;

try {
    module = angular.module('lvl.services');  
} catch (e) {
    module  = angular.module('lvl.services', []);
}

module.factory('uuid', function() {
    var svc = {
        new: function() {
            function _p8(s) {
                var p = (Math.random().toString(16)+"000000000").substr(2,8);
                return s ? "-" + p.substr(0,4) + "-" + p.substr(4,4) : p ;
            }
            return _p8() + _p8(true) + _p8(true) + _p8();
        },
        
        empty: function() {
          return '00000000-0000-0000-0000-000000000000';
        }
    };
    
    return svc;
});
(function() {
  i18n.ru_RU = {
    language_name: 'Русский',
    title: 'Агрегатор Трафика',
    login: {
      title: 'Вход в систему',
      password: {
        tooltip: 'Введите пароль'
      }
    },
    ACL: {
      rule: {
        action: {
          balance: 'Балансировка',
          redirect: 'Перенаправление',
          mirror: 'Копирование',
          dubbing: 'Клонирование через loopback',
          drop: 'Блокировка',
          permit: 'Пропуск'
        },
        filter: {
          none: 'Без фильтрации',
          permit: 'Отбор пакетов',
          drop: 'Блокировка пакетов',
          type: {
            ethernet_protocol: 'EtherType',
            source_MAC_address: 'MAC адрес отправителя',
            destination_MAC_address: 'MAC адрес получателя',
            source_IP_address: 'IP отправителя',
            destination_IP_address: 'IP получателя',
            multi_IP_address: 'Мульти IP-адрес',
            IP_protocol: 'IP протокол',
            IP_protocol_source: 'Исходящий порт',
            IP_protocol_destination: 'Входящий порт',
            VLAN: 'VLAN',
            VLAN2: 'VLAN2',
            Level4_data: 'Содержимое пакета (DPI)'
          }
        }
      }
    },
    page: {
      ports: {
        title: 'Порты',
        sfp: 'Установлен модуль SFP',
        sfp_info: {
          port: 'Порт',
          info: 'Информация о SFP-модуле',
          identifier: 'Идентификатор',
          spec_comp: 'Тип',
          vendor_name: 'Производитель',
          part_number: 'Part number',
          temperature: 'Температура',
          rx_power: 'Входной сигнал',
          tx_power: 'Выходной сигнал'
        },
        action: {
          reset_counters: 'Сбросить счётчики',
          show_graphs: 'Графики'
        },
        add_comment: 'Комментарий',
        table: {
          number: '№ порта',
          rx: 'RX',
          tx: 'TX',
          tx: 'TX',
          rx_rate: 'RX,\nбитрейт',
          tx_rate: 'TX,\nбитрейт',
          rx_octets: 'RX,\nоктеты',
          rx_signal: 'RX,\nсигнал',
          tx_octets: 'TX,\nоктеты',
          mode: 'Режим',
          comments: 'Комментарии',
          crc: 'Ошибки\nCRC',
          drops: 'Отброшенные\nпакеты',
          parser_level: 'Глубина\nанализа',
          graph: 'График',
          dpi: 'DPI'
        },
        force_up_description: 'Принудительно поднимать линк при отсутствии трафика на RX',
        loopback_description: 'Внутренее замыкание трафика с TX на RX',
        loopback_confirm: 'Вы уверены, что хотите включить внутренее замыкание трафика с TX на RX?'
      },
      routing: {
        title: 'Правила',
        action: {
          new_rule: 'Новое правило',
          delete_all: 'Удалить все',
          edit_rule_inputs: 'Ctrl+E — Ручное управление',
          edit_rule_inputs_title: 'В режиме ручного управления, порты добавляются вводом их номеров в текстовое поле.',
          enable_all: 'Включить все',
          disable_all: 'Выключить все'
        },
        developer_mode: 'Вы находитесь в режиме разработчика. Правила, сохранённые вами в последний раз, не совпадают с текущими правилами на устройстве.',
        reset: 'Сбросить все правила на устройстве?',
        clear: 'Удалить все правила?',
        rule: {
          loading: 'Считывание правил',
          inputs: 'Входные порты',
          outputs: 'Выходные порты',
          name: "Правило № {{id}}",
          delete_confirmation: 'Удалить правило «{{rule}}»?',
          is_filtered: 'Фильтрация',
          balance: {
            by: 'Балансировать по',
            output_ports_required: 'Добавьте выходные порты для балансировки'
          },
          action: {
            lower_priority: 'Меньше приоритет',
            higher_priority: 'Больше приоритет',
            duplicate: 'Дублировать',
            "delete": 'Удалить',
            aggregation: 'Агрегация'
          },
          graph: {
            graph: 'График',
            sum: 'Суммировать',
            "in": 'Вход',
            ins: 'Входы',
            out: 'Выход',
            outs: 'Выходы',
            port_number: 'Порт №'
          },
          filtering: {
            filter: 'Фильтр',
            value: 'Значение',
            mask: 'Маска',
            set_interval: 'Диапазон',
            add_mask: 'Задать маску',
            remove_filter: 'Удалить',
            add_filter: 'Добавить фильтр',
            error: {
              invalid_mask: 'Неверная маска'
            }
          },
          error: {
            input_ports_required: 'Добавьте входные порты',
            output_ports_required: 'Добавьте выходные порты',
            can_redirect_to_a_single_port_only: 'В правилах перенаправления может быть только по одному выходному порту',
            only_the_first_subport_of_40g_port_can_be_used_in_rules: 'Если составной порт переведён в режим 40G, то в правилах может участвовать только первый подпорт этого составного порта',
            filters: 'Неправильно заданы фильтры этого правила',
            port_filter_requires_ip_protocol: 'Для фильтрации по номеру порта требуется также задать фильтр по соответствующему IP протоколу (обычно это TCP или UDP)',
            too_many_intervals_in_filters: 'Не удалось применить правила: превышено количество интервалов в фильтрах',
            redirecting_to_several_ports_is_balancing: 'Перенаправление на несколько портов — это балансировка',
            exit_port_editing_mode: 'Выйдите из режима редактирования портов',
            invalid_inputs_text: 'Ошибка в списке входных портов',
            invalid_outputs_text: 'Ошибка в списке выходных портов',
            invalid_multi_ip_count: 'Превышено максимальное количество в {{count}}',
            invalid_format: 'Неверный формат'
          }
        },
        status: {
          loading_rules_into_device: 'Прогружаем правила в устройство',
          reading_rules_from_device: 'Считываем правила',
          rules_saved: 'Правила сохранены',
          errors_in_rules: 'Ошибка в правилах',
          applying_rules: 'Применяем правила'
        }
      },
      settings: {
        title: 'Настройки',
        manual: 'Вручную',
        dhcp: 'DHCP',
        ip_address: 'IP-адрес',
        subnet_mask: 'Маска подсети',
        gateway: 'Шлюз',
        platform: 'Платформа',
        change_password: 'Сменить пароль',
        new_password: 'Новый пароль',
        confirm_password: 'Подтвердите пароль',
        password_changed: 'Пароль изменён',
        current_password: 'Текущий пароль',
        license: {
          title: 'Лицензии',
          drag_n_drop: 'Перетащите файл лицензии сюда',
          serial: 'Для приобретения лицензии вам понадобится серийный номер устройства',
          serial_extra: 'Каждой лицензии соответствует определённый функционал устройства'
        },
        firmware: {
          title: 'Обновление прошивки устройства',
          drag_n_drop: 'Перетащите файл прошивки сюда'
        },
        action: {
          reset: 'Сброс всех настроек'
        },
        error: {
          form_errors: 'Исправьте ошибки во введённых значениях',
          ip_address_required: 'Введите IP-адрес',
          invalid_ip_address: 'Неверный IP-адрес',
          subnet_mask_required: 'Введите маску подсети',
          invalid_subnet_mask: 'Неверная маска подсети',
          gateway_required: 'Введите IP-адрес',
          invalid_gateway: 'Неверный IP-адрес шлюза',
          password_required: 'Введите пароль'
        },
        status: {
          uploading_firmware: 'Прошивка загружается в устройство',
          updating_firmware: 'Идёт обновление прошивки устройства. Ждите...',
          validating_firmware: 'Проверка загруженной прошивки',
          firmware_update_failed: 'Не удалось обновить прошивку',
          uploading_license: 'Лицензия загружается',
          validating_license: 'Лиецнзия проверяется',
          license_update_failed: 'Загрузка лицензии не удалась',
          rebooting: 'Настройки сохранены. Устройство перезагружается...'
        }
      },
      debug: {
        title: 'Отладка',
        command: {
          name: 'Команда',
          parameters: 'Данные',
          output: 'Результат',
          output_mode: {
            tree: 'древо',
            code: 'код'
          },
          error: {
            command_name_required: 'Введите команду',
            command_parameters_required: 'Введите данные команды',
            json: 'Ошибка синтаксиса во входном JSON-е:\n\n{{error}}'
          }
        },
        commands: {
          name: 'Команды (батч)',
          error: {
            commands_required: 'Введите команды',
            batch_format: 'Неправильный формат Json Rpc батча. Должен быть массив Json Rpc команд.',
            batch_json: 'Ошибка синтаксиса во входном JSON-е батча:\n\n{{error}}'
          }
        },
        configuration: {
          section_title: 'Конфигурация устройства',
          output_title: 'Конфигурация',
          refreshing: 'Обновляется...',
          download: 'скачать',
          download_batch: 'batch',
          portset: 'Портсет',
          ports: 'Порты',
          hash_profile: 'Профиль хеширования',
          lbg: 'Группы балансировки',
          mirror_groups: 'Группы зеркалирования',
          mappers: 'Mappers',
          acl: 'Access Control Lists',
          network: 'Сеть',
          routing: 'Правила',
          ta_rules: 'Правила ta',
          users: 'Пользователи'
        },
        administration: {
          section_title: 'Администрирование',
          configuration: 'Конфигурация',
          language: 'Язык',
          error: {
            configuration_required: 'Введите конфигурацию устройства',
            configuration_json: 'Ошибка синтаксиса в JSON-е конфигурации устройства:\n\n{{error}}'
          }
        },
        program_information: {
          version: 'Версия',
          revision: 'ревизия'
        },
        error: {
          generic: 'Ошибка {{status}}: {{data}}'
        },
        notification: {
          restart_gulp: 'Теперь перезапустите свой gulp'
        }
      },
      admin: {
        title: 'Управление'
      }
    },
    action: {
      apply: 'Применить',
      execute: 'Выполнить',
      save: 'Сохранить',
      ok: 'OK',
      cancel: 'Отмена',
      yes: 'Да',
      no: 'Нет'
    },
    file_upload: {
      choose_file: 'Выбрать файл',
      uploading: 'Файл загружается…'
    },
    menu: {
      configuration: {
        title: 'Конфигурация',
        open: {
          title: 'Открыть',
          tooltip: 'Загрузить конфигурацию из файла'
        },
        save: {
          title: 'Сохранить',
          tooltip: 'Сохранить конфигурацию в файл'
        }
      },
      logout: 'Выход',
      log: 'Лог',
      debug: 'Отладка'
    },
    network: {
      rate: {
        bps: 'бит/с',
        kbps: 'кбит/с',
        Mbps: 'Мбит/с',
        Gbps: 'Гбит/с'
      }
    },
    error: {
      javascript: 'В браузере отключена поддержка Javascript. Для работы приложения включите Javascript.',
      generic: 'Ошибка: {{message}}',
      wrong_password: 'Вы ввели неверный пароль',
      unauthenticated: 'Запрошенная операция требует входа в систему',
      old_browser: 'Обновите ваш браузер. Поддерживаемые: {{browsers}}',
      device: {
        reset_failed: 'Не удалось сбросить устройство'
      }
    },
    configuration: {
      status: {
        application_restarting: 'Программа перезапускается',
        saved: 'Конфигурация сохранена',
        applying: 'Применяем конфигурацию',
        loaded: 'Конфигурация загружена',
        deleted: 'Конфигурация удалена'
      },
      error: {
        filter_should_not_have_a_mask: 'У фильтра «{{filter}}» не должна быть задана маска',
        invalid: 'Неверный формат конфигурации',
        inconsistent: 'Невозможно применить данную конфигурацию на этом устройстве',
        configuration_upload_failed: 'Ошибка загрузки конфигурации',
        too_many_intervals_in_filters: 'Не удалось применить правила: превышено количество интервалов в фильтрах',
        max_mirroring_ports: 'Превышено допустимое количество портов, в которые копируется трафик ({{max}})',
        max_acls: 'Превышено допустимое количество входных портов на устройстве ({{max}})'
      },
      confirm_reset: 'Все настройки на устройстве будут сброшены. Продолжить?',
      confirm_deletion: 'Удалить конфигурацию «{{name}}»?'
    },
    device: {
      status: {
        unknown_platform: 'Неизвестная платформа',
        connecting: 'Ожидание ответа от устройства...',
        applying_rules: 'Применение правил на устройстве',
        rebooting: 'Устройство перезагружается, ждите...',
        routing_configuration_applied: 'Правила сохранены'
      }
    },
    graph: {
      time: {
        minutes: 'Минуты',
        hours: 'Часы',
        days: 'Дни',
        months: 'Месяцы'
      },
      value: {
        type: {
          rate: 'Битрейт',
          rx_rate: 'RX битрейт',
          tx_rate: 'TX битрейт',
          rate: 'Битрейт',
          crc: 'Ошибки CRC',
          drops: 'Отброшенные пакеты'
        }
      }
    },
    status: {
      loading_page: 'Загрузка страницы'
    },
    enter_system_password: 'Введите пароль для входа в систему',
    operations_pending_on_page: 'Вы собираетесь покинуть страницу, на которой не закончена работа. Вы уверены, что желаете отменить всё и уйти с этой страницы?',
    device_is_booting: 'Устройство загружается'
  };

}).call(this);

function md5 ( str ) {	// Calculate the md5 hash of a string
	// 
	// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
	// + namespaced by: Michael White (http://crestidg.com)

	var RotateLeft = function(lValue, iShiftBits) {
			return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
		};

	var AddUnsigned = function(lX,lY) {
			var lX4,lY4,lX8,lY8,lResult;
			lX8 = (lX & 0x80000000);
			lY8 = (lY & 0x80000000);
			lX4 = (lX & 0x40000000);
			lY4 = (lY & 0x40000000);
			lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
			if (lX4 & lY4) {
				return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
			}
			if (lX4 | lY4) {
				if (lResult & 0x40000000) {
					return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
				} else {
					return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
				}
			} else {
				return (lResult ^ lX8 ^ lY8);
			}
		};

	var F = function(x,y,z) { return (x & y) | ((~x) & z); };
	var G = function(x,y,z) { return (x & z) | (y & (~z)); };
	var H = function(x,y,z) { return (x ^ y ^ z); };
	var I = function(x,y,z) { return (y ^ (x | (~z))); };

	var FF = function(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

	var GG = function(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

	var HH = function(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

	var II = function(a,b,c,d,x,s,ac) {
			a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
			return AddUnsigned(RotateLeft(a, s), b);
		};

	var ConvertToWordArray = function(str) {
			var lWordCount;
			var lMessageLength = str.length;
			var lNumberOfWords_temp1=lMessageLength + 8;
			var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
			var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
			var lWordArray=Array(lNumberOfWords-1);
			var lBytePosition = 0;
			var lByteCount = 0;
			while ( lByteCount < lMessageLength ) {
				lWordCount = (lByteCount-(lByteCount % 4))/4;
				lBytePosition = (lByteCount % 4)*8;
				lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount)<<lBytePosition));
				lByteCount++;
			}
			lWordCount = (lByteCount-(lByteCount % 4))/4;
			lBytePosition = (lByteCount % 4)*8;
			lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
			lWordArray[lNumberOfWords-2] = lMessageLength<<3;
			lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
			return lWordArray;
		};

	var WordToHex = function(lValue) {
			var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
			for (lCount = 0;lCount<=3;lCount++) {
				lByte = (lValue>>>(lCount*8)) & 255;
				WordToHexValue_temp = "0" + lByte.toString(16);
				WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
			}
			return WordToHexValue;
		};

	var x=Array();
	var k,AA,BB,CC,DD,a,b,c,d;
	var S11=7, S12=12, S13=17, S14=22;
	var S21=5, S22=9 , S23=14, S24=20;
	var S31=4, S32=11, S33=16, S34=23;
	var S41=6, S42=10, S43=15, S44=21;

	str = this.utf8_encode(str);
	x = ConvertToWordArray(str);
	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

	for (k=0;k<x.length;k+=16) {
		AA=a; BB=b; CC=c; DD=d;
		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
		a=AddUnsigned(a,AA);
		b=AddUnsigned(b,BB);
		c=AddUnsigned(c,CC);
		d=AddUnsigned(d,DD);
	}

	var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

	return temp.toLowerCase();
}

function utf8_encode ( str_data ) {	// Encodes an ISO-8859-1 string to UTF-8
	// 
	// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)

	str_data = str_data.replace(/\r\n/g,"\n");
	var utftext = "";

	for (var n = 0; n < str_data.length; n++) {
		var c = str_data.charCodeAt(n);
		if (c < 128) {
			utftext += String.fromCharCode(c);
		} else if((c > 127) && (c < 2048)) {
			utftext += String.fromCharCode((c >> 6) | 192);
			utftext += String.fromCharCode((c & 63) | 128);
		} else {
			utftext += String.fromCharCode((c >> 12) | 224);
			utftext += String.fromCharCode(((c >> 6) & 63) | 128);
			utftext += String.fromCharCode((c & 63) | 128);
		}
	}

	return utftext;
}

(function() {
  var Promise_cancellation_error, is_cancellation_error, json_diff, not_a_cancellation_error,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Object.for_each = function(object, action) {
    var key, results, value;
    results = [];
    for (key in object) {
      value = object[key];
      results.push(action(key, value));
    }
    return results;
  };

  Object.not_empty = function(object) {
    return Object.keys(object).length > 0;
  };

  Object.defineProperty(Array.prototype, "clone", {
    enumerable: false,
    value: function(element) {
      return this.slice(0);
    }
  });

  Object.defineProperty(Array.prototype, "intersect", {
    enumerable: false,
    value: function(array) {
      var a, ai, b, bi, result;
      a = this.clone();
      b = array.clone();
      a.sort(function(a, b) {
        return a - b;
      });
      b.sort(function(a, b) {
        return a - b;
      });
      result = [];
      ai = 0;
      bi = 0;
      while (ai < a.length && bi < b.length) {
        if (a[ai] < b[bi]) {
          ai++;
        } else if (a[ai] > b[bi]) {
          bi++;
        } else {
          result.push(a[ai]);
          ai++;
          bi++;
        }
      }
      return result;
    }
  });

  Object.defineProperty(Array.prototype, "intersects", {
    enumerable: false,
    value: function(array) {
      return this.intersect(array).not_empty();
    }
  });

  Object.defineProperty(Array.prototype, "substract", {
    enumerable: false,
    value: function(array) {
      return this.filter(function(item) {
        return array.indexOf(item) < 0;
      });
    }
  });

  Object.defineProperty(Array.prototype, "remove", {
    enumerable: false,
    value: function(element) {
      var array, i, results, test;
      array = this;
      test = function(i) {
        if (typeof element === 'function') {
          return element.bind(array[i])(array[i]);
        } else {
          return array[i] === element;
        }
      };
      i = 0;
      results = [];
      while (i < this.length) {
        if (test(i)) {
          this.splice(i, 1);
          continue;
        }
        results.push(i++);
      }
      return results;
    }
  });

  Object.defineProperty(Array.prototype, "remove_at", {
    enumerable: false,
    value: function(index) {
      return this.splice(index, 1);
    }
  });

  Object.defineProperty(Array.prototype, "has", {
    enumerable: false,
    value: function(element) {
      return this.indexOf(element) >= 0;
    }
  });

  Object.defineProperty(Array.prototype, "has_no", {
    enumerable: false,
    value: function(element) {
      return !this.has(element);
    }
  });

  Object.defineProperty(Array.prototype, "not_empty", {
    enumerable: false,
    value: function() {
      return this.length > 0;
    }
  });

  Object.defineProperty(Array.prototype, "is_empty", {
    enumerable: false,
    value: function() {
      return this.length === 0;
    }
  });

  Object.defineProperty(Array.prototype, "last", {
    enumerable: false,
    value: function() {
      if (this.is_empty()) {
        return;
      }
      return this[this.length - 1];
    }
  });

  Object.defineProperty(Array.prototype, "combinations", {
    enumerable: false,
    value: function() {
      var first, rest_combinations, result;
      if (this.is_empty()) {
        return [];
      }
      first = this[0];
      if (this.length === 1) {
        return first;
      }
      result = [];
      rest_combinations = this.slice(1).combinations();
      return rest_combinations.reduce((function(reduced, rest_combination) {
        return reduced.concat(first.map(function(x) {
          return x + rest_combination;
        }));
      }), []);
    }
  });

  Object.defineProperty(String.prototype, "starts_with", {
    enumerable: false,
    value: function(substring) {
      return this.indexOf(substring) === 0;
    }
  });

  Object.defineProperty(String.prototype, "ends_with", {
    enumerable: false,
    value: function(substring) {
      var index;
      index = this.lastIndexOf(substring);
      return index >= 0 && index === this.length - substring.length;
    }
  });

  Object.defineProperty(String.prototype, "is_empty", {
    enumerable: false,
    value: function() {
      return this.length === 0;
    }
  });

  Object.defineProperty(String.prototype, "not_empty", {
    enumerable: false,
    value: function() {
      return !this.is_empty();
    }
  });

  Object.set = function() {
    var k, key, keys, last_key, len, object, parameters, value;
    parameters = Array.prototype.slice.call(arguments, 0);
    object = parameters.shift();
    value = parameters.pop();
    if (!object) {
      throw new Error('Object is null');
    }
    keys = parameters.reduce(function(reduced, value) {
      return reduced.concat(value.toString().split('.'));
    }, []);
    last_key = keys.pop();
    for (k = 0, len = keys.length; k < len; k++) {
      key = keys[k];
      if (!object[key]) {
        object[key] = {};
      }
      object = object[key];
    }
    object[last_key] = value;
    return object;
  };

  Object.get = function(object, path) {
    var k, key, len, parameters, path_elements;
    parameters = Array.prototype.slice.call(arguments, 0);
    parameters.shift();
    path_elements = parameters.reduce(function(reduced, path_element) {
      return reduced.concat(path_element.toString().split('.'));
    }, []);
    for (k = 0, len = path_elements.length; k < len; k++) {
      key = path_elements[k];
      if (!object) {
        return;
      }
      object = object[key];
    }
    return object;
  };

  Object.equals = function(a, b) {
    return angular.equals(a, b);
  };

  this.format = function(template, parameters) {
    return template.replace(/\{([^\}]+)\}/g, function(text, match) {
      return Object.get(parameters, match);
    });
  };

  Object.extend = function() {
    return angular.extend.apply(this, arguments);
  };

  json_diff = function(a, b) {
    var array, array_diff, diff, i, innerDiff, j, value;
    diff = {};
    if (typeof b === 'object' && typeof a === 'object') {
      for (i in b) {
        value = b[i];
        innerDiff = {};
        if (b[i] instanceof Array) {
          if (a[i] == null) {
            diff[i] = b[i];
          } else if (!angular.equals(b[i], a[i])) {
            array = [];
            j = 0;
            while (j < b[i].length) {
              if (j < a[i].length) {
                array_diff = json_diff(a[i][j], b[i][j]);
                if (typeof array_diff === 'object') {
                  if (Object.keys(array_diff).length > 0) {
                    array.push(array_diff);
                  }
                } else {
                  if (array_diff != null) {
                    array.push(array_diff);
                  }
                }
              } else {
                array.push(b[i][j]);
              }
              j++;
            }
            diff[i] = array;
          }
        } else if (typeof b[i] === 'object') {
          innerDiff = json_diff(a[i], b[i]);
          if (Object.keys(innerDiff).length > 0) {
            diff[i] = innerDiff;
          }
        } else if (!a) {
          diff[i] = b[i];
        } else if (!a.hasOwnProperty(i)) {
          diff[i] = b[i];
        } else if (a[i] !== b[i]) {
          diff[i] = b[i];
        }
      }
    } else {
      if (a === b) {
        diff = {};
      } else {
        diff = b;
      }
    }
    return diff;
  };

  Object.diff = function(a, b) {
    return [json_diff(b, a), json_diff(a, b)];
  };

  Object.defineProperty(Function.prototype, "delay", {
    writable: true,
    enumerable: false,
    value: function(time) {
      return setTimeout(this, time);
    }
  });

  Object.defineProperty(Function.prototype, "periodical", {
    enumerable: false,
    value: function(interval) {
      var action, periodical;
      action = this;
      periodical = function() {
        action();
        return periodical.delay(interval);
      };
      return periodical();
    }
  });

  if (!Function.prototype.bind) {
    Object.defineProperty(Function.prototype, "bind", {
      enumerable: false,
      value: function(scope) {
        return (function(_this) {
          return function() {
            return _this.apply(scope, arguments);
          };
        })(this);
      }
    });
  }

  this.download_file = function(content, name) {
    var fake_form, text;
    if (typeof content === 'object') {
      content = JSON.stringify(content, null, 2);
    }
    fake_form = angular.element('<form action="/download" method="post"/>');
    fake_form.append(angular.element('<textarea name="filename"/>').val(name));
    text = angular.element('<textarea name="data"/>');
    text.val(content);
    fake_form.append(text);
    document.body.appendChild(fake_form[0]);
    fake_form[0].submit();
    document.body.removeChild(fake_form[0]);
    return true;
  };

  Object.defineProperty(String.prototype, "repeat", {
    enumerable: false,
    value: function(times) {
      var result;
      result = '';
      while (times > 0) {
        result += this;
        times--;
      }
      return result;
    }
  });

  Object.defineProperty(String.prototype, "replace_at", {
    enumerable: false,
    value: function(index, character) {
      return this.substr(0, index) + character + this.substr(index + character.length);
    }
  });

  Object.defineProperty(String.prototype, "has", {
    enumerable: false,
    value: function(what) {
      return this.indexOf(what) >= 0;
    }
  });

  Object.defineProperty(String.prototype, "before", {
    enumerable: false,
    value: function(what) {
      var index;
      index = this.indexOf(what);
      if (index < 0) {
        return this;
      }
      return this.substring(0, index);
    }
  });

  Object.defineProperty(String.prototype, "after", {
    enumerable: false,
    value: function(what) {
      var index;
      index = this.indexOf(what);
      if (index < 0) {
        return '';
      }
      return this.substring(index + 1);
    }
  });

  this.find_element_by_path = function(path, relative_to) {
    var match, result;
    match = path.match(/parent\((.*)+\)(?: )?(?:(.*)+)?/);
    relative_to = jQuery(relative_to);
    result = relative_to;
    if (match[1]) {
      result = jQuery(relative_to.parents(match[1])[0]);
    }
    if (match[2]) {
      result = result.find(match[2]);
    }
    return result;
  };

  this.wait = function(delay) {
    return new Promise(function(resolve, reject) {
      return setTimeout(resolve, delay);
    }).cancellable();
  };

  this.replace_with = function(to, from) {
    var key, results, value;
    results = [];
    for (key in from) {
      value = from[key];
      results.push(to[key] = from[key]);
    }
    return results;
  };

  this.custom_error = function(name) {
    var Custom_error;
    Custom_error = (function(superClass) {
      extend(Custom_error, superClass);

      function Custom_error(error) {
        if (error != null) {
          if (error.code != null) {
            this.code = error.code;
          }
          this.message = error.message || error;
        }
        this.name = name;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, Custom_error);
        }
      }

      return Custom_error;

    })(Error);
    Custom_error.is_custom_error = true;
    return Custom_error;
  };

  this.scroll_to_element = function(element) {
    var body, top_offset;
    top_offset = jQuery(element).offset().top;
    top_offset -= parseInt(jQuery('.layout').css('margin-top'));
    top_offset += 20;
    body = jQuery("html, body");
    return body.animate({
      scrollTop: top_offset + 'px'
    });
  };

  this.dummy_promise = function(result) {
    return Promise.resolve(result).cancellable();
  };

  Promise_cancellation_error = custom_error('User navigated away from the page');

  this.Promise_cancellation_error = Promise_cancellation_error;

  is_cancellation_error = function(error) {
    return error instanceof Promise_cancellation_error;
  };

  not_a_cancellation_error = function(error) {
    return !is_cancellation_error(error);
  };

  Promise.prototype.$apply = function($scope) {
    return this.then(function() {
      return $scope.safeApply();
    })["catch"](not_a_cancellation_error, function(error) {
      $scope.safeApply();
      throw error;
    });
  };

}).call(this);

'use strict';

app

// Постраничная навигация
.directive("sgPagenav", function() {
  return {
    restrict: "EA",
    scope: {
      totalpages: "=",
      currentpage: "=",
      onpage: "=",
      callback: "&"
    },
    //ng-show='totalPages &gt; 1'
    template: "<nav class='pagenavigation'><ul> \
            <li ng-show='totalpages &gt; 1' ng-class=\"{'disabled': currentpage<2}\"><a ng-click='setPage(currentpage-1)'>← Назад</a></li> \
            <li ng-show='totalpages &gt; 1' ng-repeat=\"i in paginationArray\"  class=\"{{i.class}}\"> \
              <a ng-click=\"setPage(i.href)\">{{i.text}}</a> \
            </li> \
            <li ng-show='totalpages &gt; 1' ng-class=\"{'disabled': currentpage==totalpages}\"><a ng-click='setPage(currentpage+1)'>Вперёд →</a></li> \
            <li style='padding:0 0 0 30px' ng-show=\"totalpages &gt; 1\">Показывать по: <select ng-change='currentpage=1' ng-model='onpage'><option value=10>10</option><option value=20>20</option><option value=50>50</option><option value=100>100</option></select></li> \
          </ul></nav>",
    replace: false,
    link: function(scope, element, attrs) {
      function _fillpagginationArray(from,to) {
        for (var i = from; i <= to; i++) {
          scope.paginationArray.push({"href":i,"text":i,"class": (i==scope.currentpage) ? "active" : "" });
        }
      }

      function drawPagination () {
        // Количество страниц <=7 :: 1 2 3 4 5 6 7 -->
        //alert(scope.currentPage);

        if (scope.totalpages <= 7)_fillpagginationArray(1,scope.totalpages);
        // Количество страниц >7
        else {
          // Текущая страница <=4 :: 1 2 3 4 5 ... 8
          if (scope.currentpage <= 4) _fillpagginationArray(1,5); else {
            // Текущая страница >4 и находится в центре :: 1 ... 4 5 6 ... 11
            scope.paginationArray.push({"href":1,"text":1});
            scope.paginationArray.push({"href":(Math.floor(scope.currentpage/2)),"text":"..."});

            if (scope.currentpage <= scope.totalpages-3) {_fillpagginationArray(scope.currentpage-1,scope.currentpage+1);}
            // Текущая страница >4 и приклеена к концу :: 1 ... 5 6 7 8 9 -->
            else _fillpagginationArray(scope.totalpages-3,scope.totalpages);
          }

          if (scope.currentpage <= scope.totalpages-3 || scope.currentpage <= 4) {
            scope.paginationArray.push({"href":(scope.currentpage+Math.ceil((scope.totalpages-scope.currentpage)/2)),"text":"..."});
            scope.paginationArray.push({"href":scope.totalpages,"text":scope.totalpages});
          }
        }
      }
      scope.$watch("totalpages + currentpage + onpage", function(newVal, oldVal) {
        scope.paginationArray = [];
        drawPagination();
      });
      scope.$watch("currentpage + onpage", function(newVal, oldVal) {
        if (newVal!=oldVal) scope.callback();
      });
      scope.setPage = function (v) { if (v>0 && v<scope.totalpages+1) scope.currentpage=v; }
    }
  }
})
// Автокомплит
.directive("sgAutocomplete", ["$document", function($document){
  return {
    restrict: "A",
    scope: {
      sgAutocomplete: "=",
      ngModel: "="
    },
    template: function(element, attrs) {
      return '<div class="autocomplete">\
      <input class="' + attrs.class + '" type="text" ng-model="ngModel" /> \
      <ul ng-show="show && sgAutocomplete.length > 0">\
        <li  ng-repeat="i in sgAutocomplete" ng-class="{\'active\':$index == active}" ng-click="set(i)">{{i}}</li>\
      </ul>\
    </div>'},
    replace: true,
    link: function(scope, element, attrs){
      scope.active = 0;
      scope.show = false;
      element.bind('keydown', function (evt) {
        var key = evt.which;
        switch (key){
          case 40: //стрелка вниз
            scope.active = (scope.active == scope.sgAutocomplete.length-1) ? 0 : scope.active+1;
            scope.$digest();
            break;
          case 38://стрелка вверх
            scope.active = (scope.active == 0) ? scope.sgAutocomplete.length-1 : scope.active-1;
            scope.$digest();
            break;
          case 13://enter
            var ret = !scope.show; //При открытой форме, не обрабатывать enter далее (для отправки формы)
            scope.set(scope.sgAutocomplete[scope.active])
            scope.$digest();
            return ret;
          };
      });
      scope.set = function(item){
        scope.ngModel = item
        scope.active = 0;
        scope.show = false;
      }
      var dismissClickHandler = function (evt) {
        if (element[0] !== evt.target) {
          scope.show = false;
          scope.$digest();
        }
      };
      $document.bind('click', dismissClickHandler);
      scope.$watch("sgAutocomplete ", function(n,o){
        scope.active = 0;
        if (scope.ngModel.length > 2 && scope.sgAutocomplete.indexOf(scope.ngModel) == -1)
            scope.show = true;
      });
    }
  };
}])
//
.directive("sgAutoresize", function() {
  return {
    restrict: "A",
    require: "ngModel",
    scope: {
      ngModel: "="
    },
    link: function(scope, element, attrs) {
      var autoresize = true, oldheight = false;

      function too_big(s) {
        var newlinews = s.match(/\n/);
        newlinews = (newlinews) ? newlinews.length : 0;
        return (s.length > element.width()/9 || newlinews);
      }

      element.bind({"mouseup": function(e) {
        if (element.height() !== oldheight && oldheight) autoresize = false;
        oldheight = element.height();
      }});

      scope.$watch("ngModel", function(n,o) {
        //console.log(element, scope.ngModel, autoresize);
        if (autoresize) {
          if (n!==o && too_big(n)) element.css('height','98px'); else element.css('height','48px');
        }
      });
    }
  };
})

// Навигация по времени для графиков в мониторинге
.directive("sgTimenav", ["$filter", function($filter) {
  return {
    restrict: "E",
    scope: {
      startDate: "=",
      endDate: "=",
      firstDate: "=",
      lastDate: "=",
      period: "=",
      callback: "&"
    },
    template: '<span> \
        <nav class="radio"> \
          <button ng-repeat="t in periodTypes" ng-class="{true:\'active\'}[period==\'{{t.key}}\']" ng-click="setPeriod(t.key)">{{t.title}}</button> \
        </nav> \
        <nav class="buttons"> \
          <button ng-hide="hideFirst" ng-click="setTimeRange(-1)">← {{formatDate(-1)}}</button> \
          <button class="success" ng-bind="formatDate(0, \'d MMM yyyy\')" /> \
          <button ng-hide="hideLast" ng-click="setTimeRange(1)">{{formatDate(1)}} →</button> \
        </nav> \
      </span>',
    replace: true,
    link: function(scope, element, attrs) {
      scope.periodTypes = [
        {"key": "hourly",   "title": "По часам",    "diff": 1},
        {"key": "daily",    "title": "По дням",     "diff": 1},
        {"key": "weekly",   "title": "По неделям",  "diff": 7},
        {"key": "monthly",  "title": "По месяцам",  "diff": 30}
      ]
      scope.formatDate = function (offset, format) {
        var v = new Date(scope.endDate);
        format = format || "d MMM";

        v.setDate(v.getDate() + offset * $filter('findkey')(scope.periodTypes,'key',scope.period,'diff'));

        // определение границы наличия данных для показа/скрытия кнопок {prev}/{next} в sgTimenav
        v.setHours(0,0,0,0);
        scope.hideLast  = (v > (new Date(scope.lastDate) ).setHours(0,0,0,0) ) ? true: false;
        scope.hideFirst = (v < (new Date(scope.firstDate)).setHours(0,0,0,0) ) ? true: false;

        return $filter("date")(v, format);

      }
      scope.setTimeRange = function (offset) {
        var v = new Date(scope.endDate),
            diff = $filter('findkey')(scope.periodTypes,'key',scope.period,'diff'),
            mask = 'yyyy/MM/dd';

        v.setDate(v.getDate() + offset * diff);
        scope.endDate = $filter("date")(v, mask + (scope.period === 'hourly' ? ' 23:59' : '') );

        if (scope.period !== 'hourly') v.setDate(v.getDate() - 6 * diff);
        scope.startDate = $filter("date")(v, mask + (scope.period === 'hourly' ? ' 00:00' : '') );

        console.log('Graph datetime range has changed by', offset, ', new range:', scope.startDate, '-', scope.endDate);
      }
      scope.setPeriod = function (period) {
        console.log('Graph period has changed from', scope.period, 'to', period);
        scope.period = period;
        scope.setTimeRange(0);
      }
      // Cannot using watchCollection because of bug with oldCollection property
      // https://github.com/angular/angular.js/issues/2621
      scope.$watch("startDate+endDate", function(newVal, oldVal) {
        console.log('Dates in showed period has changed from', oldVal, 'to', newVal);
        if (newVal!=oldVal) scope.callback();
      });
    }
  }
}])

.directive("sgModal", function () {
  return function (scope, element, attrs) {
    element
      // создаем триггеры на показ и скрытие модального окна
      .on('modal_show', function(e){ element.removeClass('hidden'); $(document.body).addClass('modal-open') })
      .on('modal_hide', function(e){ element.addClass('hidden'); $(document.body).removeClass('modal-open') })

      .on("click", function(e) { if (element.is(e.srcElement)) element.triggerHandler('modal_hide') })  // триггер на клик по затененному фону
      .find('.close').on("click", function() { element.triggerHandler('modal_hide') });  // триггер на клик по закрывающей ссылке

    $$(document.body).on("keyup", function(e) { if (e.which == 27) element.triggerHandler('modal_hide') }); // триггер на нажатие ESC
  }
})
//
.directive("sgModalOpen", function() {
  return {
    restrict: "A",
    link: function (scope, element, attrs) {
      $$(element).on('click', function(e){ $$('#'+attrs.sgModalOpen+',[sg-modal='+attrs.sgModalOpen+']').triggerHandler('modal_show') })
    }
  }
})

//
.directive("sgInput", function() {
  return {
    require: "ngModel",
    restrict: "EA",
    scope: {ngModel: '=', sgShow: '=', sgRequired: '='},
    replace: true,
    template: function(element, attrs) {
      var isCheckbox = attrs.type=="checkbox";
      var classCheckbox = (isCheckbox) ? "checkbox" : "";
      var attrStr = "";
      for (var i in attrs.$attr) if (i!=="ngModel" && i!=="errmsg" && i!=="ngRequired" && i!=="ngShow" && i!=="sgShow" && i!=="sgRequired") attrStr += " " + i + "=\"" + attrs[i] + "\"";
      var header = (typeof(attrs.sgShow)!=="undefined") ? "<div class=\"field " + classCheckbox + "\" ng-show=\"sgShow\">" : "<div class=\"field " + classCheckbox + "\">";
      var input = "<input ng-model=\"ngModel\" ng-required=\"sgRequired\" " + attrStr + " />";
      var label = (attrs.label) ? "<label>" + attrs.label + "</label>" : "";
      var footer_first = (isCheckbox) ? (input + label) : (label + input);
      var footer = footer_first + " \
              <div ng-hide=\"error\" class=\"errMsg\"> \
                <h1>" + attrs.errmsg + "</h1> \
              </div> \
            </div>";
      return header + footer;
    },
    link: function(scope, element, attrs, controller) {
      // Убрать атрибуты и компиляция этого говна
      var arr = [];
      for (var i=0, attrs=element[0].attributes, l=attrs.length; i<l; i++){if (attrs.item(i).nodeName!=="class") arr.push(attrs.item(i).nodeName)}
      for (var i in arr) element.removeAttr(arr[i]);

      scope.error = true;
      var el = element.find("input");
      var e = el[0].attributes.name.nodeValue;

      //var e = attrs.name;
      scope.$watch('ngModel', function (value) {
        var res = true;
        var ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        if ((e=="controlPort")||(e=="dataPort")) {value=+value; if (!((typeof(value)=="number")&&(value%1==0)&&(value>0))) res=false}
        else if (e=="port") {value=+value; if (!((typeof(value)=="number") && value%1==0 && value>0 && value<65536)) res=false}
        else if (e=="ipAddress") {if (!(value.match(ipRegex))) res=false}
        else if (e=="name") res = true;//{for (var i in scope.items) if (scope.items[i]["userName"]==value) res = false}
        else if (e=="groupName") res = true;// if (scope.model.groupId==-1) {
          //for (var i in scope.groups) if (scope.groups[i]["groupName"]==value) var exists=true;
          //if (($.trim(value)=="")||(exists)) res = false;
        //}
        controller.$setValidity("sgInput", res);
        scope.error = res;
        return value;
      });
    }
  }
})

//
.directive("sgCheckbox", function() {
  return {
    require: "ngModel",
    restrict: "EA",
    scope: {ngModel: '='},
    replace: true,
    template: function(element, attrs) {
      var attrStr = "";
      for (var i in attrs.$attr) if (i!=="ngModel" && i!=="ngShow" && i!=="sgShow") attrStr += " " + i + "=\"" + attrs[i] + "\"";
      var input = "<input ng-model=\"ngModel\" ng-checked=\"ngModel || checked\" type=\"checkbox\" " + attrStr + " />";
      var label = (attrs.label) ? "<label ng-click=\"checked=!checked\">" + attrs.label + "</label>" : "";
      var tpl = "<field class=\"inline\" >" + input + " " + label + "</field>";
      return tpl;
    },
    link: function(scope, element, attrs, controller) {
      // Убрать атрибуты и компиляция этого говна
      var arr = [];
      for (var i=0, attrs=element[0].attributes, l=attrs.length; i<l; i++){if (attrs.item(i).nodeName!=="class") arr.push(attrs.item(i).nodeName)}
      for (var i in arr) element.removeAttr(arr[i]);
    }
  }
})

//
.directive("sgSelect", function() {
  return {
    require: "ngModel",
    restrict: "E",
    scope: {ngModel: '=', sgOptions: '='},
    replace: true,
    template: function(element, attrs) {
      var attrStr = "";
      for (var i in attrs.$attr) if (i!=="ngModel" && i!=="sgOptions" && i!=="ngShow" && i!=="sgShow") attrStr += " " + i + "=\"" + attrs[i] + "\"";
      var label = (attrs.label) ? "<label>" + attrs.label + "</label>" : "";
      var input = "<select ng-model=\"ngModel\" ng-options=\"i.id as i.name for i in sgOptions\" " + attrStr + " />";
      var tpl = "<div class=\"field\">" + label + input + "</div>";
      return tpl;
    },
    link: function(scope, element, attrs, controller) {
      // Убрать атрибуты из div
      var arr = [];
      for (var i=0, attrs=element[0].attributes, l=attrs.length; i<l; i++){if (attrs.item(i).nodeName!=="class") arr.push(attrs.item(i).nodeName)}
      for (var i in arr) element.removeAttr(arr[i]);
    }
  }
})

//
.directive("sgFileReader", ["$rootScope", function($rootScope) {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, controller) {

      element.bind('drop', function(e) {
        e.stopPropagation();
        e.preventDefault();

        element.removeClass('dragged-over');

        for (var i = 0, f; f = e.dataTransfer.files[i]; i++) {
          if (!f.type.match("text.*")) continue;
          var fr = new FileReader();
          fr.onload = function(e) {
            element.val(e.target.result);
            $rootScope.safeApply(controller.$setViewValue(e.target.result))
          };
          fr.readAsText(f);
        }
      });

      element.bind("dragover", function(e) {
        element.addClass('dragged-over');
        e.stopPropagation();
        e.preventDefault();
        e.dataTransfer.dropEffect = "copy"
      });

      element.bind('dragleave', function(e) {
        element.removeClass('dragged-over');
      });
    }
  }
}])

//
.directive("sgNoDrop", function() {
  return {
    restrict: "AC",
    link: function(scope, element, attrs) {
      var highlighted = false;
      element.bind({
        "dragstart dragenter dragover": function(e){
          if ($.inArray("Files", e.originalEvent.dataTransfer.types) > -1) {
            e.stopPropagation();
            e.preventDefault();

            if (!highlighted) {$(".dropzone").height("100px").css({"border": "3px dashed #7Fa8Ba"}); highlighted = true; }
            e.originalEvent.dataTransfer.effectAllowed = "none";
            e.originalEvent.dataTransfer.dropEffect = "none";

            if($(e.target).hasClass("dropzone")) {
              e.originalEvent.dataTransfer.effectAllowed = "copyMove";
              e.originalEvent.dataTransfer.dropEffect = "move";
            }
          }
        },
        "drop dragend dragleave": function(e){ $(".dropzone").css({"border": "solid 1px #ccc"}); highlighted = false; }
      });
    }
  }
})

// Выводит заголовок таблицы с возможностью сортировки
// Для корректного отображения кнопки настроек (атрибут settings) таблице-контейнеру необходимо указать класс settings
.directive("sgSortable", function() {
  return {
    restrict: "EA",
    scope: {
      columns: "=",
      sort: "=",
      callback: "&"
    },
    template: '<div class="dropdown-wrapper" ng-show="settings">\
      <div class="dropdown">\
        <i class="dropdown-toggle-alt icon-cog"></i>\
        <ul class="dropdown-menu pull-right">\
          <i class="icon-remove-sign close dropdown-toggle-alt"></i>\
          <li ng-repeat="c in columns" ng-show="c.title">\
            <label><input type="checkbox" ng-click="change(c)" ng-checked="!c.hide" />{{c.title}}</label>\
          </li>\
        </ul>\
      </div></div>\
      <tr>\
        <th ng-repeat="c in columns | negative:\'hide\'" class="{{c.class}}" ng-class="{true:\'last\'}[$last]">\
          <span ng-click="toggle_sort(c)">{{c.title}}</span>\
          <i ng-class="{\'icon-sort-by-attributes\':sort.order, \'icon-sort-by-attributes-alt\':!sort.order}" ng-show="c.name==sort.column && c.title && !c.disable_sort"></i>\
        </th>\
      </tr>',
    replace: false,
    link: function(scope, element, attrs) {
      scope.settings = (isset(attrs.settings)) ? true : false;
      scope.change = function(item){
        item.hide = !item.hide;
      }
      scope.toggle_sort = function (item) {
        var column = item.name;
        if (item.disable_sort) return;
        if (!isset(scope.sort)) scope.sort = {column: '', order: false};
        if (scope.sort.column == column) scope.sort.order = !scope.sort.order;
        else scope.sort.order = true;
        scope.sort.column = column;
        if (typeof scope.callback == 'function') scope.callback();
      }
    }
  }
})

.directive('dropdownConfirm', function(){
  return {
    restrict: 'E',
    replace: true,
    scope: {
      message: '=message',
      data: '=data',
      show: '=show',
      cancel: '=cancel',
      ok: '=ok'
    },
    templateUrl: 'pages/include/confirm.html',
    link: function(scope) {
      scope.hide = function() {
        scope.show = false;
      };
    }
  };
})

.directive('dropdownClose', ["$document", "$location", "$timeout", function($document, $location, $timeout) {
  return {
    restrict: 'CA',
    link: function(scope, element, attrs) {
      var dropdown = jQuery(jQuery(element[0]).parents('.dropdown')[0]);

      element.on('click', function() {
        dropdown.find('.dropdown-toggle-alt').click();
      })
    }
  }
}])

// Alternate version of Angular-UI Bootstrap Dropdown-Toggle directive
// Doesn't close dropdown when clicking on its content
.directive('dropdownToggleAlt', ["$document", "$location", "$rootScope", function($document, $location, $rootScope) {
  var openElement = null,
      closeMenu   = angular.noop;
  return {
    restrict: 'CA',
    scope: {
      is_open : '=dropdownIsOpen',
      close   : '=dropdownCloseWhen'
    },
    link: function(scope, element, attrs) {

      scope.$watch('$location.path', function() { closeMenu(); });

      if (attrs.dropdownCloseWhen) {
        scope.$watch('close', function(new_value) {
          if (new_value) {
            closeMenu();
          }
        });
      }

      var dropdown = element.parent();

      if (attrs.dropdownToggleAlt) {
        // не работает потом .on через angular.element
        dropdown = find_element_by_path(attrs.dropdownToggleAlt, dropdown[0])
      }

      if (!dropdown.hasClass('dropdown')) {
        dropdown = dropdown.find('.dropdown');
      }

      var closeable = function() {
        closeMenu();
      }

      dropdown.on("click", function(event) {
        if (event) {
          if (event.target.hasAttribute('dropdown-close')) {
            return;
          }
          event.stopPropagation()
        }
      });

      element.on('click', function (event) {
        var elementWasOpen = (element === openElement);

        event.preventDefault();
        event.stopPropagation();

        if (!!openElement) {
          closeMenu();
        }

        if (!elementWasOpen) {
          $rootScope.safeApply(function() {
            if (attrs.dropdownIsOpen) {
              scope.is_open = true;
            }
          });

          dropdown.addClass('open');

          openElement = element;

          if (!window.closeable_by_escape) {
            window.closeable_by_escape = [];
          }

          window.closeable_by_escape.push(closeable);

          closeMenu = function (event) {
            if (event) {
              event.preventDefault();
              event.stopPropagation();
            }

            jQuery(document).unbind('click', closeMenu);

            $rootScope.safeApply(function() {
              if (attrs.dropdownIsOpen) {
                scope.is_open = false;
              }
            });

            dropdown.removeClass('open');

            closeMenu = angular.noop;
            openElement = null;

            window.closeable_by_escape.remove(closeable);
          };

          // $document не работает с trigger
          jQuery(document).on('click', closeMenu);
        }
      });
    }
  };
}])

// форма с отложенной валидацией required-ов
.directive('sgForm', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      scope.$on('form_submission', function() {
        element = jQuery(element[0]);
        element.addClass('tried_to_submit');
        element.find('[smart-required]').removeAttr('smart-required');
      });
    }
  };
})

// отправка формы
.directive('sgFormSubmit', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      element.on('click', function() {
        scope.$emit('form_submission');
        if (attributes.sgFormSubmit) {
          scope.$apply(attributes.sgFormSubmit)
        }
      })
    }
  };
})

.directive('scrollTo', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      scope.$watch(attributes.scrollTo, function(value) {
        if (value) {
          scroll_to_element(value)
        }
      });
    }
  }
})

.directive('scrollToThisElement', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      scope.$watch(attributes.scrollTo, function(value) {
        if (value) {
          scroll_to_element(element[0])
        }
      });
    }
  }
})

.directive('scrollTop', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      first_time = true
      scope.$watch(attributes.scrollTop, function(value) {
        if (first_time) {
          first_time = false;
          return;
        }
        jQuery("html, body").animate({ scrollTop: value + 'px' }, 400);
      });
    }
  }
})

.directive('scrollBy', function() {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      first_time = true
      scope.$watch(attributes.scrollBy, function(value) {
        if (first_time) {
          first_time = false;
          return;
        }
        if (value === false) {
          return;
        }
        jQuery("html, body").animate({ scrollTop: $(window).scrollTop() + value + 'px' });
      });
    }
  }
})

.directive('sgOnShow', ["$rootScope", function($rootScope) {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      var previous_value = false;
      var $element = jQuery(element[0]);
      var on_show = function(data) {
        scope.$eval(attributes.sgOnShow, data)
      };

      // при каждом цикле digest
      scope.$watch(function() {
        function check_if_is_visible() {
          var is_visible = $element.is(':visible');
          if (is_visible != previous_value) {
            if (is_visible) {
              $rootScope.safeApply(function() {
                on_show({ extra: { height: function() { return $element.outerHeight(true) } } })
              })
            }
          }
          previous_value = is_visible;
        }

        check_if_is_visible.delay(0);
        return;
      })
    }
  }
}])

// Выводит тело таблицы в самом простейшем случае, если нужно безо взякой обработки отобразить колонки columns
.directive("sgSimpletable", function() {
  return {
    restrict: "EA",
    scope: {
      columns: "=",
      items: "=",
      sort: "="
    },
    template: '<tr ng-repeat="i in items | orderBy:sort.column:!sort.order"><td ng-repeat="c in columns">{{i[c.name]}}</td></tr>',
    replace: false
  }
})

//
.directive("sgErrMsg", function() {
  return {
    //restrict: "A",
    link: function(scope, element, attrs, ctrl) {
      console.log(element.$error);
      attrs.$observe('fieldValidate', function(value) {console.log('ngModel has changed value to ' + value);});
      if (typeof($error)!=="undefined") console.log($error);
      $(element).after("<div class=\"errMsg\"> \
          <h1>" + attrs.sgErrMsg + "</h1> \
        </div>"
      );
    }
  }
})

// При нажатии Enter в поле
.directive('sgEnter', function() {
  return function (scope, element, attrs) {
    element.bind("keydown keypress", function (event) {
      if(event.which === 13) {
        scope.$apply(function (){
          scope.$eval(attrs.sgEnter);
        });

        event.preventDefault();
      }
    });
  };
})

// При выходе курсора из поля
.directive('sgBlur', function() {
  return function (scope, element, attrs) {
    element.bind("blur", function (event) {
      scope.$apply(function (){
        scope.$eval(attrs.sgEnter);
      });

      event.preventDefault();
    });
  };
})

.directive('sgFocus', ["$timeout", function($timeout) {
  return function(scope, element, attrs) {
    function focus() {
      $timeout(function() { element[0].focus(); }, 0);
    }

    if (!attrs.sgFocus) {
      return focus();
    }

    scope.$watch(attrs.sgFocus, function(newValue) {
      if (newValue) {
        focus();
      }
    },
    true);
  };
}])

// "умная" валидация полей формы.
// вешается на "поле" формы: input, select, ...
.directive('sgFormField', function() {
  return function(scope, element, attributes) {
    // "поле" формы
    element = jQuery(element[0]);

    var form_element;
    var form_name;

    // форма (<form>)
    var pure_form_element = element.parents('form');

    // <ng-form>
    var ng_form_element = element.parents('ng-form');
    if (!ng_form_element[0]) {
      ng_form_element = element.parents('[ng-form]');
    }

    // какой-то грязноватый код для определения элемента (и названия) формы, давно писал

    // определение элемента формы
    if (pure_form_element[0] && ng_form_element[0]) {
      if (jQuery.contains(pure_form_element[0], ng_form_element[0])) {
        form_element = ng_form_element;
      }
      else {
        form_element = pure_form_element;
      }
    }
    else if (pure_form_element[0]) {
      form_element = pure_form_element;
    }
    else {
      form_element = ng_form_element;
    }

    // определение названия формы
    form_name = form_element.attr('name') || form_element.attr('ng-form');

    // форма Angular.js
    var form = scope[form_name];

    // название поля
    var field_name = element.attr('name');

    // получает объект поля формы
    function field() {
      if (form[field_name]) {
        return form[field_name]
      }
      // видимо, при каких-то условиях может пропасть поле из объекта формы (была такая ошибка)
      console.log('*** Error: field "' + field_name + '" not found in Angular.js form', form)
      return {}
    }

    // к этому элементу формы ещё не прикасались
    element.addClass('untouched');

    // при уходе с этого поля фомы
    element.on("blur", function (event) {
      // проставить класс "прикасались" (если поле не required)
      if (!attributes.required) {
        element.addClass('untouched');
      }

      scope.$apply(function() {
        // были на этом поле
        field().visited = true;
        // процесс ввода в это поле завершён
        field().in_progress = false;
      });
    });

    // показывает пользователю, что в поле введено неверное значение
    form.indicate_invalid = function(field_name) {
      var element = form_element.find('[name="' + field_name + '"]');
      element.removeClass('indicate_invalid');
      // если поставить задержку 0, то firefox может иногда не показывать анимацию
      setTimeout(function() {
        element.addClass('indicate_invalid');
      }, 10);
    }

    // при вводе значения в поле
    element.on("keydown", function(event) {
      // снять метку неверности значения поля
      element.removeClass('indicate_invalid');

      scope.$apply(function() {
        // в процессе ввода значения в это поле (нежёсткая валидация)
        field().in_progress = true;
      });
    });

    // при вставании в это поле
    element.on("focus", function(event) {
      // проставить класс "прикасались"
      element.removeClass('untouched');
      // снять метку неверности значения поля
      element.removeClass('indicate_invalid');

      scope.$apply(function() {
        // в процессе ввода значения в это поле (нежёсткая валидация)
        field().in_progress = true;
      });
    });

    // при изменении модели формы, убирать ошибки
    scope.$watch(attributes.ngModel, function(new_value) {
      form.errors = {};
    })

    // если форма была отправлена, то убрать у её полей метку "не прикасались"
    scope.$watch(form_name + '.submitted', function(new_value) {
      if (new_value) {
        element.removeClass('untouched');
      }
    })
  };
})

//Infinite scrolling
.directive('whenScrolled', function() {
    return function(scope, elm, attr) {
        var raw = elm[0];

        elm.bind('scroll', function() {
            if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight) {
                scope.$apply(attr.whenScrolled);
            }
        });
    };
})

// решает задачу с автозаполнением полей форм обозревателем (типа логин/пароль)
// http://victorblog.com/2014/01/12/fixing-autocomplete-autofill-on-angularjs-form-submit/
.directive('formAutofillFix', function() {
  return function(scope, elem, attrs) {
    // Fixes Chrome bug: https://groups.google.com/forum/#!topic/angular/6NlucSskQjY
    elem.prop('method', 'POST');

    // Fix autofill issues where Angular doesn't know about autofilled inputs
    if(attrs.ngSubmit) {
      setTimeout(function() {
        elem.unbind('submit').bind('submit', function(e) {
          e.preventDefault();
          elem.find('input, textarea, select').trigger('input').trigger('change').trigger('keydown');
          scope.$apply(attrs.ngSubmit);
        });
      }, 0);
    }
  };
})

// Поле "статуса" приложения, куда можно выводить сообщения
.directive('sgStatus', function() {
  return {
    link: function(scope, element, attrs, Status) {
      var container = $$(element);
      var label = $$(container.find('label'));
      var close = $$(container.find('.close'));

      var shown = true;

      var message_time_base = 10;
      var message_time_factor = 0.1;

      var fade_out_time = 0.3;
      var fade_in_time  = 0.2;

      var fade_out_timeout;

      function dismiss_status(callback) {

        if (!shown) {
          return callback();
        }

        if (fade_out_timeout) {
          clearTimeout(fade_out_timeout);
          fade_out_timeout = null;
        }

        // jQuery.stop( [clearQueue ] [, jumpToEnd ] )
        //
        // clearQueue
        // A Boolean indicating whether to remove queued animation as well. Defaults to false.
        //
        // jumpToEnd
        // A Boolean indicating whether to complete the current animation immediately. Defaults to false.
        container.stop(true, false).animate({ opacity: 0 }, container.css('opacity') * fade_out_time * 1000, callback);
      }

      scope.$watch(attrs.sgStatus, function(status, oldValue) {

        if (!status) {
          return;
        }

        function present_new_value(status) {

          shown = true;

          // set status text
          label.text(status.message);

          if (!status.message) {
            container.addClass('blank');
          }
          else {
            container.removeClass('blank');
          }

          // remove all status classes
          attrs.sgStatusCodes.split(/[\s]*,[\s]*/).forEach(function(status_code) {
            container.removeClass(status_code);
          });
          // set this status class
          element.addClass(status.code);

          // fade in
          // container.fadeIn(
          container.animate({ opacity: 1 }, (1 - container.css('opacity')) * fade_in_time * 1000, function() {

            // if 'sticky' - don't fade out
            if (status.sticky) {
              return;
            }

            var status_duration = (message_time_base + status.message.length * message_time_factor) * 1000;

            // fade out after timeout
            fade_out_timeout = setTimeout(function() {
              fade_out_timeout = null;
              container.animate({ opacity: 0 }, container.css('opacity') * fade_out_time * 1000, function() {
                label.text('');
                shown = false;
              })
            }, status_duration);
          });
        }

        dismiss_status(function() {
          present_new_value(status);
        });
      },
      true);

      close.on('click', function() {
        dismiss_status();
      })
    }
  };
})

// Валидация полей ------------------------

// IP-address validation
.directive('sgValidIpAddresses', ["Device_routing", function(Device_routing) {

  var validate = function(value, max_count) {
    var regexpIp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[12][0-9]|3[0-2])?)?$/;
    var count = 0;
    var valid = value.split(Device_routing.Filter.ip_split_rule)
      .every(function(ip) {
        ip = ip.trim();

        if(ip.length == 0) {
          return true;
        }

        count++;
        return regexpIp.test(ip);
      });

    return {
      format: valid,
      count: !max_count || max_count >= count
    };
  };

  return {
    require: 'ngModel',
    restrict: 'A',
    scope: {
      maxCount: '=?'
    },
    link: function(scope, element, attributes, model_controller) {
      var validator = function(value) {
        if (!value) {
          return value;
        }

        var result = validate(value, scope.maxCount);

        model_controller.$setValidity('format', result.format);
        model_controller.$setValidity('count', result.count);

        return value;
      };

      model_controller.$parsers.unshift(validator);
      model_controller.$formatters.unshift(validator);
    }
  };
}])

.directive('validIpAddress', function() {
  return {
    require: 'ngModel',
    restrict: 'A',
    link: function(scope, element, attributes, model_controller) {
      var regexpIp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;

      var validator = function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('format', regexpIp.test(value));
        return value;
      };

      model_controller.$parsers.unshift(validator);
      model_controller.$formatters.unshift(validator);
    }
  };
})

// IP-address mask validation
.directive('validIpMask', function() {
  return {
    require: "ngModel",
    link: function(scope, element, attributes, model_controller) {
      // http://stackoverflow.com/questions/5360768/regular-expression-for-subnet-masking
      // subnet mask
      // var regexp = /^(((255\.){3}(255|254|252|248|240|224|192|128|0+))|((255\.){2}(255|254|252|248|240|224|192|128|0+)\.0)|((255\.)(255|254|252|248|240|224|192|128|0+)(\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\.0+){3}))$/;

      var regexp = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;

      // for AngularJS 1.3
      // model_controller.$validators.ip_mask = function(value) {
      //   return regexp.test(value);
      // }

      model_controller.$parsers.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('ipMask', regexp.test(value));
        return value;
      });

      model_controller.$formatters.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('ipMask', regexp.test(value));
        return value;
      });
    }
  };
})

// MAC address validation
.directive('validMacAddress', function() {
  return {
    require: "ngModel",
    link: function(scope, element, attributes, model_controller) {
      // http://stackoverflow.com/questions/4260467/what-is-a-regular-expression-for-a-mac-address
      var regexp = /^([0-9A-F]{2}:){5}([0-9A-F]{2})$/;

      model_controller.$parsers.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('macAddress', regexp.test(value));
        return value;
      });

      model_controller.$formatters.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('macAddress', regexp.test(value));
        return value;
      });
    }
  };
})

// TCP port validation
.directive('validTcpPort', function() {
  return {
    require: "ngModel",
    link: function(scope, element, attributes, model_controller) {
      model_controller.$parsers.unshift(function(value) {
        if (!value) {
          return value;
        }
        if (typeof value === 'string') {
          var string_value = value
          value = parseInt(value)
          if (value != string_value) {
            model_controller.$setValidity('tcpPort', false);
            return value;
          }
        }
        model_controller.$setValidity('tcpPort', value >= 0 && value <= 65535);
        return value;
      });

      model_controller.$formatters.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('tcpPort', value >= 0 && value <= 65535);
        return value;
      });
    }
  };
})

// HEX mask validation
// the argument is the length of the mask
.directive('validHexMask', function() {
  return {
    require: "ngModel",
    link: function(scope, element, attributes, model_controller) {
      if (!attributes.validHexMask) {
        throw new Error('Argument required');
      }

      var mask_definition = attributes.validHexMask;
      var variable_length = false;

      if (mask_definition.starts_with('<= ')) {
        variable_length = true;
        mask_definition = mask_definition.substring('<= '.length);
      }

      var symbols_count = parseInt(mask_definition) / 4;
      if (variable_length) {
        symbols_count = 0 + ',' + symbols_count;
      }

      var regexp = new RegExp('^(([0-9A-F]{' + symbols_count + '})|(0))$');

      model_controller.$parsers.unshift(function(value) {
        if (!value) {
          return value;
        }

        // закапслочить введённое значение
        if (value !== value.toUpperCase()) {
          value = value.toUpperCase();
          model_controller.$setViewValue(value);
          model_controller.$render();
        }

        model_controller.$setValidity('hexMask', regexp.test(value));

        return value;
      });

      model_controller.$formatters.unshift(function(value) {
        if (!value) {
          return value;
        }

        // закапслочить введённое значение
        if (value !== value.toUpperCase()) {
          value = value.toUpperCase();
          model_controller.$setViewValue(value);
          model_controller.$render();
        }

        model_controller.$setValidity('hexMask', regexp.test(value));
        return value;
      });
    }
  };
})

// MAC address mask validation
.directive('validMacMask', function() {
  return {
    require: "ngModel",
    link: function(scope, element, attributes, model_controller) {
      var regexp = /^([0-9A-F]{2}:){5}([0-9A-F]{2})$/;

      model_controller.$parsers.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('macMask', regexp.test(value));
        return value;
      });

      model_controller.$formatters.unshift(function(value) {
        if (!value) {
          return value;
        }
        model_controller.$setValidity('macMask', regexp.test(value));
        return value;
      });
    }
  };
})

// IP-address validation
.directive('validIp', function() {
  return {
    require: "ngModel",
    link: function(scope, elm, attrs, ctrl) {
      var regex = /^\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b(:([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?$/;

      /*var validator = function(viewValue){
        ctrl.$setValidity('validIp', regex.test(viewValue));
        return viewValue;
      };*/

      //if (attrs.type == 'radio' || attrs.type == 'checkbox') return;
      elm.unbind('input').unbind('keydown').unbind('change');
      elm.bind('blur', function() {
        scope.$apply(function() {
          ctrl.$setViewValue(elm.val());
          ctrl.$setValidity('validIp', regex.test(elm.val()));
        });
      });

      //ctrl.$parsers.unshift(validator);    // набор функций, применяемых к значению модели, полученному из вьюхи
      //ctrl.$formatters.unshift(validator);  // набор функций, применяемых к значению модели перед отображением во вьюхе
    }
  };
})

// IMSI validation
.directive('validImsi', function() {
  return {
    require: "ngModel",
    link: function(scope, elm, attrs, ctrl) {
      var regex = /^[0-9]{14}[0-9]?$/,
        validator;

      elm.unbind('input').unbind('keydown').unbind('change');
      elm.bind('blur', function() {
        scope.$apply(function() {
          ctrl.$setViewValue(elm.val());
          ctrl.$setValidity('validImsi', regex.test(elm.val()));
        });
      });
    }
  };
})

//
.directive("sgModale", ["$modal", function($modal) {
  return {
    link: function(scope, element, attrs) {
      element.bind("click", function() {
        console.log(attrs.sgModale);
        var modalInstance = $modal.open({
          templateUrl: attrs.sgModale
        })
      });
    }
  }
}])

// Time validation.
.directive('validTime', function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    scope: {
      timeType: "@"
    },
    link: function(scope, element, attrs, ctrl) {
      element.on('blur', function() {
        var val    = ctrl.$viewValue,
            maxVal = scope.timeType === 'hours' ? 23 : 59;
        if ((+val).toString() === 'NaN') val = 0;
        val = Math.min( val, maxVal );
        val = (val<10?'0':'') + val.toString();
        ctrl.$setViewValue( val );
        ctrl.$render();
      });
      // добавить 0 перед одноциферными значениями (при выставлении значения программным путём)
      ctrl.$formatters.push(function(value) {
        return value < 10 ? '0' + value : value;
      });
    }
  };
})

// Filter number input
.directive('filterNumber', function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function(scope, element, attrs, ctrl) {
      ctrl.$parsers.push( function(viewValue) {
        if (angular.isUndefined(viewValue)) return '';

        //console.log('[FilterNumber]', typeof viewValue, viewValue);
        var parsedValue = viewValue.replace(/\D+/g, '')+'';
        if (viewValue !== parsedValue) {
          ctrl.$setViewValue(parsedValue);
          ctrl.$render();
        }

        return parsedValue;
      });
    }
  };
})

// Telephone numbers validation
.directive('numbersList', function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function(scope, element, attrs, ctrl) {
      var validator = function(value) {
        var parsedValue = value.replace(/[^\d\*,\s]+/g, '').replace(/(,|\s){2,}|[,\s](?=\d)/g, ', ').replace(/\*+/g, '*');
        //console.log('[numbersList] converting', value,'=>',parsedValue);
        ctrl.$setValidity( 'numbersList',
          value === 'undefined' ||
          value === '' ||
          /^(\*?\d*\*?,?\s?)+$/g.test(parsedValue)
        );

        if (value !== parsedValue) {
          ctrl.$setViewValue(parsedValue);
          ctrl.$render();
        }

        return parsedValue;
      };

      ctrl.$parsers.push(validator);
      ctrl.$formatters.push(validator);
    }
  };
})

//
.directive('sgInteger', function() {
  return {
    require: 'ngModel',
    link: function(scope, elm, attrs, ctrl) {
      var regex = /^\-?\d+$/;
      ctrl.$parsers.unshift(function(viewValue) {
        if (viewValue === "" || regex.test(viewValue)) {
          // it is valid
          ctrl.$setValidity('integer', true);
          return viewValue;
        } else {
          // it is invalid, return undefined (no model update)
          ctrl.$setValidity('integer', false);
          return undefined;
        }
      });
    }
  };
})

//
.directive('sgSignature', function() {
  return {
    require: "ngModel",
    link: function(scope, elm, attrs, ctrl) {
      var regex = /^([\dabcdefxABCDEFX]{2})+$/;

      elm.unbind('input').unbind('keydown').unbind('change');
      elm.bind('blur', function() {
        scope.$apply(function() {
          ctrl.$setViewValue(elm.val());
          ctrl.$setValidity('sgSignature', regex.test(elm.val()));
        });
      });
    }
  };
})


/***** Testing directive *****/
/*
.directive('strongPassRequired', function () {
    var isValid = function(s) {
        return s && s.length > 5 && /\D/.test(s) && /\d/.test(s);
    };

    return {
        require:'ngModel',
        link:function (scope, elm, attrs, ngModelCtrl) {

            ngModelCtrl.$parsers.unshift(function (viewValue) {
                ngModelCtrl.$setValidity('strongPass', isValid(viewValue));
                return viewValue;
            });

            ngModelCtrl.$formatters.unshift(function (modelValue) {
                ngModelCtrl.$setValidity('strongPass', isValid(modelValue));
                return modelValue;
            });
        }
    };
});
*/


.directive('sgHighlight', function() {
   return {
    restrict: "A",
    scope: {
      sgHighlight: '='
    },
    link: function(scope, element, attrs, ctrl) {
        var text = element.html();

      scope.$watch("sgHighlight", function(newVal, oldVal) {
        var find = scope.sgHighlight;
        var tmp = text;

        angular.forEach(tmp.match(find), function(url) {
            text = text.replace(url, '<a target="' + target + '" href='+ url + '>' + url + '</a>');
        });

        console.log('Highlight', find);
      });
    },
    replace: false
  }
})

// Директива для более корректной обработки дат в Bootstrap-UI Datepicker
.directive('sgCorrectDpView', function() {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, elm, attrs, ctrl) {
      // при потере фокуса элементом проверяет содержимое и, по возможности, переводит в формате Date
      elm.off('keydown').off('keyup').off('change').off('submit').on('blur', function() {
        var val = ctrl.$viewValue;  //console.log('[sgCorrectDpView]', typeof val, val);
        if (!val || typeof val === 'object') return;
        // проверка по маске DD[.-/]MM[.-/]YYYY и перевод в MM[.-/]DD[.-/]YYYY
        //console.log('[sgCorrectDpView] RegEx testing...', /^(?:(\d{1,2})[\./-]){2}(\d{1,4})$/.test(val));
        //console.log('[sgCorrectDpView] New value:', val);
        if (/^(?:(\d{1,2})[\./-]){2}(\d{1,4})$/.test(val)) val = val.replace(/^(\d{1,2})[\./](\d{1,2})[\./-](\d{1,4})$/, '$2/$1/$3');
        val = new Date (val);
        //console.log('[sgCorrectDpView] Format to date:', val);
        scope.$apply(function() {
          if (val && val.toString() !== 'Invalid Date') {
            ctrl.$setViewValue(val);
            ctrl.$render();
          }
        });
      });
    }
  };
})

// действие по enter-у
.directive('sgEnter', function() {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
})

.directive('sgFileChooser', function() {
  return {
    link: function(scope, element, attributes) {

      var el = jQuery(element)
      var button;
      var input = jQuery(el.find('input')[0]);

      if (attributes.sgFileChooserButton) {
        button = find_element_by_path(attributes.sgFileChooserButton, el[0])
      }
      else {
        button = jQuery(el.children()[0])
      }

      button.on('click', function(event) {
        input.click();
      })

      input.on('click', function(event) {
        event.stopPropagation();
      })
    }
  }
})

.directive('ngEnter', function () {
  return function (scope, element, attrs) {
    element.bind('keydown keypress', function (event) {
      if(event.which === 13) {
        scope.$apply(function (){
            scope.$eval(attrs.ngEnter, {$event:event});
          });
        event.preventDefault();
      }
    });
  };
})

.directive('hexPrettyPrint', ["Utilities", "Device_settings", function(Utilities, Device_settings) {
  return {
    restrict: "A",
    require: "ngModel",
    link: function(scope, element, attrs, ngModel) {

      // код для работы с курсором textarea взят отсюда:
      // http://stackoverflow.com/questions/21401042/angularjs-directive-to-insert-text-at-textarea-caret
      var node = element[0]

      // maxlength attribute is useless since it counts \r\n (sometimes)

      var maxlength = 0
      if (attrs.hexPrettyPrint) {
        var bytes = attrs.hexPrettyPrint
        var fours_in_row = attrs.hexPrettyPrintFoursInRow || 4 // по четыре "четыре байта" в строке

        maxlength = bytes * 2 /* каждый байт - два символа */
          + (Device_settings.level_4_data_max_bytes - 1) /* по пробелу между каждыми байтами */
          + Math.floor((Device_settings.level_4_data_max_bytes - 1) / 4) /* по второму пробелу между каждыми четырьмя байтами */
          - Math.floor((Device_settings.level_4_data_max_bytes - 1) / (4 * fours_in_row)) /* на каждом конце строки - два пробела заменяются на \n */
      }

      function read() {

        var startPos;
        var endPos;
        var scrollTop;

        var restore_cursor = node.selectionStart || node.selectionStart === 0;

        if (restore_cursor) {
          startPos  = node.selectionStart;
          endPos    = node.selectionEnd;
          scrollTop = node.scrollTop;
        }

        var original_value = element.val()
        var value = original_value

        value = value.toUpperCase().replace(/[^0-9A-FX \n\r]/g, 'X')

        var result = Utilities.hex_pretty_print(value, startPos);

        var printed = result[0];
        var shift   = result[1];

        var cut = false;
        printed_length = printed.replace(/\n\r/g, '\n').length
        if (maxlength && printed_length > maxlength) {
          printed = printed.substring(0, maxlength)
          cut = true;
        }

        if (printed != original_value || cut) {

          ngModel.$setViewValue(printed);
          ngModel.$render();

          if (restore_cursor) {
            // node.focus();

            node.selectionStart = startPos + shift;
            node.selectionEnd   = startPos + shift;
            node.scrollTop      = scrollTop;
          }
        }
      }

      ngModel.$render = function() {
        element.val(ngModel.$viewValue || "");
      };

      // http://stackoverflow.com/questions/8795283/jquery-get-input-value-after-keypress
      element.on("input", function() {
        scope.$apply(read);
      });

      element.on("blur change", function() {
        scope.$apply(function() {
          read();

          // если количество символов в строке нечётно - дополнить иксом справа
          if (element.val().replace(/\s/g, '').length % 2) {

            ngModel.$setViewValue(element.val() + 'X');
            ngModel.$render();
          }
        });
      });
    }
  }
}])

.directive('dpiTooltip', function() {
    return {
        restrict: 'AE',
        templateUrl: 'pages/include/dpi tooltip.html', // markup for template
        scope: {
            hex: '=dpiTooltip' // allows data to be passed into directive from controller scope
        }
    };
})

// Директива для сравнения двух моделей
.directive('compareTo', function() {
  return {
    require: 'ngModel',
    scope: {
      otherModelValue: '=compareTo'
    },
    link: function(scope, element, attributes, ngModel) {
      // валидатор сравнивает значение текущего элемента
      // с тем, что передан в скоуп
      ngModel.$validators.compareTo = function(modelValue) {
        return modelValue === scope.otherModelValue;
      };

      // отслеживаем изменения обеих моделей
      scope.$watch('otherModelValue + element.value', function() {
        ngModel.$validate();
      });
    }
  };
})

// (требуется stickyeah.js)
//
// Помеченный этой директивой элемент будет 'sticky':
// будет "залипать" наверху экрана при прокрутке вниз.
//
// При помечании этой директивой таблицы, 
// 'sticky' станут элементы th.
// Также в случае таблицы элементу table 
// следует назначать атрибут 'data-sticky-class':
// этот класс будет назначен 'sticky' элементу в состоянии 'sticky'
// (можно добавлять прозрачность, border-bottom, и т.п.)
.directive('sgSticky', ["$timeout", function($timeout) {
  return {                                                                                        
    link: function(scope, element, attributes, ngModel) {

      function sticky(element) {
        element.addClass('stickyeah')
        element.attr('data-stickyeah-offset', attributes.sgSticky || 50)
      }

      var $element = jQuery(element)

      // когда всё отрендерится
      $timeout(function() {
        // в случае таблицы
        if ($element.is('table')) {
          // высота th
          var height

          // sticky css class
          var sticky_class = $element.attr('data-sticky-class')
          if (sticky_class) {
            $element.removeAttr('data-sticky-class')
          }

          $element.find('th').each(function() {
            var th = jQuery(this)
            
            // узнать высоту th
            if (typeof height === 'undefined') {
              height = th.height()
            }

            // padding у th
            var padding = {
              paddingLeft:   th.css('paddingLeft'),
              paddingRight:  th.css('paddingRight'),
              paddingTop:    th.css('paddingTop'),
              paddingBottom: th.css('paddingBottom')
            }

            // убрать padding у th
            th.css('padding', 0)

            // создать вложенный div
            th.wrapInner('<div/>')

            // вложенный div
            var div = $(th.children()[0])

            // перенести sticky css class, указанный для таблицы
            if (sticky_class) {
              div.attr('data-stickyeah-class', sticky_class)
            }

            // перенести padding с th на вложенный div
            div.css(padding)

            // выставить высоту такую же, как у th
            div.css({
              height: height + 'px'
            })

            // пометить как sticky
            sticky(div)
          })
        }
        // иначе - не таблица
        else {
          // пометить как sticky
          sticky(element)
          elements.push(element)
        }

        // активировать sticky
        $.stickyeah()
      })
    }
  }
}])

// пишет высоту элемента в указанную переменную 
// (и обновляет её по событию refresh height)
.directive('sgOutputHeightTo', ["$timeout", function($timeout) {
  return {
    scope: {
      sgOutputHeightTo: '=sgOutputHeightTo'
    },
    link: function(scope, element, attributes, ngModel) {

      var $element = jQuery(element)

      function write() {
        scope.sgOutputHeightTo = $element.outerHeight()
      }

      write()

      scope.$on('refresh height', function(event) {
        // scope.$digest()
        write()
      })
    }
  }
}]);
(function() {
  app.controller("AdminCtrl", ["$scope", "$rootScope", "api", "Status", "GUI", function($scope, $rootScope, api, Status, GUI) {
    $scope.validate = function(data) {
      return data;
    };
    $scope.save = function() {
      var configuration;
      configuration = $scope.validate($scope.configuration_editor.get());
      if ($scope.busy) {
        return Status.info('Операция уже выполняется');
      }
      $scope.busy = true;
      return api.call('configuration.set', {
        configuration: configuration
      }).then(function(result) {
        return Status.error('Не удалось перезапустить приложение');
      })["catch"](function(error) {
        return GUI.wait_for_connection(4, 'Конфигурация сохранена. Приложение перезапускается', {
          to: 'gui'
        });
      });
    };
    return $scope.initialize_page_with(function() {
      return api.call('configuration.get').then(function(configuration) {
        $scope.configuration_editor = new JSONEditor(document.querySelector(".configuration_editor"), {
          mode: 'tree'
        });
        return $scope.configuration_editor.set(configuration);
      });
    });
  }]);

}).call(this);

/* Copyright (c) 2010 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.4
 *
 * Requires: 1.2.2+
 */
(function(c){var a=["DOMMouseScroll","mousewheel"];c.event.special.mousewheel={setup:function(){if(this.addEventListener){for(var d=a.length;d;){this.addEventListener(a[--d],b,false)}}else{this.onmousewheel=b}},teardown:function(){if(this.removeEventListener){for(var d=a.length;d;){this.removeEventListener(a[--d],b,false)}}else{this.onmousewheel=null}}};c.fn.extend({mousewheel:function(d){return d?this.bind("mousewheel",d):this.trigger("mousewheel")},unmousewheel:function(d){return this.unbind("mousewheel",d)}});function b(i){var g=i||window.event,f=[].slice.call(arguments,1),j=0,h=true,e=0,d=0;i=c.event.fix(g);i.type="mousewheel";if(i.wheelDelta){j=i.wheelDelta/120}if(i.detail){j=-i.detail/3}d=j;if(g.axis!==undefined&&g.axis===g.HORIZONTAL_AXIS){d=0;e=-1*j}if(g.wheelDeltaY!==undefined){d=g.wheelDeltaY/120}if(g.wheelDeltaX!==undefined){e=-1*g.wheelDeltaX/120}f.unshift(i,j,e,d);return c.event.handle.apply(this,f)}})(jQuery);


/* stickyeah 0.1, v001
 * © Artem Polikarpov | artpolikarpov.ru | artpolikarpov@gmail.com
 * Licensed under the MIT License */

(function($){
	/*if (typeof(console) == 'undefined') {
		console = {log: $.noop};
	}*/

	var stopFLAG = ('ontouchstart' in document) || document.compatMode != 'CSS1Compat' || typeof document.body.style.maxHeight == 'undefined';

  var $document = $(document);
  var $window = $(window);
	var sticky = $();
	var pushers = {};
	var groups = {};

	var stickyeah = function($sticky, i, o) {
		var $stickyClone = $sticky.clone().addClass('stickyeah_clone').data({initialized: true}).removeAttr('id').insertAfter($sticky).css({visibility: 'hidden'}).hide();
		$sticky.data({clone: $stickyClone});
		var originalStickyPosition = $sticky.css('position');

		var stickyTop, stickyHeight, scrollTop, scrollLeft, windowHeight, stickyTopNew, heightDiff;
		var cloneActivatedFLAG = false;
		var mousewheelActivatedFLAG = false;
		var mousewheeledFLAG = false;
		var setMousewheeledFLAG;

		var $stickyPusher, pusherTop;
		if ($sticky.data('stickyeah-push')) {
			$stickyPusher = pushers[$sticky.data('stickyeah-push')].slice(pushers[$sticky.data('stickyeah-push')].index($sticky)+1);
			////console.log($stickyPusher, i);
		}
    //console.log($stickyPusher);
    if (!$stickyPusher || !$stickyPusher.length) {
      $stickyPusher = $('<div></div>').css({height: 0, fontSize: 0, margin: 0, clear: 'both', float: 'none'}).appendTo('body');
/*
			console.log('$stickyPusher', $stickyPusher);*/
    }

		var $stickyStopper, stopperHeight;
		if ($sticky.data('stickyeah-group')) {
			var thisIndex = groups[$sticky.data('stickyeah-group')].index($sticky);
			if (thisIndex != 0) {
				$stickyStopper = groups[$sticky.data('stickyeah-group')].slice(0,thisIndex);
			}
			////console.log($stickyStopper, i);
		}

		var getPusherTop = function() {
			//console.log('getPusherTop', i);
			pusherTop = 0;
			if ($stickyPusher && $stickyPusher.length) {
				pusherTop = $stickyPusher.not('.stickyeah_disabled').eq(0).offset().top
			}
		}

		var getStopperHeight = function() {
			//console.log('getStopperHeight', i);
			stopperHeight = 0;
			if ($stickyStopper && $stickyStopper.length) {
				$stickyStopper.not('.stickyeah_disabled').each(function(){
					var $this = $(this);
					stopperHeight += $this.data('stickyeah-offset') + ($this.data('clone').height() || 0);
					////console.log($this.data('stickyeah-offset'), $this.next().height());
				});
			}
		}

		var stickyTopNewLast, stickyLeftLast, stickyWidthLast;

		var stick = function() {
			////console.log('stick', i);
			var stickyLeft = $stickyClone.offset().left - scrollLeft;
			stickyTopNew = $sticky.data('stickyeah-offset');
			var stickyWidth = $stickyClone.width();

			if ($stickyPusher && $stickyPusher.length) {
				getPusherTop();
				var stickyHeight = $stickyClone.height() + stickyTopNew*2;
				var pushindDiff = scrollTop - (pusherTop - stickyHeight /*- Number($stickyPusher.attr('data-stickyeah-offset') || 0)*/);
				pushindDiff = Math.max(pushindDiff, $sticky.data('stickyeah-offset'));
				stickyTopNew = stickyTopNew*2 - pushindDiff;
        /*if ($stickyPusher.data('stickyeah-on') && stickyTopNew > 0) {
          stickyTopNew = - stickyHeight;
        }*/
			}

			//if ($stickyStopper && $stickyStopper.length) {
				//var stopperHeight = getStopperHeight();
				stickyTopNew = stickyTopNew + stopperHeight;
			//}
			//////console.log(top, -stickyHeight, i);

			var time = 0;

			$sticky.stop();

			if (mousewheeledFLAG) {
				var distance = Math.abs(parseInt($sticky.css('top')) - stickyTopNew);
				if (distance > 10) time = distance / 2;
				clearTimeout(setMousewheeledFLAG);
				setMousewheeledFLAG = setTimeout(function(){
					mousewheeledFLAG = false;
				}, 100);
			}

			if (stickyTopNewLast !== stickyTopNew || stickyLeftLast != stickyLeft || stickyWidthLast != stickyWidth || mousewheeledFLAG) {
				//console.log('stick css redraw', i);
				var overflow = $sticky.css('overflow');
				$sticky.animate({
					top: stickyTopNew,
					left: stickyLeft,
					width: stickyWidth,
					marginTop: 0,
					marginLeft: 0
				}, time, 'linear', function(){
					$sticky.css({overflow: overflow});
				});
				stickyTopNewLast = stickyTopNew;
				stickyLeftLast = stickyLeft;
				stickyWidthLast = stickyWidth;
			}
		}

		var activateClone = function(FLAG) {
			if (FLAG != cloneActivatedFLAG) {
				$sticky.stop().css({position: FLAG ? 'fixed' : originalStickyPosition, top: '', left: '', marginTop: '', marginLeft: '', width: ''})[FLAG ? 'addClass' : 'removeClass']($sticky.data('stickyeah-class')).data({'stickyeah-on': FLAG});
				stickyTopNewLast = '';
				$stickyClone[FLAG ? 'show' : 'hide']();
				cloneActivatedFLAG = FLAG;
				listenHeight();
				//console.log('activateClone: ' + FLAG, i);
			}
			if (cloneActivatedFLAG) {
				stick();
			}
		}

		var onMousewheel = function(event, delta, deltaX, deltaY) {
			event.preventDefault();
			stickyTopNew = stickyTopNew + Math.round(deltaY*25);
			var topLimit = stickyHeight - windowHeight - $sticky.data('stickyeah-offset');
			var bottomLimit = $sticky.data('stickyeah-offset')*2 - $sticky.data('stickyeah-offset');
			if (stickyTopNew < -topLimit) {
				stickyTopNew = -topLimit;
			} else if (stickyTopNew > bottomLimit) {
				stickyTopNew = bottomLimit;
			}
			$sticky.stop().css({
				top: stickyTopNew
			});
			mousewheeledFLAG = true;
		}

		var activateMousewheel = function(FLAG) {
			////console.log('activateMousewheel', FLAG);
			if (o.scroll && FLAG != mousewheelActivatedFLAG) {
				$sticky[FLAG ? 'bind' : 'unbind']('mousewheel', onMousewheel);
				//console.log('mousewheelActivatedFLAG: ' + FLAG);
				mousewheelActivatedFLAG = FLAG;
			}
		}

		var listenTop = function() {
			if (!$sticky.data('disabled')) {
				//console.log('listenTop');
				stickyTop = (cloneActivatedFLAG ? $stickyClone : $sticky).offset().top;
				//scrollTop = $window.scrollTop();
        scrollTop = Math.max(Math.min($window.scrollTop(), $document.height() - $window.height()), 0);
				scrollLeft = Math.max(Math.min($window.scrollLeft(), $document.width() - $window.width()), 0);
				//////console.log('stickyTop: '+stickyTop,'scrollTop: '+scrollTop);
				activateClone(stickyTop - $sticky.data('stickyeah-offset') - stopperHeight <= scrollTop);
			}
		}

		var listenHeight = function() {
			////console.log('listenHeight', cloneActivatedFLAG);
			if (!$sticky.data('disabled')) {
				//console.log('listenHeight');
				stickyHeight = $stickyClone.height() + $sticky.data('stickyeah-offset') * 2;
				windowHeight = $window.height();
				heightDiff = stickyHeight - windowHeight;
				if (cloneActivatedFLAG) {
					activateMousewheel(heightDiff >= 0);
				} else {
					activateMousewheel(false);
				}
			}
		}

		$sticky
				.bind('stickyeah:disable', function(){
					$sticky.data({'disabled': true}).addClass('stickyeah_disabled');
					////console.log('inside', $sticky.data('disabled'));
					activateClone(false);
					activateMousewheel(false);
					sticky.trigger('stickyeah:reflow');
				})
				.bind('stickyeah:enable', function(){
					$sticky.data({'disabled': false}).removeClass('stickyeah_disabled');
					////console.log('inside', $sticky.data('disabled'));
					sticky.trigger('stickyeah:reflow');
				})
				.bind('stickyeah:reflow', function(e, originalEvent){
					if (!originalEvent) {
						getStopperHeight();
					}
					listenTop();
					if (!originalEvent || originalEvent.type == 'resize') {
						listenHeight();
					}
					////console.log(originalEvent);
				});



	}

	$.stickyeah = function(o) {
		o = $.extend({
			scroll: true
		}, o);

		if (!stopFLAG) {
			sticky = $('.stickyeah');

      sticky
					.filter(function() {
						return !$(this).data('initialized');
					})
					.data({initialized: true})
					.each(function(i){
						var $this = $(this);
						var push = $this.attr('data-stickyeah-push');
						////console.log(push);
						if (push) {
							if (!pushers[push]) {
								pushers[push] = $();
							}
							pushers[push].push(this);
							$this.data({'stickyeah-push': push});
						}
						var group = $this.attr('data-stickyeah-group');
						if (group) {
							if (!groups[group]) {
								groups[group] = $();
							}
							groups[group].push(this);
							$this.data({'stickyeah-group': group});
						}
						$this.data({
							'stickyeah-offset': Number($this.attr('data-stickyeah-offset') || 0),
							'stickyeah-class': $this.attr('data-stickyeah-class') || ''
						});
						////console.log(i, $this.data('stickyeah-offset'));
					})
					.each(function(i) {
						stickyeah($(this), i, o);
					});

      sticky.trigger('stickyeah:reflow');
		}
	}

	$(function(){
		$.stickyeah();
	});


	$window.bind('resize scroll', function(e){
		//////console.log('resize or scroll');
    sticky.trigger('stickyeah:reflow', e);
	});
})(jQuery);
(function() {
  app.controller("DebugCtrl", ["$scope", "$rootScope", "$http", "api", "log", "Enums", "Device", "Routing_model_applier", "Model", "Model_service", "translate", "GUI", "Status", function($scope, $rootScope, $http, api, log, Enums, Device, Routing_model_applier, Model, Model_service, translate, GUI, Status) {
    $scope.minify_response = function(response) {
      response = angular.copy(response);
      delete response.jsonrpc;
      delete response.id;
      if (response.result) {
        response = response.result;
      } else if (response.error) {
        response = {
          error: response.error
        };
      }
      return response;
    };
    $scope.process_error = function(data, status, headers, config) {
      var message;
      message = translate('page.debug.error.generic', {
        status: status || '[no status]',
        data: data || '[no description]'
      });
      return alert(message);
    };
    $scope.submit = function() {
      var error, error1, request;
      if ($scope.form.$invalid) {
        return;
      }
      $scope.command_output_editor.setName();
      $scope.command_output_editor.setMode('view');
      $scope.command_output_editor.set();
      try {
        request = {
          jsonrpc: "2.0",
          method: $scope.command,
          params: $scope.command_input_editor.get(),
          id: 1
        };
      } catch (error1) {
        error = error1;
        if (error instanceof SyntaxError) {
          alert(translate('page.debug.command.error.json', {
            error: error.stack
          }));
          console.error(error.stack);
          return;
        } else {
          throw error;
        }
      }
      $scope.busy = true;
      $scope.busy_command = true;
      return $http.post('/api', JSON.stringify(request)).success(function(response) {
        log.info("←", response);
        $scope.command_output = response;
        $scope.view_command_output();
        return $scope.command_output_editor.expandAll();
      }).error($scope.process_error)["finally"](function() {
        $scope.busy = false;
        return $scope.busy_command = false;
      });
    };
    $scope.view_command_output = function() {
      var response;
      response = $scope.minify_response($scope.command_output);
      if (response.error) {
        response = response.error;
      }
      return $scope.command_output_editor.set(response);
    };
    $scope.submit_batch = function() {
      var batch, batch_json, error, error1, id, request;
      if ($scope.batch_form.$invalid) {
        return;
      }
      $scope.batch_output_editor.setMode('view');
      $scope.batch_output_editor.set();
      id = 1;
      request = function(command, command_input) {
        var data;
        data = {
          jsonrpc: "2.0",
          method: command,
          params: command_input,
          id: id++
        };
        return data;
      };
      batch = null;
      try {
        batch_json = $scope.batch_input_editor.get();
        if (!batch_json instanceof Array) {
          if (batch_json.method != null) {
            batch_json = [batch_json];
          } else {
            alert(translate('page.debug.commands.error.batch_format'));
          }
        }
        batch = batch_json.map(function(command) {
          return request(command.method, command.params);
        });
      } catch (error1) {
        error = error1;
        if (error instanceof SyntaxError) {
          alert(translate('page.debug.commands.error.batch_json', {
            error: error.stack
          }));
          console.error(error.stack);
          return;
        } else {
          throw error;
        }
      }
      $scope.busy = true;
      $scope.busy_batch = true;
      return $http.post('/api', JSON.stringify(batch)).success(function(response) {
        log.info("←", response);
        $scope.batch_output = response;
        $scope.batch_output_editor.set($scope.batch_output.map($scope.minify_response));
        return $scope.batch_output_editor.expandAll();
      }).error($scope.process_error)["finally"](function() {
        $scope.busy = false;
        return $scope.busy_batch = false;
      });
    };
    $scope.switch_command_output_mode = function() {
      return $scope.command_output_mode = (function() {
        switch ($scope.command_output_mode) {
          case 'code':
            $scope.view_command_output();
            $scope.command_output_editor.setMode('view');
            $scope.command_output_editor.expandAll();
            return 'tree';
          case 'tree':
            $scope.command_output_editor.setMode('code');
            $scope.command_output_editor.set(angular.copy($scope.command_output));
            return 'code';
        }
      })();
    };
    $scope.switch_batch_output_mode = function() {
      return $scope.batch_output_mode = (function() {
        switch ($scope.batch_output_mode) {
          case 'code':
            $scope.batch_output_editor.set($scope.batch_output.map($scope.minify_response));
            $scope.batch_output_editor.setMode('view');
            $scope.batch_output_editor.expandAll();
            return 'tree';
          case 'tree':
            $scope.batch_output_editor.setMode('code');
            $scope.batch_output_editor.set(angular.copy($scope.batch_output));
            return 'code';
        }
      })();
    };
    $scope.refresh_device_configuration_batch = function() {
      return Device.refresh_ports().then(function() {
        return Routing_model.from_device();
      }).then(function(routing_model) {
        return Routing_model_applier.generate_configuration_batch(routing_model);
      });
    };
    $scope.refresh_device_configuration = function() {
      var key_for, model;
      if ($scope.refreshing_device_configuration) {
        throw new Error('Already refreshing configuration');
      }
      $scope.refreshing_device_configuration = true;
      $scope.device_configuration_json = {};
      model = {};
      key_for = function(section) {
        return translate('page.debug.configuration.' + section);
      };
      model[key_for('ports')] = {};
      model[key_for('hash_profile')] = null;
      model[key_for('lbg')] = {};
      model[key_for('mirror_groups')] = {};
      model[key_for('mappers')] = {};
      model[key_for('portset')] = {};
      model[key_for('acl')] = {};
      model[key_for('network')] = null;
      model[key_for('routing')] = null;
      model[key_for('ta_rules')] = null;
      model[key_for('users')] = null;
      return Model_service.do_with_port_lock(function() {
        return api.call('getLBGList').then(function(result) {
          var fn, i, lbg_id, len, ref;
          api.begin();
          ref = result.lbg_ids;
          fn = function(lbg_id) {
            return api.call('getLBG', {
              lbg_id: lbg_id
            }).then(function(result) {
              delete result.lbg_id;
              return model[key_for('lbg')][lbg_id] = result;
            });
          };
          for (i = 0, len = ref.length; i < len; i++) {
            lbg_id = ref[i];
            fn(lbg_id);
          }
          return api.end();
        }).then(function() {
          return api.call('getMirrorList');
        }).then(function(result) {
          var fn, i, len, mirror_id, ref;
          api.begin();
          ref = result.mirror_ids;
          fn = function(mirror_id) {
            return api.call('getMirror', {
              mirror_id: mirror_id
            }).then(function(result) {
              delete result.mirror_id;
              return model[key_for('mirror_groups')][mirror_id] = result;
            });
          };
          for (i = 0, len = ref.length; i < len; i++) {
            mirror_id = ref[i];
            fn(mirror_id);
          }
          return api.end();
        }).then(function() {
          api.begin();
          api.call('getACLPortSetList').then(function(result) {
            return model[key_for('portset')] = result;
          });
          return api.end();
        }).then(function(result) {
          var fn, mapper, ref, title;
          api.begin();
          ref = Enums.Mapper;
          fn = function(title, mapper) {
            return api.call('getMapper', {
              mapper_id: mapper.id
            }).then(function(result) {
              return model[key_for('mappers')][mapper.id + ' ' + title] = result.mapper_array;
            });
          };
          for (title in ref) {
            mapper = ref[title];
            fn(title, mapper);
          }
          return api.end();
        }).then(function() {
          return api.call('getRulesList').then(function(result) {
            return model[key_for('ta_rules')] = result;
          });
        }).then(function() {
          return api.call('getACLList');
        }).then(function(result) {
          var acl_id, fn, i, len, ref;
          api.begin();
          ref = result.acl_ids;
          fn = function(acl_id) {
            return api.call('getACL', {
              acl_id: acl_id
            }).then(function(result) {
              delete result.acl_id;
              return model[key_for('acl')][acl_id] = result;
            });
          };
          for (i = 0, len = ref.length; i < len; i++) {
            acl_id = ref[i];
            fn(acl_id);
          }
          api.call('getSwitchInfo').then(function(result) {
            var id, j, len1, port, ref1, results;
            ref1 = result.Ports;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              port = ref1[j];
              id = port.id;
              delete port.id;
              results.push(model[key_for('ports')][id] = port);
            }
            return results;
          });
          api.call('getNetConfig').then(function(result) {
            return model[key_for('network')] = result;
          });
          api.call('getDefaultHashProfile').then(function(result) {
            return model[key_for('hash_profile')] = result;
          });
          api.call('filedb.load', {
            database: 'system',
            file: 'routing.json'
          }).then(function(result) {
            return model[key_for('routing')] = result;
          });
          api.call('filedb.load', {
            database: 'system',
            file: 'users.json'
          }).then(function(result) {
            return model[key_for('users')] = result;
          });
          return api.end();
        }).then(function() {
          return $scope.device_configuration_json = model;
        }).then(function(batch) {
          return $scope.device_configuration_batch = batch;
        });
      })["catch"](function(error) {
        Status.error(error);
        return console.error(error.stack);
      })["finally"](function() {
        return $scope.refreshing_device_configuration = false;
      });
    };
    $scope.download_device_configuration = function() {
      return $scope.refresh_device_configuration().then(function() {
        return download_file($scope.device_configuration_json, 'configuration.txt');
      });
    };
    $scope.download_device_configuration_batch = function() {
      return $scope.refresh_device_configuration().then(function() {
        return download_file($scope.device_configuration_batch, 'configuration_batch.txt');
      });
    };
    $scope.validate_configuration_json = function(data) {};
    $scope.save_configuration = function(configuration) {
      return api.call('configuration.set', {
        configuration: configuration
      }).then(function(result) {
        if (result === 'application restart required') {
          return alert(translate('page.debug.notification.restart_gulp'));
        }
        return alert('Не удалось перезапустить приложение');
      })["catch"](function(error) {
        return GUI.wait_for_connection(4, 'Конфигурация сохранена. Приложение перезапускается', {
          to: 'gui'
        });
      });
    };
    $scope.save_configuration_json = function() {
      var configuration, error, error1, error2;
      try {
        configuration = $scope.configuration_json_editor.get();
      } catch (error1) {
        error = error1;
        if (error instanceof SyntaxError) {
          alert(translate('page.debug.administration.error.configuration_json', {
            error: error.stack
          }));
          console.error(error.stack);
          return;
        } else {
          throw error;
        }
      }
      try {
        $scope.validate_configuration_json(configuration);
      } catch (error2) {
        error = error2;
        console.error(error.stack || error);
        Status.error(error);
        return;
      }
      $scope.busy = true;
      return $scope.save_configuration(configuration)["finally"](function() {
        return $scope.busy = false;
      });
    };
    $scope.change_language = function() {
      $scope.busy = true;
      return api.call('configuration.get').then(function(configuration) {
        configuration.language = $scope.language;
        return $scope.save_configuration(configuration);
      })["catch"](function(error) {
        Status.error(error);
        return console.error(error.stack);
      })["finally"](function() {
        return $scope.busy = false;
      });
    };
    return $scope.initialize_page_with(function() {
      var dummy_batch_input, dummy_command_input, key, value;
      $scope.command = 'getSwitchInfo';
      $scope.command_input_editor = new JSONEditor(document.querySelector(".command_input"), {
        mode: 'code'
      });
      $scope.command_input_editor.editor.setOptions({
        fontSize: "14pt"
      });
      dummy_command_input = {
        key: 123
      };
      $scope.command_input_editor.set(dummy_command_input);
      $scope.command_output_editor = new JSONEditor(document.querySelector(".command_output"), {
        mode: 'view'
      });
      $scope.command_output_editor.setName('response');
      $scope.command_output_mode = 'tree';
      $scope.command_output = {};
      $scope.batch_input_editor = new JSONEditor(document.querySelector(".batch_input"), {
        mode: 'code'
      });
      $scope.batch_input_editor.editor.setOptions({
        fontSize: "14pt"
      });
      dummy_batch_input = [
        {
          method: 'getSwitchInfo',
          params: {
            key: 123
          }
        }, {
          method: 'getSwitchInfo',
          params: {
            key: 123
          }
        }
      ];
      $scope.batch_input_editor.set(dummy_batch_input);
      $scope.batch_output_editor = new JSONEditor(document.querySelector(".batch_output"), {
        mode: 'view'
      });
      $scope.batch_output_editor.setName('batch');
      $scope.batch_output_mode = 'tree';
      $scope.batch_output = [];
      $scope.show_device_configuration_text = false;
      $scope.device_configuration_json = {};
      $scope.$watch('device_configuration_json', function(value) {
        return $scope.device_configuration_editor.set(value);
      });
      $scope.device_configuration_editor = new JSONEditor(document.querySelector(".device_configuration"), {
        mode: 'view'
      });
      $scope.device_configuration_editor.setName(translate('page.debug.configuration.output_title'));
      api.call('configuration.get').then(function(configuration) {
        $scope.configuration_json_editor = new JSONEditor(document.querySelector(".configuration_json"), {
          mode: 'code'
        });
        $scope.configuration_json_editor.editor.setOptions({
          fontSize: "14pt"
        });
        return $scope.configuration_json_editor.set(configuration);
      });
      $scope.language = $rootScope.configuration.language;
      $scope.languages = [];
      for (key in i18n) {
        value = i18n[key];
        $scope.languages.push({
          key: key,
          label: value.language_name
        });
      }
      return $scope.refresh_device_configuration();
    });
  }]);

}).call(this);

/*!
 * modernizr v3.0.0-alpha.3
 * Build http://v3.modernizr.com/download/#-cssanimations-displaytable-draganddrop-flexbox-flexboxlegacy-hasevent-dontmin
 *
 * Copyright (c)
 *  Faruk Ates
 *  Paul Irish
 *  Alex Sexton
 *  Ryan Seddon
 *  Alexander Farkas
 *  Patrick Kettner
 *  Stu Cox
 *  Richard Herrera

 * MIT License
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in the
 * current UA and makes the results available to you in two ways: as properties on
 * a global `Modernizr` object, and as classes on the `<html>` element. This
 * information allows you to progressively enhance your pages with a granular level
 * of control over the experience.
*/

;(function(window, document, undefined){
  var tests = [];
  

  var ModernizrProto = {
    // The current version, dummy
    _version: '3.0.0-alpha.3',

    // Any settings that don't work as separate modules
    // can go in here as configuration.
    _config: {
      'classPrefix' : '',
      'enableClasses' : true,
      'enableJSClass' : true,
      'usePrefixes' : true
    },

    // Queue of tests
    _q: [],

    // Stub these for people who are listening
    on: function( test, cb ) {
      // I don't really think people should do this, but we can
      // safe guard it a bit.
      // -- NOTE:: this gets WAY overridden in src/addTest for
      // actual async tests. This is in case people listen to
      // synchronous tests. I would leave it out, but the code
      // to *disallow* sync tests in the real version of this
      // function is actually larger than this.
      var self = this;
      setTimeout(function() {
        cb(self[test]);
      }, 0);
    },

    addTest: function( name, fn, options ) {
      tests.push({name : name, fn : fn, options : options });
    },

    addAsyncTest: function (fn) {
      tests.push({name : null, fn : fn});
    }
  };

  

  // Fake some of Object.create
  // so we can force non test results
  // to be non "own" properties.
  var Modernizr = function(){};
  Modernizr.prototype = ModernizrProto;

  // Leak modernizr globally when you `require` it
  // rather than force it here.
  // Overwrite name so constructor name is nicer :D
  Modernizr = new Modernizr();

  

  var createElement = function() {
    if (typeof document.createElement !== 'function') {
      // This is the case in IE7, where the type of createElement is "object".
      // For this reason, we cannot call apply() as Object is not a Function.
      return document.createElement(arguments[0]);
    } else {
      return document.createElement.apply(document, arguments);
    }
  };
  
/*!
{
  "name": "Drag & Drop",
  "property": "draganddrop",
  "caniuse": "dragndrop",
  "knownBugs": ["Mobile browsers like Android, iOS < 6, and Firefox OS technically support the APIs, but don't expose it to the end user, resulting in a false positive."],
  "notes": [{
    "name": "W3C spec",
    "href": "http://www.w3.org/TR/2010/WD-html5-20101019/dnd.html"
  }],
  "polyfills": ["dropfile", "moxie", "fileapi"]
}
!*/
/* DOC
Detects support for native drag & drop of elements.
*/

  Modernizr.addTest('draganddrop', function() {
    var div = createElement('div');
    return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
  });


  // isEventSupported determines if the given element supports the given event
  // kangax.github.com/iseventsupported/
  // github.com/Modernizr/Modernizr/pull/636
  //
  // Known incorrects:
  //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
  //   Modernizr.hasEvent("textInput") // in Webkit. github.com/Modernizr/Modernizr/issues/333
  var isEventSupported = (function (undefined) {

    // Detect whether event support can be detected via `in`. Test on a DOM element
    // using the "blur" event b/c it should always exist. bit.ly/event-detection
    var needsFallback = !('onblur' in document.documentElement);

    /**
     * @param  {string|*}           eventName  is the name of an event to test for (e.g. "resize")
     * @param  {(Object|string|*)=} element    is the element|document|window|tagName to test on
     * @return {boolean}
     */
    function isEventSupportedInner( eventName, element ) {

      var isSupported;
      if ( !eventName ) { return false; }
      if ( !element || typeof element === 'string' ) {
        element = createElement(element || 'div');
      }

      // Testing via the `in` operator is sufficient for modern browsers and IE.
      // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and
      // "resize", whereas `in` "catches" those.
      eventName = 'on' + eventName;
      isSupported = eventName in element;

      // Fallback technique for old Firefox - bit.ly/event-detection
      if ( !isSupported && needsFallback ) {
        if ( !element.setAttribute ) {
          // Switch to generic element if it lacks `setAttribute`.
          // It could be the `document`, `window`, or something else.
          element = createElement('div');
        }

        element.setAttribute(eventName, '');
        isSupported = typeof element[eventName] === 'function';

        if ( element[eventName] !== undefined ) {
          // If property was created, "remove it" by setting value to `undefined`.
          element[eventName] = undefined;
        }
        element.removeAttribute(eventName);
      }

      return isSupported;
    }
    return isEventSupportedInner;
  })();

  

  // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
  // Modernizr.hasEvent('gesturestart', elem)
  var hasEvent = ModernizrProto.hasEvent = isEventSupported;
  

  /**
   * is returns a boolean for if typeof obj is exactly type.
   */
  function is( obj, type ) {
    return typeof obj === type;
  }
  ;

  var classes = [];
  

  // Run through all tests and detect their support in the current UA.
  function testRunner() {
    var featureNames;
    var feature;
    var aliasIdx;
    var result;
    var nameIdx;
    var featureName;
    var featureNameSplit;

    for ( var featureIdx in tests ) {
      featureNames = [];
      feature = tests[featureIdx];
      // run the test, throw the return value into the Modernizr,
      //   then based on that boolean, define an appropriate className
      //   and push it into an array of classes we'll join later.
      //
      //   If there is no name, it's an 'async' test that is run,
      //   but not directly added to the object. That should
      //   be done with a post-run addTest call.
      if ( feature.name ) {
        featureNames.push(feature.name.toLowerCase());

        if (feature.options && feature.options.aliases && feature.options.aliases.length) {
          // Add all the aliases into the names list
          for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
          }
        }
      }

      // Run the test, or use the raw value if it's not a function
      result = is(feature.fn, 'function') ? feature.fn() : feature.fn;


      // Set each of the names on the Modernizr object
      for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
        featureName = featureNames[nameIdx];
        // Support dot properties as sub tests. We don't do checking to make sure
        // that the implied parent tests have been added. You must call them in
        // order (either in the test, or make the parent test a dependency).
        //
        // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
        // hashtag famous last words
        featureNameSplit = featureName.split('.');

        if (featureNameSplit.length === 1) {
          Modernizr[featureNameSplit[0]] = result;
        } else {
          // cast to a Boolean, if not one already
          /* jshint -W053 */
          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
          }

          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
        }

        classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
      }
    }
  }

  ;

  var docElement = document.documentElement;
  

  function getBody() {
    // After page load injecting a fake body doesn't work so check if body exists
    var body = document.body;

    if(!body) {
      // Can't use the real body create a fake one.
      body = createElement('body');
      body.fake = true;
    }

    return body;
  }

  ;

  // Inject element with style element and some CSS rules
  function injectElementWithStyles( rule, callback, nodes, testnames ) {
    var mod = 'modernizr';
    var style;
    var ret;
    var node;
    var docOverflow;
    var div = createElement('div');
    var body = getBody();

    if ( parseInt(nodes, 10) ) {
      // In order not to give false positives we create a node for each test
      // This also allows the method to scale for unspecified uses
      while ( nodes-- ) {
        node = createElement('div');
        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
        div.appendChild(node);
      }
    }

    // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
    // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
    // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
    // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
    // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277
    style = ['&#173;','<style id="s', mod, '">', rule, '</style>'].join('');
    div.id = mod;
    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
    (!body.fake ? div : body).innerHTML += style;
    body.appendChild(div);
    if ( body.fake ) {
      //avoid crashing IE8, if background image is used
      body.style.background = '';
      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
      body.style.overflow = 'hidden';
      docOverflow = docElement.style.overflow;
      docElement.style.overflow = 'hidden';
      docElement.appendChild(body);
    }

    ret = callback(div, rule);
    // If this is done after page load we don't want to remove the body so check if body exists
    if ( body.fake ) {
      body.parentNode.removeChild(body);
      docElement.style.overflow = docOverflow;
      // Trigger layout so kinetic scrolling isn't disabled in iOS6+
      docElement.offsetHeight;
    } else {
      div.parentNode.removeChild(div);
    }

    return !!ret;

  }

  ;

  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;
  
/*!
{
  "name": "CSS Display table",
  "property": "displaytable",
  "caniuse": "css-table",
  "authors": ["scottjehl"],
  "tags": ["css"],
  "builderAliases": ["css_displaytable"],
  "notes": [{
    "name": "Detects for all additional table display values",
    "href": "http://pastebin.com/Gk9PeVaQ"
  }]
}
!*/
/* DOC
`display: table` and `table-cell` test. (both are tested under one name `table-cell` )
*/

  // If a document is in rtl mode this test will fail so we force ltr mode on the injeced
  // element https://github.com/Modernizr/Modernizr/issues/716
  testStyles('#modernizr{display: table; direction: ltr}#modernizr div{display: table-cell; padding: 10px}', function( elem ) {
    var ret;
    var child = elem.children;
    ret = child[0].offsetLeft < child[1].offsetLeft;
    Modernizr.addTest('displaytable', ret, { aliases: ['display-table'] });
  },2);


  // Helper function for converting kebab-case to camelCase,
  // e.g. box-sizing -> boxSizing
  function cssToDOM( name ) {
    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {
      return m1 + m2.toUpperCase();
    }).replace(/^-/, '');
  }
  ;

  /**
   * contains returns a boolean for if substr is found within str.
   */
  function contains( str, substr ) {
    return !!~('' + str).indexOf(substr);
  }

  ;

  // Change the function's scope.
  function fnBind(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  }

  ;

  /**
   * testDOMProps is a generic DOM property test; if a browser supports
   *   a certain property, it won't return undefined for it.
   */
  function testDOMProps( props, obj, elem ) {
    var item;

    for ( var i in props ) {
      if ( props[i] in obj ) {

        // return the property name as a string
        if (elem === false) return props[i];

        item = obj[props[i]];

        // let's bind a function
        if (is(item, 'function')) {
          // bind to obj unless overriden
          return fnBind(item, elem || obj);
        }

        // return the unbound function or obj or value
        return item;
      }
    }
    return false;
  }

  ;

  // Following spec is to expose vendor-specific style properties as:
  //   elem.style.WebkitBorderRadius
  // and the following would be incorrect:
  //   elem.style.webkitBorderRadius

  // Webkit ghosts their properties in lowercase but Opera & Moz do not.
  // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
  //   erik.eae.net/archives/2008/03/10/21.48.10/

  // More here: github.com/Modernizr/Modernizr/issues/issue/21
  var omPrefixes = 'Moz O ms Webkit';
  

  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);
  ModernizrProto._cssomPrefixes = cssomPrefixes;
  

  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);
  ModernizrProto._domPrefixes = domPrefixes;
  

  /**
   * Create our "modernizr" element that we do most feature tests on.
   */
  var modElem = {
    elem : createElement('modernizr')
  };

  // Clean up this element
  Modernizr._q.push(function() {
    delete modElem.elem;
  });

  

  var mStyle = {
    style : modElem.elem.style
  };

  // kill ref for gc, must happen before
  // mod.elem is removed, so we unshift on to
  // the front of the queue.
  Modernizr._q.unshift(function() {
    delete mStyle.style;
  });

  

  // Helper function for converting camelCase to kebab-case,
  // e.g. boxSizing -> box-sizing
  function domToCSS( name ) {
    return name.replace(/([A-Z])/g, function(str, m1) {
      return '-' + m1.toLowerCase();
    }).replace(/^ms-/, '-ms-');
  }
  ;

  // Function to allow us to use native feature detection functionality if available.
  // Accepts a list of property names and a single value
  // Returns `undefined` if native detection not available
  function nativeTestProps ( props, value ) {
    var i = props.length;
    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface
    if ('CSS' in window && 'supports' in window.CSS) {
      // Try every prefixed variant of the property
      while (i--) {
        if (window.CSS.supports(domToCSS(props[i]), value)) {
          return true;
        }
      }
      return false;
    }
    // Otherwise fall back to at-rule (for Opera 12.x)
    else if ('CSSSupportsRule' in window) {
      // Build a condition string for every prefixed variant
      var conditionText = [];
      while (i--) {
        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');
      }
      conditionText = conditionText.join(' or ');
      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function( node ) {
        return getComputedStyle(node, null).position == 'absolute';
      });
    }
    return undefined;
  }
  ;

  // testProps is a generic CSS / DOM property test.

  // In testing support for a given CSS property, it's legit to test:
  //    `elem.style[styleName] !== undefined`
  // If the property is supported it will return an empty string,
  // if unsupported it will return undefined.

  // We'll take advantage of this quick test and skip setting a style
  // on our modernizr element, but instead just testing undefined vs
  // empty string.

  // Property names can be provided in either camelCase or kebab-case.

  function testProps( props, prefixed, value, skipValueTest ) {
    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;

    // Try native detect first
    if (!is(value, 'undefined')) {
      var result = nativeTestProps(props, value);
      if(!is(result, 'undefined')) {
        return result;
      }
    }

    // Otherwise do it properly
    var afterInit, i, propsLength, prop, before;

    // If we don't have a style element, that means
    // we're running async or after the core tests,
    // so we'll need to create our own elements to use
    if ( !mStyle.style ) {
      afterInit = true;
      mStyle.modElem = createElement('modernizr');
      mStyle.style = mStyle.modElem.style;
    }

    // Delete the objects if we
    // we created them.
    function cleanElems() {
      if (afterInit) {
        delete mStyle.style;
        delete mStyle.modElem;
      }
    }

    propsLength = props.length;
    for ( i = 0; i < propsLength; i++ ) {
      prop = props[i];
      before = mStyle.style[prop];

      if (contains(prop, '-')) {
        prop = cssToDOM(prop);
      }

      if ( mStyle.style[prop] !== undefined ) {

        // If value to test has been passed in, do a set-and-check test.
        // 0 (integer) is a valid property value, so check that `value` isn't
        // undefined, rather than just checking it's truthy.
        if (!skipValueTest && !is(value, 'undefined')) {

          // Needs a try catch block because of old IE. This is slow, but will
          // be avoided in most cases because `skipValueTest` will be used.
          try {
            mStyle.style[prop] = value;
          } catch (e) {}

          // If the property value has changed, we assume the value used is
          // supported. If `value` is empty string, it'll fail here (because
          // it hasn't changed), which matches how browsers have implemented
          // CSS.supports()
          if (mStyle.style[prop] != before) {
            cleanElems();
            return prefixed == 'pfx' ? prop : true;
          }
        }
        // Otherwise just return true, or the property name if this is a
        // `prefixed()` call
        else {
          cleanElems();
          return prefixed == 'pfx' ? prop : true;
        }
      }
    }
    cleanElems();
    return false;
  }

  ;

  /**
   * testPropsAll tests a list of DOM properties we want to check against.
   *     We specify literally ALL possible (known and/or likely) properties on
   *     the element including the non-vendor prefixed one, for forward-
   *     compatibility.
   */
  function testPropsAll( prop, prefixed, elem, value, skipValueTest ) {

    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

    // did they call .prefixed('boxSizing') or are we just testing a prop?
    if(is(prefixed, 'string') || is(prefixed, 'undefined')) {
      return testProps(props, prefixed, value, skipValueTest);

      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
    } else {
      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
      return testDOMProps(props, prefixed, elem);
    }
  }

  // Modernizr.testAllProps() investigates whether a given style property,
  //     or any of its vendor-prefixed variants, is recognized
  // Note that the property names must be provided in the camelCase variant.
  // Modernizr.testAllProps('boxSizing')
  ModernizrProto.testAllProps = testPropsAll;

  

  /**
   * testAllProps determines whether a given CSS property, in some prefixed
   * form, is supported by the browser. It can optionally be given a value; in
   * which case testAllProps will only return true if the browser supports that
   * value for the named property; this latter case will use native detection
   * (via window.CSS.supports) if available. A boolean can be passed as a 3rd
   * parameter to skip the value check when native detection isn't available,
   * to improve performance when simply testing for support of a property.
   *
   * @param prop - String naming the property to test (either camelCase or
   *               kebab-case)
   * @param value - [optional] String of the value to test
   * @param skipValueTest - [optional] Whether to skip testing that the value
   *                        is supported when using non-native detection
   *                        (default: false)
   */
  function testAllProps (prop, value, skipValueTest) {
    return testPropsAll(prop, undefined, undefined, value, skipValueTest);
  }
  ModernizrProto.testAllProps = testAllProps;
  
/*!
{
  "name": "CSS Animations",
  "property": "cssanimations",
  "caniuse": "css-animation",
  "polyfills": ["transformie", "csssandpaper"],
  "tags": ["css"],
  "warnings": ["Android < 4 will pass this test, but can only animate a single property at a time"],
  "notes": [{
    "name" : "Article: 'Dispelling the Android CSS animation myths'",
    "href": "http://goo.gl/OGw5Gm"
  }]
}
!*/
/* DOC
Detects whether or not elements can be animated using CSS
*/

  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));

/*!
{
  "name": "Flexbox (legacy)",
  "property": "flexboxlegacy",
  "tags": ["css"],
  "polyfills": ["flexie"],
  "notes": [{
    "name": "The _old_ flexbox",
    "href": "http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/"
  }]
}
!*/

  Modernizr.addTest('flexboxlegacy', testAllProps('boxDirection', 'reverse', true));

/*!
{
  "name": "Flexbox",
  "property": "flexbox",
  "caniuse": "flexbox",
  "tags": ["css"],
  "notes": [{
    "name": "The _new_ flexbox",
    "href": "http://dev.w3.org/csswg/css3-flexbox"
  }],
  "warnings": [
    "A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect."
  ]
}
!*/
/* DOC
Detects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.
*/

  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));


  // Run each test
  testRunner();

  delete ModernizrProto.addTest;
  delete ModernizrProto.addAsyncTest;

  // Run the things that are supposed to run after the tests
  for (var i = 0; i < Modernizr._q.length; i++) {
    Modernizr._q[i]();
  }

  // Leak Modernizr namespace
  window.Modernizr = Modernizr;


;

})(window, document);
(function() {
  'use strict';
  app.controller("PortsCtrl", ["$scope", "Configuration", "Device", "Enums", "Port", "Promises", "Model", "Model_service", "api", "Device_GUI", "Status", "Graph", "Port_view", "Port_numeration", "translate", function($scope, Configuration, Device, Enums, Port, Promises, Model, Model_service, api, Device_GUI, Status, Graph, Port_view, Port_numeration, translate) {
    var sfp_power_statuses;
    sfp_power_statuses = {
      critical: [[0, Infinity], [-Infinity, -17]],
      warning: [[-3, 0], [-17, -12]],
      normal: [[-12, -3]]
    };
    $scope.parser_level_title = function(parser_level) {
      var key, ref, value;
      ref = Enums.port_parser_levels;
      for (key in ref) {
        value = ref[key];
        if (value === parser_level) {
          return key;
        }
      }
    };
    $scope.busy = function(ports) {
      var i, len, port, results;
      results = [];
      for (i = 0, len = ports.length; i < len; i++) {
        port = ports[i];
        results.push($scope.busy_ports[port] = true);
      }
      return results;
    };
    $scope.not_busy = function(ports) {
      var i, len, port, results;
      results = [];
      for (i = 0, len = ports.length; i < len; i++) {
        port = ports[i];
        results.push($scope.busy_ports[port] = false);
      }
      return results;
    };
    $scope.is_busy = function(port) {
      return $scope.busy_ports[port];
    };
    $scope.batch = function(port, action_for_generic, action_for_joinable) {
      var actions, i, len, port_info, ref, subport;
      port_info = $scope.ports_info[port.id - 1];
      switch (port_info.type) {
        case 'generic':
          return action_for_generic(port);
        case 'joinable':
          actions = [];
          ref = port_info.joint_port.ports;
          for (i = 0, len = ref.length; i < len; i++) {
            subport = ref[i];
            actions.push(action_for_joinable(subport));
          }
          return function() {
            var action, j, len1;
            api.begin();
            for (j = 0, len1 = actions.length; j < len1; j++) {
              action = actions[j];
              if (action != null) {
                action();
              }
            }
            return api.end();
          };
      }
    };
    $scope.port_transaction = function(prepare_action) {
      var ports, using;
      ports = [];
      using = function(port) {
        return ports.push(port.id);
      };
      Status.busy();
      return Promises.promise(function() {
        return Model_service.do_with_port_lock(function() {
          var action;
          action = prepare_action(using);
          $scope.busy(ports);
          return action().then(function() {
            return Device.save_configuration();
          }).then(function() {
            return $scope.safeApply(function() {
              return Status.not_busy();
            });
          });
        })["finally"](function() {
          return $scope.not_busy(ports);
        }).$apply($scope);
      });
    };
    $scope.enable_port = function(port) {
      return $scope.port_transaction(function(using) {
        return $scope.batch(port, function() {
          using(port);
          return function() {
            return Port.enable(port);
          };
        }, function(subport) {
          if ($scope.joint_port_for(subport).mode === '40G') {
            using(port);
            return function() {
              return Port.enable(subport);
            };
          } else if (subport.id === port.id) {
            using(subport);
            return function() {
              return Port.enable(subport);
            };
          }
        });
      });
    };
    $scope.disable_port = function(port) {
      return $scope.port_transaction(function(using) {
        return $scope.batch(port, function() {
          using(port);
          return function() {
            return Port.disable(port);
          };
        }, function(subport) {
          if ($scope.joint_port_for(subport).mode === '40G') {
            using(subport);
            return function() {
              return Port.disable(subport);
            };
          } else if (subport.id === port.id) {
            using(subport);
            return function() {
              return Port.disable(subport);
            };
          }
        });
      });
    };
    $scope.toggle_port = function(port) {
      if (!port.enabled) {
        return $scope.disable_port(port);
      } else {
        return $scope.enable_port(port);
      }
    };
    $scope.set_port_mode = function(port) {
      return $scope.port_transaction(function(using) {
        using(port);
        return function() {
          return Port.set_eth_mode(port);
        };
      });
    };
    $scope.set_port_force_up = function(port, force_up) {
      return $scope.port_transaction(function(using) {
        using(port);
        return function() {
          var prepare;
          prepare = force_up ? (port.loopback = false, Port.set_loopback(port)) : dummy_promise();
          return prepare.then(function() {
            port.force_up = force_up;
            return Port.set_force_up(port);
          });
        };
      });
    };
    $scope.set_port_loopback = function(port, loopback) {
      if (loopback) {
        if (!confirm(translate('page.ports.loopback_confirm'))) {
          return;
        }
      }
      return $scope.port_transaction(function(using) {
        using(port);
        return function() {
          var prepare;
          prepare = loopback ? (port.force_up = false, Port.set_force_up(port)) : dummy_promise();
          return prepare.then(function() {
            port.loopback = loopback;
            return Port.set_loopback(port);
          });
        };
      });
    };
    $scope.set_joint_port_mode = function(joint_port) {
      return $scope.port_transaction(function(using) {
        var i, len, port, ref;
        ref = joint_port.ports;
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          using(port);
        }
        return function() {
          var j, k, l, len1, len2, len3, ref1, ref2, ref3;
          Port.set_subport_modes(joint_port);
          Device_GUI.refresh_port_coordinates();
          if (joint_port.mode === '4x10G') {
            if (Port_view.is_selected(joint_port.ports[0])) {
              ref1 = joint_port.ports;
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                port = ref1[j];
                Port_view.select(port, false);
              }
            }
          } else {
            ref2 = joint_port.ports;
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              port = ref2[k];
              if (port !== joint_port.ports[0]) {
                Port_view.deselect(port, false);
              }
            }
          }
          api.begin();
          ref3 = joint_port.ports;
          for (l = 0, len3 = ref3.length; l < len3; l++) {
            port = ref3[l];
            Port.set_eth_mode({
              id: port.id,
              eth_mode: Enums.ethernet_port_modes.DISABLED
            });
          }
          return api.end().then(function() {
            var len4, m, ref4;
            api.begin();
            ref4 = joint_port.ports;
            for (m = 0, len4 = ref4.length; m < len4; m++) {
              port = ref4[m];
              Port.set_eth_mode(port);
            }
            return api.end();
          });
        };
      });
    };
    $scope.is_generic = function(port) {
      return Port.is_generic(port.id);
    };
    $scope.is_first_in_joint_port = function(port) {
      var port_info;
      port_info = $scope.ports_info[port.id - 1];
      return port_info.type === 'joinable' && port_info.is_first_in_joint;
    };
    $scope.joint_port_for = function(port) {
      return $scope.ports_info[port.id - 1].joint_port;
    };
    $scope.if_show_port = function(port) {
      if (Port.is_generic(port.id)) {
        return true;
      }
      if ($scope.joint_port_for(port).mode === '4x10G') {
        return true;
      }
      return $scope.is_first_in_joint_port(port);
    };
    $scope.subport_id = function(port) {
      var joint_port_id, port_id, ref;
      joint_port_id = 0;
      port_id = 0;
      ref = Port_numeration.joined_port_id_from_port_id(port.id), joint_port_id = ref[0], port_id = ref[1];
      return port_id;
    };
    $scope.reset_port_stats = function() {
      if ($scope.can_reset_port_stats === false) {
        return;
      }
      $scope.can_reset_port_stats = false;
      return Promises.promise(function() {
        return Port.reset_stats().then(function() {
          return $scope.urge_port_refresh();
        })["finally"](function() {
          return $scope.can_reset_port_stats = true;
        }).$apply($scope);
      });
    };
    $scope.is_known_ethernet_port_mode = function(mode_value) {
      var i, len, mode, ref;
      ref = $scope.ethernet_port_modes;
      for (i = 0, len = ref.length; i < len; i++) {
        mode = ref[i];
        if (mode.value === mode_value) {
          return true;
        }
      }
    };
    $scope.ethernet_port_mode_name_by_id = function(mode) {
      var key, ref, value;
      ref = Enums.ethernet_port_modes;
      for (key in ref) {
        value = ref[key];
        if (value === mode) {
          return key;
        }
      }
    };
    $scope.toggle_comment_form = function(port, comment) {
      $scope.comment_forms[port.id] = !$scope.comment_forms[port.id] ? true : false;
      if (!$scope.comment_forms[port.id]) {
        return Promises.promise(function() {
          return Configuration.Ports.set_comment(port, comment);
        });
      }
    };
    $scope.get_sfp_power_status = function(port) {
      var dbm, in_range, matches, status, values;
      matches = port.sfp_data.rx_power.match(/(-?[\d.]+).?dBm/);
      if (!matches) {
        return '';
      }
      dbm = parseFloat(matches[1]);
      for (status in sfp_power_statuses) {
        values = sfp_power_statuses[status];
        in_range = values.filter(function(range) {
          return dbm >= range[0] && dbm <= range[1];
        });
        if (in_range.length) {
          return status;
        }
      }
      throw new Error('Range for rx_power|dBm value doesn\'t exists');
    };
    return $scope.initialize_page_with(function() {
      var i, len, port, ref;
      $scope.Graph = Graph;
      Graph.for_ports('.graphic');
      $scope.ethernet_port_modes = [
        {
          title: '1G',
          value: Enums.ethernet_port_modes['1000BASE_X']
        }, {
          title: '10G',
          value: Enums.ethernet_port_modes['10GBASE_CR']
        }
      ];
      $scope.ethernet_port_modes_for_40g = [
        {
          title: '40G',
          value: '40G'
        }, {
          title: '4x10G',
          value: '4x10G'
        }
      ];
      $scope.ports_info = (function() {
        var i, len, ref, results;
        ref = Model.ports;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          results.push(Port_numeration.categorize_port(port.id));
        }
        return results;
      })();
      $scope.busy_ports = {};
      $scope.sfp_info_id = null;
      $scope.comment_forms = [];
      ref = Model.ports;
      for (i = 0, len = ref.length; i < len; i++) {
        port = ref[i];
        $scope.comment_forms[port.id] = false;
      }
      return Promises.promise(function() {
        return Configuration.Ports.load_comments(Model).then(function() {
          return $scope.ready = true;
        }).$apply($scope);
      });
    });
  }]);

}).call(this);

app
  .directive('sfpInfo', ["Port", "Port_numeration", function(Port, Port_numeration) {
    return {
      restrict: 'E',
      scope: {
        data: '=data',
        port_id: '=portId'
      },
      templateUrl: 'pages/include/sfp_info.html'
    };
  }]);

(function() {
  'use strict';
  app.controller("RulesCtrl", ["$rootScope", "$scope", "$filter", "$location", "$timeout", "$q", "translate", "api", "log", "Promises", "Device_routing", "Port", "Rule", "Enums", "Device", "Status", "Model", "Model_service", "Configuration", "Graph", "Routing_model_errors", "Port_view", "Port_numeration", function($rootScope, $scope, $filter, $location, $timeout, $q, translate, api, log, Promises, Device_routing, Port, Rule, Enums, Device, Status, Model, Model_service, Configuration, Graph, Routing_model_errors, Port_view, Port_numeration) {
    $scope._single_complex_filter = function(rule) {
      var complex_types;
      complex_types = ['IP_protocol_source', 'IP_protocol_destination', 'IP_protocol'];
      return rule.filters.length === 2 && rule.filters.filter(function(f) {
        return complex_types.indexOf(f.type) !== -1;
      }).length === 2;
    };
    $scope.hide_bracket = function(rule) {
      return rule.filters.length < 2 || $scope._single_complex_filter(rule);
    };
    $scope.single_filter = function(rule) {
      return rule.filters.length === 1 || $scope._single_complex_filter(rule);
    };
    $scope.sort_by_id = function(array) {
      var sorter;
      sorter = function(one, two) {
        if (one.id > two.id) {
          return 1;
        } else if (one.id === two.id) {
          return 0;
        } else {
          return -1;
        }
      };
      return array.sort(sorter);
    };
    $scope.next_id = function(array) {
      var id, item, j, len, max;
      max = 0;
      for (j = 0, len = array.length; j < len; j++) {
        item = array[j];
        id = item.id;
        max = Math.max(max, id);
      }
      return max + 1;
    };
    $scope.next_priority = function(array) {
      var item, j, len, max, priority;
      max = 0;
      for (j = 0, len = array.length; j < len; j++) {
        item = array[j];
        priority = item.priority;
        max = Math.max(max, priority);
      }
      return max + 1;
    };
    $scope.unselect_all = function() {
      var j, k, key, len, len1, port, ref, ref1, results, rule;
      Port_view.deselect_all();
      ref = $scope.view.rules;
      for (rule = j = 0, len = ref.length; j < len; rule = ++j) {
        key = ref[rule];
        rule.selected = false;
      }
      ref1 = $rootScope.view.ports;
      results = [];
      for (port = k = 0, len1 = ref1.length; k < len1; port = ++k) {
        key = ref1[port];
        port.selectedIn = false;
        results.push(port.selectedOut = false);
      }
      return results;
    };
    $scope.by_id = function(id, where) {
      return where.filter(function(item) {
        return item.id === id;
      })[0];
    };
    $scope.init_stickyeah = function() {
      return $timeout(function() {
        return $.stickyeah();
      });
    };
    $scope.new_rule = {
      set: function(rule, mode) {
        $scope.view.new_rule_id = rule.id;
        $scope.view.new_rule_mode = mode;
        $scope.new_rule.cancel_add_timeout();
        jQuery("html, body").animate({
          scrollTop: '0px'
        });
        if (mode === 'add') {
          return $scope.new_rule.set_add_timeout(5 * 1000);
        }
      },
      reset: function() {
        $scope.view.new_rule_id = null;
        $scope.view.mode = null;
        return $scope.new_rule.cancel_add_timeout();
      },
      adding_new_rule_and_not_timed_out: function() {
        return $scope.view.new_rule_id && $scope.view.add_new_rule_timeout;
      },
      set_add_timeout: function(delay) {
        return $scope.view.add_new_rule_timeout = setTimeout(function() {
          return $scope.view.add_new_rule_timeout = null;
        }, delay);
      },
      cancel_add_timeout: function() {
        if ($scope.view.add_new_rule_timeout) {
          clearTimeout($scope.view.add_new_rule_timeout);
          return $scope.view.add_new_rule_timeout = null;
        }
      },
      is: function(rule) {
        return $scope.view.new_rule_id === rule.id;
      }
    };
    $scope.watch_rules = function() {
      if ($scope.watching_rules) {
        return;
      }
      $scope.$watch('model.rules', $scope.RULE.rules_changed, true);
      return $scope.watching_rules = true;
    };
    $scope.RULE = {
      by_id: function(id) {
        var j, len, ref, rule;
        ref = Model.rules;
        for (j = 0, len = ref.length; j < len; j++) {
          rule = ref[j];
          if (rule.id === id) {
            return rule;
          }
        }
      },
      add: function() {
        var rule;
        rule = angular.copy($scope.templates.rule);
        rule.id = $scope.next_id(Model.rules);
        rule.name = $scope.RULE.name(rule);
        rule.priority = $scope.next_priority(Model.rules);
        $scope.RULE.describe_action(rule);
        Model.rules.push(rule);
        if ($scope.edit_ports) {
          $scope.view.rules[rule.id].inputs_text = '';
          $scope.view.rules[rule.id].outputs_text = '';
        }
        $scope.RULE.sort_by_priority();
        $scope.RULE.select(rule);
        return $scope.new_rule.set(rule, 'add');
      },
      previous: function(rule) {
        return Model.rules.filter(function(x) {
          return x.priority > rule.priority;
        })[0];
      },
      name: function(rule) {
        return translate('page.routing.rule.name', {
          id: rule.id
        });
      },
      remove: function(rule) {
        return $scope.safeApply(function() {
          if ($scope.new_rule.is(rule)) {
            $scope.new_rule.reset();
          }
          $scope.view.rules[rule.id].is_being_removed = true;
          Model.rules.remove(rule);
          delete $scope.view.rules[rule.id];
          if (!$scope.RULE.selected() && Model.rules[0]) {
            return $scope.RULE.select(Model.rules[0]);
          } else {
            return $scope.RULE.deselect_all();
          }
        });
      },
      remove_all: function() {
        return $scope.safeApply(function() {
          $scope.new_rule.reset();
          $scope.RULE.deselect_all();
          Model.rules = [];
          return $scope.view.rules = {};
        });
      },
      add_or_remove_hashing_profile: function(rule) {
        if ((rule.action === 'balance' || rule.action === 'dubbing') && rule.outputs.length > 1) {
          if (rule.hashing_profile == null) {
            return rule.hashing_profile = 0;
          }
        } else {
          return delete rule.hashing_profile;
        }
      },
      has_disabled: function() {
        var count, j, len, ref, rule;
        count = 0;
        if (Model.rules) {
          ref = Model.rules;
          for (j = 0, len = ref.length; j < len; j++) {
            rule = ref[j];
            if (!rule.enabled) {
              count++;
            }
          }
          return !!count;
        } else {
          return false;
        }
      },
      switch_all: function(mode) {
        var j, len, ref, results, rule;
        ref = Model.rules;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          rule = ref[j];
          results.push(rule.enabled = mode);
        }
        return results;
      },
      filter_list_shown: function(rule, extra) {
        return $rootScope.scroll_by(extra.height());
      },
      toggle_available_filters: function(rule) {
        var shown;
        shown = Object.get($scope.view.rules, rule.id, 'show_available_filters');
        return Object.set($scope.view.rules, rule.id, 'show_available_filters', !shown);
      },
      if_show_available_filters: function(rule) {
        return Object.get($scope.view.rules, rule.id, 'show_available_filters');
      },
      initialize: function() {
        var filter, j, k, len, len1, ref, ref1, rule;
        ref = Model.rules;
        for (j = 0, len = ref.length; j < len; j++) {
          rule = ref[j];
          $scope.RULE.describe_action(rule);
          ref1 = rule.filters;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            filter = ref1[k];
            filter.$$show_mask = (function() {
              switch (filter.type) {
                case 'Level4_data':
                  return true;
                default:
                  if (!$scope.FILTER.is_default_mask(filter)) {
                    return true;
                  }
              }
            })();
            filter.$$interval = filter.to_value != null;
          }
        }
        $scope.refresh_device_port_statuses();
        $scope.RULE.sort_by_priority();
        if (Model.rules[0]) {
          $scope.RULE.select(Model.rules[0]);
        }
        $scope.on_key(function(key) {
          if (key.is('Ctrl', 'Up')) {
            rule = $scope.RULE.selected();
            if (rule) {
              $scope.safeApply(function() {
                return $scope.RULE.change_priority(rule, +1);
              });
            }
            return;
          }
          if (key.is('Ctrl', 'Down')) {
            rule = $scope.RULE.selected();
            if (rule) {
              $scope.safeApply(function() {
                return $scope.RULE.change_priority(rule, -1);
              });
            }
            return;
          }
          if (key.is('Ctrl', 'E')) {
            $scope.safeApply(function() {
              return $scope.toggle_edit_ports();
            });
          }
        });
        return dummy_promise();
      },
      rename: function(rule, on_off) {
        if (on_off == null) {
          on_off = true;
        }
        if (on_off) {
          if (!rule.enabled) {
            return;
          }
        }
        return Object.set($scope.view.rules, rule.id, 'rename', on_off);
      },
      can_have_same_inputs_and_outputs: function(rule) {
        switch (rule.action) {
          case 'mirror':
            return true;
          default:
            return false;
        }
      },
      add_input: function(rule) {
        return $scope.safeApply(function() {
          var j, len, port, ref;
          ref = Model.ports.filter(function(port) {
            return Port_view.is_selected(port);
          });
          for (j = 0, len = ref.length; j < len; j++) {
            port = ref[j];
            if (rule.inputs.has(port)) {
              continue;
            }
            rule.inputs.push(port);
            $scope.sort_by_id(rule.inputs);
            Object.set($rootScope.view.ports, port.id, 'selectedIn', true);
            $scope.refresh_device_port_statuses();
          }
          Port_view.deselect_all();
          $scope.RULE.changed(rule);
          if ($scope.new_rule.is(rule)) {
            $scope.new_rule.reset();
          }
          if ($scope.edit_ports) {
            return $scope.RULE.refresh_input_text(rule);
          }
        });
      },
      add_output: function(rule) {
        return $scope.safeApply(function() {
          var j, len, port, ref;
          ref = Model.ports.filter(function(port) {
            return Port_view.is_selected(port);
          });
          for (j = 0, len = ref.length; j < len; j++) {
            port = ref[j];
            if (rule.outputs.has(port)) {
              continue;
            }
            rule.outputs.push(port);
            $scope.sort_by_id(rule.outputs);
            Port_view.deselect(port);
            Object.set($rootScope.view.ports, port.id, 'selectedOut', true);
            $scope.refresh_device_port_statuses();
          }
          if (rule.action === 'redirect' && rule.outputs.length > 1) {
            rule.action = 'balance';
          }
          Port_view.deselect_all();
          $scope.RULE.add_or_remove_hashing_profile(rule);
          $scope.RULE.changed(rule);
          if ($scope.new_rule.is(rule)) {
            $scope.new_rule.reset();
          }
          if ($scope.edit_ports) {
            return $scope.RULE.refresh_output_text(rule);
          }
        });
      },
      refresh_input_text: function(rule) {
        var input;
        return $scope.view.rules[rule.id].inputs_text = ((function() {
          var j, len, ref, results;
          ref = rule.inputs;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            input = ref[j];
            results.push(Port_numeration.name_by_id(input.id));
          }
          return results;
        })()).join(' ');
      },
      refresh_output_text: function(rule) {
        var output;
        return $scope.view.rules[rule.id].outputs_text = ((function() {
          var j, len, ref, results;
          ref = rule.outputs;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            output = ref[j];
            results.push(Port_numeration.name_by_id(output.id));
          }
          return results;
        })()).join(' ');
      },
      changed: function(rule) {
        return Object.set($scope.view.rules, rule.id, 'error', false);
      },
      inputs_text_changed: function(rule) {
        return Object.set($scope.view.rules, rule.id, 'error.invalid_inputs_text', false);
      },
      outputs_text_changed: function(rule) {
        return Object.set($scope.view.rules, rule.id, 'error.invalid_outputs_text', false);
      },
      rules_changed: function() {
        var callback, j, len, ref, rule;
        if ($scope.applying_rules) {
          return;
        }
        if ($rootScope.applying_configuration) {
          return;
        }
        ref = Model.rules;
        for (j = 0, len = ref.length; j < len; j++) {
          rule = ref[j];
          $scope.RULE.describe_action(rule);
        }
        $scope.interactive_validation();
        if ($scope.load_rules_timer) {
          $timeout.cancel($scope.load_rules_timer);
        }
        callback = function() {
          return Device.load_rules().then(function(rules) {
            var gui_rules;
            gui_rules = Device_routing.convert_to_device_rules(Model.rules);
            return $scope.any_changes = !angular.equals(gui_rules, rules);
          });
        };
        return $scope.load_rules_timer = $timeout(callback, 1000);
      },
      hashing_profile_changed: function(rule) {
        return $scope.RULE.describe_action(rule);
      },
      validate: function(rule) {
        var destination_port_filter, j, len, port, ref, source_port_filter;
        if ($scope.form.$invalid) {
          return 'form_errors';
        }
        if ($scope.view.rules[rule.id].edit_ports) {
          return 'exit_port_editing_mode';
        }
        if (rule.inputs.is_empty()) {
          return 'input_required';
        }
        switch (rule.action) {
          case 'drop':
            break;
          default:
            if (rule.outputs.is_empty()) {
              return 'output_required';
            }
        }
        switch (rule.action) {
          case 'redirect':
            if (rule.outputs.length > 1) {
              return 'multiple_outputs_for_redirect';
            }
        }
        source_port_filter = rule.filters.filter(function(x) {
          return x.type === 'IP_protocol_source';
        })[0];
        destination_port_filter = rule.filters.filter(function(x) {
          return x.type === 'IP_protocol_destination';
        })[0];
        if (source_port_filter || destination_port_filter) {
          if (rule.filters.filter(function(x) {
            return x.type === 'IP_protocol';
          }).is_empty()) {
            return 'ip_protocol_required_for_port_filtering';
          }
        }
        ref = rule.inputs.concat(rule.outputs);
        for (j = 0, len = ref.length; j < len; j++) {
          port = ref[j];
          port = Port_numeration.categorize_port(port.id);
          if (port.type === 'joinable') {
            if (port.joint_port.mode === '40G') {
              if (!port.is_first_in_joint) {
                return 'joint_port_is_40G_but_subports_are_used_in_rules';
              }
            }
          }
        }
      },
      duplicate: function(rule) {
        var a_rule, copy, j, len, previous_rule, ref;
        copy = angular.copy(rule);
        copy.inputs = [].concat(rule.inputs);
        copy.outputs = [].concat(rule.outputs);
        copy.id = $scope.next_id(Model.rules);
        copy.name = $scope.RULE.name(copy);
        previous_rule = $scope.RULE.previous(rule);
        if (previous_rule) {
          ref = Model.rules;
          for (j = 0, len = ref.length; j < len; j++) {
            a_rule = ref[j];
            if (a_rule.priority > rule.priority) {
              a_rule.priority++;
            }
          }
          copy.priority = rule.priority;
          rule.priority++;
        } else {
          copy.priority = rule.priority;
          rule.priority = $scope.next_priority(Model.rules);
        }
        $scope.RULE.describe_action(copy);
        Model.rules.push(copy);
        $scope.RULE.sort_by_priority();
        return $timeout((function() {
          $scope.RULE.select(copy);
          return $scope.new_rule.set(copy, 'duplicate');
        }), 0);
      },
      port_clicked: function(rule, port, $event) {
        if (!$scope.view.rules[rule.id].selected) {
          return;
        }
        Port_view.select(port, true);
        return $scope.block_event($event);
      },
      on_off_clicked: function(rule, $event) {
        return $event.stopPropagation();
      },
      selected: function() {
        var ref, rule, rule_id;
        ref = $scope.view.rules;
        for (rule_id in ref) {
          rule = ref[rule_id];
          if (rule.selected) {
            return $scope.RULE.by_id(parseInt(rule_id));
          }
        }
      },
      select: function(rule, $event) {
        var j, k, len, len1, port, ref, ref1, results;
        if ($scope.RULE.selected() === rule) {
          return;
        }
        if ($event) {
          if (jQuery($event.target).hasClass('rule_on_off_switch')) {
            return;
          }
        }
        if ($scope.edit_ports) {
          $scope.RULE.refresh_input_text(rule);
          $scope.RULE.refresh_output_text(rule);
        }
        $scope.RULE.deselect_all();
        Object.set($scope.view.rules, rule.id, 'selected', true);
        if (rule !== Graph.rule) {
          Graph.show = false;
        }
        ref = rule.inputs;
        for (j = 0, len = ref.length; j < len; j++) {
          port = ref[j];
          Object.set($rootScope.view.ports, port.id, 'selectedIn', true);
        }
        ref1 = rule.outputs;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          port = ref1[k];
          results.push(Object.set($rootScope.view.ports, port.id, 'selectedOut', true));
        }
        return results;
      },
      deselect_all: function() {
        var j, k, len, len1, port, ref, ref1, results, rule;
        ref = Model.rules;
        for (j = 0, len = ref.length; j < len; j++) {
          rule = ref[j];
          Object.set($scope.view.rules, rule.id, 'selected', false);
        }
        ref1 = Model.ports;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          port = ref1[k];
          Object.set($rootScope.view.ports, port.id, 'selectedIn', false);
          results.push(Object.set($rootScope.view.ports, port.id, 'selectedOut', false));
        }
        return results;
      },
      sort_by_priority: function() {
        return Model.rules.sort(function(a, b) {
          return b.priority - a.priority;
        });
      },
      change_priority: function(rule, change) {
        $scope.RULE.sort_by_priority();
        Model.rules.forEach(function(i, index) {
          var priority, replaced;
          if (i !== rule) {
            return;
          }
          index -= change;
          if (index < 0 || index >= Model.rules.length) {
            return;
          }
          replaced = Model.rules[index];
          priority = rule.priority;
          rule.priority = replaced.priority;
          return replaced.priority = priority;
        });
        return $scope.RULE.sort_by_priority();
      },
      describe_action: function(rule) {
        var describe_filter, describe_filters, description;
        describe_filter = function(filter) {
          var description, get_filter_to_value_label, get_filter_value_label;
          get_filter_value_label = function() {
            var key, ref, value;
            if (filter.value == null) {
              return '?';
            }
            if (!Enums.ACL_Filter[filter.type].value.from) {
              return filter.value;
            }
            ref = Enums.ACL_Filter[filter.type].value.from;
            for (key in ref) {
              value = ref[key];
              if (value === filter.value) {
                return key;
              }
            }
          };
          get_filter_to_value_label = function() {
            if (filter.to_value == null) {
              return;
            }
            if (Enums.ACL_Filter[filter.type].value.from) {
              throw new Error("Unsupported filter type " + filter.type + " for to value selection");
            }
            return filter.to_value;
          };
          return description = {
            type: filter.type,
            value: get_filter_value_label(),
            to_value: get_filter_to_value_label(),
            mask: (function() {
              switch (filter.type) {
                case 'Level4_data':
                  break;
                default:
                  return filter.mask;
              }
            })()
          };
        };
        describe_filters = function(rule) {
          var filter, j, len, ref, results;
          ref = rule.filters;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            filter = ref[j];
            results.push(describe_filter(filter));
          }
          return results;
        };
        description = {};
        description.action_info = (function() {
          switch (rule.action) {
            case 'balance':
            case 'dubbing':
              if (rule.outputs.is_empty()) {
                return '';
              } else if (rule.outputs.length === 1) {
                return translate('page.routing.rule.action.aggregation');
              } else {
                return Device_routing.LBG.Hash_profile.by_id(rule.hashing_profile).title;
              }
          }
        })();
        description.filters = (function() {
          switch (rule.action) {
            case 'balance':
            case 'redirect':
            case 'mirror':
            case 'drop':
            case 'dubbing':
              return describe_filters(rule);
          }
        })();
        return Object.set($scope.view.rules, rule.id, 'action.description', description);
      },
      filter_type_changed: function(filter) {
        filter.value = null;
        return filter.mask = $scope.FILTER.identity_mask(filter.type);
      },
      has_filter: function(rule, type) {
        var filter, j, len, ref;
        ref = rule.filters;
        for (j = 0, len = ref.length; j < len; j++) {
          filter = ref[j];
          if (filter.type === type) {
            return true;
          }
        }
      },
      add_filter: function(rule, type) {
        var filter, ip_protocol_filter, is_tcp_udp;
        filter = {
          type: type
        };
        switch (type) {
          case 'IP_protocol_source':
          case 'IP_protocol_destination':
            if (!$scope.RULE.has_filter(rule, 'IP_protocol')) {
              $scope.RULE.add_filter(rule, 'IP_protocol');
              return (function() {
                return $scope.safeApply(function() {
                  return $scope.RULE.add_filter(rule, type);
                });
              }).delay(0);
            } else {
              ip_protocol_filter = $scope.RULE.get_filter(rule, 'IP_protocol');
              is_tcp_udp = $scope.port_ip_protocols.filter(function(x) {
                return x.key === ip_protocol_filter.value;
              }).not_empty();
              if (!is_tcp_udp) {
                ip_protocol_filter.value = $scope.port_ip_protocols[0].key;
              }
            }
            break;
          case 'ethernet_protocol':
            filter.value = Enums.ACL_Filter.ethernet_protocol.value["default"];
            break;
          case 'IP_protocol':
            filter.value = Enums.ACL_Filter.IP_protocol.value["default"];
            break;
          case 'Level4_data':
            filter.$$show_mask = true;
            break;
          case 'multi_IP_address':
            $scope.RULE.remove_filter(rule, 'source_IP_address');
            $scope.RULE.remove_filter(rule, 'destination_IP_address');
        }
        filter.mask = Device_routing.Filter.default_mask(type);
        rule.filters.push(filter);
        Device_routing.Filter.sort(rule.filters);
        rule.filters.forEach(function(a_filter, index) {
          if (a_filter === filter) {
            return (function() {
              return $scope.safeApply(function() {
                return $rootScope.scroll_to = jQuery('.rule_filter_list_item[data-index=' + index + ']')[0];
              });
            }).delay(0);
          }
        });
        return $scope.RULE.changed(rule);
      },
      get_filter: function(rule, filter_type) {
        return rule.filters.filter(function(filter) {
          return filter.type === filter_type;
        })[0];
      },
      remove_filter: function(rule, filter) {
        if (angular.isString(filter)) {
          filter = $scope.RULE.get_filter(rule, filter);
          if (!filter) {
            return;
          }
        }
        switch (filter.type) {
          case 'IP_protocol_source':
          case 'IP_protocol_destination':
            rule.filters.remove($scope.RULE.get_filter(rule, 'IP_protocol'));
        }
        rule.filters.remove(filter);
        return $scope.RULE.changed(rule);
      },
      action_changed: function(rule) {
        $scope.RULE.add_or_remove_hashing_profile(rule);
        $scope.RULE.hashing_profile_changed(rule);
        switch (rule.action) {
          case 'redirect':
            if (rule.outputs.length > 1) {
              Status.info(translate('page.routing.rule.error.redirecting_to_several_ports_is_balancing'));
              rule.action = 'balance';
              return $scope.RULE.action_changed(rule);
            }
            break;
          case 'drop':
            rule.outputs = [];
            if (Object.get($scope.view.rules, rule.id, 'selected')) {
              $scope.RULE.deselect_all();
              return $scope.RULE.select(rule);
            }
        }
      },
      implies_deep_inspection: function(rule) {
        var filter, j, len, ref;
        ref = rule.filters;
        for (j = 0, len = ref.length; j < len; j++) {
          filter = ref[j];
          if (filter.type === 'Level4_data') {
            return true;
          }
        }
      }
    };
    $scope.FILTER = {
      identity_mask: function(filter_type) {
        return Device_routing.Filter.identity_mask(Enums.ACL_Filter[filter_type]);
      },
      is_default_mask: function(filter) {
        return Device_routing.Filter.is_default_mask(filter);
      },
      correct_from_to_values: function(filter) {
        var temporary;
        if ((filter.to_value == null) || (filter.value == null)) {
          return;
        }
        if (filter.to_value === '') {
          delete filter.to_value;
        }
        if (filter.to_value < filter.value) {
          temporary = filter.to_value;
          filter.to_value = filter.value;
          filter.value = temporary;
        } else if (filter.to_value === filter.value) {
          delete filter.to_value;
        }
        if (filter.to_value == null) {
          return filter.$$interval = false;
        }
      },
      is_used_in_rule: function(rule, filter) {
        return function(filter_type) {
          return ((function() {
            var j, len, ref, results;
            ref = rule.filters;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              filter = ref[j];
              if (filter.type === filter_type.key) {
                results.push(filter);
              }
            }
            return results;
          })()).not_empty();
        };
      }
    };
    $scope.validate = function() {
      var error, errors, j, len, ref, rule;
      errors = false;
      ref = Model.rules;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        if (!rule.enabled) {
          Object.set($scope.view.rules, rule.id, 'error', false);
          continue;
        }
        Object.set($scope.view.rules, rule.id, 'error', false);
        error = $scope.RULE.validate(rule);
        if (error != null) {
          Object.set($scope.view.rules, rule.id, 'error.' + error, true);
          if (!errors) {
            Object.set($scope.view.rules, rule.id, 'scroll_to', new Date().getTime());
            errors = true;
          }
        }
      }
      return errors;
    };
    $scope.interactive_validation = function() {};
    $scope.show_rule_filter = function(rule, filter) {
      switch (filter.type || filter.key) {
        case 'IP_protocol':
          return rule.filters.filter(function(x) {
            return x.type === 'IP_protocol_source' || x.type === 'IP_protocol_destination';
          }).is_empty();
        case 'source_IP_address':
        case 'destination_IP_address':
          return rule.filters.filter(function(x) {
            return x.type === 'multi_IP_address';
          }).is_empty();
      }
      return true;
    };
    $scope.submit = function() {
      var errors, j, len, ref, rule;
      if (!$scope.exit_ports_editing_mode()) {
        return Status.error(translate('page.routing.status.errors_in_rules'));
      }
      $scope.form.submitted = true;
      Status.busy(translate('page.routing.status.applying_rules'));
      ref = Model.rules;
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        rule.filters = rule.filters.filter(function(filter) {
          return filter.type;
        });
      }
      errors = $scope.validate();
      if (errors) {
        return Status.error(translate('page.routing.status.errors_in_rules'));
      }
      $scope.busy = true;
      return Promises.promise(function() {
        return Configuration.Routing.save().then(function() {
          return $scope.apply_rules();
        }).then(function() {
          $scope.any_changes = false;
          return Status.idle(translate('page.routing.status.rules_saved'));
        })["catch"](Promises.not_navigating_away, function(error) {
          if (api.is_api_error(error)) {
            return;
          }
          if (Routing_model_errors.is(error)) {
            return Status.error(Routing_model_errors.message(error));
          }
          return Status.error(error);
        })["finally"](function() {
          return $scope.busy = false;
        }).$apply($scope);
      });
    };
    $scope.apply_rules = function() {
      var _finally;
      $scope.applying_rules = true;
      _finally = function() {
        $scope.safeApply(function() {
          return $scope.applying_rules = false;
        });
        return $scope.RULE.rules_changed();
      };
      return Device.refresh_ports().then(function() {
        return Device.set_up_routing(Model.rules, Model.ports, Model.joint_ports);
      }).then(function() {
        return _finally();
      })["catch"](Promises.not_navigating_away, function(error) {
        _finally();
        throw error;
      });
    };
    $scope.exit_ports_editing_mode = function() {
      if ($scope.edit_ports) {
        return $scope.toggle_edit_ports();
      }
      return true;
    };
    $scope.toggle_edit_ports = function() {
      var err, error, error1, error2, input, inputs, j, k, l, len, len1, len2, len3, len4, len5, m, n, o, output, outputs, port, ref, ref1, ref2, ref3, rule;
      if (rule = $scope.RULE.selected()) {
        if (!$scope.edit_ports) {
          $scope.RULE.refresh_input_text(rule);
          $scope.RULE.refresh_output_text(rule);
        } else {
          error = function() {
            Object.set($scope.view.rules, rule.id, 'error.' + error, true);
            if (!errors) {
              return Object.set($scope.view.rules, rule.id, 'scroll_to', new Date().getTime());
            }
          };
          if ($scope.view.rules[rule.id].inputs_text.trim().not_empty()) {
            inputs = $scope.view.rules[rule.id].inputs_text.split(/[\s,\n]+/);
            try {
              inputs = (function() {
                var j, len, results;
                results = [];
                for (j = 0, len = inputs.length; j < len; j++) {
                  input = inputs[j];
                  results.push(Port_numeration.by_name(input));
                }
                return results;
              })();
              ref = Model.ports;
              for (j = 0, len = ref.length; j < len; j++) {
                port = ref[j];
                Object.set($rootScope.view.ports, port.id, 'selectedIn', false);
              }
              for (k = 0, len1 = inputs.length; k < len1; k++) {
                input = inputs[k];
                Object.set($rootScope.view.ports, input.id, 'selectedIn', true);
              }
              rule.inputs = inputs;
              $scope.sort_by_id(rule.inputs);
            } catch (error1) {
              err = error1;
              Object.set($scope.view.rules, rule.id, 'error.invalid_inputs_text', true);
              Object.set($scope.view.rules, rule.id, 'scroll_to', new Date().getTime());
              return false;
            }
          } else {
            ref1 = Model.ports;
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              port = ref1[l];
              Object.set($rootScope.view.ports, port.id, 'selectedIn', false);
            }
            rule.inputs = [];
          }
          if ($scope.view.rules[rule.id].outputs_text.trim().not_empty()) {
            outputs = $scope.view.rules[rule.id].outputs_text.split(/[\s,\n]+/);
            try {
              outputs = (function() {
                var len3, m, results;
                results = [];
                for (m = 0, len3 = outputs.length; m < len3; m++) {
                  output = outputs[m];
                  results.push(Port_numeration.by_name(output));
                }
                return results;
              })();
              ref2 = Model.ports;
              for (m = 0, len3 = ref2.length; m < len3; m++) {
                port = ref2[m];
                Object.set($rootScope.view.ports, port.id, 'selectedOut', false);
              }
              for (n = 0, len4 = outputs.length; n < len4; n++) {
                output = outputs[n];
                Object.set($rootScope.view.ports, output.id, 'selectedOut', true);
              }
              rule.outputs = outputs;
              $scope.sort_by_id(rule.inputs);
            } catch (error2) {
              err = error2;
              Object.set($scope.view.rules, rule.id, 'error.invalid_outputs_text', true);
              Object.set($scope.view.rules, rule.id, 'scroll_to', new Date().getTime());
              return false;
            }
          } else {
            ref3 = Model.ports;
            for (o = 0, len5 = ref3.length; o < len5; o++) {
              port = ref3[o];
              Object.set($rootScope.view.ports, port.id, 'selectedOut', false);
            }
            rule.outputs = [];
          }
        }
      }
      $scope.edit_ports = !$scope.edit_ports;
      return true;
    };
    $scope.refresh_device_port_statuses = function() {
      var j, k, len, len1, port, ref, ref1, results, rule;
      ref = Model.rules;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        rule = ref[j];
        ref1 = rule.inputs;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          port = ref1[k];
          Object.set($rootScope.view.ports, port.id, 'in', true);
        }
        results.push((function() {
          var l, len2, ref2, results1;
          ref2 = rule.outputs;
          results1 = [];
          for (l = 0, len2 = ref2.length; l < len2; l++) {
            port = ref2[l];
            results1.push(Object.set($rootScope.view.ports, port.id, 'out', true));
          }
          return results1;
        })());
      }
      return results;
    };
    $scope.max_digits_for_bit_count = function(bit_count) {
      var max_number;
      max_number = Math.pow(2, bit_count + 1) - 1;
      return String(max_number).length;
    };
    $scope.$on('port_removed', function(event, options) {
      return $scope.RULE.add_or_remove_hashing_profile(options.rule);
    });
    return $scope.initialize_page_with(function() {
      var key, ref, ref1, ref2, ref3, value;
      $scope.Graph = Graph;
      Graph.show = false;
      Graph.enable = true;
      $scope.validation_errors = {};
      $scope.any_changes = false;
      $scope.view = angular.extend({
        rules: {}
      }, $scope.view);
      $scope.templates = {
        rule: {
          enabled: true,
          inputs: [],
          outputs: [],
          filters: [],
          action: 'balance',
          hashing_profile: 0
        }
      };
      $scope.filter_types = [];
      ref = Enums.ACL_Filter;
      for (key in ref) {
        value = ref[key];
        $scope.filter_types.push({
          key: key,
          label: translate("ACL.rule.filter.type." + key)
        });
      }
      $scope.ethernet_protocols = [];
      ref1 = Enums.ACL_Filter.ethernet_protocol.value.from;
      for (key in ref1) {
        value = ref1[key];
        $scope.ethernet_protocols.push({
          key: value,
          label: key
        });
      }
      $scope.ethernet_protocols = $scope.ethernet_protocols.filter(function(x) {
        return !['TCP', 'UDP'].has(x.key);
      });
      $scope.ethernet_protocols.sort(function(a, b) {
        if (a.label > b.label) {
          return 1;
        }
        if (a.label < b.label) {
          return -1;
        }
        return 0;
      });
      $scope.ethernet_protocols.unshift({
        key: '',
        label: '———————————'
      });
      $scope.ethernet_protocols.unshift({
        key: Enums.ACL_Filter.ethernet_protocol.value.from.IP,
        label: 'IP'
      });
      $scope.ip_protocols = [];
      ref2 = Enums.ACL_Filter.IP_protocol.value.from;
      for (key in ref2) {
        value = ref2[key];
        $scope.ip_protocols.push({
          key: Enums.ACL_Filter.IP_protocol.value.from[key],
          label: key
        });
      }
      $scope.ip_protocols = $scope.ip_protocols.filter(function(x) {
        return !['IPv4'].has(x.key);
      });
      $scope.ip_protocols.sort(function(a, b) {
        if (a.label > b.label) {
          return 1;
        }
        if (a.label < b.label) {
          return -1;
        }
        return 0;
      });
      $scope.ip_protocols.unshift({
        key: '',
        label: '——————————'
      });
      $scope.ip_protocols.unshift({
        key: Enums.ACL_Filter.IP_protocol.value.from.UDP,
        label: 'UDP'
      });
      $scope.ip_protocols.unshift({
        key: Enums.ACL_Filter.IP_protocol.value.from.TCP,
        label: 'TCP'
      });
      $scope.port_ip_protocols = [
        {
          key: Enums.ACL_Filter.IP_protocol.value.from.TCP,
          label: 'TCP'
        }, {
          key: Enums.ACL_Filter.IP_protocol.value.from.UDP,
          label: 'UDP'
        }
      ];
      $scope.rule_actions = ['balance', 'redirect', 'mirror', 'drop'];
      $scope.rule_action_titles = {};
      ref3 = Enums.ACL_actions;
      for (key in ref3) {
        value = ref3[key];
        $scope.rule_action_titles[key] = translate('ACL.rule.action.' + key);
      }
      $scope.unselect_all();
      Status.busy(translate('page.routing.status.reading_rules_from_device'));
      return Promises.promise(function() {
        return Device_routing.LBG.Hash_profile.fetch().then(function(hashing_profile) {
          return $scope.templates.rule.hashing_profile = hashing_profile.id;
        }).then(function() {
          return Configuration.read_local_routing_configuration();
        }).then(function() {
          $scope.RULE.initialize();
          return $scope.watch_rules();
        }).then(function() {
          return Status.idle();
        })["catch"](Promises.not_navigating_away, function(error) {
          $scope.watch_rules();
          if (api.is_api_error(error)) {
            return;
          }
          if (Routing_model_errors.is(error)) {
            return Status.error(Routing_model_errors.message(error));
          }
          return Status.error(error);
        })["finally"](function() {
          $scope.$on('configuration_loaded', function(rules) {
            return $scope.RULE.rules_changed();
          });
          return $scope.ready = true;
        }).$apply($scope);
      });
    });
  }]);

}).call(this);

(function() {
  'use strict';
  app.controller("SettingsCtrl", ["$scope", "$upload", "api", "Status", "Configuration", "Device", "GUI", "Model", "translate", "Promises", function($scope, $upload, api, Status, Configuration, Device, GUI, Model, translate, Promises) {
    $scope.validate = function() {
      return !$scope.settings_form.$invalid;
    };
    $scope.save = function(callback) {
      if (!$scope.validate()) {
        return Status.error(translate('page.settings.error.form_errors'));
      }
      $scope.busy = true;
      return Promises.promise(function() {
        return Configuration.Network.save().then(function() {
          $scope.rebooting = true;
          return Device.restart();
        })["finally"](function() {
          return $scope.busy = false;
        }).$apply($scope);
      });
    };
    $scope.change_password = function() {
      $scope.busy = true;
      return Promises.promise(function() {
        return api.call('auth.password_matches', {
          password: $scope.current_password
        }).then(function(matches) {
          if (!matches) {
            throw new Error(translate('error.wrong_password'));
          }
          return Configuration.Users.change_password($scope.new_password);
        }).then(function(result) {
          if (result !== false) {
            return Status.info(translate('page.settings.password_changed'));
          }
        })["finally"](function() {
          return $scope.busy = false;
        }).$apply($scope);
      });
    };
    $scope.on_upload_firmware = function($files) {
      var file, upload;
      $scope.safeApply(function() {
        $scope.uploading_firmware = true;
        return Status.busy(translate('page.settings.status.uploading_firmware'));
      });
      file = $files[0];
      upload = null;
      return Promises.promise(function() {
        return new Promise(function(resolve, reject) {
          return upload = $upload.upload({
            url: '/update_firmware',
            data: {
              parameter: $scope.parameter
            },
            file: file
          }).progress(function(event) {
            if (event.loaded === event.total) {
              return Status.busy(translate('page.settings.status.validating_firmware'));
            }
          }).success(function(data, status, headers, config) {
            if (data.error) {
              throw new Error(data.error.message || data.error.code);
            }
            if (data.result !== 0) {
              throw new Error("Operation result: " + data.result);
            }
            return resolve(GUI.wait_for_connection(0, translate('page.settings.status.updating_firmware'), {
              to: 'device',
              infinite: true,
              delay: 8
            }));
          })["catch"](function(error) {
            console.error(error.stack || error);
            Status.error(translate('page.settings.status.firmware_update_failed'));
            return reject(error);
          });
        }).cancellable()["catch"](Promises.is_navigating_away, function(error) {
          upload.abort();
          throw error;
        })["finally"](function() {
          return $scope.uploading_firmware = false;
        }).$apply($scope);
      });
    };
    $scope.on_upload_licence = function($files) {
      var file, upload;
      $scope.safeApply(function() {
        $scope.uploading_licence = true;
        return Status.busy(translate('page.settings.status.uploading_license'));
      });
      file = $files[0];
      upload = null;
      return Promises.promise(function() {
        return new Promise(function(resolve, reject) {
          return upload = $upload.upload({
            url: '/upload_licence',
            data: {
              parameter: $scope.parameter
            },
            file: file
          }).progress(function(event) {
            if (event.loaded === event.total) {
              return Status.busy(translate('page.settings.status.validating_license'));
            }
          }).success(function(data, status, headers, config) {
            if (data.error) {
              throw new Error(data.error.message || data.error.code);
            }
            if (data.result !== 0) {
              throw new Error("Operation result: " + data.result);
            }
            return resolve(Configuration.Device.reset());
          })["catch"](function(error) {
            console.error(error.stack || error);
            Status.error(translate('page.settings.status.firmware_update_failed'));
            return reject(error);
          });
        }).cancellable()["catch"](Promises.is_navigating_away, function(error) {
          upload.abort();
          throw error;
        })["finally"](function() {
          return $scope.uploading_licence = false;
        }).$apply($scope);
      });
    };
    $scope.reset_configuration = function() {
      return Promises.promise(function() {
        return Configuration.reset();
      });
    };
    return $scope.initialize_page_with(function() {
      return Promises.promise(function() {
        return Configuration.Network.load_into_model().then(function() {
          $scope.$watch('model.network.dhcp', function(value) {
            if (value) {
              Model.network.ip = $scope.initial_network_settings.ip;
              Model.network.gateway = $scope.initial_network_settings.gateway;
              return Model.network.mask = $scope.initial_network_settings.mask;
            }
          });
          return $scope.initial_network_settings = angular.copy(Model.network);
        }).$apply($scope);
      });
    });
  }]);

}).call(this);

(function() {
  app.factory('api', ["$rootScope", "$http", "$location", "$timeout", "$q", "Status", "log", "Promises", "Enums", function($rootScope, $http, $location, $timeout, $q, Status, log, Promises, Enums) {
    var Batch, api, id, sort_by_id;
    id = 1;
    sort_by_id = function(a, b) {
      return a.id - b.id;
    };
    Batch = (function() {
      function Batch(options1) {
        this.options = options1;
        this.batch = [];
        this.promises = [];
        if (this.options == null) {
          this.options = {};
        }
      }

      Batch.prototype.call = function(method, parameters, options) {
        this.batch.push(api.request_json(method, parameters));
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return _this.promises.push({
              resolve: resolve,
              reject: reject
            });
          };
        })(this)).cancellable();
      };

      Batch.prototype.end = function() {
        if (this.batch.is_empty()) {
          return Promise.resolve(true).cancellable();
        }
        log.info('┌─', '[…]');
        return this.post();
      };

      Batch.prototype.post = function() {
        return api.post_request(this.batch).cancellable().then((function(_this) {
          return function(batch_response) {
            var batch_error, error, error1, i, len, promise, request, response;
            if (!(batch_response instanceof Array)) {
              batch_response = [batch_response];
            }
            batch_response.sort(sort_by_id);
            batch_error = null;
            for (i = 0, len = batch_response.length; i < len; i++) {
              response = batch_response[i];
              request = _this.batch.shift();
              promise = _this.promises.shift();
              try {
                Batch.printer.request(request, _this.batch.is_empty());
                Batch.printer.response(response, _this.batch.is_empty());
                api.analyze_response(response);
                promise.resolve(response.result);
              } catch (error1) {
                error = error1;
                promise.reject(error);
                api.log_error(request, response);
                api.on_error(request, response);
                if (!batch_error) {
                  batch_error = error;
                }
              }
            }
            if (batch_error) {
              throw batch_error;
            }
            return batch_response;
          };
        })(this), (function(_this) {
          return function(error) {
            var i, len, promise, ref;
            ref = _this.promises;
            for (i = 0, len = ref.length; i < len; i++) {
              promise = ref[i];
              promise.reject(error);
            }
            if (Promises.is_navigating_away(error)) {
              throw error;
            }
          };
        })(this));
      };

      return Batch;

    })();
    Batch.printer = {
      request: function(request, last) {
        var preamble;
        preamble = (last ? '└' : '├') + '─';
        return log.info(preamble, request.method, request.params);
      },
      response: function(response, last) {
        var preamble;
        preamble = (last ? ' ' : '│') + '   ';
        if (response.error) {
          return log.info(preamble, '✕', response.error);
        } else {
          return log.info(preamble, '✓', response.result);
        }
      }
    };
    api = {
      error: {
        generic: custom_error('Api_error'),
        not_authenticated: custom_error('Not_authenticated'),
        device_is_booting_up: custom_error('Device is booting up')
      },
      is_api_error: function(error) {
        var key, ref, value;
        ref = api.error;
        for (key in ref) {
          value = ref[key];
          if (error instanceof value) {
            return true;
          }
        }
      },
      begin: function() {
        return this.json_rpc_batch = new Batch();
      },
      end: function() {
        var json_rpc_batch;
        if (this.json_rpc_batch == null) {
          throw new Error('api.end() called without api.begin()');
        }
        json_rpc_batch = this.json_rpc_batch;
        this.json_rpc_batch = null;
        return json_rpc_batch.end();
      },
      request_json: function(method, params) {
        var request;
        return request = {
          id: id++,
          jsonrpc: "2.0",
          method: method,
          params: params || {}
        };
      },
      call: function(method, params, options) {
        options = options || {};
        if (this.json_rpc_batch) {
          return this.json_rpc_batch.call(method, params, options);
        }
        return this.request(this.request_json(method, params), options);
      },
      log_error: function(request, response) {
        if (response.error.code === 401) {
          return log.info('Not authenticated');
        }
        return log.error('API error in request', request, 'response', response);
      },
      request: function(request, options) {
        if (!options.minor) {
          api.printer.request(request);
        }
        return api.post(request, options);
      },
      post_request: function(request) {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            return $http.post('/api', angular.toJson(request)).then(function(response) {
              return resolve(response.data);
            }, function(response) {
              if (response.status === 434) {
                return reject(new api.error.device_is_booting_up(response.data.error));
              }
              return reject(new Error(response));
            });
          };
        })(this)).cancellable();
      },
      analyze_response: function(response) {
        var error;
        if (!response.error) {
          return response.result;
        }
        error = response.error.code === 401 ? new api.error.not_authenticated(response.error) : new api.error.generic(response.error);
        throw error;
      },
      post: function(request, options) {
        return api.post_request(request).then((function(_this) {
          return function(response) {
            var error, error1;
            if (!options.minor) {
              api.printer.response(response);
            }
            try {
              return api.analyze_response(response);
            } catch (error1) {
              error = error1;
              api.log_error(request, response);
              api.on_error(request, response);
              throw error;
            }
          };
        })(this));
      },
      on_error: function(request, response) {
        var code, message;
        code = response.error.code;
        message = response.error.message;
        if (code === 401) {
          return $rootScope.not_authenticated();
        } else if (code === 403 && request.method === 'auth.login') {

        } else if (code === Enums.Errors.api.set_interface_version) {

        } else {
          return Status.error(request.method + ': ' + message);
        }
      }
    };
    api.printer = {
      request: function(request) {
        return log.info(request.method, Object.not_empty(request.params) ? request.params : '');
      },
      response: function(response) {
        var preamble;
        preamble = ' ';
        if (response.error) {
          return log.info(preamble, '✕', response.error);
        } else {
          return log.info(preamble, '✓', response.result);
        }
      }
    };
    return api;
  }]);

}).call(this);


/*
  Сервис работы с браузером
 */

(function() {
  app.factory('Browser', ["translate", function(translate) {
    var Browser, isValid, names, tests, validationEnabled;
    validationEnabled = true;
    isValid = void 0;
    names = {
      ie: {
        value: 'Internet Explorer'
      },
      chrome: {
        value: 'Google Chrome'
      },
      firefox: {
        value: 'Firefox'
      },
      safari: {
        value: 'Safari'
      },
      opera: {
        value: 'Opera'
      }
    };
    tests = {
      inlineBlock: {
        disabled: true,
        versions: {
          ie: 8,
          chrome: 2,
          firefox: 3,
          safari: 3.1,
          opera: 9.2
        },
        run: function() {
          return Modernizr.testAllProps('display', 'inline-block');
        }
      },
      cssAnimations: {
        disabled: true,
        versions: {
          ie: 10,
          chrome: 4,
          firefox: 5,
          safari: 4,
          opera: 12
        },
        run: function() {
          return Modernizr.cssanimations;
        }
      },
      flexbox: {
        versions: {
          ie: 10,
          chrome: 21,
          firefox: 18,
          safari: 6.1,
          opera: '12.10'
        },
        run: function() {
          return Modernizr.flexbox;
        }
      },
      dragAndDrop: {
        disabled: true,
        versions: {
          ie: 9,
          chrome: 4,
          firefox: 3.5,
          safari: 6,
          opera: 12
        },
        run: function() {
          return Modernizr.draganddrop;
        }
      },
      accessKey: {
        disabled: true,
        versions: {
          ie: 1,
          chrome: 1,
          firefox: 1,
          safari: 1,
          opera: 1
        },
        run: function() {
          var element;
          element = document.createElement('div');
          return element.accessKey !== void 0;
        }
      }
    };
    Browser = {
      getMinimalVersions: function(tests) {
        var browserName, ref, test, testName, version, versions;
        versions = {};
        test = null;
        for (testName in tests) {
          test = tests[testName];
          if (test.disabled) {
            continue;
          }
          ref = test.versions;
          for (browserName in ref) {
            version = ref[browserName];
            if (!names[browserName]) {
              throw new Error(browserName + " is unknown browser");
            }
            !versions[browserName] && (versions[browserName] = 0);
            if (parseFloat(version) > parseFloat(versions[browserName])) {
              versions[browserName] = version;
            }
          }
        }
        return versions;
      },
      versionsToString: function(versions) {
        var name, text, version;
        text = '';
        for (name in versions) {
          version = versions[name];
          text += names[name].value + ": " + version + "+, ";
        }
        return text.substr(0, text.length - 2);
      },
      validate: function() {
        var test, testName;
        if (validationEnabled === false) {
          isValid = true;
          return isValid;
        }
        for (testName in tests) {
          test = tests[testName];
          if (test.disabled === false || test.run() === true) {
            continue;
          }
          isValid = false;
          return isValid;
        }
        isValid = true;
        return isValid;
      },
      getErrorMessage: function() {
        var versions;
        if (isValid === true) {
          return null;
        }
        if (isValid === void 0) {
          throw new Error("Validation wasn't started");
        }
        versions = this.getMinimalVersions(tests);
        return translate('error.old_browser', {
          browsers: this.versionsToString(versions)
        });
      },
      isValid: function(valid) {
        return isValid = valid !== void 0 ? valid : isValid;
      }
    };
    return Browser;
  }]);

}).call(this);

(function() {
  app.factory('Configuration', ["$rootScope", "$q", "api", "Model", "Model_service", "Port", "Rule", "Device_routing", "Routing_model_applier", "Version", "Status", "GUI", "Routing_model_errors", "Enums", "Device_settings", "translate", "Port_numeration", "FileDB", function($rootScope, $q, api, Model, Model_service, Port, Rule, Device_routing, Routing_model_applier, Version, Status, GUI, Routing_model_errors, Enums, Device_settings, translate, Port_numeration, FileDB) {
    var Configuration, exceptions, key, section;
    section = function(description) {
      var deserialize_after_load, migrate_before_deserialize, serialize_before_save;
      description.is_configuration_section = true;
      migrate_before_deserialize = function(description) {
        var deserialize;
        deserialize = description.deserialize;
        return description.deserialize = function(configuration) {
          if (!configuration.version || $rootScope.configuration.version.after(configuration.version)) {
            if (description.migrate) {
              description.migrate(configuration, Version(configuration.version));
            }
          }
          return deserialize.apply(this, arguments);
        };
      };
      serialize_before_save = function(description) {
        var save;
        if (description.save) {
          save = description.save;
          return description.save = function() {
            var data;
            data = description.serialize(Model);
            data.version = $rootScope.configuration.version.toString();
            return save(data);
          };
        }
      };
      deserialize_after_load = function(description) {
        var load;
        if (description.load) {
          load = description.load;
          return description.load = function() {
            return load.apply(this, arguments).then(function(result) {
              result = description.deserialize(result);
              if (description.validate != null) {
                description.validate(result);
              }
              return result;
            });
          };
        }
      };
      migrate_before_deserialize(description);
      serialize_before_save(description);
      deserialize_after_load(description);
      if (description.device) {
        serialize_before_save(description.device);
        deserialize_after_load(description.device);
      }
      description.load_into_model = function() {
        return description.load().then(function(configuration) {
          return replace_with(Model, configuration);
        });
      };
      return description;
    };
    Configuration = {
      Error: {
        Inconsistent_configuration: custom_error('Inconsistent_configuration')
      },
      Device: {
        reset_routing: function() {
          return api.call('softResetSwitch');
        },
        reset: function() {
          return api.call('resetSwitch').then(function(result) {
            return Status.error(translate('error.device.reset_failed'));
          })["catch"](function(error) {
            return GUI.wait_for_connection(16, translate('configuration.status.application_restarting'), {
              to: 'device'
            });
          });
        }
      },
      Ports: section({
        serialize: function(model) {
          var port, result;
          result = {
            ports: (function() {
              var j, len, ref, results;
              ref = model.ports;
              results = [];
              for (j = 0, len = ref.length; j < len; j++) {
                port = ref[j];
                results.push(Port.sanitize(port));
              }
              return results;
            })()
          };
          replace_with(result, Configuration.Ports.Joint_ports.serialize(model));
          return result;
        },
        deserialize: function(configuration) {
          var result;
          result = {
            ports: configuration.ports,
            joint_ports: configuration.joint_ports
          };
          replace_with(result, Configuration.Ports.Joint_ports.deserialize(configuration, result.ports));
          return result;
        },
        migrate: function(configuration, version) {
          var j, len, port, ref;
          if (version.before('1.2.0')) {
            ref = configuration.ports;
            for (j = 0, len = ref.length; j < len; j++) {
              port = ref[j];
              if (port.deep_inspection == null) {
                port.deep_inspection = false;
              }
            }
          }
          return Configuration.Ports.Joint_ports.migrate(configuration, version);
        },
        load_comments: function(configuration) {
          return FileDB.load('system/ports').then(function(result) {
            var j, len, port, ref;
            ref = configuration.ports;
            for (j = 0, len = ref.length; j < len; j++) {
              port = ref[j];
              port.comment = result.comments[port.id];
            }
            return configuration;
          });
        },
        set_comment: function(port, comment) {
          var data;
          data = [];
          data[port.id] = comment;
          return FileDB.update('system/ports', 'comments', data).then(function() {
            return port.comment = comment;
          });
        },
        load: function() {
          return Configuration.Ports.device.load().then(function(configuration) {
            return Configuration.Ports.load_comments(configuration);
          });
        },
        save: function(configuration) {
          var j, len, port, ref, results;
          ref = configuration.ports;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            port = ref[j];
            if (port.comment) {
              results.push(Configuration.Ports.set_comment(port));
            } else {
              results.push(void 0);
            }
          }
          return results;
        },
        reset: function() {
          var clear_comments;
          clear_comments = {
            'comments': {}
          };
          return FileDB.save('system/ports', clear_comments);
        },
        device: {
          deserialize: function(ports) {
            var configuration, port;
            configuration = {
              ports: (function() {
                var j, len, results;
                results = [];
                for (j = 0, len = ports.length; j < len; j++) {
                  port = ports[j];
                  results.push({
                    id: port.id
                  });
                }
                return results;
              })()
            };
            Configuration.Ports.device.refresh(ports, configuration);
            replace_with(configuration, Configuration.Ports.Joint_ports.device.deserialize(configuration));
            return configuration;
          },
          refresh: function(ports, model) {
            var converter, field, fields, j, len, port, port_data, results;
            results = [];
            for (j = 0, len = ports.length; j < len; j++) {
              port_data = ports[j];
              port = model.ports[port_data.id - 1];
              fields = {
                enabled: function(x) {
                  if (x === 1) {
                    return true;
                  } else {
                    return false;
                  }
                },
                eth_mode: function(x) {
                  switch (x) {
                    case Enums.ethernet_port_modes['1000BASE_X']:
                      return x;
                    case Enums.ethernet_port_modes['10GBASE_CR']:
                      return x;
                    case Enums.ethernet_port_modes['40GBASE_SR4']:
                      return x;
                    case Enums.ethernet_port_modes['DISABLED']:
                      return x;
                    default:
                      console.error('Unknown port mode', x);
                      return x;
                  }
                },
                parser_level: function(x) {
                  return x;
                },
                mac_learning: function(x) {
                  if (x === 1) {
                    return true;
                  } else {
                    return false;
                  }
                },
                deep_inspection: function(x) {
                  if (x === 1) {
                    return true;
                  } else {
                    return false;
                  }
                },
                force_up: function(x) {
                  if (x === 1) {
                    return true;
                  } else {
                    return false;
                  }
                },
                loopback: function(x) {
                  if (x === 1) {
                    return true;
                  } else {
                    return false;
                  }
                }
              };
              results.push((function() {
                var results1;
                results1 = [];
                for (field in fields) {
                  converter = fields[field];
                  results1.push(port[field] = converter(port_data[field]));
                }
                return results1;
              })());
            }
            return results;
          },
          load: function() {
            return api.call("getSwitchInfo").then(function(result) {
              return result.Ports;
            });
          }
        },
        Joint_ports: {
          serialize: function(model) {
            var j, joint_port, joint_ports, len, port, result;
            joint_ports = angular.copy(model.joint_ports);
            for (j = 0, len = joint_ports.length; j < len; j++) {
              joint_port = joint_ports[j];
              joint_port.ports = (function() {
                var k, len1, ref, results;
                ref = joint_port.ports;
                results = [];
                for (k = 0, len1 = ref.length; k < len1; k++) {
                  port = ref[k];
                  results.push(port.id);
                }
                return results;
              })();
            }
            return result = {
              joint_ports: joint_ports
            };
          },
          deserialize: function(configuration, ports) {
            var j, joint_port, joint_ports, len, port, port_by_id, result;
            port_by_id = function(id) {
              var j, len, port;
              for (j = 0, len = ports.length; j < len; j++) {
                port = ports[j];
                if (port.id === id) {
                  return port;
                }
              }
            };
            joint_ports = angular.copy(configuration.joint_ports);
            for (j = 0, len = joint_ports.length; j < len; j++) {
              joint_port = joint_ports[j];
              joint_port.ports = (function() {
                var k, len1, ref, results;
                ref = joint_port.ports;
                results = [];
                for (k = 0, len1 = ref.length; k < len1; k++) {
                  port = ref[k];
                  results.push(port_by_id(port));
                }
                return results;
              })();
            }
            return result = {
              joint_ports: joint_ports
            };
          },
          migrate: function(configuration, version) {
            var i, j, ref, results;
            if (version.before('1.4.0')) {
              if (!configuration.joint_ports) {
                configuration.joint_ports = [];
                if (Port.has_joint_ports()) {
                  results = [];
                  for (i = j = 1, ref = Port.joint_port_count(); 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                    results.push(configuration.joint_ports.push({
                      id: i,
                      mode: '4x10G'
                    }));
                  }
                  return results;
                }
              }
            }
          },
          device: {
            deserialize: function(model) {
              var configuration, i, id, index, j, joined_ports, joint_port_count, joint_ports, portsId, ref;
              portsId = [];
              joined_ports = function(id) {
                var j, ref, results, shift;
                shift = Port_numeration.joined_port_id_to_port_id(id, 0);
                return (function() {
                  results = [];
                  for (var j = 1, ref = Device_settings.ports_in_joint_port; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
                  return results;
                }).apply(this).map(function(i) {
                  return model.ports[shift + i - 1];
                }).map(function(port) {
                  return port.id;
                });
              };
              joint_port_count = Math.ceil((model.ports.length - Device_settings.generic_port_count) * 1.0 / Device_settings.ports_in_joint_port);
              if (joint_port_count < 0) {
                joint_port_count = 0;
              }
              for (i = j = 1, ref = joint_port_count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                index = (function() {
                  switch (Device_settings.get_platform()) {
                    case Device_settings.devices.iz1:
                      return i;
                    case Device_settings.devices.iz1f:
                    case Device_settings.devices.unknown:
                      if (i % 2 === 1) {
                        return i + 1;
                      } else {
                        return i - 1;
                      }
                  }
                })();
                portsId.push(index);
              }
              joint_ports = joint_port_count === 0 ? [] : (function() {
                var k, len, results;
                results = [];
                for (k = 0, len = portsId.length; k < len; k++) {
                  id = portsId[k];
                  results.push({
                    id: id,
                    ports: joined_ports(id)
                  });
                }
                return results;
              })();
              configuration = {
                joint_ports: joint_ports
              };
              Configuration.Ports.Joint_ports.device.refresh(configuration);
              return configuration;
            },
            refresh: function(model) {
              var j, joint_port, len, ref, results;
              ref = model.joint_ports;
              results = [];
              for (j = 0, len = ref.length; j < len; j++) {
                joint_port = ref[j];
                results.push(joint_port.mode = joint_port.ports[0].eth_mode === Enums.ethernet_port_modes['40GBASE_SR4'] || joint_port.ports[0].eth_mode === Enums.ethernet_port_modes.XLAUI ? '40G' : '4x10G');
              }
              return results;
            }
          }
        }
      }),
      Routing: section({
        serialize: function(model) {
          var result;
          return result = {
            rules: model.rules.map(function(rule) {
              return Rule.serialize(rule);
            })
          };
        },
        deserialize: function(configuration) {
          var result;
          return result = {
            rules: configuration.rules.map(function(rule) {
              return Rule.deserialize(rule);
            })
          };
        },
        migrate: function(configuration, version) {
          var j, len, ref, results, rule;
          if (version.before('1.1.0')) {
            ref = configuration.rules;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              rule = ref[j];
              if (rule.action === 'balance' && rule.outputs.length > 1 && (rule.hashing_profile == null)) {
                results.push(rule.hashing_profile = 0);
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        },
        save: function(configuration) {
          return FileDB.save('system/routing', configuration);
        },
        load: function() {
          return FileDB.load('system/routing');
        },
        reset: function() {
          return FileDB.save('system/routing', {
            "rules": [],
            "version": "1.6.6"
          });
        },
        validate: function(configuration) {
          var filter, j, len, ref, results, rule;
          if ($rootScope.configuration.version.starting_from('1.3.0')) {
            ref = configuration.rules;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              rule = ref[j];
              results.push((function() {
                var k, len1, ref1, results1;
                ref1 = rule.filters;
                results1 = [];
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                  filter = ref1[k];
                  if ($rootScope.unmasked_acl_filter_types.has(filter.type) && Device_routing.Filter.has_non_default_mask(filter)) {
                    throw new Error(translate('configuration.error.filter_should_not_have_a_mask', {
                      filter: translate("ACL.rule.filter.type." + filter.type)
                    }));
                  } else {
                    results1.push(void 0);
                  }
                }
                return results1;
              })());
            }
            return results;
          }
        }
      }),
      Users: {
        change_password: function(password) {
          return FileDB.load('system/users').then(function(result) {
            result.users[0].password = password;
            return FileDB.save('system/users', result);
          });
        }
      },
      Network: section({
        serialize: function(model) {
          var result;
          return result = {
            network: model.network
          };
        },
        deserialize: function(configuration) {
          var result;
          return result = {
            network: configuration.network
          };
        },
        migrate: function(configuration, version) {},
        load: function() {
          return Configuration.Network.device.load();
        },
        save: function(configuration) {
          return Configuration.Network.device.save(configuration);
        },
        device: {
          serialize: function(model) {
            var network;
            network = angular.copy(model.network);
            network.dhcp = network.dhcp === true ? '1' : '0';
            return network;
          },
          deserialize: function(result) {
            return {
              network: {
                dhcp: result.dhcp === '1' ? true : false,
                ip: result.ip,
                mask: result.mask,
                gateway: result.gateway,
                dns1: result.dns1 || '',
                dns2: result.dns2 || ''
              }
            };
          },
          save: function(configuration) {
            return api.call('setNetConfig', configuration);
          },
          load: function() {
            return api.call('getNetConfig');
          }
        }
      }),
      serialize: function(configuration) {
        var name, serialized_configuration;
        serialized_configuration = {};
        for (name in Configuration) {
          section = Configuration[name];
          if (section.is_configuration_section) {
            replace_with(serialized_configuration, section.serialize(configuration));
          }
        }
        serialized_configuration.version = $rootScope.configuration.version.toString();
        return serialized_configuration;
      },
      load: function() {
        var configuration, name, sections;
        configuration = {};
        sections = [];
        for (name in Configuration) {
          section = Configuration[name];
          if (section.is_configuration_section && section.load) {
            sections.push(section);
          }
        }
        return Promise.each(sections, function(section) {
          return section.load().then(function(configuration_portion) {
            return replace_with(configuration, configuration_portion);
          });
        }).then(function() {
          return configuration;
        });
      },
      read_local_routing_configuration: function() {
        $rootScope.routing = {};
        return Configuration.Routing.load().then(function(result) {
          return $rootScope.routing = result;
        });
      },
      validate: function(configuration) {
        if (!configuration.ports) {
          throw new Error(translate('configuration.error.invalid'));
        }
        if (!configuration.rules) {
          throw new Error(translate('configuration.error.invalid'));
        }
      },
      migrate: function(configuration) {
        var name, version;
        version = Version(configuration.version);
        for (name in Configuration) {
          section = Configuration[name];
          if (section.is_configuration_section && section.migrate) {
            section.migrate(configuration, version);
          }
        }
        configuration.version = $rootScope.configuration.version.toString();
        return configuration;
      },
      test_compliance: function(configuration) {
        var j, len, port, ref, results;
        if (Port.count !== configuration.ports.length) {
          throw new Configuration.Error.Inconsistent_configuration();
        }
        ref = configuration.ports;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          port = ref[j];
          if (!Port.by_id(port.id)) {
            throw new Configuration.Error.Inconsistent_configuration();
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      apply: function(configuration) {
        return Promise.resolve(true).then(function() {
          Configuration.migrate(configuration);
          Configuration.test_compliance(configuration);
          return configuration = angular.copy(configuration);
        }).then(function() {
          $rootScope.applying_configuration = true;
          return Model_service.do_with_port_lock(function() {
            var name;
            replace_with(Model, Configuration.Ports.deserialize(configuration));
            for (name in Configuration) {
              section = Configuration[name];
              if (!['Ports'].has(name)) {
                if (section.is_configuration_section) {
                  replace_with(Model, section.deserialize(configuration));
                }
              }
            }
            return Configuration.Device.reset_routing().then(function() {
              var sections;
              sections = [];
              for (name in Configuration) {
                section = Configuration[name];
                if (section.is_configuration_section && section.save) {
                  sections.push(section);
                }
              }
              return Promise.each(sections, (function(section) {
                return section.save();
              }));
            }).then(function() {
              return Routing_model_applier.set_up_routing(Model.rules, Model.ports, Model.joint_ports);
            });
          });
        })["finally"](function() {
          return $rootScope.applying_configuration = false;
        });
      },
      reset: function() {
        var deferred, name, resets;
        if (!confirm(translate('configuration.confirm_reset'))) {
          return;
        }
        resets = [];
        for (name in Configuration) {
          section = Configuration[name];
          if (section.is_configuration_section) {
            if (section.reset != null) {
              resets.push(section.reset.bind(section));
            }
          }
        }
        deferred = $q.defer();
        deferred.resolve();
        deferred.promise;
        return resets.reduce((function(reduced, reset) {
          return reduced.then(reset);
        }), deferred.promise).then(function() {
          return Configuration.Device.reset();
        });
      }
    };
    exceptions = ['Error', 'Device', 'Users'];
    for (key in Configuration) {
      section = Configuration[key];
      if (typeof section === 'object' && !section.is_configuration_section && exceptions.has_no(key)) {
        throw new Error("Configuration." + key + " is not a section. If it's intended add it to exceptions");
      }
    }
    return Configuration;
  }]);

}).call(this);

(function() {
  app.factory('Configurations', ["$rootScope", "$http", "$timeout", "api", "log", "Status", "Model", "Configuration", "Device", "Device_GUI", "translate", "Routing_model_errors", function($rootScope, $http, $timeout, api, log, Status, Model, Configuration, Device, Device_GUI, translate, Routing_model_errors) {
    var Configurations;
    return Configurations = {
      save: function(name) {
        return Configuration.load().then(function(configuration) {
          configuration = Configuration.serialize(configuration);
          return api.call("filedb.save", {
            file: name + '.conf',
            data: configuration
          });
        }).then(function() {
          log.info(translate('configuration.status.saved'), configuration);
          Status.info(translate('configuration.status.saved'));
          return Configurations.collapse_menu();
        });
      },
      load: function(name) {
        if (!name) {
          return;
        }
        return api.call("filedb.load", {
          file: name + '.conf'
        }).then(function(configuration) {
          Status.busy(translate('configuration.status.applying'));
          return Configuration.apply(configuration);
        }).then(function() {
          Status.info(translate('configuration.status.loaded'));
          return Configurations.collapse_menu();
        });
      },
      download: function(name) {
        Configurations.collapse_menu();
        return $timeout(function() {
          return Configuration.load().then(function(configuration) {
            configuration = Configuration.serialize(configuration);
            return download_file(configuration, 'configuration.conf');
          })["catch"](function(error) {
            console.error(error.stack || error);
            return Status.error(error.message);
          });
        }, 0);
      },
      upload: function(file) {
        var reader;
        Configurations.collapse_menu();
        Status.busy();
        reader = new FileReader();
        reader.onload = function(event) {
          var configuration, error, error1;
          configuration = null;
          try {
            configuration = JSON.parse(event.target.result);
            Configuration.validate(configuration);
          } catch (error1) {
            error = error1;
            log.error(error);
            return Status.error(translate('configuration.error.invalid'));
          }
          Status.busy(translate('configuration.status.applying'));
          return Configuration.apply(configuration).then(function(rules) {
            Status.info(translate('configuration.status.loaded'));
            return $rootScope.$broadcast('configuration_loaded', rules);
          })["catch"](function(error) {
            console.error(error);
            if (error.stack) {
              console.error(error.stack);
            }
            if (error.name === 'Inconsistent_configuration') {
              return Status.error(translate('configuration.error.inconsistent'));
            }
            if (api.is_api_error(error)) {
              return;
            }
            if (Routing_model_errors.is(error)) {
              return Status.error(Routing_model_errors.message(error));
            }
            return Status.error(translate('configuration.error.configuration_upload_failed'));
          });
        };
        return reader.readAsText(file);
      },
      fetch_list: function() {
        return api.call("filedb.list", {}).then(function(list) {
          return $rootScope.configurations = list.map(function(item) {
            return item.substring(0, item.lastIndexOf('.conf'));
          });
        });
      },
      "delete": function(name) {
        if (!confirm(translate('configuration.confirm_deletion', {
          name: name
        }))) {
          return;
        }
        return api.call("filedb.delete", {
          file: name + '.conf'
        }).then(function(result) {
          Status.info(translate('configuration.status.deleted'));
          return Configurations.collapse_menu();
        });
      },
      collapse_menu: function() {
        return $rootScope.close_configuration_menu_dropdown = {};
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Device_GUI', ["$rootScope", "api", "Port", "Model", "Model_service", "Status", "Device_settings", "Login", "translate", "Port_view", "Configuration", "Port_numeration", function($rootScope, api, Port, Model, Model_service, Status, Device_settings, Login, translate, Port_view, Configuration, Port_numeration) {
    var Device, default_status_place, device, device_margin_top, fixed_head, fixed_head_height, menu, menu_height, navigating_from_page_confirmation, offsetLeft, ports_container;
    ports_container = document.querySelector('.device .ports');
    menu = document.querySelector('.menu');
    device = document.querySelector('.device');
    default_status_place = document.querySelector('.default-status-place');
    fixed_head = document.querySelector('.fixed-head');
    navigating_from_page_confirmation = document.querySelector('.navigating-from-page-confirmation');
    fixed_head_height = fixed_head.offsetHeight;
    device_margin_top = parseInt(window.getComputedStyle(device).marginTop);
    menu_height = menu.offsetHeight + parseInt(window.getComputedStyle(menu).marginTop) + parseInt(window.getComputedStyle(menu).marginBottom);
    offsetLeft = function(element) {
      var add, offset_left;
      offset_left = 0;
      add = function() {
        if (element.offsetLeft != null) {
          return offset_left += element.offsetLeft;
        }
      };
      add();
      while (element = element.offsetParent) {
        add();
      }
      return offset_left;
    };
    Device = {
      port_count: function() {
        if (!Model.ports) {
          return Device_settings.generic_port_count;
        }
        return Math.min(Model.ports.length, Device_settings.generic_port_count);
      },
      group_count: function() {
        return Math.ceil((1.0 * this.port_count()) / this.port_group_size);
      },
      port_group_size: 12,
      port_group_spacing: 10,
      joint_port_group_spacing: 7,
      joint_port_vertical_spacing: 4,
      port_width: 39,
      hole_height: 20,
      inside_joint_port_width: 23,
      inside_joint_port_height: 16,
      inside_joint_port_number_width: 20,
      port_number_height: 25,
      port_height: 45,
      inter_port_spacing: 1,
      port_group_top_offset: 6,
      joint_port_number_height: 16,
      selection: {
        start: false,
        end: false,
        box: {
          element: document.querySelector('#selection'),
          hide: function() {
            return Device.selection.box.element.style.display = 'none';
          },
          show: function() {
            return Device.selection.box.element.style.display = 'block';
          },
          size: function(size) {
            var key, results, value;
            if (size.width == null) {
              size.width = 0;
            }
            if (size.height == null) {
              size.height = 0;
            }
            results = [];
            for (key in size) {
              value = size[key];
              results.push(Device.selection.box.element.style[key] = value + 'px');
            }
            return results;
          }
        }
      },
      reshift: function() {
        return this.shift = {
          x: offsetLeft(ports_container),
          y: menu_height + device_margin_top
        };
      },
      initialize: function() {
        jQuery(Device.selection.box.element).on('mouseup', function() {
          return jQuery(document).trigger('click');
        });
        this.reshift();
        window.onresize = this.reshift.bind(this);
        this.refresh_port_coordinates();
        return Device.ready = true;
      },
      select_port: function(port, multiple_selection) {
        if (multiple_selection) {
          return Port_view.toggle_selection(port);
        } else {
          return Port_view.select(port);
        }
      },
      refresh_port_coordinates: function() {
        return this.port_coordinates = this.generate_port_coordinates();
      },
      generate_port_coordinates: function() {
        var bottom_row_shift, calculate_joint_port_coordinates, coordinates, device_platform, firstRow, group, horizontal_shift, i, index, inside_joint_row_shift, k, l, port_shift, ref, ref1, secondRow, set_coordinates, set_joint_port_coordinates, top_row_shift, x_y_width_height, y;
        coordinates = [[-1, -1, -1, -1]];
        x_y_width_height = function(x, y, width, height) {
          return [x, y, x + width - 1, y + height - 1];
        };
        y = this.port_group_top_offset;
        port_shift = 0;
        horizontal_shift = 0;
        top_row_shift = this.port_number_height;
        bottom_row_shift = this.port_number_height + this.hole_height + this.inter_port_spacing;
        set_coordinates = function(index, x_y_width_height) {
          if (index <= Port.count) {
            return coordinates[index] = x_y_width_height;
          }
        };
        group = 0;
        index = 0;
        firstRow = 0;
        secondRow = 0;
        device_platform = Device_settings.get_platform();
        while (group < this.group_count()) {
          for (i = k = 1, ref = this.port_group_size / 2; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
            index = group * this.port_group_size + i * 2;
            switch (device_platform) {
              case Device_settings.devices.iz1:
                firstRow = index - 1;
                secondRow = index;
                break;
              case Device_settings.devices.iz1f:
              case Device_settings.devices.unknown:
                firstRow = index;
                secondRow = index - 1;
            }
            set_coordinates(firstRow, x_y_width_height(horizontal_shift, y + top_row_shift, this.port_width, this.hole_height));
            set_coordinates(secondRow, x_y_width_height(horizontal_shift, y + bottom_row_shift, this.port_width, this.hole_height));
            horizontal_shift += this.port_width + this.inter_port_spacing;
          }
          horizontal_shift -= this.inter_port_spacing;
          horizontal_shift += this.port_group_spacing;
          port_shift += this.port_group_size;
          group++;
        }
        y = this.joint_port_number_height;
        top_row_shift = 0;
        bottom_row_shift = this.inside_joint_port_height + this.inter_port_spacing + this.inside_joint_port_height + this.joint_port_vertical_spacing;
        inside_joint_row_shift = this.inside_joint_port_height + this.inter_port_spacing;
        if (Port.has_joint_ports()) {
          calculate_joint_port_coordinates = (function(_this) {
            return function(id) {
              var delta_x, extra_horizontal_shift, j, l, m, ref1, ref2, results, results1, shiftStatement, vertical_shift;
              port_shift = Port_numeration.joined_port_id_to_port_id(id, 0);
              shiftStatement = (function() {
                switch (Device_settings.get_platform()) {
                  case Device_settings.devices.iz1:
                    return id % 2 === 1;
                  case Device_settings.devices.iz1f:
                  case Device_settings.devices.unknown:
                    return id % 2 === 0;
                }
              })();
              vertical_shift = shiftStatement ? top_row_shift : bottom_row_shift;
              if (Model_service.get_joint_port_with_offset(Model, id).mode === '40G') {
                coordinates[port_shift + 1] = x_y_width_height(horizontal_shift + _this.inside_joint_port_number_width, y + vertical_shift, _this.inside_joint_port_width * Device_settings.ports_in_joint_port / 2 + _this.inter_port_spacing, _this.inside_joint_port_height * Device_settings.ports_in_joint_port / 2 + _this.inter_port_spacing);
                results = [];
                for (j = l = 2, ref1 = Device_settings.ports_in_joint_port; 2 <= ref1 ? l <= ref1 : l >= ref1; j = 2 <= ref1 ? ++l : --l) {
                  results.push(coordinates[port_shift + j] = [-1, -1, -1, -1]);
                }
                return results;
              } else {
                extra_horizontal_shift = 0;
                results1 = [];
                for (j = m = 1, ref2 = Device_settings.ports_in_joint_port / 2; 1 <= ref2 ? m <= ref2 : m >= ref2; j = 1 <= ref2 ? ++m : --m) {
                  delta_x = j === 1 ? _this.inside_joint_port_number_width : 0;
                  coordinates[port_shift + j] = x_y_width_height(horizontal_shift + extra_horizontal_shift + delta_x, y + vertical_shift, _this.inside_joint_port_width, _this.inside_joint_port_height);
                  coordinates[port_shift + j + Device_settings.ports_in_joint_port / 2] = x_y_width_height(horizontal_shift + extra_horizontal_shift + delta_x, y + vertical_shift + inside_joint_row_shift, _this.inside_joint_port_width, _this.inside_joint_port_height);
                  results1.push(extra_horizontal_shift += _this.inside_joint_port_number_width + _this.inside_joint_port_width + _this.inter_port_spacing);
                }
                return results1;
              }
            };
          })(this);
          set_joint_port_coordinates = function(i, x, y) {
            index = (function() {
              switch (Device_settings.get_platform()) {
                case Device_settings.devices.iz1:
                  return x;
                case Device_settings.devices.iz1f:
                case Device_settings.devices.unknown:
                  return y;
              }
            })();
            return calculate_joint_port_coordinates(i * 2 + 1 + index);
          };
          for (i = l = 0, ref1 = Port.joint_port_count() / 2 - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
            set_joint_port_coordinates(i, 0, 1);
            set_joint_port_coordinates(i, 1, 0);
            horizontal_shift += (Device_settings.ports_in_joint_port / 2) * (this.inside_joint_port_number_width + this.inside_joint_port_width + this.inter_port_spacing);
            horizontal_shift -= this.inter_port_spacing;
            horizontal_shift += this.joint_port_group_spacing;
          }
        }
        return coordinates;
      },
      intersects: function(a, b) {
        if (a[0] > b[2] || b[0] > a[2]) {
          return false;
        }
        if (a[1] > b[3] || b[1] > a[3]) {
          return false;
        }
        return true;
      },
      detect_port_by_hole: function(x, y) {
        var id;
        this.reshift();
        x -= this.shift.x;
        y -= this.shift.y;
        id = 1;
        while (id < this.port_coordinates.length) {
          if (this.intersects(this.port_coordinates[id], [x, y, x, y])) {
            return Port.by_id(id);
          }
          id++;
        }
      },
      detect_port: function(event) {
        var $element, element;
        element = event.target;
        while (jQuery.contains(ports_container, element)) {
          $element = jQuery(element);
          if ($element.hasClass('port')) {
            return Port.by_id(parseInt($element.attr('data-port-id')));
          }
          element = element.parentNode;
        }
      },
      test_clicked_element: function(element) {
        if (jQuery.contains(menu, element)) {
          return false;
        }
        if (jQuery.contains(default_status_place, element)) {
          return false;
        }
        if (jQuery.contains(navigating_from_page_confirmation, element)) {
          return false;
        }
      },
      x: function(event) {
        if (event.clientX != null) {
          return event.clientX;
        } else {
          return event.x;
        }
      },
      y: function(event) {
        if (event.clientY != null) {
          return event.clientY;
        } else {
          return event.y;
        }
      },
      xy: function(event) {
        return [this.x(event), this.y(event)];
      },
      start_selection: function(event) {
        var is_ctrl_click, port, ref, start_selection, toggle_port_selection, x, y;
        if (event.which !== 1) {
          return;
        }
        if (!Device.ready) {
          return;
        }
        if (!Login.is_authenticated) {
          return;
        }
        if (this.test_clicked_element(event.target) === false) {
          return;
        }
        ref = this.xy(event), x = ref[0], y = ref[1];
        start_selection = (function(_this) {
          return function() {
            event.preventDefault();
            jQuery(fixed_head).addClass('selecting');
            _this.selection.start = {
              x: x,
              y: y
            };
            _this.selection.box.size({
              left: x,
              top: y
            });
            _this.selection.box.show();
            return true;
            return Port_view.deselect_all();
          };
        })(this);
        is_ctrl_click = function() {
          return event.ctrlKey;
        };
        toggle_port_selection = function(port) {
          this.multiple_ports_selected = Port_view.selected_count() > 1;
          return Port_view.toggle_selection(port);
        };
        port = this.detect_port(event);
        if (port) {
          if (is_ctrl_click()) {
            return toggle_port_selection(port);
          }
          if (Port_view.is_selected(port)) {
            return;
          }
        }
        port = this.detect_port_by_hole(x, y);
        if (!port) {
          if (is_ctrl_click()) {
            return;
          }
          return start_selection();
        }
        if (is_ctrl_click()) {
          return toggle_port_selection(port);
        }
        if (Port_view.is_selected(port)) {
          return;
        }
        Port_view.deselect_all();
        this.select_port(port, false);
        return this.multiple_ports_selected = false;
      },
      mouse_moved: function(event) {
        var height, size, width, x, y;
        if (!Device.ready) {
          return;
        }
        if (!this.selection.start) {
          return;
        }
        x = this.x(event);
        y = this.y(event);
        if (y > fixed_head_height) {
          y = fixed_head_height;
        }
        width = x - this.selection.start.x;
        height = y - this.selection.start.y;
        size = {
          left: width < 0 ? x : this.selection.start.x,
          top: height < 0 ? y : this.selection.start.y,
          width: Math.abs(width),
          height: Math.abs(height)
        };
        return this.selection.box.size(size);
      },
      end_selection: function(event) {
        var end, id, k, len, port, ref, selected, start, tmp, x, y;
        if (event.which !== 1) {
          return;
        }
        if (!Device.ready) {
          return;
        }
        ref = this.xy(event), x = ref[0], y = ref[1];
        if (!this.selection.start) {
          return;
        }
        jQuery(fixed_head).removeClass('selecting');
        this.selection.end = {
          x: x,
          y: y
        };
        start = this.selection.start;
        end = this.selection.end;
        this.reshift();
        start.x -= this.shift.x;
        start.y -= this.shift.y;
        end.x -= this.shift.x;
        end.y -= this.shift.y;
        if (start.x > end.x) {
          tmp = start.x;
          start.x = end.x;
          end.x = tmp;
        }
        if (start.y > end.y) {
          tmp = start.y;
          start.y = end.y;
          end.y = tmp;
        }
        selected = [];
        id = 1;
        while (id < this.port_coordinates.length) {
          if (this.intersects(this.port_coordinates[id], [start.x, start.y, end.x, end.y])) {
            selected.push(Port.by_id(id));
          }
          id++;
        }
        Port_view.deselect_all();
        for (k = 0, len = selected.length; k < len; k++) {
          port = selected[k];
          Port_view.select(port, false);
        }
        this.multiple_ports_selected = selected.length > 1;
        this.selection.start = false;
        this.selection.end = false;
        this.selection.box.hide();
        return this.selection.box.size({
          width: 0,
          height: 0
        });
      }
    };
    Device.joint_port_width = function() {
      return (Device_settings.ports_in_joint_port / 2) * (Device.inside_joint_port_width + Device.inside_joint_port_number_width + Device.inter_port_spacing) - Device.inter_port_spacing;
    };
    return Device;
  }]);

}).call(this);

(function() {
  app.factory('Device_settings', ["$rootScope", function($rootScope) {
    var Device_settings;
    return Device_settings = {
      devices: {
        iz1: {
          name: 'IZ1'
        },
        iz1f: {
          name: 'IZ1F'
        },
        unknown: {
          name: 'unknown'
        }
      },
      is_unknown_platform: function() {
        return !Device_settings.is_iz1() && !Device_settings.is_iz1f();
      },
      is_iz1: function() {
        return $rootScope.device_platform === Device_settings.devices.iz1.name;
      },
      is_iz1f: function() {
        return $rootScope.device_platform === Device_settings.devices.iz1f.name;
      },
      get_platform: function() {
        var name, platform, ref;
        ref = Device_settings.devices;
        for (name in ref) {
          platform = ref[name];
          if ($rootScope.device_platform === platform.name) {
            return platform;
          }
        }
        return this.devices.unknown;
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Device', ["$rootScope", "$q", "api", "Model", "Model_service", "Port", "Status", "GUI", "Device_GUI", "Port_numeration", "Device_settings", "Device_routing", "Routing_model_applier", "Configuration", "translate", "Login", function($rootScope, $q, api, Model, Model_service, Port, Status, GUI, Device_GUI, Port_numeration, Device_settings, Device_routing, Routing_model_applier, Configuration, translate, Login) {
    var Device, get_sfp_data;
    get_sfp_data = function(data) {
      var joint_port_id, ref, sfp_data, sub_port_id;
      sfp_data = data.sfp_data;
      if (!Port.is_generic(data.id)) {
        ref = Port_numeration.joined_port_id_from_port_id(data.id), joint_port_id = ref[0], sub_port_id = ref[1];
        sfp_data.rx_power = sfp_data['rx' + sub_port_id + '_power'];
      }
      return sfp_data;
    };
    return Device = {
      port_stats_fields: ['state', 'rx_octets', 'tx_octets', 'rx_crc_error_octets', 'tx_drop_octets'],
      isBooting: true,
      initialize: function() {
        return api.call('getSwitchInfo').then(function(result) {
          var ports_model;
          $rootScope.serial = result.Serial;
          $rootScope.device_version = result.version;
          $rootScope.device_platform = result.Platform;
          Port.count = result.PortsCount;
          ports_model = Configuration.Ports.device.deserialize(result.Ports);
          replace_with(Model, Configuration.Ports.deserialize(ports_model));
          Device.initialize_port_groups();
          Device.refresh_port_stats_from_switch_info(result);
          Routing_model_applier.set_interface_version(api)["catch"](function(e) {
            return console.error(e);
          });
          return result;
        });
      },
      initialize_port_groups: function() {
        var group, group_num, i, len, port, ref, results;
        group_num = -1;
        group = null;
        ref = Model.ports;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          if (!(port.id <= Device_settings.generic_port_count)) {
            continue;
          }
          if (port.id % Device_GUI.port_group_size === 1) {
            group_num++;
            group = [];
            $rootScope.groups[group_num] = group;
          }
          results.push(group.push(Model_service.get_port_with_offset(Model, port.id)));
        }
        return results;
      },
      refresh_ports_from_switch_info: function(result) {
        if (!Model_service.is_ports_lock_empty()) {
          return;
        }
        Configuration.Ports.device.refresh(result.Ports, Model);
        return Configuration.Ports.Joint_ports.device.refresh(Model);
      },
      refresh_port_stats_from_switch_info: function(result) {
        var delta_rx, delta_t, delta_tx, field, i, len, port, port_data, ref, results;
        ref = result.Ports;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          port_data = ref[i];
          if (!$rootScope.stats.ports[port_data.id]) {
            results.push($rootScope.stats.ports[port_data.id] = {});
          } else {
            port = $rootScope.stats.ports[port_data.id];
            delta_t = (result.timestamp - port.timestamp) / 1000;
            delta_rx = port_data.rx_octets - port.rx_octets;
            delta_tx = port_data.tx_octets - port.tx_octets;
            port.rx_speed = port_data.state && delta_rx > 0 ? delta_rx / delta_t : 0;
            port.tx_speed = port_data.state && delta_tx > 0 ? delta_tx / delta_t : 0;
            port.active = port.rx_speed || port.tx_speed ? true : false;
            port.sfp_present = port_data.sfp_present === 1 ? true : false;
            port.sfp_data = get_sfp_data(port_data);
            port.timestamp = result.timestamp;
            results.push((function() {
              var j, len1, ref1, results1;
              ref1 = Device.port_stats_fields;
              results1 = [];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                field = ref1[j];
                if (port_data[field] != null) {
                  results1.push(port[field] = port_data[field]);
                }
              }
              return results1;
            })());
          }
        }
        return results;
      },
      refresh_ports: function() {
        var deferred;
        if ($rootScope.offline) {
          deferred = $q.defer();
          deferred.resolve();
          return deferred.promise;
        }
        return api.call("getSwitchInfo", {}, {
          minor: true
        }).then(function(result) {
          Device.refresh_ports_from_switch_info(result);
          Device.refresh_port_stats_from_switch_info(result);
          if (this.isBooting) {
            return $rootScope.safeApply(function() {
              this.isBooting = false;
              $rootScope.device_is_booting = false;
              return Login.authenticate();
            });
          }
        })["catch"](api.error.device_is_booting_up, function() {
          if (!this.isBooting) {
            return $rootScope.safeApply(function() {
              this.isBooting = true;
              return $rootScope.device_is_booting = true;
            });
          }
        });
      },
      set_up_routing: function(rules, ports, joint_ports) {
        return Model_service.do_with_port_lock(function() {
          return Routing_model_applier.set_up_routing(rules, ports, joint_ports);
        });
      },
      restart: function() {
        var rebooted;
        rebooted = function() {
          return GUI.wait_for_connection(60, translate('device.status.rebooting'), {
            to: 'device'
          });
        };
        return api.call('reboot')["finally"](rebooted);
      },
      load_configuration: function() {
        return api.call('getConfig');
      },
      load_rules: function() {
        return Device.load_configuration().then(function(result) {
          var i, index, method, ref;
          for (index = i = ref = result.length - 1; ref <= 0 ? i <= 0 : i >= 0; index = ref <= 0 ? ++i : --i) {
            method = result[index].method;
            if (method === 'setRulesList') {
              return result[index].params.rules;
            }
          }
          return {};
        });
      },
      save_configuration: function() {
        return Routing_model_applier.save_configuration(Model.rules, Model.ports, Model.joint_ports);
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Device_routing', ["$rootScope", "api", "Enums", "Utilities", "$sanitize", function($rootScope, api, Enums, Utilities, $sanitize) {
    var Device_routing;
    return Device_routing = {
      convert_to_device_rules: function(rules) {
        var filter, i, j, k, l, len, len1, len2, len3, m, name, port, property, ref, ref1, ref2, rule;
        rules = angular.copy(rules);
        for (j = 0, len = rules.length; j < len; j++) {
          rule = rules[j];
          rule.name = $sanitize(rule.name);
          ref = rule.inputs;
          for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
            port = ref[i];
            rule.inputs[i] = port.id;
          }
          ref1 = rule.outputs;
          for (i = l = 0, len2 = ref1.length; l < len2; i = ++l) {
            port = ref1[i];
            rule.outputs[i] = port.id;
          }
          rule.filters.sort(function(a, b) {
            return a.type > b.type;
          });
          for (name in rule) {
            property = rule[name];
            if (typeof property === 'boolean') {
              rule[name] = property << 0;
            }
          }
          ref2 = rule.filters;
          for (m = 0, len3 = ref2.length; m < len3; m++) {
            filter = ref2[m];
            Device_routing.Filter.convert_to_device(filter);
          }
        }
        return rules;
      },
      LBG: {
        Hash_profile: {
          by_id: function(id) {
            return $rootScope.hash_profiles.filter(function(profile) {
              return profile.id === id;
            })[0];
          },
          fetch: function() {
            return api.call('getDefaultHashProfile').then(function(result) {
              return Device_routing.LBG.Hash_profile.by_id(result.profile);
            });
          },
          fetch_all: function() {
            return api.call('getHashProfiles').then(function(result) {
              return $rootScope.hash_profiles = result.profiles;
            });
          }
        }
      },
      Filter: {
        ip_split_rule: /[,;\n\r\s]/,
        _get_by_type: function(type) {
          if (!Enums.ACL_Filter[type]) {
            throw new Error('Не найден фильтр с типом: ' + type);
          }
          return Enums.ACL_Filter[type];
        },
        _get_value: function(filter) {
          var ip, ips, j, len, result;
          switch (filter.type) {
            case 'multi_IP_address':
              ips = filter.value.split(Device_routing.Filter.ip_split_rule);
              result = [];
              for (j = 0, len = ips.length; j < len; j++) {
                ip = ips[j];
                if ((ip = ip.trim()).length !== 0) {
                  result.push({
                    src: ip
                  });
                  result.push({
                    dst: ip
                  });
                }
              }
              break;
            default:
              result = filter.value;
          }
          return result;
        },
        _get_type: function(filter) {
          var filter_type, type;
          filter_type = Device_routing.Filter._get_by_type(filter.type);
          type = (function() {
            switch (filter.type) {
              case 'IP_protocol_destination':
              case 'IP_protocol_source':
                if (filter.to_value) {
                  return filter_type.filter.value_range;
                } else {
                  return filter_type.filter.value;
                }
                break;
              default:
                return filter_type.filter.value;
            }
          })();
          return type;
        },
        _get_mask: function(filter) {
          var filter_type, mask;
          filter_type = Device_routing.Filter._get_by_type(filter.type);
          mask = filter_type.mask && typeof filter_type.mask.device === 'function' ? filter_type.mask.device(filter.mask) : filter.mask;
          return mask;
        },
        default_mask: function(filter_type) {
          switch (filter_type) {
            case 'Level4_data':
              return '';
            default:
              return Device_routing.Filter.identity_mask(Enums.ACL_Filter[filter_type]);
          }
        },
        is_default_mask: function(filter) {
          return filter.mask === Device_routing.Filter.default_mask(filter.type);
        },
        is_empty: function(filter) {
          if (filter.type === 'Level4_data') {
            filter.value = Utilities.trim_masked_hex(filter.value) || '';
            return filter.value.is_empty();
          }
          return (filter.value == null) && Device_routing.Filter.is_default_mask(filter);
        },
        has_non_default_mask: function(filter) {
          return !Device_routing.Filter.is_default_mask(filter);
        },
        convert_to_device: function(filter) {
          filter.mask = Device_routing.Filter._get_mask(filter);
          filter.value = Device_routing.Filter._get_value(filter);
          filter.type = Device_routing.Filter._get_type(filter);
          return filter;
        },
        sort: function(filters) {
          return filters.sort(function(a, b) {
            return Enums.ACL_Filter[a.type].condition - Enums.ACL_Filter[b.type].condition;
          });
        },
        type: function(filter) {
          var a_filter, name, ref;
          ref = Enums.ACL_Filter;
          for (name in ref) {
            a_filter = ref[name];
            if (a_filter === filter) {
              return name;
            }
          }
        },
        identity_mask: function(filter) {
          var _, to_hex;
          to_hex = function(bits) {
            var array, half_byte;
            array = [];
            while (bits > 0) {
              half_byte = (function() {
                switch (bits) {
                  case 1:
                    bits -= 1;
                    return '1';
                  case 2:
                    bits -= 2;
                    return '3';
                  case 3:
                    bits -= 3;
                    return '7';
                  default:
                    bits -= 4;
                    return 'F';
                }
              })();
              array.unshift(half_byte);
            }
            return array.join('');
          };
          if (to_hex(0) !== '') {
            throw new Error(to_hex(0));
          }
          if (to_hex(5) !== '1F') {
            throw new Error(to_hex(5));
          }
          if (to_hex(8) !== 'FF') {
            throw new Error(to_hex(8));
          }
          if (to_hex(31) !== '7FFFFFFF') {
            throw new Error(to_hex(31));
          }
          _ = Enums.ACL_Filter;
          switch (filter) {
            case _.source_MAC_address:
            case _.destination_MAC_address:
              return to_hex(filter.mask.bits).match(/.{2}/g).join(':');
            case _.source_IP_address:
            case _.destination_IP_address:
              return to_hex(filter.mask.bits).match(/.{2}/g).map(function(x) {
                return parseInt(x, 16);
              }).join('.');
            case _.Level4_data:
            case _.multi_IP_address:
              return '';
            default:
              return to_hex(filter.mask.bits);
          }
        }
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Enums', ["Utilities", function(Utilities) {
    var Enums, bits, combinations, ethernet_protocols, ip_address_mask, ip_protocols, mac_address_mask, subnet_mask_values, subnet_masks;
    ethernet_protocols = {
      'IP': 0x0800,
      'ARP': 0x0806,
      'VLAN (IEEE 802.1Q)': 0x8100,
      'Wake-on-LAN': 0x0842,
      'TRILL': 0x22F3,
      'DECnet Phase IV': 0x6003,
      'Reverse ARP': 0x8035,
      'AppleTalk (Ethertalk)': 0x809B,
      'AARP': 0x80F3,
      'IPX': 0x8137,
      'IPX': 0x8138,
      'QNX Qnet': 0x8204,
      'IPv6': 0x86DD,
      'Ethernet flow control': 0x8808,
      'IEEE 802.3': 0x8809,
      'CobraNet': 0x8819,
      'MPLS unicast': 0x8847,
      'MPLS multicast': 0x8848,
      'PPPoE Discovery': 0x8863,
      'PPPoE Session': 0x8864,
      'Jumbo Frame': 0x8870,
      'HomePlug 1.0 MME': 0x887B,
      'IEEE 802.1X': 0x888E,
      'PROFINET': 0x8892,
      'HyperSCSI': 0x889A,
      'ATA over Ethernet': 0x88A2,
      'EtherCAT': 0x88A4,
      'IEEE 802.1ad': 0x88A8,
      'Powerlink': 0x88AB,
      'LLDP': 0x88CC,
      'SERCOS III': 0x88CD,
      'HomePlug AV MME': 0x88E1,
      'Media Redundancy': 0x88E3,
      'IEEE 802.1AE': 0x88E5,
      'PTP over Ethernet': 0x88F7,
      'IEEE 802.1ag CFM': 0x8902,
      'FCoE': 0x8906,
      'FCoE Initialization': 0x8914,
      'RoCE': 0x8915,
      'HSR': 0x892F,
      'Ethernet Config Testing': 0x9000,
      'Q-in-Q': 0x9100,
      'LLT for Veritas Cluster': 0xCAFE
    };
    ip_protocols = {
      'HOPOPT': 0,
      'ICMP': 1,
      'IGMP': 2,
      'GGP': 3,
      'IPv4': 4,
      'ST': 5,
      'TCP': 6,
      'CBT': 7,
      'EGP': 8,
      'IGP': 9,
      'BBN-RCC-MON': 10,
      'NVP-II': 11,
      'PUP': 12,
      'ARGUS': 13,
      'EMCON': 14,
      'XNET': 15,
      'CHAOS': 16,
      'UDP': 17,
      'MUX': 18,
      'DCN-MEAS': 19,
      'HMP': 20,
      'PRM': 21,
      'XNS-IDP': 22,
      'TRUNK-1': 23,
      'TRUNK-2': 24,
      'LEAF-1': 25,
      'LEAF-2': 26,
      'RDP': 27,
      'IRTP': 28,
      'ISO-TP4': 29,
      'NETBLT': 30,
      'MFE-NSP': 31,
      'MERIT-INP': 32,
      'DCCP': 33,
      '3PC': 34,
      'IDPR': 35,
      'XTP': 36,
      'DDP': 37,
      'IDPR-CMTP': 38,
      'TP++': 39,
      'IL': 40,
      'IPv6': 41,
      'SDRP': 42,
      'IPv6-Route': 43,
      'IPv6-Frag': 44,
      'IDRP': 45,
      'RSVP': 46,
      'GRE': 47,
      'DSR': 48,
      'BNA': 49,
      'ESP': 50,
      'AH': 51,
      'I-NLSP': 52,
      'SWIPE': 53,
      'NARP': 54,
      'MOBILE': 55,
      'TLSP': 56,
      'SKIP': 57,
      'IPv6-ICMP': 58,
      'IPv6-NoNxt': 59,
      'IPv6-Opts': 60,
      'CFTP': 62,
      'SAT-EXPAK': 64,
      'KRYPTOLAN': 65,
      'RVD': 66,
      'IPPC': 67,
      'SAT-MON': 69,
      'VISA': 70,
      'IPCV': 71,
      'CPNX': 72,
      'CPHB': 73,
      'WSN': 74,
      'PVP': 75,
      'BR-SAT-MON': 76,
      'SUN-ND': 77,
      'WB-MON': 78,
      'WB-EXPAK': 79,
      'ISO-IP': 80,
      'VMTP': 81,
      'SECURE-VMTP': 82,
      'VINES': 83,
      'TTP': 84,
      'IPTM': 84,
      'NSFNET-IGP': 85,
      'DGP': 86,
      'TCF': 87,
      'EIGRP': 88,
      'OSPFIGP': 89,
      'Sprite-RPC': 90,
      'LARP': 91,
      'MTP': 92,
      'AX.25': 93,
      'IPIP': 94,
      'MICP': 95,
      'SCC-SP': 96,
      'ETHERIP': 97,
      'ENCAP': 98,
      'GMTP': 100,
      'IFMP': 101,
      'PNNI': 102,
      'PIM': 103,
      'ARIS': 104,
      'SCPS': 105,
      'QNX': 106,
      'A/N': 107,
      'IPComp': 108,
      'SNP': 109,
      'Compaq-Peer': 110,
      'IPX-in-IP': 111,
      'VRRP': 112,
      'PGM': 113,
      'L2TP': 115,
      'DDX': 116,
      'IATP': 117,
      'STP': 118,
      'SRP': 119,
      'UTI': 120,
      'SMP': 121,
      'SM': 122,
      'PTP': 123,
      'ISIS over IPv4': 124,
      'FIRE': 125,
      'CRTP': 126,
      'CRUDP': 127,
      'SSCOPMCE': 128,
      'IPLT': 129,
      'SPS': 130,
      'PIPE': 131,
      'SCTP': 132,
      'FC': 133,
      'RSVP-E2E-IGNORE': 134,
      'Mobility Header': 135,
      'UDPLite': 136,
      'MPLS-in-IP': 137,
      'manet': 138,
      'HIP': 139,
      'Shim6': 140,
      'WESP': 141,
      'ROHC': 142
    };
    subnet_mask_values = (function() {
      var j, results;
      results = [];
      for (bits = j = 0; j <= 8; bits = ++j) {
        results.push(Math.pow(2, 8) - Math.pow(2, bits));
      }
      return results;
    })();
    subnet_mask_values.remove(0);
    combinations = function(byte_order) {
      var combination_set, combinations_main, previous;
      combinations_main = subnet_mask_values.map(function(value) {
        var i, result;
        result = byte_order === 1 ? [] : (function() {
          var j, ref, results;
          results = [];
          for (i = j = 2, ref = byte_order; 2 <= ref ? j <= ref : j >= ref; i = 2 <= ref ? ++j : --j) {
            results.push(0);
          }
          return results;
        })();
        result.unshift(value);
        return result;
      });
      previous = [];
      if (byte_order > 1) {
        combination_set = combinations(byte_order - 1);
        previous = combination_set.map(function(combination) {
          return [255].concat(combination);
        });
      }
      return previous.concat(combinations_main);
    };
    subnet_masks = combinations(4).map(function(combination) {
      return combination.join('.');
    });
    mac_address_mask = {
      bits: 48
    };
    ip_address_mask = {
      bits: 32
    };
    Enums = {
      subnet_masks: subnet_masks,
      ethernet_port_modes: {
        '1000BASE_KX': 0,
        '1000BASE_X': 1,
        '10GBASE_CR': 2,
        '10GBASE_CX4': 3,
        '10GBASE_KX4': 4,
        '10GBASE_SR': 5,
        '40GBASE_CR4': 6,
        '40GBASE_KR4': 7,
        '40GBASE_SR4': 8,
        'AN_73': 9,
        'DISABLED': 10,
        'SGMII': 11,
        'XAUI': 12,
        'XLAUI': 13
      },
      ACL_actions: {
        drop: 0,
        permit: 1,
        balance: 2,
        redirect: 3,
        mirror: 4,
        set_hash_profile: 5,
        dubbing: 6
      },
      port_parser_levels: {
        L2: 2,
        L3: 3,
        L4: 4
      },
      Errors: {
        api: {
          set_interface_version: -32500
        }
      },
      ACL_Filter: {
        ethernet_protocol: {
          value: {
            type: 'select',
            from: ethernet_protocols,
            "default": ethernet_protocols.IP
          },
          mask: {
            bits: 16,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 1,
            mask: 'eth_type_mask'
          },
          condition: 0
        },
        source_MAC_address: {
          value: {
            type: 'text'
          },
          mask: mac_address_mask,
          filter: {
            value: 2,
            mask: 'src_mac_mask'
          },
          condition: 1,
          direction: 'source'
        },
        destination_MAC_address: {
          value: {
            type: 'text'
          },
          mask: mac_address_mask,
          filter: {
            value: 3,
            mask: 'dst_mac_mask'
          },
          condition: 2,
          direction: 'destination'
        },
        source_IP_address: {
          value: {
            type: 'text'
          },
          mask: ip_address_mask,
          filter: {
            value: 4,
            mask: 'src_ip_mask'
          },
          condition: 3,
          direction: 'source'
        },
        destination_IP_address: {
          value: {
            type: 'text'
          },
          mask: ip_address_mask,
          filter: {
            value: 5,
            mask: 'dst_ip_mask'
          },
          condition: 4,
          direction: 'destination'
        },
        multi_IP_address: {
          value: {
            type: 'text'
          },
          filter: {
            value: 14
          },
          condition: 3
        },
        IP_protocol: {
          value: {
            type: 'select',
            from: ip_protocols,
            "default": ip_protocols.TCP
          },
          mask: {
            bits: 8,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 6,
            mask: 'l4_proto_mask'
          },
          condition: 7
        },
        IP_protocol_source: {
          value: {
            type: 'text'
          },
          mask: {
            bits: 16,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 7,
            value_range: 8,
            mask: 'l4_src_mask'
          },
          condition: 5,
          direction: 'source'
        },
        IP_protocol_destination: {
          value: {
            type: 'text'
          },
          mask: {
            bits: 16,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 9,
            value_range: 10,
            mask: 'l4_dst_mask'
          },
          condition: 6,
          direction: 'destination'
        },
        VLAN: {
          value: {
            type: 'text'
          },
          mask: {
            bits: 16,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 11,
            mask: 'vlan_mask'
          },
          condition: 8
        },
        VLAN2: {
          value: {
            type: 'text'
          },
          mask: {
            bits: 16,
            device: Utilities.hex_string_to_number,
            model: Utilities.number_to_hex_string
          },
          filter: {
            value: 12,
            mask: 'vlan2_mask'
          },
          condition: 9
        },
        Level4_data: {
          model: function(value, mask) {
            var i, original_value;
            original_value = value;
            i = 0;
            while (i < mask.length) {
              if (mask[i] === '0') {
                value = value.replace_at(i, 'X');
              }
              i++;
            }
            value = Utilities.trim_masked_hex(value);
            value = Utilities.hex_pretty_print(value, 0)[0];
            mask = '';
            return [value, mask];
          },
          device: function(value, mask) {
            value = value.replace(/\s/g, '');
            if (value.length % 2) {
              value = value + 'X';
            }
            mask = value.replace(/[^X]/g, 'F');
            mask = mask.replace(/X/g, '0');
            value = value.replace(/X/g, '0');
            return [value, mask];
          },
          value: {
            type: 'text',
            device: Utilities.hex_string_to_number_array,
            model: Utilities.number_array_to_hex_string
          },
          mask: {
            model: Utilities.number_array_to_hex_string
          },
          filter: {
            value: 13,
            mask: 'l4_data_mask'
          },
          condition: 10
        }
      }
    };
    Enums.Mapper = {
      ethernet_protocol: {
        id: 0,
        condition: 17,
        rule_value: 'mapped_eth_type',
        filter: Enums.ACL_Filter.ethernet_protocol,
        mapped_value_bytes: 1
      },
      IP_address: {
        id: 1,
        source: {
          rule_value: 'mapped_src_ip',
          condition: 20,
          filter: Enums.ACL_Filter.source_IP_address
        },
        destination: {
          rule_value: 'mapped_dst_ip',
          condition: 19,
          filter: Enums.ACL_Filter.destination_IP_address
        },
        mapped_value_bytes: 1
      },
      IP_packet_length: {
        id: 2,
        condition: 18,
        rule_value: 'mapped_ip_length',
        mapped_value_bytes: 1
      },
      L4_destination: {
        id: 3,
        condition: 14,
        rule_value: 'mapped_l4_dst',
        filter: Enums.ACL_Filter.IP_protocol_destination,
        from: function(_) {
          return _.port_start;
        },
        to: function(_) {
          return _.port_end;
        },
        mapped_value_bytes: 2
      },
      L4_source: {
        id: 4,
        condition: 13,
        rule_value: 'mapped_l4_src',
        filter: Enums.ACL_Filter.IP_protocol_source,
        from: function(_) {
          return _.port_start;
        },
        to: function(_) {
          return _.port_end;
        },
        mapped_value_bytes: 2
      },
      MAC_address: {
        id: 5,
        source: {
          rule_value: 'mapped_src_mac',
          condition: 16,
          filter: Enums.ACL_Filter.source_MAC_address
        },
        destination: {
          rule_value: 'mapped_dst_mac',
          condition: 15,
          filter: Enums.ACL_Filter.destination_MAC_address
        },
        mapped_value_bytes: 1
      },
      IP_protocol: {
        id: 6,
        condition: 12,
        rule_value: 'mapped_protocol',
        filter: Enums.ACL_Filter.IP_protocol,
        mapped_value_bytes: 1
      },
      Device_port: {
        id: 7,
        condition: 11,
        rule_value: 'mapped_source_port',
        mapped_value_bytes: 1
      },
      VLAN: {
        id: 8,
        condition: 21,
        rule_value: 'mapped_vlan_id',
        filter: 'VLAN',
        mapped_value_bytes: 2
      }
    };
    return Enums;
  }]);

}).call(this);

(function() {
  app.factory('FileDB', ["api", function(api) {
    var FileDB, parse_path;
    parse_path = function(file) {
      var database;
      database = null;
      if (file.has('/')) {
        database = file.before('/');
        file = file.after('/');
      }
      return [database, file];
    };
    return FileDB = {
      save: function(path, data) {
        var database, file, ref;
        ref = parse_path(path), database = ref[0], file = ref[1];
        return api.call('filedb.save', {
          database: database,
          file: file + '.json',
          data: data
        });
      },
      load: function(path) {
        var database, file, ref;
        ref = parse_path(path), database = ref[0], file = ref[1];
        return api.call('filedb.load', {
          database: database,
          file: file + '.json'
        });
      },
      update: function(path, field, data) {
        return FileDB.load(path).then(function(result) {
          angular.extend(result[field], data);
          return FileDB.save(path, result);
        });
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Graph', ["$rootScope", "$timeout", "log", "translate", "Port", function($rootScope, $timeout, log, translate, Port) {
    var Graph;
    return Graph = {
      tsg: false,
      rule: false,
      summarize: false,
      data: [],
      ports: {},
      rollups: [
        {
          prefix: '10s.',
          title: translate('graph.time.minutes')
        }, {
          prefix: '1h.',
          title: translate('graph.time.hours')
        }, {
          prefix: '1d.1h.',
          title: translate('graph.time.days')
        }
      ],
      rule_graph_types: [
        {
          value_type: 'rate',
          title: translate('graph.value.type.rate'),
          units: translate('network.rate.Mbps'),
          formula: 'rx_speed / (1000 * 1000), -1 * tx_speed / (1000 * 1000)'
        }, {
          value_type: 'crc',
          title: translate('graph.value.type.crc')
        }, {
          value_type: 'drops',
          title: translate('graph.value.type.drops')
        }
      ],
      port_graph_types: [
        {
          value_type: 'rx/tx',
          title: translate('graph.value.type.rate'),
          units: translate('network.rate.Mbps'),
          formula: 'rx_speed / (1000 * 1000), -1 * tx_speed / (1000 * 1000)'
        }, {
          value_type: 'crc',
          title: translate('graph.value.type.crc')
        }, {
          value_type: 'drops',
          title: translate('graph.value.type.drops')
        }
      ],
      port_graph_type: 0,
      rule_graph_type: 0,
      options: {
        margin: {
          top: 20,
          right: 50,
          bottom: 30,
          left: 140
        }
      },
      rollup: 0,
      enable: true,
      show: false,
      for_rule: function(container, rule) {
        var color_domain, i, port_id, ref;
        Graph.rule = rule;
        Graph.ports = {};
        Graph.ports = {};
        for (port_id = i = 1, ref = Port.count; 1 <= ref ? i <= ref : i >= ref; port_id = 1 <= ref ? ++i : --i) {
          Graph.ports[port_id] = {
            show_in: !!(rule.inputs.filter(function(input) {
              return input.id === port_id;
            }).length),
            show_out: !!(rule.outputs.filter(function(output) {
              return output.id === port_id;
            }).length)
          };
        }
        Graph.show = true;
        Graph.summarize = false;
        Graph.tsg = null;
        Graph.tsg = new TSG(container, Graph.options);
        color_domain = Object.keys(Graph.ports).map(function(id) {
          return "port" + id;
        });
        color_domain.push('In');
        color_domain.push('Out');
        Graph.tsg.colorDomain = color_domain;
        return Graph.draw();
      },
      for_ports: function(container) {
        var i, port_id, ref;
        Graph.rule = false;
        Graph.summarize = false;
        Graph.enable = true;
        Graph.show = false;
        Graph.ports = {};
        for (port_id = i = 1, ref = Port.count; 1 <= ref ? i <= ref : i >= ref; port_id = 1 <= ref ? ++i : --i) {
          Graph.ports[port_id] = {
            show: false
          };
        }
        Graph.tsg = new TSG(container, Graph.options);
        return Graph.tsg.colorDomain = Object.keys(Graph.ports).map(function(id) {
          return "port" + id;
        });
      },
      draw: function(title) {
        var config, graph_type, port_id, port_ids, query, ref, rollup_prefix, value, value_type;
        Graph.tsg.clear();
        port_ids = [];
        ref = Graph.ports;
        for (port_id in ref) {
          value = ref[port_id];
          if (value.show || value.show_in || value.show_out) {
            port_ids.push(port_id);
          }
        }
        graph_type = Graph.rule ? Graph.rule_graph_types[Graph.rule_graph_type] : Graph.port_graph_types[Graph.port_graph_type];
        rollup_prefix = Graph.rollups[Graph.rollup].prefix;
        value_type = graph_type.formula ? graph_type.formula : graph_type.value_type;
        Graph.tsg.title = title || graph_type.units || ' ';
        config = $rootScope.configuration.InfluxDB;
        if (port_ids.is_empty()) {
          return Graph.tsg.clear();
        }
        query = "SELECT " + value_type + " from " + rollup_prefix + "port" + (port_ids.join(', ' + rollup_prefix + 'port')) + " LIMIT 500";
        return d3.json("/influxdb/db/" + config.database + "/series?u=" + config.users.read_only.username + "&p=" + config.users.read_only.password + "&q=" + (encodeURIComponent(query)), function(error, result) {
          var get_series_port_id, graphs, input, inputs, output, outputs, scroll_top, total_input, total_output;
          log.info('ports', port_ids, 'result', result);
          if (error) {
            log.error('Error querying InfluxDB', error);
            Graph.tsg.clear();
          } else {
            if (Graph.rule) {
              inputs = Graph.rule.inputs.filter(function(port) {
                return Graph.ports[port.id].show_in;
              });
              inputs = inputs.map(function(port) {
                return port.id;
              });
              outputs = Graph.rule.outputs.filter(function(port) {
                return Graph.ports[port.id].show_out;
              });
              outputs = outputs.map(function(port) {
                return port.id;
              });
              get_series_port_id = function(series) {
                return parseInt(series.name.replace(rollup_prefix, '').replace('port', ''));
              };
              input = result.filter(function(series) {
                var i, len, point, ref1;
                if (inputs.has(get_series_port_id(series)) && !outputs.has(get_series_port_id(series)) && graph_type.value_type === 'rate') {
                  ref1 = series.points;
                  for (i = 0, len = ref1.length; i < len; i++) {
                    point = ref1[i];
                    point.splice(series.columns.indexOf('expr1'), 1);
                  }
                  series.columns.splice(series.columns.indexOf('expr1'), 1);
                  return true;
                }
                return inputs.has(get_series_port_id(series));
              });
              output = result.filter(function(series) {
                var i, len, point, ref1;
                if (outputs.has(get_series_port_id(series)) && !inputs.has(get_series_port_id(series)) && graph_type.value_type === 'rate') {
                  ref1 = series.points;
                  for (i = 0, len = ref1.length; i < len; i++) {
                    point = ref1[i];
                    point.splice(series.columns.indexOf('expr0'), 1);
                  }
                  series.columns.splice(series.columns.indexOf('expr0'), 1);
                  return true;
                }
                return outputs.has(get_series_port_id(series));
              });
              if (Graph.summarize) {
                total_input = Graph.tsg.sumPoints(input, graph_type.value_type === 'rate' ? 'expr0' : graph_type.value_type);
                total_output = Graph.tsg.sumPoints(output, graph_type.value_type === 'rate' ? 'expr1' : graph_type.value_type);
                graphs = [];
                if (total_input) {
                  graphs.push({
                    name: 'In',
                    points: total_input
                  });
                }
                if (total_output) {
                  graphs.push({
                    name: 'Out',
                    points: total_output
                  });
                }
                Graph.tsg.bind(graphs);
              } else {
                Graph.tsg.bind(result);
              }
            } else {
              Graph.tsg.bind(result);
            }
          }
          scroll_top = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0);
          if (Graph.rule && scroll_top > 500) {
            return window.scrollTo(0, 0);
          }
        });
      },
      refresh: function() {
        var element, timer;
        element = document.querySelector('.refresh i');
        element.className += ' spin';
        timer = $timeout(function() {
          return element.className = element.className.replace(/ spin/g, '');
        }, 500);
        return Graph.draw();
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('GUI', ["$rootScope", "api", "Status", "translate", "Rule", "Port_view", function($rootScope, api, Status, translate, Rule, Port_view) {
    var GUI;
    return GUI = {
      wait_for_connection: function(estimated_time, message, options) {
        var check_interval, infinite, launch, should_have_already_been_up, should_have_already_been_up_timeout, test_connection, try_until_succeeded;
        if (estimated_time == null) {
          throw new Error('Define estimated time for progress bar');
        }
        infinite = estimated_time === 0;
        check_interval = 1;
        $rootScope.offline = true;
        $rootScope.waiting_for_connection_elapsed = 0;
        should_have_already_been_up_timeout = null;
        if (infinite) {
          $rootScope.waiting_for_connection_estimated = Infinity;
          $rootScope.waiting_for_connection_left = Infinity;
        } else {
          $rootScope.waiting_for_connection_estimated = estimated_time;
          $rootScope.waiting_for_connection_left = estimated_time;
          $rootScope.countdown = true;
          should_have_already_been_up = function() {
            $rootScope.countdown = false;
            return Status.busy(translate('device.status.connecting'), {
              sticky: true
            });
          };
          should_have_already_been_up_timeout = should_have_already_been_up.delay(estimated_time * 1000);
        }
        test_connection = function() {
          var command;
          command = (function() {
            switch (options.to) {
              case 'device':
                return 'getSwitchInfo';
              case 'gui':
                return 'utilities.ping';
            }
          })();
          return api.call(command).then(function() {
            if (!infinite) {
              clearTimeout(should_have_already_been_up_timeout);
            }
            Status.idle();
            $rootScope.countdown = false;
            $rootScope.offline = false;
            return location.reload();
          });
        };
        try_until_succeeded = function(action, period) {
          var tick, try_again;
          try_again = function(tried_at) {
            var failed_at;
            failed_at = new Date().getTime();
            return tick.delay(period - (failed_at - tried_at));
          };
          tick = function() {
            var tried_at;
            $rootScope.waiting_for_connection_elapsed += check_interval;
            if (!infinite) {
              $rootScope.waiting_for_connection_left -= check_interval;
              if ($rootScope.waiting_for_connection_left < 0) {
                $rootScope.waiting_for_connection_left = -1;
              }
            }
            tried_at = new Date().getTime();
            return action()["catch"](function() {
              return try_again(tried_at);
            });
          };
          return tick();
        };
        if (infinite) {
          Status.busy(message, {
            sticky: true
          });
        } else {
          Status.progress(message);
        }
        launch = function() {
          return try_until_succeeded(test_connection, check_interval * 1000);
        };
        launch.delay((options.delay || 1) * 1000);
        return new Promise(function(resolve, reject) {}).cancellable();
      },
      remove_port: function(elements) {
        var port_id, port_type;
        port_id = +angular.element(elements.dragged).attr('data-port-id');
        if (isNaN(port_id)) {
          return;
        }
        port_type = angular.element(elements.dragged).attr('data-port-type');
        return $rootScope.safeApply(function() {
          var rule;
          rule = Rule.remove_port(port_id, port_type);
          if (!rule) {
            return;
          }
          if ($rootScope.this_page.page === 'routing') {
            $rootScope.$broadcast('port_removed', {
              rule: rule
            });
          }
          return Port_view.deselect(port_id);
        });
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('log', function() {
    var _console, buffer, key, log, value;
    _console = {
      info: console.log,
      warning: console.warn || console.log,
      error: console.error
    };
    if (console.log.bind) {
      for (key in _console) {
        value = _console[key];
        _console[key] = value.bind(console);
      }
    }
    buffer = {
      size: 5000,
      store: [],
      add: function(level, message) {
        if (buffer.store.length === buffer.size) {
          buffer.store.shift();
        }
        return buffer.store.push({
          level: level,
          message: message,
          date: new Date()
        });
      }
    };
    return log = {
      info: function() {
        var parameters;
        parameters = Array.prototype.slice.call(arguments);
        _console.info.apply(this, parameters);
        return buffer.add('info', log.message.apply(this, parameters));
      },
      debug: function() {
        var parameters;
        parameters = Array.prototype.slice.call(arguments);
        return _console.debug.apply(this, parameters);
      },
      warning: function() {
        var parameters;
        parameters = Array.prototype.slice.call(arguments);
        _console.warning.apply(this, parameters);
        return buffer.add('warning', log.message.apply(this, parameters));
      },
      error: function() {
        var parameters;
        parameters = Array.prototype.slice.call(arguments);
        _console.error.apply(this, parameters);
        return buffer.add('error', log.message.apply(this, parameters));
      },
      message: function() {
        var parameters;
        parameters = Array.prototype.slice.call(arguments);
        return parameters.map(function(argument) {
          if (typeof argument === 'object') {
            if (argument instanceof Error) {
              return argument.stack;
            }
            return JSON.stringify(argument, null, 2);
          }
          if (argument.toString) {
            return argument.toString();
          } else {
            return String(argument);
          }
        });
      },
      messages: function() {
        return buffer.store;
      },
      print_messages: function() {
        return log.messages().map(function(message) {
          var date, message_text, preamble, preamble_spacing, status;
          date = moment(message.date).format('MMMM Do YYYY, HH:mm:ss');
          status = (function() {
            switch (message.level) {
              case 'info':
                return '';
              default:
                return " [" + message.level + "]";
            }
          })();
          preamble = "" + date + status + " ";
          message_text = message.message.reduce((function(message, argument) {
            var last_new_line, spacing;
            if (message.not_empty()) {
              message += ' ';
            }
            last_new_line = message.lastIndexOf('\n');
            spacing = last_new_line >= 0 ? message.substring(last_new_line + 1) : message;
            argument = argument.replace(/\n/g, "\n" + (' '.repeat(spacing.length)));
            return message += argument;
          }), '');
          preamble_spacing = ' '.repeat(preamble.length);
          message_text = message_text.replace(/\n/g, "\n" + preamble_spacing);
          return "" + preamble + message_text;
        }).reduce(function(text, message) {
          if (text) {
            text += '\n';
          }
          return text + message;
        });
      },
      download: function() {
        return download_file(log.print_messages(), 'log.txt');
      }
    };
  });

}).call(this);

(function() {
  app.factory('Login', ["$rootScope", "$location", "$routeParams", "$filter", "$window", "$timeout", "api", "log", "Status", "Routing_model_applier", function($rootScope, $location, $routeParams, $filter, $window, $timeout, api, log, Status, Routing_model_applier) {
    var Login;
    return Login = {
      is_authenticated: null,
      validate: function(form) {
        var field, fields, i, len;
        fields = ['password'];
        for (i = 0, len = fields.length; i < len; i++) {
          field = fields[i];
          if (form[field].$invalid) {
            form.indicate_invalid(field);
          }
        }
        return !form.$invalid;
      },
      login: function(form) {
        var credentials;
        if (!Login.validate(form)) {
          return;
        }
        credentials = {
          username: 'admin',
          password: form.password.$modelValue
        };
        return api.call('auth.login', credentials).then(function(user) {
          form.password.$setViewValue('');
          form.password.$render();
          $rootScope.safeApply(function() {
            Login.authenticated();
            Routing_model_applier.set_interface_version(api);
            return $rootScope.user = user;
          });
          $.stickyeah();
          if (!$rootScope.state.is_application_loaded) {
            return $rootScope.initialize_application();
          } else if ($rootScope.loading_page) {
            return $rootScope.initialize_page();
          }
        }, function(error) {
          log.error(error);
          if (error instanceof api.error.generic && error.code === 403) {
            form.errors = form.errors || {};
            form.errors.wrong_credentials = true;
            return form.indicate_invalid('password');
          }
        });
      },
      logout: function() {
        return api.call('auth.logout', {}).then(function() {
          return $rootScope.safeApply(function() {
            return Login.not_authenticated();
          });
        });
      },
      authenticate: function() {
        return api.call('auth.auth').then(function(user) {
          Login.authenticated();
          return user;
        });
      },
      authenticated: function() {
        Status.place();
        return Login.is_authenticated = true;
      },
      not_authenticated: function() {
        Status.place('login');
        return Login.is_authenticated = false;
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Model_service', ["Device_settings", function(Device_settings) {
    var Model_service;
    return Model_service = {
      get_port_id_with_offset: function(port_id) {
        var port_id_with_offset;
        port_id_with_offset = (function() {
          switch (Device_settings.get_platform()) {
            case Device_settings.devices.iz1:
              return port_id - 1;
            case Device_settings.devices.iz1f:
            case Device_settings.devices.unknown:
              return port_id - (port_id % 2 === 0 ? 2 : 0);
          }
        })();
        return port_id_with_offset;
      },
      get_joint_port_with_offset: function(Model, port_id) {
        return Model.joint_ports[Model_service.get_port_id_with_offset(port_id)];
      },
      get_port_with_offset: function(Model, port_id) {
        return Model.ports[Model_service.get_port_id_with_offset(port_id)];
      },
      update: function(Model, model) {
        return angular.extend(Model, model);
      },
      reset: function(model) {
        return Model_service.update(Model, Model_service.create());
      },
      ports_lock: [],
      is_ports_lock_empty: function() {
        return Model_service.ports_lock.length === 0;
      },
      lock_ports: function() {
        var lock;
        lock = new Object();
        Model_service.ports_lock.push(lock);
        return lock;
      },
      unlock_ports: function(lock) {
        if (!Model_service.ports_lock.has(lock)) {
          throw new Error('Port lock not found');
        }
        return Model_service.ports_lock.remove(lock);
      },
      ensure_ports_lock: function() {
        if (Model_service.ports_lock.is_empty()) {
          throw new Error('Model ports must be locked when calling this method');
        }
      },
      do_with_port_lock: function(action) {
        var lock, result;
        lock = Model_service.lock_ports();
        result = action();
        if ((result != null) && result["finally"]) {
          return result["finally"](function() {
            return Model_service.unlock_ports(lock);
          });
        } else {
          Model_service.unlock_ports(lock);
          return dummy_promise();
        }
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Model', ["Model_service", function(Model_service) {
    var Model;
    return Model = {};
  }]);

}).call(this);

(function() {
  app.factory('Network', ["Model", "api", function(Model, api) {
    var Network;
    return Network = {
      save: function() {
        var network;
        network = angular.copy(Model.network);
        network.dhcp = network.dhcp === true ? '1' : '0';
        return api.call('setNetConfig', network);
      },
      load: function() {
        return api.call('getNetConfig').then(function(result) {
          return Model.network = {
            dhcp: result.dhcp === '1' ? true : false,
            ip: result.ip,
            mask: result.mask,
            gateway: result.gateway,
            dns1: result.dns1 || '',
            dns2: result.dns2 || ''
          };
        });
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Port_numeration', ["$rootScope", "api", "Model", "Model_service", "Device_settings", "Port", function($rootScope, api, Model, Model_service, Device_settings, Port) {
    var Port_numeration;
    return Port_numeration = {
      joint_port_client_number: function(joint_port_id) {
        return Device_settings.generic_port_count + joint_port_id;
      },
      port_id_from_client_number: function(client_number) {
        return Device_settings.generic_port_count + (client_number - Device_settings.generic_port_count - 1) * Device_settings.ports_in_joint_port + 1;
      },
      by_name: function(name) {
        return Port.by_id(Port_numeration.id_by_name(name));
      },
      id_by_name: function(name) {
        var id, main, parts, port, port_id, subport;
        parts = name.match(/(\d+)(\.(\d+))?/);
        main = parseInt(parts[1]);
        subport = parts[3] ? parseInt(parts[3]) : null;
        port_id = Port_numeration.port_id_from_client_number(main);
        port = Port_numeration.categorize_port(port_id);
        return id = (function() {
          if (subport) {
            if (port.type === 'generic') {
              throw new Error("Port " + main + " is not a part of joint port");
            }
            if (port.joint_port.mode !== '4x10G') {
              throw new Error("Joint port " + port.joint_port.id + " isn't in 4x10G mode");
            }
            return Port_numeration.joined_port_id_to_port_id(port.joint_port.id, subport);
          } else {
            if (port.type === 'generic') {
              return main;
            } else {
              if (port.joint_port.mode !== '40G') {
                throw new Error("Joint port " + port.joint_port.id + " isn't in 40G mode");
              }
              return Port_numeration.joined_port_id_to_port_id(port.joint_port.id);
            }
          }
        })();
      },
      name_by_id: function(port_id) {
        var joint_port_id, ref, subport_id;
        if (Port.is_generic(port_id)) {
          return String(port_id);
        }
        ref = Port_numeration.joined_port_id_from_port_id(port_id), joint_port_id = ref[0], subport_id = ref[1];
        if (Model_service.get_joint_port_with_offset(Model, joint_port_id).mode === '40G' && subport_id === 1) {
          return String(Port_numeration.joint_port_client_number(joint_port_id));
        }
        return (Port_numeration.joint_port_client_number(joint_port_id)) + "." + subport_id;
      },
      joined_port_id_from_port_id: function(port_id) {
        var joint_port_id;
        if (port_id > Port.count) {
          throw new Error("Port " + port_id + " is out of bounds");
        }
        if (port_id <= Device_settings.generic_port_count) {
          throw new Error("Port " + port_id + " isn't a part of a joint port");
        }
        port_id -= Device_settings.generic_port_count;
        joint_port_id = 1;
        while (port_id > Device_settings.ports_in_joint_port) {
          port_id -= Device_settings.ports_in_joint_port;
          joint_port_id++;
        }
        return [joint_port_id, port_id];
      },
      joined_port_id_to_port_id: function(joint_port_id, subport_id) {
        if (joint_port_id < 0 || joint_port_id > Port.joint_port_count()) {
          throw new Error("Invalid joint port id " + joint_port_id);
        }
        if (subport_id > Device_settings.ports_in_joint_port) {
          throw new Error("Invalid subport id " + subport_id);
        }
        if (subport_id == null) {
          subport_id = 1;
        }
        return Device_settings.generic_port_count + (joint_port_id - 1) * Device_settings.ports_in_joint_port + subport_id;
      },
      categorize_port: function(port_id) {
        var joint_port_id, ref;
        if (Port.is_generic(port_id)) {
          return {
            type: 'generic'
          };
        }
        ref = Port_numeration.joined_port_id_from_port_id(port_id), joint_port_id = ref[0], port_id = ref[1];
        return {
          type: 'joinable',
          joint_port: Model_service.get_joint_port_with_offset(Model, joint_port_id),
          is_first_in_joint: port_id === 1
        };
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Port_view', ["$rootScope", "api", "Model", "Model_service", "Device_settings", function($rootScope, api, Model, Model_service, Device_settings) {
    var Port_view;
    return Port_view = {
      select: function(port_id, discard_selection) {
        if (typeof port_id === 'object') {
          port_id = port_id.id;
        }
        if (discard_selection !== false) {
          Port_view.deselect_all();
        }
        return Object.set($rootScope.view.ports, port_id, 'selected', true);
      },
      deselect: function(port_id) {
        if (typeof port_id === 'object') {
          port_id = port_id.id;
        }
        return Object.set($rootScope.view.ports, port_id, 'selected', false);
      },
      toggle_selection: function(port) {
        if (!this.is_selected(port)) {
          return this.select(port, false);
        } else {
          return this.deselect(port);
        }
      },
      is_selected: function(port) {
        return Object.get($rootScope.view.ports, port.id, 'selected');
      },
      deselect_all: function() {
        var i, len, port, ref, results;
        if (!Model.ports) {
          return;
        }
        ref = Model.ports;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          results.push(Object.set($rootScope.view.ports, port.id, 'selected', false));
        }
        return results;
      },
      selected_count: function() {
        var count, i, len, port, ref;
        count = 0;
        ref = Model.ports;
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          if (Port_view.is_selected(port)) {
            count++;
          }
        }
        return count;
      },
      is_joint_port_up: function(joint_port) {
        var port;
        return ((function() {
          var i, len, ref, results;
          ref = joint_port.ports;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            port = ref[i];
            if (Port_view.is_up(port)) {
              results.push(port);
            }
          }
          return results;
        })()).not_empty();
      },
      is_up: function(port) {
        return $rootScope.stats.ports[port.id].state;
      }
    };
  }]);

}).call(this);

(function() {
  var injected;

  injected = ['$rootScope', 'api', 'Model', 'Model_service', 'Device_settings', 'Enums'];

  this.Port_service_constructor = function($rootScope, api, Model, Model_service, Device_settings, Enums) {
    var Port;
    return Port = {
      count: 0,
      by_id: function(id) {
        if (id > Model.ports.length) {
          throw new Error("Port " + id + " not found");
        }
        return Model.ports[id - 1];
      },
      set_eth_mode: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortEthMode", {
          id: port.id,
          eth_mode: port.eth_mode
        }).then(function(result) {});
      },
      set_parser_level: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortParserLevel", {
          id: port.id,
          level: port.parser_level
        }).then(function(result) {});
      },
      set_deep_inspection: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortDIParsing", {
          id: port.id,
          enable: port.deep_inspection
        });
      },
      enable: function(port) {
        Model_service.ensure_ports_lock();
        return Port.set_enabled({
          id: port.id,
          enabled: true
        }).then(function(result) {
          return port.enabled = true;
        });
      },
      disable: function(port) {
        Model_service.ensure_ports_lock();
        return Port.set_enabled({
          id: port.id,
          enabled: false
        }).then(function(result) {
          return port.enabled = false;
        });
      },
      set_enabled: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortEnabled", {
          id: port.id,
          enable: port.enabled ? 1 : 0
        });
      },
      set_mac_learning: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortLearning", {
          id: port.id,
          enable: 0
        }).then(function(result) {});
      },
      set_force_up_simple: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortForceUp", {
          id: port.id,
          enable: port.force_up ? 1 : 0
        });
      },
      set_force_up: function(port) {
        api.begin();
        Port.set_force_up_simple(port);
        if (port.enabled == null) {
          throw new Error('setPortForceUp called without known port enabled/disabled state');
        }
        Port.set_enabled(port);
        return api.end();
      },
      set_loopback: function(port) {
        Model_service.ensure_ports_lock();
        return api.call("setPortLoopback", {
          id: port.id,
          enable: port.loopback ? 1 : 0
        });
      },
      reset_port_stats: function(port) {
        return api.call("resetPortStat", {
          id: port.id
        });
      },
      reset_stats: function(port) {
        var i, len, ref;
        if (port != null) {
          return Port.reset_port_stats(port);
        }
        api.begin();
        ref = Model.ports;
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          Port.reset_port_stats(port);
        }
        return api.end();
      },
      update: function(data) {
        var device_port;
        device_port = Port.by_id(data.id);
        return angular.extend(device_port, data);
      },
      configure: function(port) {
        if (port.enabled != null) {
          Port.set_enabled(port);
        }
        if (port.eth_mode != null) {
          Port.set_eth_mode(port);
        }
        Port.set_mac_learning(port);
        if (port.parser_level != null) {
          Port.set_parser_level(port);
        }
        if (port.deep_inspection != null) {
          Port.set_deep_inspection(port);
        }
        if (port.loopback != null) {
          Port.set_loopback(port);
        }
        if (port.force_up != null) {
          Port.set_force_up_simple(port);
          return Port.set_enabled(port);
        }
      },
      is_generic: function(port_id) {
        return port_id <= Device_settings.generic_port_count;
      },
      has_joint_ports: function() {
        return Port.count > Device_settings.generic_port_count;
      },
      joint_port_count: function() {
        return Math.ceil((Port.count - Device_settings.generic_port_count) / Device_settings.ports_in_joint_port);
      },
      sanitize: function(port) {
        var key, value;
        for (key in port) {
          value = port[key];
          if (key.starts_with('$$')) {
            delete port[key];
          }
        }
        return port;
      },
      set_subport_modes: function(joint_port) {
        var i, len, ref, results, subport;
        ref = joint_port.ports;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          subport = ref[i];
          results.push(subport.eth_mode = joint_port.mode === '40G' ? subport === joint_port.ports[0] ? Enums.ethernet_port_modes['40GBASE_SR4'] : Enums.ethernet_port_modes['DISABLED'] : Enums.ethernet_port_modes['10GBASE_CR']);
        }
        return results;
      },
      load_comments: function() {
        return filedb.load('ports').then(function(result) {
          return result.comments;
        });
      },
      set_comment: function(port) {
        var data;
        data = [];
        data[port.id] = port.comment;
        return filedb.update('ports', 'comments', data);
      }
    };
  };

  this.Port_service_constructor.$inject = injected;

  app.factory('Port', this.Port_service_constructor);

}).call(this);

(function() {
  app.factory('Promises', ["$rootScope", "log", function($rootScope, log) {
    var Promises, done_listeners;
    done_listeners = [];
    return Promises = {
      promise: function(promiser) {
        var promise;
        promise = dummy_promise().then(promiser);
        $rootScope.promises.push(promise);
        return promise["catch"](Promises.Cancellation_error, function(error) {
          return log.info('A promise was cancelled due to user navigating away from the page');
        })["finally"](function() {
          $rootScope.promises.remove(promise);
          return Promises.check_for_pending_promises();
        });
      },
      Cancellation_error: Promise_cancellation_error,
      reset: function() {
        return $rootScope.promises = [];
      },
      pending: function() {
        return $rootScope.promises.not_empty();
      },
      cancel: function() {
        var i, len, promise, ref, results;
        ref = $rootScope.promises;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          promise = ref[i];
          log.info('Cancelling promise');
          results.push(promise.cancel(new Promises.Cancellation_error()));
        }
        return results;
      },
      is_navigating_away: function(error) {
        return error instanceof Promises.Cancellation_error;
      },
      not_navigating_away: function(error) {
        return !Promises.is_navigating_away(error);
      },
      check_for_pending_promises: function() {
        var i, len, listener;
        if (Promises.pending()) {
          return;
        }
        for (i = 0, len = done_listeners.length; i < len; i++) {
          listener = done_listeners[i];
          listener();
        }
        return done_listeners = [];
      },
      when_done: function(listener) {
        return done_listeners.push(listener);
      },
      wait: function() {
        return done_listeners = [];
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Routing_model_applier', ["$injector", "api", "log", "Port", "Rule", "Device_routing", "Model", "Model_service", "Device_settings", "Enums", function($injector, api, log, Port, Rule, Device_routing, Model, Model_service, Device_settings, Enums) {
    var Routing_model_applier, _extract_ports, _set_rules_config, _set_up_rules, api_stub, save_configuration_batch, set_joint_ports_subports_eth_modes, set_up_rules, update_ports, validate_joint_port_routing;
    api_stub = function() {
      var request_json, stub;
      request_json = api.request_json.bind(api);
      return stub = {
        batch: [],
        begin: function() {},
        end: function() {
          return dummy_promise(this.batch);
        },
        call: function(method, parameters) {
          this.batch.push(request_json(method, parameters));
          return dummy_promise(true);
        }
      };
    };
    set_joint_ports_subports_eth_modes = function(joint_ports) {
      var i, joint_port, len, port, results;
      results = [];
      for (i = 0, len = joint_ports.length; i < len; i++) {
        joint_port = joint_ports[i];
        if (joint_port.mode === '40G') {
          results.push((function() {
            var j, len1, ref, results1;
            ref = joint_port.ports;
            results1 = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              port = ref[j];
              results1.push(port.eth_mode = port === joint_port.ports[0] ? Enums.ethernet_port_modes['40GBASE_SR4'] : Enums.ethernet_port_modes.DISABLED);
            }
            return results1;
          })());
        }
      }
      return results;
    };
    _extract_ports = function(rules) {
      var i, j, k, len, len1, len2, port, ports, ref, ref1, rule;
      ports = {
        all: []
      };
      for (i = 0, len = rules.length; i < len; i++) {
        rule = rules[i];
        ref = rule.inputs;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          port = ref[j];
          if (!ports.all.has(port.id)) {
            ports.all.push(port.id);
          }
        }
        ref1 = rule.outputs;
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          port = ref1[k];
          if (!ports.all.has(port.id)) {
            ports.all.push(port.id);
          }
        }
      }
      ports.all.sort(function(a, b) {
        return a - b;
      });
      return ports;
    };
    validate_joint_port_routing = function(joint_ports, routed_ports) {
      var i, joint_port, len, port, results;
      results = [];
      for (i = 0, len = joint_ports.length; i < len; i++) {
        joint_port = joint_ports[i];
        if (joint_port.mode === '40G') {
          results.push((function() {
            var j, len1, ref, results1;
            ref = joint_port.ports;
            results1 = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              port = ref[j];
              if (port !== joint_port.ports[0]) {
                if (routed_ports.all.has(port.id)) {
                  throw new Error("Joint port " + joint_port.id + " is set to 40G mode, but port " + port.id + " is being used in rules");
                } else {
                  results1.push(void 0);
                }
              }
            }
            return results1;
          })());
        }
      }
      return results;
    };
    update_ports = function(rules, ports, joint_ports) {
      var i, len, port, routed_ports;
      routed_ports = _extract_ports(rules);
      validate_joint_port_routing(joint_ports, routed_ports);
      api.begin();
      for (i = 0, len = ports.length; i < len; i++) {
        port = ports[i];
        if (routed_ports.all.has(port.id)) {
          port.enabled = true;
          Port.configure(port);
        }
      }
      return api.end();
    };
    save_configuration_batch = function(batch) {
      return api.call('saveConfig', {
        config: JSON.stringify(batch)
      });
    };
    set_up_rules = function(rules, ports, joint_ports, options) {
      return dummy_promise().then(function() {
        options = options || {};
        Model_service.ensure_ports_lock();
        return (function(api, Port) {
          if (options.offline_batch) {
            api = api_stub();
            Port = $injector.invoke(Port_service_constructor, this, {
              api: api
            });
          }
          api.begin();
          Routing_model_applier.set_interface_version(api);
          _set_up_rules(rules, ports, joint_ports, options, api, Port);
          return api.end();
        })(api, Port);
      });
    };
    _set_rules_config = function(api, rules) {
      rules = Device_routing.convert_to_device_rules(rules);
      return api.call('setRulesList', {
        rules: rules
      });
    };
    _set_up_rules = function(rules, ports, joint_ports, options, api, Port) {
      var i, len, port;
      set_joint_ports_subports_eth_modes(joint_ports);
      for (i = 0, len = ports.length; i < len; i++) {
        port = ports[i];
        Port.configure(port);
      }
      return _set_rules_config(api, rules);
    };
    return Routing_model_applier = {
      save_configuration: function(rules, ports, joint_ports) {
        return Routing_model_applier.generate_configuration_batch(rules, ports, joint_ports).then(function(batch) {
          return save_configuration_batch(batch);
        });
      },
      generate_configuration_batch: function(rules, ports, joint_ports) {
        var i, joint_port, joint_ports_copy, len, ports_copy;
        ports_copy = angular.copy(ports);
        joint_ports_copy = angular.copy(joint_ports);
        for (i = 0, len = joint_ports_copy.length; i < len; i++) {
          joint_port = joint_ports_copy[i];
          joint_port.ports = joint_port.ports.map(function(original_port) {
            return ports_copy.filter(function(port) {
              return port.id === original_port.id;
            })[0];
          });
        }
        return set_up_rules(rules, ports_copy, joint_ports_copy, {
          offline_batch: true
        });
      },
      set_interface_version: function(api, version) {
        return api.call('setInterfaceVersion', {
          ver: version || Device_settings.interface_version
        });
      },
      set_up_routing: function(rules, ports, joint_ports) {
        return update_ports(rules, ports, joint_ports).then(function() {
          return Routing_model_applier.generate_configuration_batch(rules, ports, joint_ports);
        }).bind({}).then(function(batch) {
          return this.batch = batch;
        }).then(function() {
          return save_configuration_batch(this.batch);
        }).then(function() {
          return _set_rules_config(api, rules);
        });
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Routing_model_errors', ["translate", "Device_settings", function(translate, Device_settings) {
    var Routing_model_errors;
    return Routing_model_errors = {
      Maximum_number_of_mapper_values_exceeded: custom_error('Maximum_number_of_mapper_values_exceeded'),
      Maximum_number_of_mirroring_groups_exceeded: custom_error('Maximum_number_of_mirroring_groups_exceeded'),
      Maximum_number_of_access_control_lists_exceeded: custom_error('Maximum_number_of_access_control_lists_exceeded'),
      is: function(error) {
        var error_class, name;
        for (name in Routing_model_errors) {
          error_class = Routing_model_errors[name];
          if (error_class.is_custom_error) {
            if (error instanceof error_class) {
              return true;
            }
          }
        }
      },
      message: function(error) {
        if (error instanceof Routing_model_errors.Maximum_number_of_mapper_values_exceeded) {
          return translate('configuration.error.too_many_intervals_in_filters');
        }
        if (error instanceof Routing_model_errors.Maximum_number_of_mirroring_groups_exceeded) {
          return translate('configuration.error.max_mirroring_ports', {
            max: Device_settings.max_mirror_groups
          });
        }
        if (error instanceof Routing_model_errors.Maximum_number_of_access_control_lists_exceeded) {
          return translate('configuration.error.max_acls', {
            max: Device_settings.max_acls
          });
        }
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Rule', ["$rootScope", "api", "Port", "Device_routing", function($rootScope, api, Port, Device_routing) {
    var Rule;
    return Rule = {
      current: function(rule) {
        if (rule == null) {
          return $rootScope.current_rule;
        }
        return $rootScope.current_rule = rule;
      },
      copy: function(rule) {
        var copy, i, j, len, len1, port, ref, ref1;
        copy = angular.copy(rule);
        copy.inputs = [];
        ref = rule.inputs;
        for (i = 0, len = ref.length; i < len; i++) {
          port = ref[i];
          copy.inputs.push(port);
        }
        copy.outputs = [];
        ref1 = rule.outputs;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          port = ref1[j];
          copy.outputs.push(port);
        }
        return copy;
      },
      sanitize: function(rule) {
        var filter, i, len, ref;
        delete rule.$$hashKey;
        ref = rule.filters;
        for (i = 0, len = ref.length; i < len; i++) {
          filter = ref[i];
          delete filter.$$show_mask;
          delete filter.$$interval;
        }
        return rule.filters = (function() {
          var j, len1, ref1, results;
          ref1 = rule.filters;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            filter = ref1[j];
            if (!Device_routing.Filter.is_empty(filter)) {
              results.push(filter);
            }
          }
          return results;
        })();
      },
      serialize: function(rule) {
        var port;
        rule = angular.copy(rule);
        rule.inputs = (function() {
          var i, len, ref, results;
          ref = rule.inputs;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            port = ref[i];
            results.push(port.id);
          }
          return results;
        })();
        rule.outputs = (function() {
          var i, len, ref, results;
          ref = rule.outputs;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            port = ref[i];
            results.push(port.id);
          }
          return results;
        })();
        Rule.sanitize(rule);
        return rule;
      },
      deserialize: function(rule) {
        var port_id;
        rule = angular.copy(rule);
        rule.inputs = (function() {
          var i, len, ref, results;
          ref = rule.inputs;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            port_id = ref[i];
            results.push(Port.by_id(port_id));
          }
          return results;
        })();
        rule.outputs = (function() {
          var i, len, ref, results;
          ref = rule.outputs;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            port_id = ref[i];
            results.push(Port.by_id(port_id));
          }
          return results;
        })();
        return rule;
      },
      merge: function(rules, start_from) {
        var groupable_port, groupable_ports, i, index, input, input_ports_are_found_in_between, intermediate_rule, intermediate_rules, j, joint_inputs, k, l, len, len1, len2, len3, len4, len5, len6, m, n, o, p, q, ref, ref1, ref2, ref3, ref4, ref5, rule, rule_copy, subsequent, subsequent_rule, subsequent_rule_copy;
        if (rules.is_empty()) {
          return [];
        }
        if (start_from == null) {
          start_from = 1;
        }
        for (index = i = ref = start_from, ref1 = rules.length; ref <= ref1 ? i <= ref1 : i >= ref1; index = ref <= ref1 ? ++i : --i) {
          rule = rules[index - 1];
          intermediate_rules = [];
          for (subsequent = j = ref2 = index, ref3 = rules.length; ref2 <= ref3 ? j <= ref3 : j >= ref3; subsequent = ref2 <= ref3 ? ++j : --j) {
            if (subsequent === index) {
              continue;
            }
            subsequent_rule = rules[subsequent - 1];
            intermediate_rules.push(subsequent_rule);
            if (angular.equals(rule, subsequent_rule)) {
              rules.remove_at(subsequent - 1);
              if (index > rules.length) {
                return rules;
              }
              return Rule.merge(rules, index);
            }
            if (rule.inputs.intersect(subsequent_rule.inputs).is_empty()) {
              rule_copy = angular.copy(rule);
              subsequent_rule_copy = angular.copy(subsequent_rule);
              delete rule_copy.inputs;
              delete subsequent_rule_copy.inputs;
              if (angular.equals(rule_copy, subsequent_rule_copy)) {
                groupable_ports = angular.copy(subsequent_rule.inputs);
                for (k = 0, len = intermediate_rules.length; k < len; k++) {
                  intermediate_rule = intermediate_rules[k];
                  if (intermediate_rule === subsequent_rule) {
                    continue;
                  }
                  ref4 = angular.copy(groupable_ports);
                  for (l = 0, len1 = ref4.length; l < len1; l++) {
                    groupable_port = ref4[l];
                    if (intermediate_rule.inputs.has(groupable_port) || intermediate_rule.outputs.has(groupable_port)) {
                      groupable_ports.remove(groupable_port);
                    }
                  }
                }
                if (groupable_ports.not_empty()) {
                  for (m = 0, len2 = groupable_ports.length; m < len2; m++) {
                    groupable_port = groupable_ports[m];
                    rule.inputs.push(groupable_port);
                    subsequent_rule.inputs.remove(groupable_port);
                  }
                  rule.inputs.sort(function(a, b) {
                    return a - b;
                  });
                  if (subsequent_rule.inputs.is_empty()) {
                    rules.remove_at(subsequent - 1);
                  }
                  if (index > rules.length) {
                    return rules;
                  }
                  return Rule.merge(rules, index);
                }
              }
            }
            if (rule.action === 'mirror' && subsequent_rule.action === 'mirror') {
              if (angular.equals(rule.outputs, subsequent_rule.outputs)) {
                rule_copy = angular.copy(rule);
                subsequent_rule_copy = angular.copy(subsequent_rule);
                delete rule_copy.inputs;
                delete subsequent_rule_copy.inputs;
                if (angular.equals(rule_copy, subsequent_rule_copy)) {
                  input_ports_are_found_in_between = false;
                  joint_inputs = angular.copy(rule.inputs);
                  ref5 = subsequent_rule.inputs;
                  for (n = 0, len3 = ref5.length; n < len3; n++) {
                    input = ref5[n];
                    if (!joint_inputs.has(input)) {
                      joint_inputs.push(input);
                    }
                  }
                  for (o = 0, len4 = intermediate_rules.length; o < len4; o++) {
                    intermediate_rule = intermediate_rules[o];
                    if (intermediate_rule === subsequent_rule) {
                      continue;
                    }
                    if (intermediate_rule.inputs.intersect(joint_inputs).not_empty() || intermediate_rule.outputs.intersect(joint_inputs).not_empty()) {
                      input_ports_are_found_in_between = true;
                      break;
                    }
                  }
                  if (!input_ports_are_found_in_between) {
                    rule.inputs = joint_inputs;
                    rule.inputs.sort(function(a, b) {
                      return a - b;
                    });
                    rules.remove_at(subsequent - 1);
                    if (index > rules.length) {
                      return rules;
                    }
                    return Rule.merge(rules, index);
                  }
                }
              }
            }
            if (rule.action === 'mirror' && subsequent_rule.action !== 'mirror') {
              rule_copy = angular.copy(rule);
              subsequent_rule_copy = angular.copy(subsequent_rule);
              delete rule_copy.outputs;
              delete subsequent_rule_copy.outputs;
              delete rule_copy.action;
              delete subsequent_rule_copy.action;
              delete subsequent_rule_copy.hashing_profile;
              if (angular.equals(rule_copy, subsequent_rule_copy)) {
                input_ports_are_found_in_between = false;
                for (p = 0, len5 = intermediate_rules.length; p < len5; p++) {
                  intermediate_rule = intermediate_rules[p];
                  if (intermediate_rule === subsequent_rule) {
                    continue;
                  }
                  if (intermediate_rule.inputs.intersect(rule.inputs).not_empty() || intermediate_rule.outputs.intersect(rule.inputs).not_empty()) {
                    input_ports_are_found_in_between = true;
                    break;
                  }
                }
                if (!input_ports_are_found_in_between) {
                  rule.mirror_to = rule.outputs;
                  rule.mirror_to.sort(function(a, b) {
                    return a - b;
                  });
                  angular.extend(rule, subsequent_rule);
                  rules.remove_at(subsequent - 1);
                  if (index > rules.length) {
                    return rules;
                  }
                  return Rule.merge(rules, index);
                }
              }
            }
            if (rule.action === 'mirror' && subsequent_rule.action === 'mirror') {
              if (rule.outputs.intersect(subsequent_rule.outputs).is_empty()) {
                rule_copy = angular.copy(rule);
                subsequent_rule_copy = angular.copy(subsequent_rule);
                delete rule_copy.outputs;
                delete subsequent_rule_copy.outputs;
                if (angular.equals(rule_copy, subsequent_rule_copy)) {
                  input_ports_are_found_in_between = false;
                  for (q = 0, len6 = intermediate_rules.length; q < len6; q++) {
                    intermediate_rule = intermediate_rules[q];
                    if (intermediate_rule === subsequent_rule) {
                      continue;
                    }
                    if (intermediate_rule.inputs.intersect(rule.inputs).not_empty() || intermediate_rule.outputs.intersect(rule.inputs).not_empty()) {
                      input_ports_are_found_in_between = true;
                      break;
                    }
                  }
                  if (!input_ports_are_found_in_between) {
                    rule.outputs = rule.outputs.concat(subsequent_rule.outputs);
                    rules.remove_at(subsequent - 1);
                    if (index > rules.length) {
                      return rules;
                    }
                    return Rule.merge(rules, index);
                  }
                }
              }
            }
          }
        }
        return rules;
      },
      remove_port: function(port_id, port_type) {
        var port, rule;
        port = Port.by_id(port_id);
        rule = Rule.current();
        if (!rule) {
          return;
        }
        Rule.current(false);
        switch (port_type) {
          case 'input':
            rule.inputs.remove(port);
            Object.set($rootScope.view.ports, port.id, 'selectedIn', false);
            break;
          case 'output':
            rule.outputs.remove(port);
            Object.set($rootScope.view.ports, port.id, 'selectedOut', false);
            break;
          default:
            throw new Error("Unknown data-port-type: " + port_type);
        }
        return rule;
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('Status', ["$rootScope", "translate", function($rootScope, translate) {
    var Status;
    return Status = {
      statuses: {
        busy: 'busy',
        progress: 'progress',
        idle: 'idle'
      },
      set: function(status, message, options) {
        var current_status_data, id, status_data;
        status_data = Status.status_data(status, message, options);
        if ($rootScope.status) {
          current_status_data = angular.copy($rootScope.status);
          delete current_status_data.id;
          if (angular.equals(status_data, current_status_data)) {
            return;
          }
        }
        id = $rootScope.status ? $rootScope.status.id + 1 : 1;
        return $rootScope.safeApply(function() {
          return $rootScope.status = angular.extend(status_data, {
            id: id
          });
        });
      },
      status_data: function(status, message, options) {
        var status_data;
        return status_data = {
          code: status,
          message: message || '',
          sticky: options && options.sticky
        };
      },
      busy: function(message) {
        return this.set(this.statuses.busy, message, {
          sticky: true
        });
      },
      not_busy: function() {
        if (!$rootScope.status) {
          return;
        }
        if ($rootScope.status.code === this.statuses.busy) {
          return Status.idle();
        }
      },
      progress: function(message) {
        return this.set(this.statuses.progress, message, {
          sticky: true
        });
      },
      idle: function(message, options) {
        return this.set(this.statuses.idle, message, options);
      },
      info: function(message, options) {
        return this.idle(message, options);
      },
      error: function(message, options) {
        console.error(message.stack || message);
        if (message instanceof Error) {
          message = message.message;
        }
        if (message.code && message.message) {
          message = message.message;
        }
        if (!$rootScope.application_view_ready || $rootScope.this_page.status === false || $rootScope.this_page.page === 'debug') {
          if ((translate('error.generic')) === 'error.generic') {
            alert('Error:\n\n' + message);
          } else {
            alert(translate('error.generic', {
              message: message
            }));
          }
        }
        return this.set('error', message, options);
      },
      not_authenticated: function() {
        if ($rootScope.status && $rootScope.status.code === 'busy') {
          return this.idle();
        }
      },
      place: function(where) {
        var $element;
        $element = $('.status');
        if (where) {
          return $element.appendTo('.' + where + '-status-place');
        }
        if ($('.preferred-status-place')[0]) {
          return $element.appendTo($('.preferred-status-place'));
        }
        return $element.appendTo($('.default-status-place'));
      },
      test: function() {
        Status.busy('Testing busy');
        (function() {
          return Status.error('Testing error');
        }).delay(3000);
        return (function() {
          return Status.idle('Testing idle');
        }).delay(6000);
      }
    };
  }]);

}).call(this);

(function() {
  app.factory('translate', ["$translate", function($translate) {
    var translate;
    return translate = function() {
      return $translate.instant.apply(this, arguments);
    };
  }]);

}).call(this);

(function() {
  app.factory('Utilities', function() {
    var Utilities;
    return Utilities = {
      hex_string_to_number: function(mask) {
        return parseInt(mask, 16);
      },
      number_to_hex_string: function(mask) {
        return mask.toString(16).toUpperCase();
      },
      hex_string_to_number_array: function(hex) {
        if (hex.length % 2) {
          hex = '0' + hex;
        }
        return hex.match(/.{1,2}/g).map(function(character) {
          return Utilities.hex_string_to_number(character);
        });
      },
      number_array_to_hex_string: function(array) {
        array = array.clone();
        return array.map(function(number) {
          var hex;
          hex = Utilities.number_to_hex_string(number);
          if (hex.length === 1) {
            hex = '0' + hex;
          }
          return hex;
        }).join('');
      },
      hex_pretty_print: function(hex, position) {
        var before, byte, byte_index, bytes, calculate_shift, delta_position, fours_in_line, original, printed, shift;
        original = hex;
        before = hex.substring(0, position);
        delta_position = before.length - before.replace(/\s/g, '').length;
        position -= delta_position;
        hex = hex.replace(/\s/g, '').toUpperCase();
        fours_in_line = 4;
        calculate_shift = function(byte_index) {
          var fours, lines_before;
          fours = Math.floor(byte_index / 4);
          lines_before = Math.floor(fours / fours_in_line);
          return byte_index + fours - lines_before * '\n'.length;
        };
        bytes = hex.match(/.{1,2}/g);
        if (!bytes) {
          return [original, 0];
        }
        shift = null;
        printed = '';
        byte_index = 0;
        while (byte_index < bytes.length) {
          byte = bytes[byte_index];
          if (shift == null) {
            position -= 2;
            if (position <= 0) {
              shift = calculate_shift(byte_index);
            }
          }
          printed += byte;
          if (byte_index + 1 < bytes.length) {
            if (byte_index !== 0 && (byte_index + 1) % (4 * fours_in_line) === 0) {
              printed += '\n';
            } else if (byte_index !== 0 && (byte_index + 1) % 4 === 0) {
              printed += '  ';
            } else {
              printed += ' ';
            }
          }
          byte_index++;
        }
        return [printed, shift != null ? shift - delta_position : 0];
      },
      trim_masked_hex: function(hex) {
        if (hex == null) {
          return;
        }
        hex = hex.replace(/[\sX]+$/, '');
        if (hex.replace(/\s/g, '').length % 2) {
          hex = hex + 'X';
        }
        return hex;
      },
      difference: function(from, to, diff, path) {
        var key, value;
        if ((diff == null) && (path == null)) {
          diff = {};
          path = '';
        }
        if (typeof from === 'object') {
          if (typeof to !== 'object') {
            throw new Error('Unequivalent object trees. Leaves:', from, to);
          }
          for (key in from) {
            value = from[key];
            Utilities.difference(from[key], to[key], diff, path === '' ? key : path + "." + key);
          }
        } else {
          if (typeof to === 'object') {
            throw new Error('Unequivalent object trees. Leaves:', from, to);
          }
          if (!angular.equals(from, to)) {
            Object.set(diff, path, to);
          }
        }
        return diff;
      }
    };
  });

}).call(this);

(function() {
  app.factory('Version', function() {
    return Version;
  });

}).call(this);

(function() {
  this.Version = function(version) {
    var api, to_parts;
    if (!/\d+\.\d+\.\d+/.test(version)) {
      version = '1.0.0';
    }
    to_parts = function(version) {
      return version.split('.').map(function(x) {
        return parseInt(x);
      });
    };
    return api = {
      compare: function(another_version) {
        var another_part, another_parts, part, parts;
        parts = to_parts(version);
        another_parts = to_parts(another_version);
        while (parts.not_empty()) {
          part = parts.shift();
          another_part = another_parts.shift();
          if (part < another_part) {
            return -1;
          } else if (part > another_part) {
            return 1;
          }
        }
        return 0;
      },
      before: function(another_version) {
        return api.compare(another_version) < 0;
      },
      after: function(another_version) {
        return api.compare(another_version) > 0;
      },
      starting_from: function(another_version) {
        return api.compare(another_version) >= 0;
      },
      greater_or_equal: function(another_version) {
        return api.compare(another_version) >= 0;
      },
      no_higher_than: function(another_version) {
        return api.compare(another_version) <= 0;
      },
      less_or_equal: function(another_version) {
        return api.compare(another_version) <= 0;
      },
      toString: function() {
        return version;
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb2ZmZWUiLCJhcHAuanMiLCJsaWIvZmlsdGVycy5qcyIsInBhZ2VzLmNvZmZlZSIsInBhZ2VzLmpzIiwibGliL2tleWJvYXJkLmpzIiwiaTE4bi9fLmNvZmZlZSIsImkxOG4vXy5qcyIsImxpYi9sdmwtZHJhZy1kcm9wLmpzIiwiaTE4bi9lbl9VUy5jb2ZmZWUiLCJpMThuL2VuX1VTLmpzIiwibGliL2x2bC11dWlkLmpzIiwiaTE4bi9ydV9SVS5jb2ZmZWUiLCJpMThuL3J1X1JVLmpzIiwibGliL21kNS5qcyIsImxpYi9saWIuY29mZmVlIiwibGliL2xpYi5qcyIsImxpYi9zZy1kaXJlY3RpdmVzLmpzIiwicGFnZXMvYWRtaW4uY29mZmVlIiwicGFnZXMvYWRtaW4uanMiLCJsaWIvc3RpY2t5ZWFoLmpzIiwicGFnZXMvZGVidWcuY29mZmVlIiwicGFnZXMvZGVidWcuanMiLCJsaWIvbW9kZXJuaXpyL21vZGVybml6ci5qcyIsInBhZ2VzL3BvcnRzLmNvZmZlZSIsInBhZ2VzL3BvcnRzLmpzIiwibGliL3NnLWRpcmVjdGl2ZXMvc2ZwSW5mby5qcyIsInBhZ2VzL3JvdXRpbmcuY29mZmVlIiwicGFnZXMvcm91dGluZy5qcyIsInBhZ2VzL3NldHRpbmdzLmNvZmZlZSIsInBhZ2VzL3NldHRpbmdzLmpzIiwic2VydmljZXMvYXBpLmNvZmZlZSIsInNlcnZpY2VzL2FwaS5qcyIsInNlcnZpY2VzL2Jyb3dzZXIuanMiLCJzZXJ2aWNlcy9icm93c2VyLmNvZmZlZSIsInNlcnZpY2VzL2NvbmZpZ3VyYXRpb24uY29mZmVlIiwic2VydmljZXMvY29uZmlndXJhdGlvbi5qcyIsInNlcnZpY2VzL2NvbmZpZ3VyYXRpb25zLmNvZmZlZSIsInNlcnZpY2VzL2NvbmZpZ3VyYXRpb25zLmpzIiwic2VydmljZXMvZGV2aWNlIGd1aS5jb2ZmZWUiLCJzZXJ2aWNlcy9kZXZpY2UgZ3VpLmpzIiwic2VydmljZXMvZGV2aWNlIHNldHRpbmdzLmNvZmZlZSIsInNlcnZpY2VzL2RldmljZSBzZXR0aW5ncy5qcyIsInNlcnZpY2VzL2RldmljZS5jb2ZmZWUiLCJzZXJ2aWNlcy9kZXZpY2UuanMiLCJzZXJ2aWNlcy9kZXZpY2Vfcm91dGluZy5jb2ZmZWUiLCJzZXJ2aWNlcy9kZXZpY2Vfcm91dGluZy5qcyIsInNlcnZpY2VzL2VudW1zLmNvZmZlZSIsInNlcnZpY2VzL2VudW1zLmpzIiwic2VydmljZXMvZmlsZWRiLmNvZmZlZSIsInNlcnZpY2VzL2ZpbGVkYi5qcyIsInNlcnZpY2VzL2dyYXBoLmNvZmZlZSIsInNlcnZpY2VzL2dyYXBoLmpzIiwic2VydmljZXMvZ3VpLmNvZmZlZSIsInNlcnZpY2VzL2d1aS5qcyIsInNlcnZpY2VzL2xvZy5jb2ZmZWUiLCJzZXJ2aWNlcy9sb2cuanMiLCJzZXJ2aWNlcy9sb2dpbi5jb2ZmZWUiLCJzZXJ2aWNlcy9sb2dpbi5qcyIsInNlcnZpY2VzL21vZGVsIHNlcnZpY2UuY29mZmVlIiwic2VydmljZXMvbW9kZWwgc2VydmljZS5qcyIsInNlcnZpY2VzL21vZGVsLmNvZmZlZSIsInNlcnZpY2VzL21vZGVsLmpzIiwic2VydmljZXMvbmV0d29yay5jb2ZmZWUiLCJzZXJ2aWNlcy9uZXR3b3JrLmpzIiwic2VydmljZXMvcG9ydCBudW1lcmF0aW9uLmNvZmZlZSIsInNlcnZpY2VzL3BvcnQgbnVtZXJhdGlvbi5qcyIsInNlcnZpY2VzL3BvcnQgdmlldy5jb2ZmZWUiLCJzZXJ2aWNlcy9wb3J0IHZpZXcuanMiLCJzZXJ2aWNlcy9wb3J0LmNvZmZlZSIsInNlcnZpY2VzL3BvcnQuanMiLCJzZXJ2aWNlcy9wcm9taXNlcy5jb2ZmZWUiLCJzZXJ2aWNlcy9wcm9taXNlcy5qcyIsInNlcnZpY2VzL3JvdXRpbmdfbW9kZWxfYXBwbGllci5jb2ZmZWUiLCJzZXJ2aWNlcy9yb3V0aW5nX21vZGVsX2FwcGxpZXIuanMiLCJzZXJ2aWNlcy9yb3V0aW5nX21vZGVsX2Vycm9ycy5jb2ZmZWUiLCJzZXJ2aWNlcy9yb3V0aW5nX21vZGVsX2Vycm9ycy5qcyIsInNlcnZpY2VzL3J1bGUuY29mZmVlIiwic2VydmljZXMvcnVsZS5qcyIsInNlcnZpY2VzL3N0YXR1cy5jb2ZmZWUiLCJzZXJ2aWNlcy9zdGF0dXMuanMiLCJzZXJ2aWNlcy90cmFuc2xhdGUuY29mZmVlIiwic2VydmljZXMvdHJhbnNsYXRlLmpzIiwic2VydmljZXMvdXRpbGl0aWVzLmNvZmZlZSIsInNlcnZpY2VzL3V0aWxpdGllcy5qcyIsInNlcnZpY2VzL3ZlcnNpb24gZmFjdG9yeS5jb2ZmZWUiLCJzZXJ2aWNlcy92ZXJzaW9uIGZhY3RvcnkuanMiLCJzZXJ2aWNlcy92ZXJzaW9uLmNvZmZlZSIsInNlcnZpY2VzL3ZlcnNpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsQ0FBQSxXQUFBO0VBQUEsSUFBQSxJQUFBLEtBQUEsV0FBQSxjQUFBOztFQUFBLGVBQWUsU0FBQyxTQUFEO0lDQVgsT0RBd0IsTUFBTTs7O0VBR2xDLFlBQVksU0FBQyxPQUFEO0lDQ1IsT0RBRixRQUFRLE1BQU07OztFQUloQixPQUFPLFVBQVUsU0FBQyxLQUFLLEtBQUssTUFBTSxLQUFLLE9BQXRCO0lBRWYsSUFBQSxPQUFBLEtBQUE7SUFBQSxVQUFVO0lBSVYsUUFBQSxDQUFBLE1BQUEsQ0FBQSxRQUFBLE9BQUEsTUFBZTtNQUFBLElBQUssZUFBZTs7SUFDbkMsU0FBQSxDQUFBLE9BQUEsQ0FBQSxVQUFBLE9BQUEsT0FBa0I7TUFBQSxJQUFLLGNBQWM7O0lBRXJDLGFBQWEsWUFBWSxNQUFNLFlBQVksTUFBTSxhQUFhLE9BQU87SUFJckUsT0FBTzs7O0VBSVQsUUFBUSxPQUFPLGdCQUFnQixJQUFJLFFBQVEscUJBQXFCLFdBQUE7SUFDOUQsT0FBTyxTQUFDLFdBQVcsT0FBWjtNQUNMLFVBQVU7TUNKUixPREtGLGFBQWEsVUFBVTs7OztFQUszQixLQUFLLFFBQVE7O0VBQ2IsTUFBTSxRQUFRLE9BQU8sT0FBTyxDQUMxQixXQUNBLGNBQ0EsY0FVQSxnQkFDQSwyQkFDQSw4QkFDQSxxQkFDQSwwQkFDQSxpQkFFRCw4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RUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7RUFDekIsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksSUFBSTtFQUN6QixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO0VBQ3pCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLElB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BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLGNBQW9CO01BQ3BCLFVBQW9CO01BQ3BCLFVBQW9CO01BQ3BCLFlBQW9CO01BQ3BCLFVBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLGVBQW9CO01BQ3BCLFNBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFFBQW9CO01BQ3BCLGNBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFNBQW9CO01BQ3BCLFdBQW9CO01BQ3BCLGNBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFNBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFVBQW9CO01BQ3BCLFdBQW9CO01BQ3BCLFNBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFVBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLGVBQW9CO01BQ3BCLGFBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFFBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLE1BQW9CO01BQ3BCLE9BQW9CO01BQ3BCLGtCQUFvQjtNQUNwQixRQUFvQjtNQUNwQixRQUFvQjtNQUNwQixTQUFvQjtNQUNwQixZQUFvQjtNQUNwQixRQUFvQjtNQUNwQixPQUFvQjtNQUNwQixRQUFvQjtNQUNwQixRQUFvQjtNQUNwQixNQUFvQjtNQUNwQixtQkFBb0I7TUFDcEIsbUJBQW9CO01BQ3BCLFdBQW9CO01BQ3BCLGNBQW9CO01BQ3BCLFNBQW9CO01BQ3BCLE9BQW9CO01BQ3BCLFNBQW9CO01BQ3BCLFFBQW9CO01BQ3BCLFFBQW9COztJQUl0QixxQkFBQSxDQUFBLFdBQUE7TUNESSxJQUFJLEdBQUc7TURDVyxVQUFBO01DQ2xCLEtERGlFLE9BQUEsSUFBQSxHQUFBLEtBQUEsR0FBQSxPQUFBLEVBQUEsR0FBL0M7UUNFaEIsUUFBUSxLREZRLEtBQUssSUFBSSxHQUFHLEtBQUssS0FBSyxJQUFJLEdBQUc7O01DSS9DLE9BQU87O0lESFgsbUJBQW1CLE9BQU87SUFFMUIsZUFBZSxTQUFDLFlBQUQ7TUFDYixJQUFBLGlCQUFBLG1CQUFBO01BQUEsb0JBQW9CLG1CQUFtQixJQUFJLFNBQUMsT0FBRDtRQUN6QyxJQUFBLEdBQUE7UUFBQSxTQUFZLGVBQWMsSUFBTyxLQUF4QixDQUFBLFdBQUE7VUNPTCxJQUFJLEdBQUcsS0FBSztVRFAwQixVQUFBO1VDU3RDLEtEVGlELElBQUEsSUFBQSxHQUFBLE1BQUEsWUFBQSxLQUFBLE1BQUEsS0FBQSxNQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxHQUFYO1lDVXBDLFFBQVEsS0RWNEI7O1VDWXRDLE9BQU87O1FEWFgsT0FBTyxRQUFRO1FBQ2YsT0FBTzs7TUFFVCxXQUFXO01BQ1gsSUFBRyxhQUFhLEdBQWhCO1FBQ0Usa0JBQWtCLGFBQWEsYUFBYTtRQUM1QyxXQUFXLGdCQUFnQixJQUFJLFNBQUMsYUFBRDtVQ2MzQixPRGQ0QyxDQUFDLEtBQUssT0FBTzs7O01BRS9ELE9BQU8sU0FBUyxPQUFPOztJQUV6QixlQUFlLGFBQWEsR0FBRyxJQUFJLFNBQUMsYUFBRDtNQ2dCL0IsT0RoQmdELFlBQVksS0FBSzs7SUFFckUsbUJBQ0U7TUFBQSxNQUFTOztJQUVYLGtCQUNFO01BQUEsTUFBUzs7SUFJWCxRQUNFO01BQUEsY0FBYztNQUVkLHFCQUNFO1FBQUEsZUFBZ0I7UUFDaEIsY0FBZ0I7UUFDaEIsY0FBZ0I7UUFDaEIsZUFBZ0I7UUFDaEIsZUFBZ0I7UUFDaEIsY0FBZ0I7UUFDaEIsZUFBZ0I7UUFDaEIsZUFBZ0I7UUFDaEIsZUFBZ0I7UUFDaEIsU0FBZ0I7UUFDaEIsWUFBZ0I7UUFDaEIsU0FBZ0I7UUFDaEIsUUFBZ0I7UUFDaEIsU0FBZ0I7O01BRWxCLGFBQ0U7UUFBQSxNQUFtQjtRQUNuQixRQUFtQjtRQUNuQixTQUFtQjtRQUNuQixVQUFtQjtRQUNuQixRQUFtQjtRQUNuQixrQkFBbUI7UUFDbkIsU0FBbUI7O01BRXJCLG9CQUNFO1FBQUEsSUFBSTtRQUNKLElBQUk7UUFDSixJQUFJOztNQUVOLFFBQ0U7UUFBQSxLQUNFO1VBQUEsdUJBQXVCLENBQUM7OztNQUU1QixZQUNFO1FBQUEsbUJBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTtZQUNOLE1BQU07WUFDTixXQUFTLG1CQUFtQjs7VUFDOUIsTUFDRTtZQUFBLE1BQVM7WUFDVCxRQUFTLFVBQVU7WUFDbkIsT0FBUyxVQUFVOztVQUNyQixRQUNFO1lBQUEsT0FBWTtZQUNaLE1BQVk7O1VBQ2QsV0FBWTs7UUFDZCxvQkFDRTtVQUFBLE9BQ0U7WUFBQSxNQUFNOztVQUNSLE1BQU07VUFDTixRQUNFO1lBQUEsT0FBWTtZQUNaLE1BQVk7O1VBQ2QsV0FBWTtVQUNaLFdBQVc7O1FBQ2IseUJBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTs7VUFDUixNQUFNO1VBQ04sUUFDRTtZQUFBLE9BQVk7WUFDWixNQUFZOztVQUNkLFdBQVk7VUFDWixXQUFXOztRQUViLG1CQUNFO1VBQUEsT0FDRTtZQUFBLE1BQU07O1VBQ1IsTUFBTTtVQUNOLFFBQ0U7WUFBQSxPQUFZO1lBQ1osTUFBWTs7VUFDZCxXQUFZO1VBQ1osV0FBVzs7UUFFYix3QkFDRTtVQUFBLE9BQ0U7WUFBQSxNQUFNOztVQUNSLE1BQU07VUFDTixRQUNFO1lBQUEsT0FBWTtZQUNaLE1BQVk7O1VBQ2QsV0FBWTtVQUNaLFdBQVc7O1FBRWIsa0JBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTs7VUFDUixRQUNFO1lBQUEsT0FBVTs7VUFDWixXQUFZOztRQUVkLGFBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTtZQUNOLE1BQU07WUFDTixXQUFTLGFBQWE7O1VBQ3hCLE1BQ0U7WUFBQSxNQUFTO1lBQ1QsUUFBUyxVQUFVO1lBQ25CLE9BQVMsVUFBVTs7VUFDckIsUUFDRTtZQUFBLE9BQVk7WUFDWixNQUFZOztVQUNkLFdBQVk7O1FBRWQsb0JBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTs7VUFDUixNQUNFO1lBQUEsTUFBUztZQUNULFFBQVMsVUFBVTtZQUNuQixPQUFTLFVBQVU7O1VBQ3JCLFFBQ0U7WUFBQSxPQUFhO1lBQ2IsYUFBYTtZQUNiLE1BQWE7O1VBQ2YsV0FBWTtVQUNaLFdBQVc7O1FBRWIseUJBQ0U7VUFBQSxPQUNFO1lBQUEsTUFBTTs7VUFDUixNQUNFO1lBQUEsTUFBUztZQUNULFFBQVMsVUFBVTtZQUNuQixPQUFTLFVBQVU7O1VBQ3JCLFFBQ0U7WUFBQSxPQUFhO1lBQ2IsYUFBYTtZQUNiLE1BQWE7O1VBQ2YsV0FBWTtVQUNaLFdBQVc7O1FBRWIsTUFDRTtVQUFBLE9BQ0U7WUFBQSxNQUFNOztVQUNSLE1BQ0U7WUFBQSxNQUFTO1lBQ1QsUUFBUyxVQUFVO1lBQ25CLE9BQVMsVUFBVTs7VUFDckIsUUFDRTtZQUFBLE9BQVk7WUFDWixNQUFZOztVQUNkLFdBQVk7O1FBQ2QsT0FDRTtVQUFBLE9BQ0U7WUFBQSxNQUFNOztVQUNSLE1BQ0U7WUFBQSxNQUFTO1lBQ1QsUUFBUyxVQUFVO1lBQ25CLE9BQVMsVUFBVTs7VUFDckIsUUFDRTtZQUFBLE9BQVk7WUFDWixNQUFZOztVQUNkLFdBQVk7O1FBRWQsYUFDRTtVQUFBLE9BQU8sU0FBQyxPQUFPLE1BQVI7WUFDTCxJQUFBLEdBQUE7WUFBQSxpQkFBaUI7WUFFakIsSUFBSTtZQUNKLE9BQU0sSUFBSSxLQUFLLFFBQWY7Y0FDRSxJQUFHLEtBQUssT0FBTSxLQUFkO2dCQUNFLFFBQVEsTUFBTSxXQUFXLEdBQUc7O2NBQzlCOztZQUVGLFFBQVEsVUFBVSxnQkFBZ0I7WUFFbEMsUUFBUSxVQUFVLGlCQUFpQixPQUFPLEdBQUc7WUFDN0MsT0FBTztZQUVQLE9BQU8sQ0FBQyxPQUFPOztVQUVqQixRQUFRLFNBQUMsT0FBTyxNQUFSO1lBRU4sUUFBUSxNQUFNLFFBQVEsT0FBTztZQUc3QixJQUFHLE1BQU0sU0FBUyxHQUFsQjtjQUNFLFFBQVEsUUFBUTs7WUFHbEIsT0FBTyxNQUFNLFFBQVEsU0FBUztZQUc5QixPQUFPLEtBQUssUUFBUSxNQUFNO1lBRzFCLFFBQVEsTUFBTSxRQUFRLE1BQU07WUFFNUIsT0FBTyxDQUFDLE9BQU87O1VBRWpCLE9BQ0U7WUFBQSxNQUFNO1lBQ04sUUFBUyxVQUFVO1lBQ25CLE9BQVMsVUFBVTs7VUFDckIsTUFHRTtZQUFBLE9BQVMsVUFBVTs7VUFDckIsUUFDRTtZQUFBLE9BQVk7WUFDWixNQUFZOztVQUNkLFdBQVk7Ozs7SUFFbEIsTUFBTSxTQUNKO01BQUEsbUJBQ0U7UUFBQSxJQUFJO1FBQ0osV0FBVztRQUNYLFlBQVk7UUFDWixRQUFRLE1BQU0sV0FBVztRQUN6QixvQkFBb0I7O01BQ3RCLFlBQ0U7UUFBQSxJQUFJO1FBQ0osUUFDRTtVQUFBLFlBQVk7VUFDWixXQUFXO1VBQ1gsUUFBUSxNQUFNLFdBQVc7O1FBQzNCLGFBQ0U7VUFBQSxZQUFZO1VBQ1osV0FBVztVQUNYLFFBQVEsTUFBTSxXQUFXOztRQUMzQixvQkFBb0I7O01BQ3RCLGtCQUNFO1FBQUEsSUFBSTtRQUNKLFdBQVc7UUFDWCxZQUFZO1FBQ1osb0JBQW9COztNQUN0QixnQkFDRTtRQUFBLElBQWE7UUFDYixXQUFhO1FBQ2IsWUFBYTtRQUNiLFFBQWEsTUFBTSxXQUFXO1FBQzlCLE1BQWEsU0FBQyxHQUFEO1VDNENULE9ENUNnQixFQUFFOztRQUN0QixJQUFhLFNBQUMsR0FBRDtVQzhDVCxPRDlDZ0IsRUFBRTs7UUFDdEIsb0JBQW9COztNQUN0QixXQUNFO1FBQUEsSUFBYTtRQUNiLFdBQWE7UUFDYixZQUFhO1FBQ2IsUUFBYSxNQUFNLFdBQVc7UUFDOUIsTUFBYSxTQUFDLEdBQUQ7VUNpRFQsT0RqRGdCLEVBQUU7O1FBQ3RCLElBQWEsU0FBQyxHQUFEO1VDbURULE9EbkRnQixFQUFFOztRQUN0QixvQkFBb0I7O01BQ3RCLGFBQ0U7UUFBQSxJQUFJO1FBQ0osUUFDRTtVQUFBLFlBQVk7VUFDWixXQUFXO1VBQ1gsUUFBUSxNQUFNLFdBQVc7O1FBQzNCLGFBQ0U7VUFBQSxZQUFZO1VBQ1osV0FBVztVQUNYLFFBQVEsTUFBTSxXQUFXOztRQUMzQixvQkFBb0I7O01BQ3RCLGFBQ0U7UUFBQSxJQUFJO1FBQ0osV0FBVztRQUNYLFlBQVk7UUFDWixRQUFRLE1BQU0sV0FBVztRQUN6QixvQkFBb0I7O01BQ3RCLGFBQ0U7UUFBQSxJQUFJO1FBQ0osV0FBVztRQUNYLFlBQVk7UUFDWixvQkFBb0I7O01BQ3RCLE1BQ0U7UUFBQSxJQUFJO1FBQ0osV0FBVztRQUNYLFlBQVk7UUFDWixRQUFRO1FBQ1Isb0JBQW9COzs7SUFFeEIsT0FBTzs7O0dDOEROLEtBQUs7QUFDUjtBQy9pQkEsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLGtCQUFVLFNBQUMsS0FBRDtJQUdwQixJQUFBLFFBQUE7SUFBQSxhQUFhLFNBQUMsTUFBRDtNQUNYLElBQUE7TUFBQSxXQUFXO01BRVgsSUFBRyxLQUFLLElBQUksTUFBWjtRQUNFLFdBQVcsS0FBSyxPQUFPO1FBQ3ZCLE9BQU8sS0FBSyxNQUFNOztNQUVwQixPQUFPLENBQUMsVUFBVTs7SUNFbEIsT0RBRixTQUVFO01BQUEsTUFBTSxTQUFDLE1BQU0sTUFBUDtRQUNKLElBQUEsVUFBQSxNQUFBO1FBQUEsTUFBbUIsV0FBVyxPQUE3QixXQUFBLElBQUEsSUFBVSxPQUFBLElBQUE7UUNDVCxPREFGLElBQUksS0FBSyxlQUFlO1VBQUUsVUFBVTtVQUFVLE1BQU0sT0FBTztVQUFTLE1BQU07OztNQUc1RSxNQUFNLFNBQUMsTUFBRDtRQUNKLElBQUEsVUFBQSxNQUFBO1FBQUEsTUFBbUIsV0FBVyxPQUE3QixXQUFBLElBQUEsSUFBVSxPQUFBLElBQUE7UUNLVCxPREpGLElBQUksS0FBSyxlQUFlO1VBQUUsVUFBVTtVQUFVLE1BQU0sT0FBTzs7O01BSzdELFFBQVEsU0FBQyxNQUFNLE9BQU8sTUFBZDtRQ0tKLE9ESkYsT0FBTyxLQUFLLE1BQU0sS0FBSyxTQUFDLFFBQUQ7VUFDckIsUUFBUSxPQUFPLE9BQU8sUUFBUTtVQ0s1QixPREpGLE9BQU8sS0FBSyxNQUFNOzs7Ozs7R0NVdkIsS0FBSztBQUNSO0FDeENBLENBQUEsV0FBQTtFQUFBLElBQUksUUFBUSxnRUFBUyxTQUFDLFlBQVksVUFBVSxLQUFLLFdBQVcsTUFBdkM7SUErQm5CLElBQUE7SUM1QkUsT0Q0QkYsUUFDRTtNQUFBLEtBQVk7TUFDWixNQUFZO01BQ1osV0FBWTtNQUNaLE1BQVk7TUFDWixPQUFZO01BUVosU0FBUztRQUNQO1VBQUEsUUFBUztVQUNULE9BQVMsVUFBVTtXQUVuQjtVQUFBLFFBQVM7VUFDVCxPQUFTLFVBQVU7V0FFbkI7VUFBQSxRQUFTO1VBQ1QsT0FBUyxVQUFVOzs7TUFTckIsa0JBQWtCO1FBQ2hCO1VBQUEsWUFBYTtVQUNiLE9BQWEsVUFBVTtVQUN2QixPQUFhLFVBQVU7VUFDdkIsU0FBYTtXQUdiO1VBQUEsWUFBYTtVQUNiLE9BQWEsVUFBVTtXQUV2QjtVQUFBLFlBQWE7VUFDYixPQUFhLFVBQVU7OztNQVV6QixrQkFBa0I7UUFDaEI7VUFBQSxZQUFhO1VBQ2IsT0FBYSxVQUFVO1VBQ3ZCLE9BQWEsVUFBVTtVQUN2QixTQUFhO1dBR2I7VUFBQSxZQUFhO1VBQ2IsT0FBYSxVQUFVO1dBRXZCO1VBQUEsWUFBYTtVQUNiLE9BQWEsVUFBVTs7O01BS3pCLGlCQUFpQjtNQUNqQixpQkFBaUI7TUFHakIsU0FDRTtRQUFBLFFBQ0U7VUFBQSxLQUFTO1VBQ1QsT0FBUztVQUNULFFBQVM7VUFDVCxNQUFTOzs7TUFHYixRQUFRO01BR1IsUUFBUTtNQUdSLE1BQU07TUFHTixVQUFVLFNBQUMsV0FBVyxNQUFaO1FBQ1IsSUFBQSxjQUFBLEdBQUEsU0FBQTtRQUFBLE1BQU0sT0FBTztRQUdiLE1BQU0sUUFBUTtRQVdkLE1BQU0sUUFBUTtRQUNkLEtBQWUsVUFBQSxJQUFBLEdBQUEsTUFBQSxLQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsVUFBQSxLQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsR0FBZjtVQUNFLE1BQU0sTUFBTSxXQUNWO1lBQUEsU0FBUyxDQUFDLEVBQUUsS0FBSyxPQUFPLE9BQU8sU0FBQyxPQUFEO2NDbkUzQixPRG1Fc0MsTUFBTSxPQUFNO2VBQVM7WUFDL0QsVUFBVSxDQUFDLEVBQUUsS0FBSyxRQUFRLE9BQU8sU0FBQyxRQUFEO2NDakU3QixPRGlFeUMsT0FBTyxPQUFNO2VBQVM7OztRQUd2RSxNQUFNLE9BQU87UUFFYixNQUFNLFlBQVk7UUFHbEIsTUFBTSxNQUFNO1FBRVosTUFBTSxNQUFVLElBQUEsSUFBSSxXQUFXLE1BQU07UUFJckMsZUFBZSxPQUFPLEtBQUssTUFBTSxPQUFPLElBQUksU0FBQyxJQUFEO1VDdEV4QyxPRHNFZ0QsU0FBTzs7UUFDM0QsYUFBYSxLQUFLO1FBQ2xCLGFBQWEsS0FBSztRQUNsQixNQUFNLElBQUksY0FBYztRQ3BFdEIsT0R5RUYsTUFBTTs7TUFHUixXQUFXLFNBQUMsV0FBRDtRQUVULElBQUEsR0FBQSxTQUFBO1FBQUEsTUFBTSxPQUFPO1FBRWIsTUFBTSxZQUFZO1FBRWxCLE1BQU0sU0FBUztRQUVmLE1BQU0sT0FBTztRQUdiLE1BQU0sUUFBUTtRQUNkLEtBQWUsVUFBQSxJQUFBLEdBQUEsTUFBQSxLQUFBLE9BQUEsS0FBQSxNQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsVUFBQSxLQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsR0FBZjtVQUNFLE1BQU0sTUFBTSxXQUFXO1lBQUEsTUFBTTs7O1FBRy9CLE1BQU0sTUFBVSxJQUFBLElBQUksV0FBVyxNQUFNO1FDN0VuQyxPRGlGRixNQUFNLElBQUksY0FBYyxPQUFPLEtBQUssTUFBTSxPQUFPLElBQUksU0FBQyxJQUFEO1VDaEZqRCxPRGdGeUQsU0FBTzs7O01BR3RFLE1BQU0sU0FBQyxPQUFEO1FBQ0osSUFBQSxRQUFBLFlBQUEsU0FBQSxVQUFBLE9BQUEsS0FBQSxlQUFBLE9BQUE7UUFBQSxNQUFNLElBQUk7UUFFVixXQUFXO1FBQ1gsTUFBQSxNQUFBO1FBQUEsS0FBQSxXQUFBLEtBQUE7VUM5RUksUUFBUSxJQUFJO1VEK0VkLElBQUcsTUFBTSxRQUFRLE1BQU0sV0FBVyxNQUFNLFVBQXhDO1lBQ0UsU0FBUyxLQUFLOzs7UUFJbEIsYUFBZ0IsTUFBTSxPQUNwQixNQUFNLGlCQUFpQixNQUFNLG1CQUU3QixNQUFNLGlCQUFpQixNQUFNO1FBRy9CLGdCQUFnQixNQUFNLFFBQVEsTUFBTSxRQUFRO1FBSTVDLGFBQWdCLFdBQVcsVUFDekIsV0FBVyxVQUVYLFdBQVc7UUFNYixNQUFNLElBQUksUUFBUSxTQUFTLFdBQVcsU0FBUztRQUcvQyxTQUFTLFdBQVcsY0FBYztRQUdsQyxJQUFHLFNBQVMsWUFBWjtVQUNFLE9BQU8sTUFBTSxJQUFJOztRQUduQixRQUFRLFlBQVUsYUFBVyxXQUFRLGdCQUFjLFVBQU0sU0FBUyxLQUFLLE9BQU8sZ0JBQWdCLFdBQVE7UUNuR3BHLE9EdUdGLEdBQUcsS0FBSyxrQkFBZ0IsT0FBTyxXQUFTLGVBQVksT0FBTyxNQUFNLFVBQVUsV0FBUyxRQUFLLE9BQU8sTUFBTSxVQUFVLFdBQVMsU0FBSyxtQkFBbUIsU0FBVSxTQUFDLE9BQU8sUUFBUjtVQUl6SixJQUFBLG9CQUFBLFFBQUEsT0FBQSxRQUFBLFFBQUEsU0FBQSxZQUFBLGFBQUE7VUFBQSxJQUFJLEtBQUssU0FBUyxVQUFVLFVBQVU7VUFFdEMsSUFBRyxPQUFIO1lBQ0UsSUFBSSxNQUFNLDJCQUEyQjtZQUNyQyxNQUFNLElBQUk7aUJBRlo7WUFLRSxJQUFHLE1BQU0sTUFBVDtjQUVFLFNBQVMsTUFBTSxLQUFLLE9BQU8sT0FBTyxTQUFDLE1BQUQ7Z0JDM0c5QixPRDJHd0MsTUFBTSxNQUFNLEtBQUssSUFBSTs7Y0FFakUsU0FBUyxPQUFPLElBQUksU0FBQyxNQUFEO2dCQzFHaEIsT0QwRzBCLEtBQUs7O2NBR25DLFVBQVUsTUFBTSxLQUFLLFFBQVEsT0FBTyxTQUFDLE1BQUQ7Z0JDMUdoQyxPRDBHMEMsTUFBTSxNQUFNLEtBQUssSUFBSTs7Y0FFbkUsVUFBVSxRQUFRLElBQUksU0FBQyxNQUFEO2dCQ3pHbEIsT0R5RzRCLEtBQUs7O2NBR3JDLHFCQUFxQixTQUFDLFFBQUQ7Z0JDekdqQixPRHlHNkIsU0FBUyxPQUFPLEtBQUssUUFBUSxlQUFlLElBQUksUUFBUSxRQUFROztjQUdqRyxRQUFRLE9BQU8sT0FBTyxTQUFDLFFBQUQ7Z0JBRXBCLElBQUEsR0FBQSxLQUFBLE9BQUE7Z0JBQUEsSUFBRyxPQUFPLElBQUksbUJBQW1CLFlBQVksQ0FBQyxRQUFRLElBQUksbUJBQW1CLFlBQVksV0FBVyxlQUFjLFFBQWxIO2tCQUNFLE9BQUEsT0FBQTtrQkFBQSxLQUFBLElBQUEsR0FBQSxNQUFBLEtBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtvQkN4R0ksUUFBUSxLQUFLO29CRDBHZixNQUFNLE9BQU8sT0FBTyxRQUFRLFFBQVEsVUFBUzs7a0JBRS9DLE9BQU8sUUFBUSxPQUFPLE9BQU8sUUFBUSxRQUFRLFVBQVM7a0JBQ3RELE9BQU87O2dCQ3ZHUCxPRHdHRixPQUFPLElBQUksbUJBQW1COztjQUdoQyxTQUFTLE9BQU8sT0FBTyxTQUFDLFFBQUQ7Z0JBRXJCLElBQUEsR0FBQSxLQUFBLE9BQUE7Z0JBQUEsSUFBRyxRQUFRLElBQUksbUJBQW1CLFlBQVksQ0FBQyxPQUFPLElBQUksbUJBQW1CLFlBQVksV0FBVyxlQUFjLFFBQWxIO2tCQUNFLE9BQUEsT0FBQTtrQkFBQSxLQUFBLElBQUEsR0FBQSxNQUFBLEtBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtvQkN2R0ksUUFBUSxLQUFLO29CRHlHZixNQUFNLE9BQU8sT0FBTyxRQUFRLFFBQVEsVUFBUzs7a0JBRS9DLE9BQU8sUUFBUSxPQUFPLE9BQU8sUUFBUSxRQUFRLFVBQVM7a0JBQ3RELE9BQU87O2dCQ3RHUCxPRHVHRixRQUFRLElBQUksbUJBQW1COztjQUVqQyxJQUFHLE1BQU0sV0FBVDtnQkFJRSxjQUFjLE1BQU0sSUFBSSxVQUFVLE9BQVMsV0FBVyxlQUFjLFNBQVksVUFBYSxXQUFXO2dCQUl4RyxlQUFlLE1BQU0sSUFBSSxVQUFVLFFBQVUsV0FBVyxlQUFjLFNBQVksVUFBYSxXQUFXO2dCQWMxRyxTQUFTO2dCQUdULElBQUcsYUFBSDtrQkFDRSxPQUFPLEtBQ0w7b0JBQUEsTUFBTTtvQkFDTixRQUFROzs7Z0JBR1osSUFBRyxjQUFIO2tCQUNFLE9BQU8sS0FDTDtvQkFBQSxNQUFNO29CQUNOLFFBQVE7OztnQkFHWixNQUFNLElBQUksS0FBSztxQkFyQ2pCO2dCQWdERSxNQUFNLElBQUksS0FBSzs7bUJBdEZuQjtjQWlHRSxNQUFNLElBQUksS0FBSzs7O1VBTW5CLGFBQWEsQ0FBQyxPQUFPLGVBQWUsU0FBUyxjQUFjLFNBQVMsYUFBYTtVQUNqRixJQUFHLE1BQU0sUUFBUSxhQUFhLEtBQTlCO1lDL0lJLE9EZ0pGLE9BQU8sU0FBUyxHQUFHOzs7O01BR3pCLFNBQVMsV0FBQTtRQUVQLElBQUEsU0FBQTtRQUFBLFVBQVUsU0FBUyxjQUFjO1FBQ2pDLFFBQVEsYUFBYTtRQUdyQixRQUFRLFNBQVMsV0FBQTtVQ2hKYixPRGlKRixRQUFRLFlBQVksUUFBUSxVQUFVLFFBQVEsVUFBVTtXQUN4RDtRQ2hKQSxPRG1KRixNQUFNOzs7OztHQzlJVCxLQUFLO0FBQ1I7QUMxTkEsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLHlFQUFPLFNBQUMsWUFBWSxLQUFLLFFBQVEsV0FBVyxNQUFNLFdBQTNDO0lBQ2pCLElBQUE7SUNFRSxPREZGLE1BR0U7TUFBQSxxQkFBcUIsU0FBQyxnQkFBZ0IsU0FBUyxTQUExQjtRQUVuQixJQUFBLGdCQUFBLFVBQUEsUUFBQSw2QkFBQSxxQ0FBQSxpQkFBQTtRQUFBLElBQU8sa0JBQUEsTUFBUDtVQUNFLE1BQVUsSUFBQSxNQUFNOztRQUVsQixXQUFXLG1CQUFrQjtRQUU3QixpQkFBaUI7UUFFakIsV0FBVyxVQUFVO1FBRXJCLFdBQVcsaUNBQWlDO1FBRTVDLHNDQUFzQztRQUV0QyxJQUFHLFVBQUg7VUFDRSxXQUFXLG1DQUFtQztVQUM5QyxXQUFXLDhCQUFtQztlQUZoRDtVQUlFLFdBQVcsbUNBQW1DO1VBQzlDLFdBQVcsOEJBQW1DO1VBRTlDLFdBQVcsWUFBWTtVQUV2Qiw4QkFBOEIsV0FBQTtZQUM1QixXQUFXLFlBQVk7WUNOckIsT0RPRixPQUFPLEtBQUssVUFBVSw2QkFBNkI7Y0FBRSxRQUFROzs7VUFFL0Qsc0NBQXNDLDRCQUE0QixNQUFNLGlCQUFpQjs7UUFHM0Ysa0JBQWtCLFdBQUE7VUFLaEIsSUFBQTtVQUFBLFVBQUEsQ0FBQSxXQUFBO1lBQVUsUUFBTyxRQUFRO2NBQWYsS0FDSDtnQkNQQyxPRE9hO2NBRFgsS0FFSDtnQkNOQyxPRE1hOzs7VUNIbkIsT0RLRixJQUFJLEtBQUssU0FBUyxLQUFLLFdBQUE7WUFFckIsSUFBcUQsQ0FBSSxVQUF6RDtjQUFBLGFBQWE7O1lBQ2IsT0FBTztZQUNQLFdBQVcsWUFBWTtZQUN2QixXQUFXLFVBQVU7WUNIbkIsT0RNRixTQUFTOzs7UUFHYixzQkFBc0IsU0FBQyxRQUFRLFFBQVQ7VUFFcEIsSUFBQSxNQUFBO1VBQUEsWUFBWSxTQUFDLFVBQUQ7WUFDVixJQUFBO1lBQUEsWUFBZ0IsSUFBQSxPQUFPO1lDSnJCLE9ES0YsS0FBSyxNQUFNLFVBQVUsWUFBWTs7VUFHbkMsT0FBTyxXQUFBO1lBQ0wsSUFBQTtZQUFBLFdBQVcsa0NBQWtDO1lBRzdDLElBQUcsQ0FBSSxVQUFQO2NBQ0UsV0FBVywrQkFBK0I7Y0FDMUMsSUFBRyxXQUFXLDhCQUE4QixHQUE1QztnQkFDRSxXQUFXLDhCQUE4QixDQUFDOzs7WUFHOUMsV0FBZSxJQUFBLE9BQU87WUNOcEIsT0RPRixTQUFTLFNBQU0sV0FBQTtjQ05YLE9ETWMsVUFBVTs7O1VDSDVCLE9ES0Y7O1FBRUYsSUFBRyxVQUFIO1VBQ0UsT0FBTyxLQUFLLFNBQVM7WUFBRSxRQUFROztlQURqQztVQUdFLE9BQU8sU0FBUzs7UUFFbEIsU0FBUyxXQUFBO1VDRkwsT0RHRixvQkFBb0IsaUJBQWlCLGlCQUFpQjs7UUFHeEQsT0FBTyxNQUFNLENBQUMsUUFBUSxTQUFTLEtBQUs7UUFNcEMsT0FBVyxJQUFBLFFBQVEsU0FBQyxTQUFTLFFBQVYsSUFBdUI7O01BSzVDLGFBQWEsU0FBQyxVQUFEO1FBRVQsSUFBQSxTQUFBO1FBQUEsVUFBVSxDQUFDLFFBQVEsUUFBUSxTQUFTLFNBQVMsS0FBSztRQUNsRCxJQUFVLE1BQU0sVUFBaEI7VUFBQTs7UUFHQSxZQUFZLFFBQVEsUUFBUSxTQUFTLFNBQVMsS0FBSztRQ1huRCxPRGFBLFdBQVcsVUFBVSxXQUFBO1VBQ25CLElBQUE7VUFBQSxPQUFPLEtBQUssWUFBWSxTQUFTO1VBQ2pDLElBQVUsQ0FBSSxNQUFkO1lBQUE7O1VBS0EsSUFBRyxXQUFXLFVBQVUsU0FBUSxXQUFoQztZQUNFLFdBQVcsV0FBVyxnQkFBZ0I7Y0FBRSxNQUFNOzs7VUNWaEQsT0RhQSxVQUFVLFNBQVM7Ozs7OztHQ1AxQixLQUFLO0FBQ1I7QUM3R0EsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLE9BQU8sV0FBQTtJQUVsQixJQUFBLFVBQUEsUUFBQSxLQUFBLEtBQUE7SUFBQSxXQUNDO01BQUEsTUFBVSxRQUFRO01BQ2xCLFNBQVUsUUFBUSxRQUFRLFFBQVE7TUFDbEMsT0FBVSxRQUFROztJQUVuQixJQUFHLFFBQVEsSUFBSSxNQUFmO01BQ0MsS0FBQSxPQUFBLFVBQUE7UUNDTSxRQUFRLFNBQVM7UURBdEIsU0FBUyxPQUFPLE1BQU0sS0FBSzs7O0lBRzdCLFNBR0M7TUFBQSxNQUFNO01BR04sT0FBTztNQUdQLEtBQUssU0FBQyxPQUFPLFNBQVI7UUFFSixJQUFHLE9BQU8sTUFBTSxXQUFVLE9BQU8sTUFBakM7VUFFQyxPQUFPLE1BQU07O1FDTFQsT0RRTCxPQUFPLE1BQU0sS0FBSztVQUFFLE9BQU87VUFBTyxTQUFTO1VBQVMsTUFBVSxJQUFBOzs7O0lDRDdELE9ERUgsTUFDQztNQUFBLE1BQU0sV0FBQTtRQUVMLElBQUE7UUFBQSxhQUFhLE1BQU0sVUFBVSxNQUFNLEtBQUs7UUFHeEMsU0FBUyxLQUFLLE1BQU0sTUFBRztRQ0hsQixPRE1MLE9BQU8sSUFBSSxRQUFRLElBQUksUUFBUSxNQUFNLE1BQUc7O01BRXpDLE9BQU8sV0FBQTtRQUVOLElBQUE7UUFBQSxhQUFhLE1BQU0sVUFBVSxNQUFNLEtBQUs7UUNMbkMsT0RRTCxTQUFTLE1BQU0sTUFBTSxNQUFHOztNQUV6QixTQUFTLFdBQUE7UUFFUixJQUFBO1FBQUEsYUFBYSxNQUFNLFVBQVUsTUFBTSxLQUFLO1FBR3hDLFNBQVMsUUFBUSxNQUFNLE1BQUc7UUNUckIsT0RZTCxPQUFPLElBQUksV0FBVyxJQUFJLFFBQVEsTUFBTSxNQUFHOztNQUU1QyxPQUFPLFdBQUE7UUFFTixJQUFBO1FBQUEsYUFBYSxNQUFNLFVBQVUsTUFBTSxLQUFLO1FBR3hDLFNBQVMsTUFBTSxNQUFNLE1BQUc7UUNibkIsT0RnQkwsT0FBTyxJQUFJLFNBQVMsSUFBSSxRQUFRLE1BQU0sTUFBRzs7TUFHMUMsU0FBUyxXQUFBO1FBRVIsSUFBQTtRQUFBLGFBQWEsTUFBTSxVQUFVLE1BQU0sS0FBSztRQ2hCbkMsT0RtQkwsV0FBVyxJQUFJLFNBQUMsVUFBRDtVQUVkLElBQUcsT0FBTyxhQUFZLFVBQXRCO1lBRUMsSUFBRyxvQkFBb0IsT0FBdkI7Y0FDQyxPQUFPLFNBQVM7O1lBRWpCLE9BQU8sS0FBSyxVQUFVLFVBQVUsTUFBTTs7VUFFaEMsSUFBRyxTQUFTLFVBQVo7WUNwQkMsT0RvQnlCLFNBQVM7aUJBQW5DO1lDbEJDLE9Ea0JrRCxPQUFPOzs7O01BVW5FLFVBQVUsV0FBQTtRQ3ZCSixPRHVCTyxPQUFPOztNQUdwQixnQkFBZ0IsV0FBQTtRQ3ZCVixPRHdCTCxJQUFJLFdBR0gsSUFBSSxTQUFDLFNBQUQ7VUFFSixJQUFBLE1BQUEsY0FBQSxVQUFBLGtCQUFBO1VBQUEsT0FBTyxPQUFPLFFBQVEsTUFBTSxPQUFPO1VBR25DLFNBQUEsQ0FBQSxXQUFBO1lBQVMsUUFBTyxRQUFRO2NBQWYsS0FDSDtnQkMzQk0sT0QyQk07Y0FEVDtnQkN4QkcsT0QwQk4sT0FBSyxRQUFRLFFBQU07OztVQUd6QixXQUFXLEtBQUcsT0FBTyxTQUFPO1VBRzVCLGVBQWUsUUFBUSxRQUFRLFFBQVEsU0FBQyxTQUFTLFVBQVY7WUFFckMsSUFBQSxlQUFBO1lBQUEsSUFBRyxRQUFRLGFBQVg7Y0FDQyxXQUFXOztZQUlaLGdCQUFnQixRQUFRLFlBQVk7WUFDcEMsVUFBYSxpQkFBaUIsSUFDN0IsUUFBUSxVQUFVLGdCQUFnQixLQUVsQztZQUdELFdBQVcsU0FBUyxRQUFRLE9BQU8sUUFBSyxJQUFJLE9BQU8sUUFBUTtZQ2xDckQsT0RxQ04sV0FBVztjQUNUO1VBR0osbUJBQW1CLElBQUksT0FBTyxTQUFTO1VBRXZDLGVBQWUsYUFBYSxRQUFRLE9BQU8sT0FBSztVQUdoRCxPQUFPLEtBQUcsV0FBVztXQUdyQixPQUFPLFNBQUMsTUFBTSxTQUFQO1VBQ1AsSUFBRyxNQUFIO1lBQ0MsUUFBUTs7VUFDVCxPQUFPLE9BQU87OztNQUdoQixVQUFVLFdBQUE7UUMxQ0osT0QwQ08sY0FBYyxJQUFJLGtCQUFrQjs7Ozs7R0NyQ2hELEtBQUs7QUFDUjtBQ2hIQSxDQUFBLFdBQUE7RUFBQSxJQUFJLFFBQVEsd0lBQVMsU0FBQyxZQUFZLFdBQVcsY0FBYyxTQUFTLFNBQVMsVUFBVSxLQUFLLEtBQUssUUFBUSx1QkFBcEY7SUFHbkIsSUFBQTtJQ0FFLE9EQUYsUUFJRTtNQUFBLGtCQUFrQjtNQUdsQixVQUFVLFNBQUMsTUFBRDtRQUNSLElBQUEsT0FBQSxRQUFBLEdBQUE7UUFBQSxTQUFTLENBQUM7UUFFVixLQUFBLElBQUEsR0FBQSxNQUFBLE9BQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtVQ0pJLFFBQVEsT0FBTztVREtqQixJQUFHLEtBQUssT0FBTyxVQUFmO1lBQ0UsS0FBSyxpQkFBaUI7OztRQUUxQixPQUFPLENBQUksS0FBSzs7TUFHbEIsT0FBTyxTQUFDLE1BQUQ7UUFFTCxJQUFBO1FBQUEsSUFBVSxDQUFJLE1BQU0sU0FBUyxPQUE3QjtVQUFBOztRQUdBLGNBQ0U7VUFBQSxVQUFVO1VBQ1YsVUFBVSxLQUFLLFNBQVM7O1FDRnhCLE9ES0YsSUFBSSxLQUFLLGNBQWMsYUFBYSxLQUFLLFNBQUMsTUFBRDtVQUd2QyxLQUFLLFNBQVMsY0FBYztVQUM1QixLQUFLLFNBQVM7VUFJZCxXQUFXLFVBQVUsV0FBQTtZQUNuQixNQUFNO1lBQ04sc0JBQXNCLHNCQUFzQjtZQ1QxQyxPRFVGLFdBQVcsT0FBTzs7VUFJcEIsRUFBRTtVQUtGLElBQUcsQ0FBSSxXQUFXLE1BQU0sdUJBQXhCO1lDZkksT0RnQkYsV0FBVztpQkFNUixJQUFHLFdBQVcsY0FBZDtZQ3BCRCxPRHFCRixXQUFXOztXQUdiLFNBQUMsT0FBRDtVQUVBLElBQUksTUFBTTtVQUlWLElBQUcsaUJBQWlCLElBQUksTUFBTSxXQUFXLE1BQU0sU0FBUSxLQUF2RDtZQUNFLEtBQUssU0FBUyxLQUFLLFVBQVU7WUFDN0IsS0FBSyxPQUFPLG9CQUFvQjtZQ3pCOUIsT0QyQkYsS0FBSyxpQkFBaUI7Ozs7TUFHNUIsUUFBUSxXQUFBO1FDekJKLE9EMEJGLElBQUksS0FBSyxlQUFlLElBQ3ZCLEtBQUssV0FBQTtVQzFCRixPRDRCRixXQUFXLFVBQVUsV0FBQTtZQzNCakIsT0Q0QkYsTUFBTTs7OztNQUdaLGNBQWMsV0FBQTtRQzFCVixPRDRCRixJQUFJLEtBQUssYUFBYSxLQUFLLFNBQUMsTUFBRDtVQUN6QixNQUFNO1VBQ04sT0FBTzs7O01BR1gsZUFBZSxXQUFBO1FBQ2IsT0FBTztRQzNCTCxPRDRCRixNQUFNLG1CQUFtQjs7TUFHM0IsbUJBQW1CLFdBQUE7UUFDakIsT0FBTyxNQUFNO1FDNUJYLE9ENkJGLE1BQU0sbUJBQW1COzs7OztHQ3hCNUIsS0FBSztBQUNSO0FDdkVBLENBQUEsV0FBQTtFQUFBLElBQUksUUFBUSxxQ0FBaUIsU0FBQyxpQkFBRDtJQUMzQixJQUFBO0lDQUUsT0RBRixnQkFHRTtNQUFBLHlCQUF5QixTQUFDLFNBQUQ7UUFDdkIsSUFBQTtRQUFBLHNCQUFBLENBQUEsV0FBQTtVQUFzQixRQUFPLGdCQUFnQjtZQUF2QixLQUNmLGdCQUFnQixRQUFRO2NDQ3ZCLE9ERGdDLFVBQVU7WUFENUIsS0FHZixnQkFBZ0IsUUFBUTtZQUhULEtBR2UsZ0JBQWdCLFFBQVE7Y0NFckQsT0RESixXQUFjLFVBQVUsTUFBSyxJQUFPLElBQU87OztRQUUvQyxPQUFPOztNQUVULDRCQUE0QixTQUFDLE9BQU8sU0FBUjtRQUMxQixPQUFPLE1BQU0sWUFBWSxjQUFjLHdCQUF3Qjs7TUFDakUsc0JBQXNCLFNBQUMsT0FBTyxTQUFSO1FBQ3BCLE9BQU8sTUFBTSxNQUFNLGNBQWMsd0JBQXdCOztNQUUzRCxRQUFRLFNBQUMsT0FBTyxPQUFSO1FDSUosT0RIRixRQUFRLE9BQU8sT0FBTzs7TUFFeEIsT0FBTyxTQUFDLE9BQUQ7UUNJSCxPREhGLGNBQWMsT0FBTyxPQUFPLGNBQWM7O01BRTVDLFlBQVk7TUFFWixxQkFBcUIsV0FBQTtRQ0dqQixPREZGLGNBQWMsV0FBVyxXQUFVOztNQUVyQyxZQUFZLFdBQUE7UUFDVixJQUFBO1FBQUEsT0FBVyxJQUFBO1FBQ1gsY0FBYyxXQUFXLEtBQUs7UUFDOUIsT0FBTzs7TUFFVCxjQUFjLFNBQUMsTUFBRDtRQUNaLElBQUcsQ0FBSSxjQUFjLFdBQVcsSUFBSSxPQUFwQztVQUNFLE1BQVUsSUFBQSxNQUFNOztRQ0toQixPREhGLGNBQWMsV0FBVyxPQUFPOztNQUVsQyxtQkFBbUIsV0FBQTtRQUNqQixJQUFHLGNBQWMsV0FBVyxZQUE1QjtVQUNFLE1BQVUsSUFBQSxNQUFNOzs7TUFFcEIsbUJBQW1CLFNBQUMsUUFBRDtRQUNqQixJQUFBLE1BQUE7UUFBQSxPQUFPLGNBQWM7UUFDckIsU0FBUztRQUNULElBQUcsQ0FBQSxVQUFBLFNBQVcsT0FBTyxZQUFyQjtVQ01JLE9ETEYsT0FBTyxXQUFRLFdBQUE7WUNNWCxPRE5jLGNBQWMsYUFBYTs7ZUFEL0M7VUFHRSxjQUFjLGFBQWE7VUNRekIsT0RQRjs7Ozs7O0dDYUwsS0FBSztBQUNSO0FDaEVBLENBQUEsV0FBQTtFQUFBLElBQUksUUFBUSwyQkFBUyxTQUFDLGVBQUQ7SUFDbkIsSUFBQTtJQ0RFLE9EQ0YsUUFBUTs7O0dDRVAsS0FBSztBQUNSO0FDUEEsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLDRCQUFXLFNBQUMsT0FBTyxLQUFSO0lBQ3RCLElBQUE7SUNFRyxPREZILFVBQ0M7TUFBQSxNQUFNLFdBQUE7UUFDTCxJQUFBO1FBQUEsVUFBVSxRQUFRLEtBQUssTUFBTTtRQUU3QixRQUFRLE9BQVUsUUFBUSxTQUFRLE9BQVMsTUFBUztRQ0cvQyxPRERMLElBQUksS0FBSyxnQkFBZ0I7O01BRTFCLE1BQU0sV0FBQTtRQ0VBLE9EREwsSUFBSSxLQUFLLGdCQUFnQixLQUFLLFNBQUMsUUFBRDtVQ0V2QixPREROLE1BQU0sVUFDTDtZQUFBLE1BQWEsT0FBTyxTQUFRLE1BQVMsT0FBUztZQUM5QyxJQUFVLE9BQU87WUFDakIsTUFBVSxPQUFPO1lBQ2pCLFNBQVUsT0FBTztZQUNqQixNQUFVLE9BQU8sUUFBUTtZQUN6QixNQUFVLE9BQU8sUUFBUTs7Ozs7OztHQ1EzQixLQUFLO0FBQ1I7QUMxQkEsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLDhGQUFtQixTQUFDLFlBQVksS0FBSyxPQUFPLGVBQWUsaUJBQWlCLE1BQXpEO0lBQzdCLElBQUE7SUNFRSxPREZGLGtCQUVFO01BQUEsMEJBQTBCLFNBQUMsZUFBRDtRQ0V0QixPRERGLGdCQUFnQixxQkFBcUI7O01BS3ZDLDRCQUE0QixTQUFDLGVBQUQ7UUNEeEIsT0RFRixnQkFBZ0IscUJBQXFCLENBQUMsZ0JBQWdCLGdCQUFnQixxQkFBcUIsS0FBSyxnQkFBZ0Isc0JBQXNCOztNQUl4SSxTQUFTLFNBQUMsTUFBRDtRQ0hMLE9ER2UsS0FBSyxNQUFNLGdCQUFnQixXQUFXOztNQU16RCxZQUFZLFNBQUMsTUFBRDtRQUNWLElBQUEsSUFBQSxNQUFBLE9BQUEsTUFBQSxTQUFBO1FBQUEsUUFBUSxLQUFLLE1BQU07UUFFbkIsT0FBVSxTQUFTLE1BQU07UUFDekIsVUFBYSxNQUFNLEtBQVEsU0FBUyxNQUFNLE1BQVM7UUFHbkQsVUFBVSxnQkFBZ0IsMkJBQTJCO1FBQ3JELE9BQU8sZ0JBQWdCLGdCQUFnQjtRQ1JyQyxPRFdGLEtBQUEsQ0FBQSxXQUFBO1VBQUssSUFBRyxTQUFIO1lBRUgsSUFBRyxLQUFLLFNBQVEsV0FBaEI7Y0FDRSxNQUFVLElBQUEsTUFBTSxVQUFRLE9BQUs7O1lBRy9CLElBQUcsS0FBSyxXQUFXLFNBQVEsU0FBM0I7Y0FDRSxNQUFVLElBQUEsTUFBTSxnQkFBYyxLQUFLLFdBQVcsS0FBRzs7WUNWL0MsT0RhSixnQkFBZ0IsMEJBQTBCLEtBQUssV0FBVyxJQUFJO2lCQVYzRDtZQWVILElBQUcsS0FBSyxTQUFRLFdBQWhCO2NDZk0sT0RnQko7bUJBREY7Y0FJRSxJQUFHLEtBQUssV0FBVyxTQUFRLE9BQTNCO2dCQUNFLE1BQVUsSUFBQSxNQUFNLGdCQUFjLEtBQUssV0FBVyxLQUFHOztjQ2YvQyxPRGtCSixnQkFBZ0IsMEJBQTBCLEtBQUssV0FBVzs7Ozs7TUFJaEUsWUFBWSxTQUFDLFNBQUQ7UUFDVixJQUFBLGVBQUEsS0FBQTtRQUFBLElBQTBCLEtBQUssV0FBVyxVQUExQztVQUFBLE9BQU8sT0FBTzs7UUFFZCxNQUE4QixnQkFBZ0IsNEJBQTRCLFVBQXpFLGdCQUFBLElBQUEsSUFBZSxhQUFBLElBQUE7UUFFaEIsSUFBRyxjQUFjLDJCQUEyQixPQUFPLGVBQWUsU0FBUSxTQUFTLGVBQWMsR0FBakc7VUFDRSxPQUFPLE9BQU8sZ0JBQWdCLHlCQUF5Qjs7UUFHekQsT0FBUyxDQUFDLGdCQUFnQix5QkFBeUIsa0JBQWUsTUFBRzs7TUFPdkUsNkJBQTZCLFNBQUMsU0FBRDtRQUMzQixJQUFBO1FBQUEsSUFBRyxVQUFVLEtBQUssT0FBbEI7VUFDRSxNQUFVLElBQUEsTUFBTSxVQUFRLFVBQVE7O1FBRWxDLElBQUcsV0FBVyxnQkFBZ0Isb0JBQTlCO1VBQ0UsTUFBVSxJQUFBLE1BQU0sVUFBUSxVQUFROztRQUVsQyxXQUFXLGdCQUFnQjtRQUUzQixnQkFBZ0I7UUFDaEIsT0FBTSxVQUFVLGdCQUFnQixxQkFBaEM7VUFDRSxXQUFXLGdCQUFnQjtVQUMzQjs7UUFFRixPQUFPLENBQUMsZUFBZTs7TUFPekIsMkJBQTJCLFNBQUMsZUFBZSxZQUFoQjtRQUN6QixJQUFHLGdCQUFnQixLQUFLLGdCQUFnQixLQUFLLG9CQUE3QztVQUNFLE1BQVUsSUFBQSxNQUFNLDJCQUF5Qjs7UUFFM0MsSUFBRyxhQUFhLGdCQUFnQixxQkFBaEM7VUFDRSxNQUFVLElBQUEsTUFBTSx3QkFBc0I7O1FBRXhDLElBQU8sY0FBQSxNQUFQO1VBQ0UsYUFBYTs7UUN6QmIsT0QyQkYsZ0JBQWdCLHFCQUFxQixDQUFDLGdCQUFnQixLQUFLLGdCQUFnQixzQkFBc0I7O01BTW5HLGlCQUFpQixTQUFDLFNBQUQ7UUFDZixJQUFBLGVBQUE7UUFBQSxJQUFHLEtBQUssV0FBVyxVQUFuQjtVQUFpQyxPQUFPO1lBQUUsTUFBTTs7O1FBRWhELE1BQTJCLGdCQUFnQiw0QkFBNEIsVUFBdEUsZ0JBQUEsSUFBQSxJQUFlLFVBQUEsSUFBQTtRQUVoQixPQUFPO1VBQ0wsTUFBb0I7VUFDcEIsWUFBb0IsY0FBYywyQkFBMkIsT0FBTztVQUNwRSxtQkFBb0IsWUFBVzs7Ozs7O0dDdEJwQyxLQUFLO0FBQ1I7QUNsR0EsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLGdGQUFhLFNBQUMsWUFBWSxLQUFLLE9BQU8sZUFBZSxpQkFBeEM7SUFDdkIsSUFBQTtJQ0VFLE9ERkYsWUFFRTtNQUFBLFFBQVEsU0FBQyxTQUFTLG1CQUFWO1FBQ04sSUFBRyxPQUFPLFlBQVcsVUFBckI7VUFDRSxVQUFVLFFBQVE7O1FBRXBCLElBQUcsc0JBQXFCLE9BQXhCO1VBQ0UsVUFBVTs7UUNHVixPRERGLE9BQU8sSUFBSSxXQUFXLEtBQUssT0FBTyxTQUFTLFlBQVk7O01BR3pELFVBQVUsU0FBQyxTQUFEO1FBQ1IsSUFBRyxPQUFPLFlBQVcsVUFBckI7VUFDRSxVQUFVLFFBQVE7O1FDRWxCLE9EQUYsT0FBTyxJQUFJLFdBQVcsS0FBSyxPQUFPLFNBQVMsWUFBWTs7TUFHekQsa0JBQWtCLFNBQUMsTUFBRDtRQUNoQixJQUFHLENBQUksS0FBQyxZQUFZLE9BQXBCO1VDQUksT0RDRixLQUFDLE9BQU8sTUFBTTtlQURoQjtVQ0VJLE9EQ0YsS0FBQyxTQUFTOzs7TUFHZCxhQUFhLFNBQUMsTUFBRDtRQ0FULE9EQ0YsT0FBTyxJQUFJLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSTs7TUFHN0MsY0FBYyxXQUFBO1FBQ1osSUFBQSxHQUFBLEtBQUEsTUFBQSxLQUFBO1FBQUEsSUFBVSxDQUFJLE1BQU0sT0FBcEI7VUFBQTs7UUFFQSxNQUFBLE1BQUE7UUFBQSxVQUFBO1FDRUUsS0RGRixJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7VUNHSSxPQUFPLElBQUk7VUFDWCxRQUFRLEtESFYsT0FBTyxJQUFJLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSSxZQUFZOztRQ0t2RCxPQUFPOztNREZYLGdCQUFnQixXQUFBO1FBQ2QsSUFBQSxPQUFBLEdBQUEsS0FBQSxNQUFBO1FBQUEsUUFBUTtRQUVSLE1BQUEsTUFBQTtRQUFBLEtBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1VDTUksT0FBTyxJQUFJO1VETGIsSUFBRyxVQUFVLFlBQVksT0FBekI7WUFDRTs7O1FBRUosT0FBTzs7TUFJVCxrQkFBa0IsU0FBQyxZQUFEO1FBQ2hCLElBQUE7UUNNRSxPRE5GLENBQUEsQ0FBQSxXQUFBO1VDT0ksSUFBSSxHQUFHLEtBQUssS0FBSztVRFBwQixNQUFBLFdBQUE7VUFBQSxVQUFBO1VDVUcsS0RWSCxJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7WUNXSyxPQUFPLElBQUk7WUFDWCxJRFprQyxVQUFVLE1BQU0sT0FBaEI7Y0NhaEMsUUFBUSxLRGJmOzs7VUNnQkcsT0FBTztjRGhCb0Q7O01BR2pFLE9BQU8sU0FBQyxNQUFEO1FDaUJILE9EakJhLFdBQVcsTUFBTSxNQUFNLEtBQUssSUFBSTs7Ozs7R0NzQmxELEtBQUs7QUFDUjtBQ3hFQSxDQUFBLFdBQUE7RUFBQSxJQUFBOztFQUFBLFdBQVcsQ0FBQyxjQUFjLE9BQU8sU0FBUyxpQkFBaUIsbUJBQW1COztFQUM5RSxLQUFDLDJCQUEyQixTQUFDLFlBQVksS0FBSyxPQUFPLGVBQWUsaUJBQWlCLE9BQXpEO0lBQzFCLElBQUE7SUNDRSxPRERGLE9BRUU7TUFBQSxPQUFPO01BR1AsT0FBTyxTQUFDLElBQUQ7UUFDTCxJQUFHLEtBQUssTUFBTSxNQUFNLFFBQXBCO1VBQ0UsTUFBVSxJQUFBLE1BQU0sVUFBUSxLQUFHOztRQ0EzQixPRENGLE1BQU0sTUFBTSxLQUFLOztNQUduQixjQUFjLFNBQUMsTUFBRDtRQUNaLGNBQWM7UUNEWixPREdGLElBQUksS0FBSyxrQkFBa0I7VUFBRSxJQUFJLEtBQUs7VUFBSSxVQUFVLEtBQUs7V0FBWSxLQUFLLFNBQUMsUUFBRDs7TUFJNUUsa0JBQWtCLFNBQUMsTUFBRDtRQUNoQixjQUFjO1FDRFosT0RHRixJQUFJLEtBQUssc0JBQXNCO1VBQUUsSUFBSSxLQUFLO1VBQUksT0FBTyxLQUFLO1dBQWdCLEtBQUssU0FBQyxRQUFEOztNQUlqRixxQkFBcUIsU0FBQyxNQUFEO1FBQ25CLGNBQWM7UUNEWixPREdGLElBQUksS0FBSyxvQkFBb0I7VUFBRSxJQUFJLEtBQUs7VUFBSSxRQUFRLEtBQUs7OztNQUczRCxRQUFRLFNBQUMsTUFBRDtRQUNOLGNBQWM7UUNBWixPREVGLEtBQUssWUFBWTtVQUFFLElBQUksS0FBSztVQUFJLFNBQVM7V0FBTyxLQUFLLFNBQUMsUUFBRDtVQ0VqRCxPRERGLEtBQUssVUFBVTs7O01BR25CLFNBQVMsU0FBQyxNQUFEO1FBQ1AsY0FBYztRQ0VaLE9EQUYsS0FBSyxZQUFZO1VBQUUsSUFBSSxLQUFLO1VBQUksU0FBUztXQUFNLEtBQUssU0FBQyxRQUFEO1VDSWhELE9ESEYsS0FBSyxVQUFVOzs7TUFHbkIsYUFBYSxTQUFDLE1BQUQ7UUFDWCxjQUFjO1FDSVosT0RGRixJQUFJLEtBQUssa0JBQWtCO1VBQUUsSUFBSSxLQUFLO1VBQUksUUFBVyxLQUFLLFVBQWEsSUFBTzs7O01BR2hGLGtCQUFrQixTQUFDLE1BQUQ7UUFDaEIsY0FBYztRQ0taLE9ESEYsSUFBSSxLQUFLLG1CQUFtQjtVQUFFLElBQUksS0FBSztVQUFJLFFBQVE7V0FBSyxLQUFLLFNBQUMsUUFBRDs7TUFJL0QscUJBQXFCLFNBQUMsTUFBRDtRQUNuQixjQUFjO1FDS1osT0RIRixJQUFJLEtBQUssa0JBQWtCO1VBQUUsSUFBSSxLQUFLO1VBQUksUUFBVyxLQUFLLFdBQWMsSUFBTzs7O01BSWpGLGNBQWMsU0FBQyxNQUFEO1FBSVosSUFBSTtRQUVKLEtBQUssb0JBQW9CO1FBRXpCLElBQU8sS0FBQSxXQUFBLE1BQVA7VUFDRSxNQUFVLElBQUEsTUFBTTs7UUFFbEIsS0FBSyxZQUFZO1FDQWYsT0RFRixJQUFJOztNQUdOLGNBQWMsU0FBQyxNQUFEO1FBQ1osY0FBYztRQ0ZaLE9ESUYsSUFBSSxLQUFLLG1CQUFtQjtVQUFFLElBQUksS0FBSztVQUFJLFFBQVcsS0FBSyxXQUFjLElBQU87OztNQUdsRixrQkFBa0IsU0FBQyxNQUFEO1FDRGQsT0RFRixJQUFJLEtBQUssaUJBQWlCO1VBQUUsSUFBSSxLQUFLOzs7TUFHdkMsYUFBYSxTQUFDLE1BQUQ7UUFDWCxJQUFBLEdBQUEsS0FBQTtRQUFBLElBQUcsUUFBQSxNQUFIO1VBQ0UsT0FBTyxLQUFLLGlCQUFpQjs7UUFFL0IsSUFBSTtRQUVKLE1BQUEsTUFBQTtRQUFBLEtBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1VDQ0ksT0FBTyxJQUFJO1VEQWIsS0FBSyxpQkFBaUI7O1FDR3RCLE9EREYsSUFBSTs7TUFHTixRQUFRLFNBQUMsTUFBRDtRQUNOLElBQUE7UUFBQSxjQUFjLEtBQUssTUFBTSxLQUFLO1FDRTVCLE9EREYsUUFBUSxPQUFPLGFBQWE7O01BSTlCLFdBQVcsU0FBQyxNQUFEO1FBQ1QsSUFBRyxLQUFBLFdBQUEsTUFBSDtVQUNFLEtBQUssWUFBWTs7UUFFbkIsSUFBRyxLQUFBLFlBQUEsTUFBSDtVQUNFLEtBQUssYUFBYTs7UUFFcEIsS0FBSyxpQkFBaUI7UUFFdEIsSUFBRyxLQUFBLGdCQUFBLE1BQUg7VUFDRSxLQUFLLGlCQUFpQjs7UUFFeEIsSUFBRyxLQUFBLG1CQUFBLE1BQUg7VUFDRSxLQUFLLG9CQUFvQjs7UUFFM0IsSUFBRyxLQUFBLFlBQUEsTUFBSDtVQUNFLEtBQUssYUFBYTs7UUFFcEIsSUFBRyxLQUFBLFlBQUEsTUFBSDtVQUNFLEtBQUssb0JBQW9CO1VDRHZCLE9ERUYsS0FBSyxZQUFZOzs7TUFHckIsWUFBWSxTQUFDLFNBQUQ7UUNEUixPRENxQixXQUFXLGdCQUFnQjs7TUFHcEQsaUJBQWlCLFdBQUE7UUNEYixPRENnQixLQUFLLFFBQVEsZ0JBQWdCOztNQUdqRCxrQkFBa0IsV0FBQTtRQ0RkLE9ERUYsS0FBSyxLQUFLLENBQUMsS0FBSyxRQUFRLGdCQUFnQixzQkFBc0IsZ0JBQWdCOztNQUdoRixVQUFVLFNBQUMsTUFBRDtRQUNSLElBQUEsS0FBQTtRQUFBLEtBQUEsT0FBQSxNQUFBO1VDREksUUFBUSxLQUFLO1VERWYsSUFBRyxJQUFJLFlBQVksT0FBbkI7WUFDRSxPQUFPLEtBQUs7OztRQUVoQixPQUFPOztNQUlULG1CQUFtQixTQUFDLFlBQUQ7UUFDakIsSUFBQSxHQUFBLEtBQUEsS0FBQSxTQUFBO1FBQUEsTUFBQSxXQUFBO1FBQUEsVUFBQTtRQ0NFLEtEREYsSUFBQSxHQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1VDRUksVUFBVSxJQUFJO1VBQ2QsUUFBUSxLREZWLFFBQVEsV0FBYyxXQUFXLFNBQVEsUUFDcEMsWUFBVyxXQUFXLE1BQU0sS0FDN0IsTUFBTSxvQkFBb0IsaUJBRTFCLE1BQU0sb0JBQW9CLGNBRTVCLE1BQU0sb0JBQW9COztRQ0Y1QixPQUFPOztNRElYLGVBQWUsV0FBQTtRQ0RYLE9ERUYsT0FBTyxLQUFLLFNBQVMsS0FBSyxTQUFDLFFBQUQ7VUNEdEIsT0RFRixPQUFPOzs7TUFFWCxhQUFhLFNBQUMsTUFBRDtRQUNYLElBQUE7UUFBQSxPQUFPO1FBQ1AsS0FBSyxLQUFLLE1BQU0sS0FBSztRQ0NuQixPREFGLE9BQU8sT0FBTyxTQUFTLFlBQVk7Ozs7O0VBRXpDLEtBQUMseUJBQXlCLFVBQVU7O0VBRXBDLElBQUksUUFBUSxRQUFRLEtBQUM7O0dDS2xCLEtBQUs7QUFDUjtBQ3ZMQSxDQUFBLFdBQUE7RUFBQSxJQUFJLFFBQVEsa0NBQVksU0FBQyxZQUFZLEtBQWI7SUFHdkIsSUFBQSxVQUFBO0lBQUEsaUJBQWlCO0lDQWQsT0RFSCxXQU1DO01BQUEsU0FBUyxTQUFDLFVBQUQ7UUFFUixJQUFBO1FBQUEsVUFBVSxnQkFBZ0IsS0FBSztRQUcvQixXQUFXLFNBQVMsS0FBSztRQUl6QixPQUFPLFFBQVEsU0FBTSxTQUFTLG9CQUFvQixTQUFDLE9BQUQ7VUNYM0MsT0RZTixJQUFJLEtBQUs7V0FFVCxXQUFRLFdBQUE7VUFFUixXQUFXLFNBQVMsT0FBTztVQ2JyQixPRGVOLFNBQVM7OztNQUdYLG9CQUFvQjtNQUlwQixPQUFPLFdBQUE7UUNqQkQsT0RpQkksV0FBVyxXQUFXOztNQUdoQyxTQUFTLFdBQUE7UUNqQkgsT0RpQk0sV0FBVyxTQUFTOztNQUdoQyxRQUFRLFdBQUE7UUFDUCxJQUFBLEdBQUEsS0FBQSxTQUFBLEtBQUE7UUFBQSxNQUFBLFdBQUE7UUFBQSxVQUFBO1FDZkssS0RlTCxJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7VUNkTyxVQUFVLElBQUk7VURlcEIsSUFBSSxLQUFLO1VDYkgsUUFBUSxLRGNkLFFBQVEsT0FBVyxJQUFBLFNBQVM7O1FDWnhCLE9BQU87O01EZWIsb0JBQW9CLFNBQUMsT0FBRDtRQ1pkLE9EWXlCLGlCQUFpQixTQUFTOztNQUd6RCxxQkFBcUIsU0FBQyxPQUFEO1FDWmYsT0RZMEIsQ0FBQyxTQUFTLG1CQUFtQjs7TUFHN0QsNEJBQTRCLFdBQUE7UUFFM0IsSUFBQSxHQUFBLEtBQUE7UUFBQSxJQUFVLFNBQVMsV0FBbkI7VUFBQTs7UUFHQSxLQUFBLElBQUEsR0FBQSxNQUFBLGVBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtVQ1pPLFdBQVcsZUFBZTtVRGFoQzs7UUNWSSxPRFlMLGlCQUFpQjs7TUFHbEIsV0FBVyxTQUFDLFVBQUQ7UUNaTCxPRFltQixlQUFlLEtBQUs7O01BRzdDLE1BQU0sV0FBQTtRQ1pBLE9EYUwsaUJBQWlCOzs7OztHQ1JqQixLQUFLO0FBQ1I7QUM3REEsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLDZJQUF5QixTQUFDLFdBQVcsS0FBSyxLQUFLLE1BQU0sTUFBTSxnQkFBZ0IsT0FBTyxlQUFlLGlCQUFpQixPQUF6RjtJQUtuQyxJQUFBLHVCQUFBLGdCQUFBLG1CQUFBLGVBQUEsVUFBQSwwQkFBQSxvQ0FBQSxjQUFBLGNBQUE7SUFBQSxXQUFXLFdBQUE7TUFJVCxJQUFBLGNBQUE7TUFBQSxlQUFlLElBQUksYUFBYSxLQUFLO01DSG5DLE9EUUYsT0FFRTtRQUFBLE9BQU87UUFHUCxPQUFPLFdBQUE7UUFFUCxLQUFLLFdBQUE7VUFFSCxPQUFPLGNBQWMsS0FBQzs7UUFHeEIsTUFBTSxTQUFDLFFBQVEsWUFBVDtVQUVKLEtBQUMsTUFBTSxLQUFLLGFBQWEsUUFBUTtVQUVqQyxPQUFPLGNBQWM7Ozs7SUFHM0IscUNBQXFDLFNBQUMsYUFBRDtNQUVuQyxJQUFBLEdBQUEsWUFBQSxLQUFBLE1BQUE7TUFBQSxVQUFBO01DZEUsS0RjRixJQUFBLEdBQUEsTUFBQSxZQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7UUNiSSxhQUFhLFlBQVk7UUFDekIsSURZK0IsV0FBVyxTQUFRLE9BQUE7VUNYaEQsUUFBUSxLQUFLLENBQUMsV0FBVztZQUN2QixJQUFJLEdBQUcsTUFBTSxLQUFLO1lEYXhCLE1BQUEsV0FBQTtZQUFBLFdBQUE7WUNWTSxLRFVOLElBQUEsR0FBQSxPQUFBLElBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtjQ1RRLE9BQU8sSUFBSTtjQUNYLFNBQVMsS0RTZixLQUFLLFdBQWMsU0FBUSxXQUFXLE1BQU0sS0FDMUMsTUFBTSxvQkFBb0IsaUJBRzFCLE1BQU0sb0JBQW9COztZQ1h4QixPQUFPOzs7O01BSWIsT0FBTzs7SURVWCxpQkFBaUIsU0FBQyxPQUFEO01BQ2YsSUFBQSxHQUFBLEdBQUEsR0FBQSxLQUFBLE1BQUEsTUFBQSxNQUFBLE9BQUEsS0FBQSxNQUFBO01BQUEsUUFDRTtRQUFBLEtBQUs7O01BRVAsS0FBQSxJQUFBLEdBQUEsTUFBQSxNQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7UUNOSSxPQUFPLE1BQU07UURPZixNQUFBLEtBQUE7UUFBQSxLQUFBLElBQUEsR0FBQSxPQUFBLElBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtVQ0pJLE9BQU8sSUFBSTtVREtiLElBQTJCLENBQUksTUFBTSxJQUFJLElBQUksS0FBSyxLQUFsRDtZQUFBLE1BQU0sSUFBSSxLQUFLLEtBQUs7OztRQUN0QixPQUFBLEtBQUE7UUFBQSxLQUFBLElBQUEsR0FBQSxPQUFBLEtBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtVQ0NJLE9BQU8sS0FBSztVREFkLElBQTJCLENBQUksTUFBTSxJQUFJLElBQUksS0FBSyxLQUFsRDtZQUFBLE1BQU0sSUFBSSxLQUFLLEtBQUs7Ozs7TUFFeEIsTUFBTSxJQUFJLEtBQUssU0FBQyxHQUFHLEdBQUo7UUNLWCxPRExxQixJQUFJOztNQUU3QixPQUFPOztJQUtULDhCQUE4QixTQUFDLGFBQWEsY0FBZDtNQUU1QixJQUFBLEdBQUEsWUFBQSxLQUFBLE1BQUE7TUFBQSxVQUFBO01DR0UsS0RIRixJQUFBLEdBQUEsTUFBQSxZQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7UUNJSSxhQUFhLFlBQVk7UUFDekIsSURMK0IsV0FBVyxTQUFRLE9BQUE7VUNNaEQsUUFBUSxLQUFLLENBQUMsV0FBVztZQUN2QixJQUFJLEdBQUcsTUFBTSxLQUFLO1lETHhCLE1BQUEsV0FBQTtZQUFBLFdBQUE7WUNRTSxLRFJOLElBQUEsR0FBQSxPQUFBLElBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtjQ1NRLE9BQU8sSUFBSTtjQUNYLElEVjBCLFNBQVEsV0FBVyxNQUFNLElBQUE7Z0JBRXpELElBQUcsYUFBYSxJQUFJLElBQUksS0FBSyxLQUE3QjtrQkFDRSxNQUFVLElBQUEsTUFBTSxnQkFBYyxXQUFXLEtBQUcsbUNBQWdDLEtBQUssS0FBRzt1QkFEdEY7a0JDWVUsU0FBUyxLQUFLLEtBQUs7Ozs7WUFJekIsT0FBTzs7OztNQUliLE9BQU87O0lEakJYLGVBQWUsU0FBQyxPQUFPLE9BQU8sYUFBZjtNQUViLElBQUEsR0FBQSxLQUFBLE1BQUE7TUFBQSxlQUFlLGVBQWU7TUFLOUIsNEJBQTRCLGFBQWE7TUFFekMsSUFBSTtNQUVKLEtBQUEsSUFBQSxHQUFBLE1BQUEsTUFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1FDY0ksT0FBTyxNQUFNO1FEWmYsSUFBRyxhQUFhLElBQUksSUFBSSxLQUFLLEtBQTdCO1VBQ0UsS0FBSyxVQUFVO1VBQ2YsS0FBSyxVQUFVOzs7TUNnQmpCLE9EZEYsSUFBSTs7SUFLTiwyQkFBMkIsU0FBQyxPQUFEO01DWXZCLE9EWEYsSUFBSSxLQUFLLGNBQWM7UUFBQyxRQUFRLEtBQUssVUFBVTs7O0lBU2pELGVBQWUsU0FBQyxPQUFPLE9BQU8sYUFBYSxTQUE1QjtNQ09YLE9ETEYsZ0JBQWdCLEtBQUssV0FBQTtRQUNuQixVQUFVLFdBQVc7UUFJckIsY0FBYztRQ0daLE9ET0MsQ0FBQSxTQUFDLEtBQUssTUFBTjtVQUNELElBQUcsUUFBUSxlQUFYO1lBRUUsTUFBTTtZQUdOLE9BQU8sVUFBVSxPQUFPLDBCQUEwQixNQUFHO2NBQUMsS0FBSzs7O1VBRzdELElBQUk7VUFDSixzQkFBc0Isc0JBQXNCO1VBQzVDLGNBQWMsT0FBTyxPQUFPLGFBQWEsU0FBUyxLQUFLO1VDUnJELE9EU0YsSUFBSTtXQVpGLEtBQUs7OztJQWViLG9CQUFvQixTQUFDLEtBQUssT0FBTjtNQUNsQixRQUFRLGVBQWUsd0JBQXdCO01DUDdDLE9EUUYsSUFBSSxLQUFLLGdCQUFnQjtRQUFDLE9BQU87OztJQUduQyxnQkFBZ0IsU0FBQyxPQUFPLE9BQU8sYUFBYSxTQUFTLEtBQUssTUFBMUM7TUFFZCxJQUFBLEdBQUEsS0FBQTtNQUFBLG1DQUFtQztNQUduQyxLQUFBLElBQUEsR0FBQSxNQUFBLE1BQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtRQ1JJLE9BQU8sTUFBTTtRRFNmLEtBQUssVUFBVTs7TUNOZixPRFFGLGtCQUFrQixLQUFLOztJQ052QixPRFdGLHdCQUtFO01BQUEsb0JBQW9CLFNBQUMsT0FBTyxPQUFPLGFBQWY7UUNkaEIsT0RnQkYsc0JBQXNCLDZCQUE2QixPQUFPLE9BQU8sYUFFaEUsS0FBSyxTQUFDLE9BQUQ7VUNqQkYsT0RtQkYseUJBQXlCOzs7TUFHN0IsOEJBQThCLFNBQUMsT0FBTyxPQUFPLGFBQWY7UUFNNUIsSUFBQSxHQUFBLFlBQUEsa0JBQUEsS0FBQTtRQUFBLGFBQWEsUUFBUSxLQUFLO1FBSTFCLG1CQUFtQixRQUFRLEtBQUs7UUFDaEMsS0FBQSxJQUFBLEdBQUEsTUFBQSxpQkFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1VDekJJLGFBQWEsaUJBQWlCO1VEMEJoQyxXQUFXLFFBQVEsV0FBVyxNQUFNLElBQUksU0FBQyxlQUFEO1lDeEJwQyxPRHdCdUQsV0FBVyxPQUFPLFNBQUMsTUFBRDtjQ3ZCdkUsT0R1QmlGLEtBQUssT0FBTSxjQUFjO2VBQUk7OztRQ25CcEgsT0RzQkYsYUFBYSxPQUFPLFlBQVksa0JBQWtCO1VBQUMsZUFBZTs7O01BRXBFLHVCQUF1QixTQUFDLEtBQUssU0FBTjtRQ25CbkIsT0RvQkYsSUFBSSxLQUFLLHVCQUF1QjtVQUFDLEtBQUssV0FBVyxnQkFBZ0I7OztNQVluRSxnQkFBZ0IsU0FBQyxPQUFPLE9BQU8sYUFBZjtRQzNCWixPRDZCRixhQUFhLE9BQU8sT0FBTyxhQUMxQixLQUFLLFdBQUE7VUM3QkYsT0Q4QkYsc0JBQXNCLDZCQUE2QixPQUFPLE9BQU87V0FHbEUsS0FBSyxJQUVMLEtBQUssU0FBQyxPQUFEO1VDakNGLE9Ea0NGLEtBQUMsUUFBUTtXQUdWLEtBQUssV0FBQTtVQ25DRixPRG9DRix5QkFBeUIsS0FBQztXQUczQixLQUFLLFdBQUE7VUNyQ0YsT0RzQ0Ysa0JBQWtCLEtBQUs7Ozs7OztHQ2hDNUIsS0FBSztBQUNSO0FDekxBLENBQUEsV0FBQTtFQUFBLElBQUksUUFBUSx5REFBd0IsU0FBQyxXQUFXLGlCQUFaO0lBRW5DLElBQUE7SUNDRyxPRERILHVCQUNDO01BQUEsMENBQTBDLGFBQWE7TUFDdkQsNkNBQTZDLGFBQWE7TUFDMUQsaURBQWlELGFBQWE7TUFFOUQsSUFBSSxTQUFDLE9BQUQ7UUFDSCxJQUFBLGFBQUE7UUFBQSxLQUFBLFFBQUEsc0JBQUE7VUNFTyxjQUFjLHFCQUFxQjtVQUNuQyxJREg0QyxZQUFZLGlCQUFBO1lBQzlELElBQUcsaUJBQWlCLGFBQXBCO2NBQ0MsT0FBTzs7Ozs7TUFFVixTQUFTLFNBQUMsT0FBRDtRQUNSLElBQUcsaUJBQWlCLHFCQUFxQiwwQ0FBekM7VUFDQyxPQUFPLFVBQVU7O1FBRWxCLElBQUcsaUJBQWlCLHFCQUFxQiw2Q0FBekM7VUFDQyxPQUFPLFVBQVUsMkNBQTJDO1lBQUUsS0FBSyxnQkFBZ0I7OztRQUVwRixJQUFHLGlCQUFpQixxQkFBcUIsaURBQXpDO1VBQ0MsT0FBTyxVQUFVLGdDQUFnQztZQUFFLEtBQUssZ0JBQWdCOzs7Ozs7O0dDZ0J6RSxLQUFLO0FBQ1I7QUNyQ0EsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLHdEQUFRLFNBQUMsWUFBWSxLQUFLLE1BQU0sZ0JBQXhCO0lBQ2hCLElBQUE7SUNFQSxPREZBLE9BVUk7TUFBQSxTQUFTLFNBQUMsTUFBRDtRQUVMLElBQU8sUUFBQSxNQUFQO1VBQ0ksT0FBTyxXQUFXOztRQ04xQixPRFNJLFdBQVcsZUFBZTs7TUFHOUIsTUFBTSxTQUFDLE1BQUQ7UUFFRixJQUFBLE1BQUEsR0FBQSxHQUFBLEtBQUEsTUFBQSxNQUFBLEtBQUE7UUFBQSxPQUFPLFFBQVEsS0FBSztRQUtwQixLQUFLLFNBQVM7UUFDZCxNQUFBLEtBQUE7UUFBQSxLQUFBLElBQUEsR0FBQSxNQUFBLElBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtVQ1pGLE9BQU8sSUFBSTtVRGFMLEtBQUssT0FBTyxLQUFLOztRQUtyQixLQUFLLFVBQVU7UUFDZixPQUFBLEtBQUE7UUFBQSxLQUFBLElBQUEsR0FBQSxPQUFBLEtBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtVQ2JGLE9BQU8sS0FBSztVRGNOLEtBQUssUUFBUSxLQUFLOztRQUV0QixPQUFPOztNQUlYLFVBQVUsU0FBQyxNQUFEO1FBR04sSUFBQSxRQUFBLEdBQUEsS0FBQTtRQUFBLE9BQU8sS0FBSztRQUVaLE1BQUEsS0FBQTtRQUFBLEtBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQSxRQUFBLElBQUEsS0FBQSxLQUFBO1VDZkYsU0FBUyxJQUFJO1VEZ0JQLE9BQU8sT0FBTztVQUNkLE9BQU8sT0FBTzs7UUNidEIsT0RnQkksS0FBSyxVQUFMLENBQUEsV0FBQTtVQ2ZGLElBQUksR0FBRyxNQUFNLE1BQU07VURlRCxPQUFBLEtBQUE7VUFBQSxVQUFBO1VDWmxCLEtEWWtCLElBQUEsR0FBQSxPQUFBLEtBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtZQ1hoQixTQUFTLEtBQUs7WUFDZCxJRFV1RCxDQUFJLGVBQWUsT0FBTyxTQUFTLFNBQS9CO2NDVHpELFFBQVEsS0RTTTs7O1VDTmxCLE9BQU87OztNRFNULFdBQVcsU0FBQyxNQUFEO1FBRVAsSUFBQTtRQUFBLE9BQU8sUUFBUSxLQUFLO1FBR3BCLEtBQUssU0FBTCxDQUFBLFdBQUE7VUNQRixJQUFJLEdBQUcsS0FBSyxLQUFLO1VET0MsTUFBQSxLQUFBO1VBQUEsVUFBQTtVQ0psQixLRElrQixJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7WUNIaEIsT0FBTyxJQUFJO1lBQ1gsUUFBUSxLREVRLEtBQUs7O1VDQXZCLE9BQU87O1FEQ0wsS0FBSyxVQUFMLENBQUEsV0FBQTtVQ0VGLElBQUksR0FBRyxLQUFLLEtBQUs7VURGQyxNQUFBLEtBQUE7VUFBQSxVQUFBO1VDS2xCLEtETGtCLElBQUEsR0FBQSxNQUFBLElBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtZQ01oQixPQUFPLElBQUk7WUFDWCxRQUFRLEtEUFEsS0FBSzs7VUNTdkIsT0FBTzs7UUROTCxLQUFLLFNBQVM7UUFFZCxPQUFPOztNQUdYLGFBQWEsU0FBQyxNQUFEO1FBRVQsSUFBQTtRQUFBLE9BQU8sUUFBUSxLQUFLO1FBR3BCLEtBQUssU0FBTCxDQUFBLFdBQUE7VUNLRixJQUFJLEdBQUcsS0FBSyxLQUFLO1VETEMsTUFBQSxLQUFBO1VBQUEsVUFBQTtVQ1FsQixLRFJrQixJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7WUNTaEIsVUFBVSxJQUFJO1lBQ2QsUUFBUSxLRFZRLEtBQUssTUFBTTs7VUNZN0IsT0FBTzs7UURYTCxLQUFLLFVBQUwsQ0FBQSxXQUFBO1VDY0YsSUFBSSxHQUFHLEtBQUssS0FBSztVRGRDLE1BQUEsS0FBQTtVQUFBLFVBQUE7VUNpQmxCLEtEakJrQixJQUFBLEdBQUEsTUFBQSxJQUFBLFFBQUEsSUFBQSxLQUFBLEtBQUE7WUNrQmhCLFVBQVUsSUFBSTtZQUNkLFFBQVEsS0RuQlEsS0FBSyxNQUFNOztVQ3FCN0IsT0FBTzs7UURuQkwsT0FBTzs7TUFPWCxPQUFPLFNBQUMsT0FBTyxZQUFSO1FBQ0gsSUFBQSxnQkFBQSxpQkFBQSxHQUFBLE9BQUEsT0FBQSxrQ0FBQSxtQkFBQSxvQkFBQSxHQUFBLGNBQUEsR0FBQSxHQUFBLEtBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEtBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQSxNQUFBLE1BQUEsV0FBQSxZQUFBLGlCQUFBO1FBQUEsSUFBYSxNQUFNLFlBQW5CO1VBQUEsT0FBTzs7UUFFUCxJQUFPLGNBQUEsTUFBUDtVQUNJLGFBQWE7O1FBR2pCLEtBQWEsUUFBQSxJQUFBLE1BQUEsWUFBQSxPQUFBLE1BQUEsUUFBQSxPQUFBLE9BQUEsS0FBQSxPQUFBLEtBQUEsTUFBQSxRQUFBLE9BQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxHQUFiO1VBQ0ksT0FBTyxNQUFNLFFBQVE7VUFFckIscUJBQXFCO1VBR3JCLEtBQWtCLGFBQUEsSUFBQSxPQUFBLE9BQUEsT0FBQSxNQUFBLFFBQUEsUUFBQSxPQUFBLEtBQUEsT0FBQSxLQUFBLE1BQUEsYUFBQSxRQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsR0FBbEI7WUFHSSxJQUFZLGVBQWMsT0FBMUI7Y0FBQTs7WUFHQSxrQkFBa0IsTUFBTSxhQUFhO1lBR3JDLG1CQUFtQixLQUFLO1lBR3hCLElBQUcsUUFBUSxPQUFPLE1BQU0sa0JBQXhCO2NBRUksTUFBTSxVQUFVLGFBQWE7Y0FLN0IsSUFBRyxRQUFRLE1BQU0sUUFBakI7Z0JBQ0ksT0FBTzs7Y0FHWCxPQUFPLEtBQUssTUFBTSxPQUFPOztZQU03QixJQUFHLEtBQUssT0FBTyxVQUFVLGdCQUFnQixRQUFRLFlBQWpEO2NBRUksWUFBWSxRQUFRLEtBQUs7Y0FDekIsdUJBQXVCLFFBQVEsS0FBSztjQUVwQyxPQUFPLFVBQVU7Y0FDakIsT0FBTyxxQkFBcUI7Y0FJNUIsSUFBRyxRQUFRLE9BQU8sV0FBVyx1QkFBN0I7Z0JBR0ksa0JBQWtCLFFBQVEsS0FBSyxnQkFBZ0I7Z0JBRy9DLEtBQUEsSUFBQSxHQUFBLE1BQUEsbUJBQUEsUUFBQSxJQUFBLEtBQUEsS0FBQTtrQkNWVixvQkFBb0IsbUJBQW1CO2tCRFd6QixJQUFZLHNCQUFxQixpQkFBakM7b0JBQUE7O2tCQUNBLE9BQUEsUUFBQSxLQUFBO2tCQUFBLEtBQUEsSUFBQSxHQUFBLE9BQUEsS0FBQSxRQUFBLElBQUEsTUFBQSxLQUFBO29CQ05aLGlCQUFpQixLQUFLO29CRE9OLElBQUcsa0JBQWtCLE9BQU8sSUFBSSxtQkFBbUIsa0JBQWtCLFFBQVEsSUFBSSxpQkFBakY7c0JBQ0ksZ0JBQWdCLE9BQU87Ozs7Z0JBR25DLElBQUcsZ0JBQWdCLGFBQW5CO2tCQUdJLEtBQUEsSUFBQSxHQUFBLE9BQUEsZ0JBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtvQkNOWixpQkFBaUIsZ0JBQWdCO29CRE9qQixLQUFLLE9BQU8sS0FBSztvQkFDakIsZ0JBQWdCLE9BQU8sT0FBTzs7a0JBR2xDLEtBQUssT0FBTyxLQUFLLFNBQUMsR0FBRyxHQUFKO29CQ043QixPRE11QyxJQUFJOztrQkFJL0IsSUFBRyxnQkFBZ0IsT0FBTyxZQUExQjtvQkFDSSxNQUFNLFVBQVUsYUFBYTs7a0JBS2pDLElBQUcsUUFBUSxNQUFNLFFBQWpCO29CQUNJLE9BQU87O2tCQUdYLE9BQU8sS0FBSyxNQUFNLE9BQU87Ozs7WUFJckMsSUFBRyxLQUFLLFdBQVUsWUFBWSxnQkFBZ0IsV0FBVSxVQUF4RDtjQUNJLElBQUcsUUFBUSxPQUFPLEtBQUssU0FBUyxnQkFBZ0IsVUFBaEQ7Z0JBRUksWUFBWSxRQUFRLEtBQUs7Z0JBQ3pCLHVCQUF1QixRQUFRLEtBQUs7Z0JBRXBDLE9BQU8sVUFBVTtnQkFDakIsT0FBTyxxQkFBcUI7Z0JBSTVCLElBQUcsUUFBUSxPQUFPLFdBQVcsdUJBQTdCO2tCQUdJLG1DQUFtQztrQkFHbkMsZUFBZSxRQUFRLEtBQUssS0FBSztrQkFDakMsT0FBQSxnQkFBQTtrQkFBQSxLQUFBLElBQUEsR0FBQSxPQUFBLEtBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtvQkNuQlosUUFBUSxLQUFLO29CRG9CRyxJQUFHLENBQUksYUFBYSxJQUFJLFFBQXhCO3NCQUNJLGFBQWEsS0FBSzs7O2tCQUkxQixLQUFBLElBQUEsR0FBQSxPQUFBLG1CQUFBLFFBQUEsSUFBQSxNQUFBLEtBQUE7b0JDbkJaLG9CQUFvQixtQkFBbUI7b0JEb0J2QixJQUFZLHNCQUFxQixpQkFBakM7c0JBQUE7O29CQUNBLElBQUcsa0JBQWtCLE9BQU8sVUFBVSxjQUFjLGVBQWUsa0JBQWtCLFFBQVEsVUFBVSxjQUFjLGFBQXJIO3NCQUNJLG1DQUFtQztzQkFDbkM7OztrQkFHUixJQUFHLENBQUksa0NBQVA7b0JBRUksS0FBSyxTQUFTO29CQUdkLEtBQUssT0FBTyxLQUFLLFNBQUMsR0FBRyxHQUFKO3NCQ25CL0IsT0RtQnlDLElBQUk7O29CQUcvQixNQUFNLFVBQVUsYUFBYTtvQkFLN0IsSUFBRyxRQUFRLE1BQU0sUUFBakI7c0JBQ0ksT0FBTzs7b0JBR1gsT0FBTyxLQUFLLE1BQU0sT0FBTzs7Ozs7WUFJekMsSUFBRyxLQUFLLFdBQVUsWUFBWSxnQkFBZ0IsV0FBVSxVQUF4RDtjQUtJLFlBQVksUUFBUSxLQUFLO2NBQ3pCLHVCQUF1QixRQUFRLEtBQUs7Y0FFcEMsT0FBTyxVQUFVO2NBQ2pCLE9BQU8scUJBQXFCO2NBRTVCLE9BQU8sVUFBVTtjQUNqQixPQUFPLHFCQUFxQjtjQUc1QixPQUFPLHFCQUFxQjtjQUc1QixJQUFHLFFBQVEsT0FBTyxXQUFXLHVCQUE3QjtnQkFHSSxtQ0FBbUM7Z0JBSW5DLEtBQUEsSUFBQSxHQUFBLE9BQUEsbUJBQUEsUUFBQSxJQUFBLE1BQUEsS0FBQTtrQkN0Q1Ysb0JBQW9CLG1CQUFtQjtrQkR1Q3pCLElBQVksc0JBQXFCLGlCQUFqQztvQkFBQTs7a0JBQ0EsSUFBRyxrQkFBa0IsT0FBTyxVQUFVLEtBQUssUUFBUSxlQUFlLGtCQUFrQixRQUFRLFVBQVUsS0FBSyxRQUFRLGFBQW5IO29CQUNJLG1DQUFtQztvQkFDbkM7OztnQkFHUixJQUFHLENBQUksa0NBQVA7a0JBRUksS0FBSyxZQUFZLEtBQUs7a0JBR3RCLEtBQUssVUFBVSxLQUFLLFNBQUMsR0FBRyxHQUFKO29CQ3RDaEMsT0RzQzBDLElBQUk7O2tCQUVsQyxRQUFRLE9BQU8sTUFBTTtrQkFHckIsTUFBTSxVQUFVLGFBQWE7a0JBSzdCLElBQUcsUUFBUSxNQUFNLFFBQWpCO29CQUNJLE9BQU87O2tCQUdYLE9BQU8sS0FBSyxNQUFNLE9BQU87Ozs7WUFJckMsSUFBRyxLQUFLLFdBQVUsWUFBWSxnQkFBZ0IsV0FBVSxVQUF4RDtjQUdJLElBQUcsS0FBSyxRQUFRLFVBQVUsZ0JBQWdCLFNBQVMsWUFBbkQ7Z0JBSUksWUFBWSxRQUFRLEtBQUs7Z0JBQ3pCLHVCQUF1QixRQUFRLEtBQUs7Z0JBRXBDLE9BQU8sVUFBVTtnQkFDakIsT0FBTyxxQkFBcUI7Z0JBRzVCLElBQUcsUUFBUSxPQUFPLFdBQVcsdUJBQTdCO2tCQUdJLG1DQUFtQztrQkFJbkMsS0FBQSxJQUFBLEdBQUEsT0FBQSxtQkFBQSxRQUFBLElBQUEsTUFBQSxLQUFBO29CQ3pEWixvQkFBb0IsbUJBQW1CO29CRDBEdkIsSUFBWSxzQkFBcUIsaUJBQWpDO3NCQUFBOztvQkFDQSxJQUFHLGtCQUFrQixPQUFPLFVBQVUsS0FBSyxRQUFRLGVBQWUsa0JBQWtCLFFBQVEsVUFBVSxLQUFLLFFBQVEsYUFBbkg7c0JBQ0ksbUNBQW1DO3NCQUNuQzs7O2tCQUdSLElBQUcsQ0FBSSxrQ0FBUDtvQkFFSSxLQUFLLFVBQVUsS0FBSyxRQUFRLE9BQU8sZ0JBQWdCO29CQUduRCxNQUFNLFVBQVUsYUFBYTtvQkFLN0IsSUFBRyxRQUFRLE1BQU0sUUFBakI7c0JBQ0ksT0FBTzs7b0JBR1gsT0FBTyxLQUFLLE1BQU0sT0FBTzs7Ozs7OztRQUVqRCxPQUFPOztNQUtYLGFBQWEsU0FBQyxTQUFTLFdBQVY7UUFDVCxJQUFBLE1BQUE7UUFBQSxPQUFPLEtBQUssTUFBTTtRQUNsQixPQUFPLEtBQUs7UUFFWixJQUFVLENBQUksTUFBZDtVQUFBOztRQUVBLEtBQUssUUFBUTtRQUliLFFBQU87VUFBUCxLQUVTO1lBQ0QsS0FBSyxPQUFPLE9BQU87WUFDbkIsT0FBTyxJQUFJLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSSxjQUFjO1lBRnhEO1VBRlQsS0FNUztZQUNELEtBQUssUUFBUSxPQUFPO1lBQ3BCLE9BQU8sSUFBSSxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUksZUFBZTtZQUZ6RDtVQU5UO1lBVVMsTUFBVSxJQUFBLE1BQU0sNkJBQTJCOztRQUVwRCxPQUFPOzs7OztHQzFEaEIsS0FBSztBQUNSO0FDeFNBLENBQUEsV0FBQTtFQUFBLElBQUksUUFBUSxzQ0FBVSxTQUFDLFlBQVksV0FBYjtJQUNwQixJQUFBO0lDRUUsT0RGRixTQUNFO01BQUEsVUFDRTtRQUFBLE1BQU07UUFDTixVQUFVO1FBQ1YsTUFBTTs7TUFFUixLQUFLLFNBQUMsUUFBUSxTQUFTLFNBQWxCO1FBRUgsSUFBQSxxQkFBQSxJQUFBO1FBQUEsY0FBYyxPQUFPLFlBQVksUUFBUSxTQUFTO1FBR2xELElBQUcsV0FBVyxRQUFkO1VBRUUsc0JBQXNCLFFBQVEsS0FBSyxXQUFXO1VBQzlDLE9BQU8sb0JBQW9CO1VBRTNCLElBQVUsUUFBUSxPQUFPLGFBQWEsc0JBQXRDO1lBQUE7OztRQUlGLEtBQVEsV0FBVyxTQUFZLFdBQVcsT0FBTyxLQUFLLElBQU87UUNEM0QsT0RHRixXQUFXLFVBQVUsV0FBQTtVQ0ZqQixPREdGLFdBQVcsU0FBUyxRQUFRLE9BQU8sYUFDbkM7WUFFRSxJQUFLOzs7O01BR1gsYUFBYSxTQUFDLFFBQVEsU0FBUyxTQUFsQjtRQUNYLElBQUE7UUNIRSxPREdGLGNBQ0U7VUFBQSxNQUFVO1VBQ1YsU0FBVSxXQUFXO1VBQ3JCLFFBQVUsV0FBVyxRQUFROzs7TUFFakMsTUFBTSxTQUFDLFNBQUQ7UUNERixPREVGLEtBQUMsSUFBSSxLQUFDLFNBQVMsTUFBTSxTQUFTO1VBQUUsUUFBUTs7O01BRzFDLFVBQVUsV0FBQTtRQUNSLElBQVUsQ0FBSSxXQUFXLFFBQXpCO1VBQUE7O1FBQ0EsSUFBRyxXQUFXLE9BQU8sU0FBUSxLQUFDLFNBQVMsTUFBdkM7VUNFSSxPRERGLE9BQU87OztNQUVYLFVBQVUsU0FBQyxTQUFEO1FDR04sT0RGRixLQUFDLElBQUksS0FBQyxTQUFTLFVBQVUsU0FBUztVQUFFLFFBQVE7OztNQUU5QyxNQUFNLFNBQUMsU0FBUyxTQUFWO1FDS0YsT0RKRixLQUFDLElBQUksS0FBQyxTQUFTLE1BQU0sU0FBUzs7TUFFaEMsTUFBTSxTQUFDLFNBQVMsU0FBVjtRQ0tGLE9ESkYsS0FBQyxLQUFLLFNBQVM7O01BRWpCLE9BQU8sU0FBQyxTQUFTLFNBQVY7UUFDTCxRQUFRLE1BQU0sUUFBUSxTQUFTO1FBRy9CLElBQUcsbUJBQW1CLE9BQXRCO1VBQ0UsVUFBVSxRQUFROztRQUdwQixJQUFHLFFBQVEsUUFBUSxRQUFRLFNBQTNCO1VBQ0UsVUFBVSxRQUFROztRQUdwQixJQUFHLENBQUksV0FBVywwQkFBMEIsV0FBVyxVQUFVLFdBQVUsU0FBTSxXQUFXLFVBQVUsU0FBUSxTQUE5RztVQUVFLElBQUcsQ0FBQyxVQUFVLHNCQUFxQixpQkFBbkM7WUFDRSxNQUFNLGVBQWU7aUJBRHZCO1lBSUUsTUFBTSxVQUFVLGlCQUFpQjtjQUFFLFNBQVM7Ozs7UUNHOUMsT0RERixLQUFDLElBQUksU0FBUyxTQUFTOztNQUV6QixtQkFBbUIsV0FBQTtRQUVqQixJQUFHLFdBQVcsVUFBVSxXQUFXLE9BQU8sU0FBUSxRQUFsRDtVQ0NJLE9EQUYsS0FBQzs7O01BR0wsT0FBTyxTQUFDLE9BQUQ7UUFDTCxJQUFBO1FBQUEsV0FBVyxFQUFFO1FBRWIsSUFBRyxPQUFIO1VBQ0UsT0FBTyxTQUFTLFNBQVMsTUFBTSxRQUFROztRQUV6QyxJQUFHLEVBQUUsMkJBQTJCLElBQWhDO1VBQ0UsT0FBTyxTQUFTLFNBQVMsRUFBRTs7UUNFM0IsT0RBRixTQUFTLFNBQVMsRUFBRTs7TUFFdEIsTUFBTSxXQUFBO1FBQ0osT0FBTyxLQUFLO1FBQ1osQ0FBQyxXQUFBO1VDQ0csT0REQSxPQUFPLE1BQU07V0FBa0IsTUFBTTtRQ0d2QyxPREZGLENBQUMsV0FBQTtVQ0dHLE9ESEEsT0FBTyxLQUFLO1dBQWlCLE1BQU07Ozs7O0dDUzFDLEtBQUs7QUFDUjtBQzFHQSxDQUFBLFdBQUE7RUFBQSxJQUFJLFFBQVEsNEJBQWEsU0FBQyxZQUFEO0lBQ3ZCLElBQUE7SUNFRSxPREZGLFlBQVksV0FBQTtNQ0dSLE9ERkYsV0FBVyxRQUFRLE1BQU0sTUFBRzs7OztHQ003QixLQUFLO0FBQ1I7QUNUQSxDQUFBLFdBQUE7RUFBQSxJQUFJLFFBQVEsYUFBYSxXQUFBO0lBQ3hCLElBQUE7SUNFRyxPREZILFlBR0M7TUFBQSxzQkFBc0IsU0FBQyxNQUFEO1FDQ2hCLE9ERDBCLFNBQVMsTUFBTTs7TUFHL0Msc0JBQXNCLFNBQUMsTUFBRDtRQ0NoQixPREQwQixLQUFLLFNBQVMsSUFBSTs7TUFFbEQsNEJBQTRCLFNBQUMsS0FBRDtRQUUzQixJQUFHLElBQUksU0FBUyxHQUFoQjtVQUNDLE1BQU0sTUFBTTs7UUNFUixPREFMLElBQUksTUFBTSxXQUFXLElBQUksU0FBQyxXQUFEO1VDQ2xCLE9ERGlDLFVBQVUscUJBQXFCOzs7TUFFeEUsNEJBQTRCLFNBQUMsT0FBRDtRQUMzQixRQUFRLE1BQU07UUNHVCxPREVMLE1BQU0sSUFBSSxTQUFDLFFBQUQ7VUFDVCxJQUFBO1VBQUEsTUFBTSxVQUFVLHFCQUFxQjtVQUNyQyxJQUFHLElBQUksV0FBVSxHQUFqQjtZQUNDLE1BQU0sTUFBTTs7VUNDUCxPREFOO1dBQ0EsS0FBSzs7TUFTUCxrQkFBa0IsU0FBQyxLQUFLLFVBQU47UUFLakIsSUFBQSxRQUFBLE1BQUEsWUFBQSxPQUFBLGlCQUFBLGdCQUFBLGVBQUEsVUFBQSxTQUFBO1FBQUEsV0FBVztRQUdYLFNBQVMsSUFBSSxVQUFVLEdBQUc7UUFHMUIsaUJBQWlCLE9BQU8sU0FBUyxPQUFPLFFBQVEsT0FBTyxJQUFJO1FBQzNELFlBQVk7UUFFWixNQUFNLElBQUksUUFBUSxPQUFPLElBQUk7UUFFN0IsZ0JBQWdCO1FBSWhCLGtCQUFrQixTQUFDLFlBQUQ7VUFFakIsSUFBQSxPQUFBO1VBQUEsUUFBUSxLQUFLLE1BQU0sYUFBYTtVQUVoQyxlQUFlLEtBQUssTUFBTSxRQUFRO1VBSWxDLE9BQU8sYUFBYSxRQUFRLGVBQWUsS0FBSzs7UUFFakQsUUFBUSxJQUFJLE1BQU07UUFHbEIsSUFBRyxDQUFJLE9BQVA7VUFDQyxPQUFPLENBQUMsVUFBVTs7UUFFbkIsUUFBUTtRQUVSLFVBQVU7UUFDVixhQUFhO1FBQ2IsT0FBTSxhQUFhLE1BQU0sUUFBekI7VUFDQyxPQUFPLE1BQU07VUFJYixJQUFPLFNBQUEsTUFBUDtZQUNDLFlBQVk7WUFDWixJQUFHLFlBQVksR0FBZjtjQUNDLFFBQVEsZ0JBQWdCOzs7VUFFMUIsV0FBVztVQUdYLElBQUcsYUFBYSxJQUFJLE1BQU0sUUFBMUI7WUFFQyxJQUFHLGVBQWMsS0FBSyxDQUFDLGFBQWEsTUFBTSxJQUFJLG1CQUFrQixHQUFoRTtjQUNDLFdBQVc7bUJBRVAsSUFBRyxlQUFjLEtBQUssQ0FBQyxhQUFhLEtBQUssTUFBSyxHQUE5QztjQUNKLFdBQVc7bUJBRFA7Y0FHSixXQUFXOzs7VUFFYjs7UUFFRCxPQUFPLENBQUMsU0FBWSxTQUFBLE9BQVksUUFBUSxpQkFBb0I7O01BRzdELGlCQUFpQixTQUFDLEtBQUQ7UUFDaEIsSUFBYyxPQUFBLE1BQWQ7VUFBQTs7UUFFQSxNQUFNLElBQUksUUFBUSxXQUFXO1FBQzdCLElBQUcsSUFBSSxRQUFRLE9BQU8sSUFBSSxTQUFTLEdBQW5DO1VBQ0MsTUFBTSxNQUFNOztRQUViLE9BQU87O01BSVIsWUFBWSxTQUFDLE1BQU0sSUFBSSxNQUFNLE1BQWpCO1FBQ1gsSUFBQSxLQUFBO1FBQUEsSUFBTyxDQUFBLFFBQUEsVUFBYSxRQUFBLE9BQXBCO1VBQ0MsT0FBTztVQUNQLE9BQU87O1FBRVIsSUFBRyxPQUFPLFNBQVEsVUFBbEI7VUFDQyxJQUFHLE9BQU8sT0FBTSxVQUFoQjtZQUNDLE1BQVUsSUFBQSxNQUFNLHNDQUFzQyxNQUFNOztVQUU3RCxLQUFBLE9BQUEsTUFBQTtZQy9CUSxRQUFRLEtBQUs7WURnQ3BCLFVBQVUsV0FBVyxLQUFLLE1BQU0sR0FBRyxNQUFNLE1BQVMsU0FBUSxLQUFRLE1BQVksT0FBSyxNQUFHOztlQUx4RjtVQU9DLElBQUcsT0FBTyxPQUFNLFVBQWhCO1lBQ0MsTUFBVSxJQUFBLE1BQU0sc0NBQXNDLE1BQU07O1VBRTdELElBQUcsQ0FBSSxRQUFRLE9BQU8sTUFBTSxLQUE1QjtZQUNDLE9BQU8sSUFBSSxNQUFNLE1BQU07OztRQUV6QixPQUFPOzs7OztHQ3hCUCxLQUFLO0FBQ1I7QUM5R0EsQ0FBQSxXQUFBO0VBQUEsSUFBSSxRQUFRLFdBQVcsV0FBQTtJQ0VuQixPREZzQjs7O0dDS3ZCLEtBQUs7QUFDUjtBQ05BLENBQUEsV0FBQTtFQUFBLEtBQUMsVUFBVSxTQUFDLFNBQUQ7SUFDVixJQUFBLEtBQUE7SUFBQSxJQUFHLENBQUksZ0JBQWdCLEtBQUssVUFBNUI7TUFFQyxVQUFVOztJQUVYLFdBQVcsU0FBQyxTQUFEO01DRU4sT0RGbUIsUUFBUSxNQUFNLEtBQUssSUFBSSxTQUFDLEdBQUQ7UUNHeEMsT0RIK0MsU0FBUzs7O0lDTTVELE9ESkgsTUFDQztNQUFBLFNBQVMsU0FBQyxpQkFBRDtRQUNSLElBQUEsY0FBQSxlQUFBLE1BQUE7UUFBQSxRQUFnQixTQUFTO1FBQ3pCLGdCQUFnQixTQUFTO1FBRXpCLE9BQU0sTUFBTSxhQUFaO1VBQ0MsT0FBZSxNQUFNO1VBQ3JCLGVBQWUsY0FBYztVQUU3QixJQUFHLE9BQU8sY0FBVjtZQUNDLE9BQU8sQ0FBQztpQkFDSixJQUFHLE9BQU8sY0FBVjtZQUNKLE9BQU87OztRQUVULE9BQU87O01BRVIsUUFBbUIsU0FBQyxpQkFBRDtRQ0tiLE9ETGtDLElBQUksUUFBUSxtQkFBbUI7O01BQ3ZFLE9BQW1CLFNBQUMsaUJBQUQ7UUNPYixPRFBrQyxJQUFJLFFBQVEsbUJBQW1COztNQUN2RSxlQUFtQixTQUFDLGlCQUFEO1FDU2IsT0RUa0MsSUFBSSxRQUFRLG9CQUFvQjs7TUFDeEUsa0JBQW1CLFNBQUMsaUJBQUQ7UUNXYixPRFhrQyxJQUFJLFFBQVEsb0JBQW9COztNQUN4RSxnQkFBbUIsU0FBQyxpQkFBRDtRQ2FiLE9EYmtDLElBQUksUUFBUSxvQkFBb0I7O01BQ3hFLGVBQW1CLFNBQUMsaUJBQUQ7UUNlYixPRGZrQyxJQUFJLFFBQVEsb0JBQW9COztNQUV4RSxVQUFVLFdBQUE7UUNnQkosT0RoQk87Ozs7O0dDcUJaLEtBQUs7QUFDUiIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIjIEJlZ2luOiBFcnJvciBoYW5kbGluZ1xuXG4jINC/0L7QutCw0LfRi9Cy0LDQtdGCINC+0YjQuNCx0LrRgyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y5cbiMgKNGN0YLQsCDRhNGD0L3QutGG0LjRjyDQsdGD0LTQtdGCINC/0L7QtNC80LXQvdC10L3QsCDQvdCwIFN0YXR1cywg0LrQvtCz0LTQsCBTdGF0dXMg0LHRg9C00LXRgiDQs9C+0YLQvtCyKVxucmVwb3J0X2Vycm9yID0gKG1lc3NhZ2UpIC0+IGFsZXJ0KG1lc3NhZ2UpXG5cbiMg0LLRi9Cy0L7QtNC40YIg0L7RiNC40LHQutGDINCyINC70L7Qs1xubG9nX2Vycm9yID0gKGVycm9yKSAtPlxuICBjb25zb2xlLmVycm9yKGVycm9yKVxuXG4jINCT0LvQvtCx0LDQu9GM0L3Ri9C5INC70L7QstC10YYg0L7RiNC40LHQvtC6XG4jIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwNTU2NzQzLzk3MDc2OVxud2luZG93Lm9uZXJyb3IgPSAobXNnLCB1cmwsIGxpbmUsIGNvbCwgZXJyb3IpIC0+XG4gICMg0LLRi9Cy0LXRgdGC0Lgg0L7RiNC40LHQutGDINCyINC60L7QvdGB0L7Qu9GMXG4gIGxvZ19lcnJvcihlcnJvcilcblxuICAjIE5vdGUgdGhhdCBjb2wgJiBlcnJvciBhcmUgbmV3IHRvIHRoZSBIVE1MIDUgc3BlYyBhbmQgbWF5IG5vdCBiZSBcbiAgIyBzdXBwb3J0ZWQgaW4gZXZlcnkgYnJvd3Nlci4gIEl0IHdvcmtlZCBmb3IgbWUgaW4gQ2hyb21lLlxuICBleHRyYSA9ICFjb2wgPyAnJyA6ICdcXG5jb2x1bW46ICcgKyBjb2xcbiAgZXh0cmEgKz0gIWVycm9yID8gJycgOiAnXFxuZXJyb3I6ICcgKyBlcnJvclxuXG4gIHJlcG9ydF9lcnJvcihcIkVycm9yOiBcIiArIG1zZyArIFwiXFxudXJsOiBcIiArIHVybCArIFwiXFxubGluZTogXCIgKyBsaW5lICsgZXh0cmEpXG5cbiAgIyBJZiB5b3UgcmV0dXJuIHRydWUsIHRoZW4gZXJyb3IgYWxlcnRzIChsaWtlIGluIG9sZGVyIHZlcnNpb25zIG9mIFxuICAjIEludGVybmV0IEV4cGxvcmVyKSB3aWxsIGJlIHN1cHByZXNzZWQuXG4gIHJldHVybiB0cnVlXG5cbiMg0L7RgtC70LDQstC70LjQstCw0LXRgiDQvtGI0LjQsdC60LggQW5ndWxhci5qc1xuIyBodHRwOi8vYmFobXV0b3YuY2FsZXBpbi5jby9jYXRjaC1hbGwtZXJyb3JzLWluLWFuZ3VsYXItYXBwLmh0bWxcbmFuZ3VsYXIubW9kdWxlKCdFcnJvckNhdGNoZXInLCBbXSkuZmFjdG9yeSAnJGV4Y2VwdGlvbkhhbmRsZXInLCAtPlxuICByZXR1cm4gKGV4Y2VwdGlvbiwgY2F1c2UpIC0+XG4gICAgbG9nX2Vycm9yKGV4Y2VwdGlvbilcbiAgICByZXBvcnRfZXJyb3IoZXhjZXB0aW9uLm1lc3NhZ2UpXG5cbiMgRW5kOiBFcnJvciBoYW5kbGluZ1xuXG4jIGFuZ3VsYXIuanNcbiQkID0gYW5ndWxhci5lbGVtZW50XG5hcHAgPSBhbmd1bGFyLm1vZHVsZSBcImFwcFwiLCBbXG4gICduZ1JvdXRlJywgXG4gICduZ1Nhbml0aXplJywgXG4gICduZ01lc3NhZ2VzJywgXG4gICMgbmdBbmltYXRlINCy0YvQtNCw0LLQsNC7INC+0YjQuNCx0LrRgyBcIlR5cGVFcnJvcjogYyBpcyB1bmRlZmluZWRcIiwg0L7QvdCwINC20LVcbiAgIyB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KGNoaWxkKTsgXG4gICMgXCJUeXBlRXJyb3I6IGFuaW1hdGlvbkRldGFpbHMgaXMgdW5kZWZpbmVkXCJcbiAgI1xuICAjINC/0L7RjdGC0L7QvNGDIG5nQW5pbWF0ZSDQvtGC0LrQu9GO0YfRkdC9O1xuICAjINC40YHQv9C+0LvRjNC30L7QstCw0LvRgdGPINC00LvRjyDQv9C70LDQstC90L7Qs9C+INC/0L7QutCw0LfRi9Cy0LDQvdC40Y8g0Lgg0YHQvtC60YDRi9GC0LjRj1xuICAjINC+0LrQvtGI0LrQsCBcItCS0Ysg0YPQstC10YDQtdC90YssINGH0YLQviDRhdC+0YLQuNGC0LUg0YPQudGC0Lgg0YEg0YLQtdC60YPRidC10Lkg0YHRgtGA0LDQvdC40YbRiz9cIlxuICAjXG4gICMgJ25nQW5pbWF0ZScsXG4gICd1aS5ib290c3RyYXAnLCBcbiAgJ2x2bC5kaXJlY3RpdmVzLmRyYWdkcm9wJywgXG4gICdhbmd1bGFyLXN2Zy1yb3VuZC1wcm9ncmVzcycsXG4gICdhbmd1bGFyRmlsZVVwbG9hZCcsXG4gICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJyxcbiAgJ0Vycm9yQ2F0Y2hlcidcbl1cbi5jb25maWcgKCR0cmFuc2xhdGVQcm92aWRlcikgLT5cbiAgZm9yIGtleSwgdmFsdWUgb2YgaTE4blxuICAgICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoa2V5LCB2YWx1ZSlcbiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCdlc2NhcGUnKVxuXG4gICMgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbl9VUycpXG4gICR0cmFuc2xhdGVQcm92aWRlci5mYWxsYmFja0xhbmd1YWdlKCdlbl9VUycpXG5cbiMg0JPQu9C+0LHQsNC70LjQt9Cw0YbQuNGPINC/0LXRgNC10LzQtdC90L3Ri9GFXG5AJCQgID0galF1ZXJ5XG5AYXBwID0gYXBwXG5cbiMg0KDRg9GH0L3QvtC5INGB0YLQsNGA0YIg0L/RgNC40LvQvtC20LXQvdC40Y8g0L/QvtGB0LvQtSDQt9Cw0LPRgNGD0LfQutC4INCy0YHQtSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC10LlcbiQkKGRvY3VtZW50KS5yZWFkeSAtPlxuICBodG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXVxuICBodG1sLnNldEF0dHJpYnV0ZSgnbmctYXBwJywgJ2FwcCcpXG4gIGh0bWwuZGF0YXNldC5uZ0FwcCA9ICdhcHAnXG4gIGFuZ3VsYXIuYm9vdHN0cmFwKGh0bWwsIFsnYXBwJ10pXG5cbiMg0L/QtdGA0LXQutC70Y7Rh9C10L3QuNC1INGP0LfRi9C60LAg0LzQvtC20L3QviDQtNC10LvQsNGC0Ywg0Y3RgtC40Lwg0LzQtdGC0L7QtNC+0LxcbnNldF9sYW5ndWFnZSA9IChsYW5ndWFnZSwgJHRyYW5zbGF0ZSkgPT5cbiAgJHRyYW5zbGF0ZS51c2UobGFuZ3VhZ2UpXG5cbiAgIyDQn9C10YDQtdCy0LXRgdGC0Lgg0LfQsNCz0L7Qu9C+0LLQutC4INGB0YLRgNCw0L3QuNGGXG4gIGZvciBwYWdlIGluIEBwYWdlc1xuICAgIHBhZ2UudGl0bGUgPSAkdHJhbnNsYXRlLmluc3RhbnQoXCJwYWdlLiN7cGFnZS5wYWdlfS50aXRsZVwiKVxuXG4jIEFwcGxpY2F0aW9uIGNvbnRyb2xsZXJcbmFwcC5jb250cm9sbGVyIFwiQXBwQ3RybFwiLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRmaWx0ZXIsICRxLCAkdGltZW91dCwgJHRyYW5zbGF0ZSwgbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLCBEZXZpY2UsIERldmljZV9yb3V0aW5nLCBEZXZpY2VfR1VJLCBHVUksIFBvcnQsIFJ1bGUsIENvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBDb25maWd1cmF0aW9ucywgRW51bXMsIFN0YXR1cywgTW9kZWwsIERldmljZV9zZXR0aW5ncywgVmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2luLCB0cmFuc2xhdGUsIFJvdXRpbmdfbW9kZWxfZXJyb3JzLCBQb3J0X3ZpZXcsIFBvcnRfbnVtZXJhdGlvbiwgUHJvbWlzZXMsIEJyb3dzZXIpIC0+XG5cbiAgIyBTdGF0dXMg0LPQvtGC0L7QsiDQuiDRgtC+0LzRgywg0YfRgtC+0LHRiyDQstGL0LLQvtC00LjRgtGMINC+0YjQuNCx0LrQuCAo0LvQuNCx0L4g0LIg0YHRgtCw0YLRg9GB0LUsINC70LjQsdC+IGFsZXJ0J9C+0LwpXG4gIHJlcG9ydF9lcnJvciA9IChtZXNzYWdlKSAtPiBTdGF0dXMuZXJyb3IobWVzc2FnZSlcblxuICAjINCy0YvQstC+0LTQuNGCINC+0YjQuNCx0LrRgyDQsiDQu9C+0LNcbiAgbG9nX2Vycm9yID0gKGVycm9yKSAtPlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgbG9nLmVycm9yKGVycm9yKVxuXG4gICMg0JPQvtGA0Y/Rh9C40LUg0LrQu9Cw0LLQuNGI0LhcblxuICAkc2NvcGUua2V5X2hhbmRsZXJzID0gW11cblxuICAjIFVzYWdlOlxuICAjXG4gICMgJHNjb3BlLm9uX2tleSAoa2V5KSAtPlxuICAjICAgaWYga2V5LmlzKCdDdHJsJywgJ3onKVxuICAjICAgICByZXR1cm4gYWxlcnQoMSlcbiAgJHNjb3BlLm9uX2tleSA9IChhY3Rpb24pIC0+XG4gICAgaGFuZGxlcl9pZCA9IEtleWJvYXJkX2xpc3RlbmVyLm9uKGFjdGlvbilcbiAgICBAa2V5X2hhbmRsZXJzLnB1c2goaGFuZGxlcl9pZClcbiAgICByZXR1cm4gaGFuZGxlcl9pZFxuXG4gICRzY29wZS5vZmZfa2V5ID0gKGhhbmRsZXJfaWQpIC0+XG4gICAgQGtleV9oYW5kbGVycy5yZW1vdmUoaGFuZGxlcl9pZClcbiAgICBLZXlib2FyZF9saXN0ZW5lci5vZmYoaGFuZGxlcl9pZClcblxuICAjINCS0L7Qt9C80L7QttC90L7RgdGC0Ywg0YHQutCw0YfQsNGC0Ywg0LvQvtCzXG4gICNcbiAgIyDRh9C10YDQtdC3ICRzY29wZSDQvdC1INGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGC0YHRjyBcbiAgIyAo0LLQuNC00LjQvNC+LCDQvtGH0LjRidCw0LXRgtGB0Y8ga2V5X2hhbmRsZXJzINCy0L4g0LLRgNC10LzRjyDQt9Cw0LPRgNGD0LfQutC4INGB0YLRgNCw0L3QuNGG0YspXG4gICMgJHNjb3BlLm9uX2tleSAoa2V5KSAtPlxuICBLZXlib2FyZF9saXN0ZW5lci5vbiAoa2V5KSAtPlxuICAgIGlmIGtleS5pcygnRjEnLCB7IHN3YWxsb3c6IHRydWUgfSlcbiAgICAgIHJldHVybiBsb2cuZG93bmxvYWQoKVxuICAgICAgXG4gICMgQ2FsY3VsYXRlIHdhdGNoZXJzIGNvdW50IG9uIHBhZ2VcbiAgJHJvb3RTY29wZS5jb3VudFdhdGNoZXJzID0gLT5cbiAgICBxID0gWyAkcm9vdFNjb3BlIF1cbiAgICB3YXRjaGVycyA9IDBcbiAgICBzY29wZSA9IHVuZGVmaW5lZFxuICAgIHdoaWxlIHEubGVuZ3RoID4gMFxuICAgICAgc2NvcGUgPSBxLnBvcCgpXG4gICAgICBpZiBzY29wZS4kJHdhdGNoZXJzXG4gICAgICAgIHdhdGNoZXJzICs9IHNjb3BlLiQkd2F0Y2hlcnMubGVuZ3RoXG4gICAgICBpZiBzY29wZS4kJGNoaWxkSGVhZFxuICAgICAgICBxLnB1c2ggc2NvcGUuJCRjaGlsZEhlYWRcbiAgICAgIGlmIHNjb3BlLiQkbmV4dFNpYmxpbmdcbiAgICAgICAgcS5wdXNoIHNjb3BlLiQkbmV4dFNpYmxpbmdcbiAgICB3aW5kb3cuY29uc29sZS5sb2cgJ1dhdGNoZXJzIGNvdW50IC0tLS0nLCB3YXRjaGVyc1xuICAgIHJldHVyblxuXG4gICMgZXNjYXBlIGtleSBoYW5kbGVyXG4gICQkKGRvY3VtZW50KS5vbiAna2V5ZG93bicsIChldmVudCkgPT5cbiAgICByZXR1cm4gaWYgZXZlbnQua2V5Q29kZSAhPSAyN1xuXG4gICAgJHNjb3BlLiRhcHBseSAtPlxuICAgICAgIyDQl9Cw0LrRgNGL0YLQuNC1IGRyb3Bkb3duJ9C+0LIg0L/QviBFc2NhcGVcbiAgICAgIGlmIHdpbmRvdy5jbG9zZWFibGVfYnlfZXNjYXBlICYmIG5vdCB3aW5kb3cuY2xvc2VhYmxlX2J5X2VzY2FwZS5pc19lbXB0eSgpXG4gICAgICAgIHdpbmRvdy5jbG9zZWFibGVfYnlfZXNjYXBlLnBvcCgpKClcblxuICAkcm9vdFNjb3BlLnN0YXRlID0ge31cblxuICAjINCX0LDQv9GD0YHRgtGP0YLRgdGPINC/0L4g0LfQsNCy0LXRgNGI0LXQvdC40Lgg0LfQsNC/0YPRgdC60LAg0L/RgNC40LvQvtC20LXQvdC40Y9cbiAgJHNjb3BlLnN0YXRlLmlzX2FwcGxpY2F0aW9uX2xvYWRlZCA9IG5vXG4gICRzY29wZS53aGVuX2xvYWRlZCA9IChhY3Rpb24pIC0+XG4gICAgcmV0dXJuIGFjdGlvbigpIGlmICRyb290U2NvcGUuc3RhdGUuaXNfYXBwbGljYXRpb25fbG9hZGVkXG4gICAgdW5iaW5kID0gJHNjb3BlLiRvbiAnYXBwbGljYXRpb24gbG9hZGVkJywgLT5cbiAgICAgIHVuYmluZCgpXG4gICAgICBhY3Rpb24oKVxuXG4gICMg0Y3RgtCwINGE0YPQvdC60YbQuNGPINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQtNC70Y8g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40Lgg0YHRgtGA0LDQvdC40YbRiy5cbiAgIyDQvtC90LAg0LTQvtC70LbQvdCwINC70LjQsdC+INCx0YvRgtGMINC+0LHRi9GH0L3QvtC5INGE0YPQvdC60YbQuNC10LksINC70LjQsdC+INCy0L7Qt9Cy0YDQsNGJ0LDRgtGMIHByb21pc2UsXG4gICMg0LrQvtGC0L7RgNGL0Lkg0LTQvtC70LbQtdC9INCy0YHQtdCz0LTQsCBcItGA0LXQt9C+0LvQstC40YLRjNGB0Y9cIiDRgtC+0LPQtNCwLCDQutC+0LPQtNCwINGB0YLRgNCw0L3QuNGG0LAg0YHRh9C40YLQsNC10YLRgdGPINC/0L7Qu9C90L7RgdGC0YzRjiDQt9Cw0LPRgNGD0LbQtdC90L3QvtC5LlxuICAjXG4gICMg0LXRgdC70LggcHJvbWlzZSDQstC+INCy0YDQtdC80Y8g0LfQsNCz0YDRg9C30LrQuCDRgdGC0YDQsNC90LjRhtGLINC30LDQstC10YDRiNCw0LXRgtGB0Y8g0L7RiNC40LHQutC+0LksINGC0L4g0YHRgtGA0LDQvdC40YbQsCDRgdGH0LjRgtCw0LXRgtGB0Y8g0L3QtdC30LDQs9GA0YPQttC10L3QvdC+0LksXG4gICMg0Lgg0LzQvtC20LXRgiDQsdGL0YLRjCDQv9C+0L/RgNC+0LHQvtCy0LDQvdCwINCx0YvRgtGMINC30LDQs9GA0YPQttC10L3QvdC+0Lkg0LfQsNC90L7QstC+INCyINGC0L7QvCDRgdC70YPRh9Cw0LUsINC10YHQu9C4INCy0YvQu9C10LfQtdGCINC+0LrQvdC+INC70L7Qs9C40L3QsC5cbiAgJHNjb3BlLmluaXRpYWxpemVfcGFnZV93aXRoID0gKGluaXRpYWxpemVyKSAtPlxuICAgIGluaXRpYWxpemF0aW9uID0gLT5cbiAgICAgICRyb290U2NvcGUubG9hZGluZ19wYWdlID0geWVzXG4gICAgICBwcm9taXNlID0gaW5pdGlhbGl6ZXIoKVxuICAgICAgZmluaXNoID0gLT5cbiAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmdfcGFnZSA9IG5vXG5cbiAgICAgIGlmIG5vdCBwcm9taXNlPyB8fCBub3QgcHJvbWlzZS5maW5hbGx5P1xuICAgICAgICBmaW5pc2goKVxuICAgICAgZWxzZVxuICAgICAgICBwcm9taXNlLnRoZW4oZmluaXNoKVxuXG4gICAgJHJvb3RTY29wZS5wYWdlX2luaXRpYWxpemVyID0gaW5pdGlhbGl6YXRpb25cbiAgICAkc2NvcGUud2hlbl9sb2FkZWQoaW5pdGlhbGl6YXRpb24pXG5cbiAgJHJvb3RTY29wZS5pbml0aWFsaXplX3BhZ2UgPSAtPlxuICAgICRyb290U2NvcGUucGFnZV9pbml0aWFsaXplcigpIGlmICRyb290U2NvcGUucGFnZV9pbml0aWFsaXplcj9cblxuICAkcm9vdFNjb3BlLmFwcGxpY2F0aW9uX2xvYWRlZCA9IC0+XG4gICAgJHJvb3RTY29wZS5zdGF0ZS5pc19hcHBsaWNhdGlvbl9sb2FkZWQgPSB5ZXNcbiAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2FwcGxpY2F0aW9uIGxvYWRlZCcpXG5cbiAgJHNjb3BlLm9uX3VwbG9hZF9jb25maWd1cmF0aW9uID0gKGZpbGVzKSAtPlxuICAgIENvbmZpZ3VyYXRpb25zLnVwbG9hZChmaWxlc1swXSlcblxuICAkcm9vdFNjb3BlLmJsb2NrX2V2ZW50ID0gKGV2ZW50KSAtPlxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICMg0L/QvtC30LLQvtC70Y/QtdGCINC00LXQu9Cw0YLRjCBhcHBseSDQstC90YPRgtGA0Lgg0YPQttC1INC40LTRg9GJ0LXQs9C+IGFwcGx5LlxuICAjINGF0LcsINGB0LvQtdC00YPQtdGCINC70Lgg0YLQsNC6INC00LXQu9Cw0YLRjCAtINC/0LXRgNC10YLQsNGJ0LXQvdC+INC40Lcg0YHQvNC10LbQvdGL0YUg0L/RgNC+0LXQutGC0L7QslxuICAkcm9vdFNjb3BlLnNhZmVBcHBseSA9IChmbikgLT5cbiAgICBwaGFzZSA9IEAkcm9vdC4kJHBoYXNlXG4gICAgaWYgcGhhc2UgPT0gJyRhcHBseScgfHwgcGhhc2UgPT0gJyRkaWdlc3QnXG4gICAgICBpZiBmbiAmJiB0eXBlb2YoZm4pID09ICdmdW5jdGlvbidcbiAgICAgICAgZm4oKVxuICAgIGVsc2VcbiAgICAgIEAkYXBwbHkoZm4pXG5cbiAgIyDQodC+0LLQvNC10YHRgtC40YLRjCDRgSBrZWVwINC+0YLQutCw0LfQsNGC0YzRgdGPINC+0YIgTFNcbiAgJHNjb3BlLnJlbWVtYmVyID0gLT5cbiAgICBrZXkgPSAncmVtJyArICRsb2NhdGlvbi5wYXRoKCkucmVwbGFjZSgnLycsJy0nKVxuICAgIHJlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSlcbiAgICByZW0gPSBpZiByZW0gdGhlbiBKU09OLnBhcnNlKHJlbSkgZWxzZSB7fVxuICAgIHN3aXRjaCBhcmd1bWVudHMubGVuZ3RoXG4gICAgICB3aGVuIDFcbiAgICAgICAgcmVtW2FyZ3VtZW50c1swXV1cbiAgICAgIHdoZW4gMlxuICAgICAgICByZW1bYXJndW1lbnRzWzBdXSA9IGFyZ3VtZW50c1sxXVxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHJlbSkpXG4gICAgICAgIGFyZ3VtZW50c1sxXVxuXG4gICRzY29wZS5wZXJpb2RpY2FsX3Byb21pc2VkID0gKGFjdGlvbiwgcGVyaW9kKSAtPlxuICAgIHRpbWVvdXQgPSBudWxsXG4gICAgaXNfY2FuY2VsbGVkID0gbm9cblxuICAgIGFnYWluID0gLT4gXG4gICAgICByZXR1cm4gaWYgaXNfY2FuY2VsbGVkXG4gICAgICB0aW1lb3V0ID0gJHRpbWVvdXQodGljaywgcGVyaW9kKVxuXG4gICAgdGljayA9IC0+IGFjdGlvbigpLmZpbmFsbHkoYWdhaW4pXG5cbiAgICB0aWNrKClcblxuICAgIHJldHVybiB7XG4gICAgICBjYW5jZWw6IC0+XG4gICAgICAgIGlzX2NhbmNlbGxlZCA9IHllc1xuICAgICAgICBpZiB0aW1lb3V0XG4gICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVvdXQpXG4gICAgICAgICAgdGltZW91dCA9IG51bGxcbiAgICB9XG5cbiAgJHJvb3RTY29wZS5pbml0aWFsaXplX2FwcGxpY2F0aW9uID0gLT5cblxuICAgIFN0YXR1cy5idXN5KClcblxuICAgICMg0L/QvtC70YPRh9C40YLRjCDRgdC/0LjRgdC+0Log0YHQv9C+0YHQvtCx0L7QsiDRhdC10YjQuNGA0L7QstCw0L3QuNGPINC00LvRjyDQsdCw0LvQsNC90YHQuNGA0L7QstC60Lgg0YLRgNCw0YTQuNC60LBcbiAgICBEZXZpY2Vfcm91dGluZy5MQkcuSGFzaF9wcm9maWxlLmZldGNoX2FsbCgpXG4gICAgLnRoZW4gLT5cbiAgICAgICMg0LfQsNCz0YDRg9C30LjRgtGMINGB0LXRgtC10LLRg9GOINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjlxuICAgICAgQ29uZmlndXJhdGlvbi5OZXR3b3JrLmxvYWRfaW50b19tb2RlbCgpXG5cbiAgICAudGhlbiAtPlxuICAgICAgTW9kZWwucnVsZXMgPSBbXVxuXG4gICAgICAjINC30LDQs9GA0YPQt9C40YLRjCDQv9C+0YHQu9C10LTQvdGO0Y4g0YHQvtGF0YDQsNC90ZHQvdC90YPRjiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y5cbiAgICAgIENvbmZpZ3VyYXRpb24ucmVhZF9sb2NhbF9yb3V0aW5nX2NvbmZpZ3VyYXRpb24oKVxuXG4gICAgICAudGhlbiAtPlxuICAgICAgICAjINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDRgtGMINC80L7QtNC10LvRjCByb3V0aW5nJ9CwINC40Lcg0Y3RgtC+0Lkg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4XG4gICAgICAgIE1vZGVsLnJ1bGVzID0gJHJvb3RTY29wZS5yb3V0aW5nLnJ1bGVzXG5cbiAgICAgIC50aGVuIC0+XG4gICAgICAgICMg0L/RgNC40LvQvtC20LXQvdC40LUg0LfQsNCz0YDRg9C20LXQvdC+XG4gICAgICAgIFN0YXR1cy5pZGxlKClcblxuICAgICAgLnRoZW4gLT5cbiAgICAgICAgaWYgQnJvd3Nlci52YWxpZGF0ZSgpIGlzIG5vXG4gICAgICAgICAgU3RhdHVzLnByb2dyZXNzKEJyb3dzZXIuZ2V0RXJyb3JNZXNzYWdlKCkpXG5cbiAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICMg0L7RiNC40LHQutC4IEFwaSDQstGL0LLQvtC00Y/RgtGB0Y8g0LIg0YHRgtCw0YLRg9GBINCyINGB0LXRgNCy0LjRgdC1IGFwaVxuICAgICAgICByZXR1cm4gaWYgYXBpLmlzX2FwaV9lcnJvcihlcnJvcilcblxuICAgICAgICBpZiBSb3V0aW5nX21vZGVsX2Vycm9ycy5pcyhlcnJvcilcbiAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKFJvdXRpbmdfbW9kZWxfZXJyb3JzLm1lc3NhZ2UoZXJyb3IpKVxuXG4gICAgICAgIGxvZy5lcnJvcihlcnJvcilcbiAgICAgICAgU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5jb25maWd1cmF0aW9uX3VwbG9hZF9mYWlsZWQnKSlcblxuICAgIC50aGVuIC0+XG4gICAgICAkc2NvcGUuYXBwbGljYXRpb25fbG9hZGVkKClcbiAgICAudGhlbiAtPlxuICAgICAgRGV2aWNlX0dVSS5yZWZyZXNoX3BvcnRfY29vcmRpbmF0ZXMoKVxuXG4gICRyb290U2NvcGUudXJnZV9wb3J0X3JlZnJlc2ggPSAtPlxuICAgIGlmICRyb290U2NvcGUucG9ydF9yZWZyZXNoZXJcbiAgICAgICRyb290U2NvcGUucG9ydF9yZWZyZXNoZXIuY2FuY2VsKClcblxuICAgICRyb290U2NvcGUuc3RhcnRfcGVyaW9kaWNhbF9wb3J0X3JlZnJlc2goKVxuICAgIHJldHVybiB5ZXNcblxuICAkcm9vdFNjb3BlLnN0YXJ0X3BlcmlvZGljYWxfcG9ydF9yZWZyZXNoID0gLT5cbiAgICAkcm9vdFNjb3BlLnBvcnRfcmVmcmVzaGVyID0gJHNjb3BlLnBlcmlvZGljYWxfcHJvbWlzZWQoRGV2aWNlLnJlZnJlc2hfcG9ydHMsICRzY29wZS5fcG9ydF9zdGF0ZV9yZWZyZXNoX2ludGVydmFsICogMTAwMClcblxuICAkcm9vdFNjb3BlLnNjcm9sbF9ieSA9IChzY3JvbGxfYnkpIC0+XG4gICAgJHJvb3RTY29wZS53aW5kb3dfc2Nyb2xsX2J5ID0gbm9cblxuICAgIGRlbGF5ZWQgPSAtPlxuICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgJHJvb3RTY29wZS53aW5kb3dfc2Nyb2xsX2J5ID0gc2Nyb2xsX2J5XG5cbiAgICBkZWxheWVkLmRlbGF5KDApXG5cbiAgIyDRgtCw0Log0YHQtNC10LvQsNC90L4sINGH0YLQvtCx0Ysg0L3QtSDQsdGL0LvQviBjaXJjdWxhciBkZXBlbmRlbmN5IGVycm9yINCyIGRlcGVuZGVuY3kgaW5qZWN0aW9uXG4gICRyb290U2NvcGUubm90X2F1dGhlbnRpY2F0ZWQgPSAtPlxuICAgIFN0YXR1cy5ub3RfYXV0aGVudGljYXRlZCgpXG4gICAgTG9naW4ubm90X2F1dGhlbnRpY2F0ZWQoKVxuXG4gICMg0J/QvtC60LDQt9GL0LLQsNGC0Ywg0LvQuCDQv9GA0LXQtNGD0L/RgNC10LbQtNC10L3QuNC1INC+INC/0LXRgNC10YXQvtC00LUg0YHQviDRgdGC0YDQsNC90LjRhtGLXG4gICRyb290U2NvcGUuc2hvd19uYXZpZ2F0aW9uX2NvbmZpcm1hdGlvbiA9IC0+XG4gICAgJHJvb3RTY29wZS5uZXh0X3JvdXRlXG5cbiAgIyDQntGC0LzQtdC90LjRgtGMINC/0YDQtdGA0LLQsNC90L3Ri9C5INC/0LXRgNC10YXQvtC0INGBINGC0LXQutGD0YnQtdC5INGB0YLRgNCw0L3QuNGG0YtcbiAgJHJvb3RTY29wZS5kb250X25hdmlnYXRlX2F3YXkgPSAtPlxuICAgICRyb290U2NvcGUubmV4dF9yb3V0ZSA9IG51bGxcblxuICAjINCf0YDQvtC00L7Qu9C20LjRgtGMINC/0YDQtdGA0LLQsNC90L3Ri9C5INC/0LXRgNC10YXQvtC0INGBINGC0LXQutGD0YnQtdC5INGB0YLRgNCw0L3QuNGG0YtcbiAgJHJvb3RTY29wZS5uYXZpZ2F0ZV9hd2F5ID0gLT5cblxuICAgICMg0JXRgdC70Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC90LDQttCw0LsgXCJPa1wiLFxuICAgICMg0L7RgtC80LXQvdC40YLRjCDQstGB0LUgUHJvbWlzZSfRiyDQvdCwINGC0LXQutGD0YnQtdC5INGB0YLRgNCw0L3QuNGG0LVcbiAgICBpZiBQcm9taXNlcy5wZW5kaW5nKClcbiAgICAgIFByb21pc2VzLmNhbmNlbCgpXG4gICAgICBQcm9taXNlcy5yZXNldCgpXG4gICAgICBTdGF0dXMubm90X2J1c3koKVxuXG4gICAgIyDQv9C+INC40LTQtdC1LCDRjdGC0L4g0L3QtSDQsdGD0LTQtdGCINGA0LDQsdC+0YLQsNGC0Ywg0LTQu9GPINC/0LDRgNCw0LzQtdGC0YDQvtCyINCyIFVSTFxuICAgICMgKNCyINGN0YLQvtC8INC/0YDQvtC10LrRgtC1INGB0LXQudGH0LDRgSDQvtC90Lgg0L3QtSDQuNGB0L/QvtC70YzQt9GD0Y7RgtGB0Y8sINC/0L7RjdGC0L7QvNGDINC/0L7QutCwINGB0L7QudC00ZHRgilcbiAgICAjIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc5Nzg5OTAvYW5ndWxhcmpzLW5lZWQtc29tZS1jb21iaW5hdGlvbi1vZi1yb3V0ZWNoYW5nZXN0YXJ0LWFuZC1sb2NhdGlvbmNoYW5nZXN0YXJ0XG4gICAgJGxvY2F0aW9uLnBhdGgoJHJvb3RTY29wZS5uZXh0X3JvdXRlLiQkcm91dGUub3JpZ2luYWxQYXRoKVxuXG4gICAgJHJvb3RTY29wZS5uZXh0X3JvdXRlID0gbnVsbFxuXG4gICMgSW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAjINCf0L7QvNC10YnQtdC90LjQtSDQsiBzY29wZVxuXG4gICRyb290U2NvcGUubG9nICAgICAgICAgICAgID0gbG9nXG4gICRyb290U2NvcGUuRW51bXMgICAgICAgICAgID0gRW51bXNcbiAgIyAkcm9vdFNjb3BlLkRldmljZSAgICAgICAgID0gRGV2aWNlXG4gICRyb290U2NvcGUuR1VJICAgICAgICAgICAgID0gR1VJXG4gICRyb290U2NvcGUuRGV2aWNlX0dVSSAgICAgID0gRGV2aWNlX0dVSVxuICAkcm9vdFNjb3BlLlBvcnQgICAgICAgICAgICA9IFBvcnRcbiAgJHJvb3RTY29wZS5Qb3J0X3ZpZXcgICAgICAgPSBQb3J0X3ZpZXdcbiAgJHJvb3RTY29wZS5Qb3J0X251bWVyYXRpb24gPSBQb3J0X251bWVyYXRpb25cbiAgJHJvb3RTY29wZS5SdWxlICAgICAgICAgICAgPSBSdWxlXG4gICRyb290U2NvcGUuQ29uZmlndXJhdGlvbiAgID0gQ29uZmlndXJhdGlvblxuICAkcm9vdFNjb3BlLkNvbmZpZ3VyYXRpb25zICA9IENvbmZpZ3VyYXRpb25zXG4gICRyb290U2NvcGUubW9kZWwgICAgICAgICAgID0gTW9kZWxcbiAgJHJvb3RTY29wZS5TdGF0dXMgICAgICAgICAgPSBTdGF0dXNcbiAgJHJvb3RTY29wZS5EZXZpY2Vfc2V0dGluZ3MgPSBEZXZpY2Vfc2V0dGluZ3NcbiAgJHJvb3RTY29wZS5Mb2dpbiAgICAgICAgICAgPSBMb2dpblxuXG4gICRzY29wZS5wYWdlcyA9IHBhZ2VzXG4gICRzY29wZS5mbG9vciA9IE1hdGguZmxvb3JcbiAgJHNjb3BlLmNlaWxpbmcgPSBNYXRoLmNlaWxcbiAgJHNjb3BlLmlzX3NldCA9ICh4KSAtPiB4P1xuXG4gICRyb290U2NvcGUudW5tYXNrZWRfYWNsX2ZpbHRlcl90eXBlcyA9IFtcbiAgICAnZXRoZXJuZXRfcHJvdG9jb2wnLCBcbiAgICAnSVBfcHJvdG9jb2wnLFxuICAgICdtdWx0aV9JUF9hZGRyZXNzJyxcbiAgICAnSVBfcHJvdG9jb2xfc291cmNlJywgXG4gICAgJ0lQX3Byb3RvY29sX2Rlc3RpbmF0aW9uJyxcbiAgICAnTGV2ZWw0X2RhdGEnXG4gIF1cblxuICAjINCT0LvQvtCx0LDQu9GM0L3Ri9C1INC/0LXRgNC10LzQtdC90L3Ri9C1XG5cbiAgJHNjb3BlLm5vdyA9IG5ldyBEYXRlKClcblxuICAjINCy0YHQtSB0aW1lb3V0LdGLIGFuZ3VsYXJqcyDQutC70LDQtNGR0YIg0YHRjtC00LAsINCy0LjQtNC40LzQviAo0LzQvtC20L3QviDQv9GA0L7QstC10YDQuNGC0Ywg0L/QvtGC0L7QvClcbiAgJHJvb3RTY29wZS50aW1lb3V0cyA9IFtdXG5cbiAgUHJvbWlzZXMucmVzZXQoKVxuXG4gICMg0LXRgdC70Lgg0L/QvtC80LXRidCw0YLRjCDQv9C10YDQtdC80LXQvdC90YvQtSDQv9GA0L7RgdGC0L4g0LIgcm9vdCBzY29wZSwgXG4gICMg0YLQviDQv9GA0Lgg0LjRhSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQuCDQvdCwINGB0YLRgNCw0L3QuNGG0LDRhSDQvtC90Lgg0LHRg9C00YPRgiDQv9C10YDQtdC80LXRidC10L3RiyDQsiBzY29wZSDRjdGC0LjRhSDRgdGC0YDQsNC90LjRhixcbiAgIyDQuCDQv9C+0Y3RgtC+0LzRgyDQv9GA0Lgg0LjQt9C80LXQvdC10L3QuNC4INGN0YLQuNGFINC/0LXRgNC10LzQtdC90L3Ri9GFINCyIHJvb3Qgc2NvcGUg0L/QtdGA0LXQvNC10L3QvdGL0LUg0L3QsCDRgdGC0YDQsNC90LjRhtCw0YUg0LzQtdC90Y/RgtGM0YHRjyDQvdC1INCx0YPQtNGD0YIuXG4gICMg0LTQu9GPINGN0YLQvtCz0L4g0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINGF0LDQuiAtINC+0LHRitC10LrRgi3QutC+0L3RgtC10LnQvdC10YBcbiAgJHJvb3RTY29wZS5kYXRhID0ge31cblxuICAjINGB0YLQsNGC0LjRgdGC0LjQutCwINC/0L4g0L/QvtGA0YLQsNC8XG4gICRyb290U2NvcGUuc3RhdHMgPSBcbiAgICBwb3J0czoge31cblxuICAjINC00LDQvdC90YvQtSDQv9C+INC/0L7RgNGC0LDQvCwg0LrQvtGC0L7RgNGL0LUg0L3QtSDRj9Cy0LvRj9GO0YLRgdGPINGH0LDRgdGC0YzRjiBcItC80L7QtNC10LvQuFwiXG4gICRyb290U2NvcGUudmlldyA9XG4gICAgcG9ydHM6IHt9XG5cbiAgIyDQs9GA0YPQv9C/0Ysg0L/QvtGA0YLQvtCyINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICRyb290U2NvcGUuZ3JvdXBzID0gW11cblxuICAjINC40L3RgtC10YDQstCw0Lsg0L7QsdC90L7QstC70LXQvdC40Y8g0LTQsNC90L3Ri9GFINC/0L4g0L/QvtGA0YLQsNC8XG4gICRzY29wZS5fcG9ydF9zdGF0ZV9yZWZyZXNoX2ludGVydmFsID0gMiAjIGluIHNlY29uZHNcblxuICAjINC10YHQu9C4INC30LDRiNC70Lgg0L/QviDQutC+0YDQvdC10LLQvtC80YMg0LDQtNGA0LXRgdGDIC0g0L/QtdGA0LXQvdCw0L/RgNCw0LLQuNGC0Ywg0L3QsCDRgdGC0YDQsNC90LjRhtGDINGBINGE0LvQsNCz0L7QvCBkZWZhdWx0X3JvdXRlXG4gIGlmICRsb2NhdGlvbi5wYXRoKCkgPT0gXCIvXCJcbiAgICBkZWZhdWx0X3JvdXRlID0gcGFnZXMuZmlsdGVyKChyb3V0ZSkgLT4gcm91dGUuZmlyc3Rfc2NyZWVuKVswXVxuICAgIGlmIGRlZmF1bHRfcm91dGVcbiAgICAgICRsb2NhdGlvbi51cmwoZGVmYXVsdF9yb3V0ZS51cmwsIHRydWUpXG4gICAgXG4gICRzY29wZS5ib2R5ID0gJCQoZG9jdW1lbnQuYm9keSlcblxuICAkc2NvcGUubG9jYXRpb24gPSAkbG9jYXRpb25cbiAgXG4gICMg0L3QsCDQvtGB0L3QvtCy0LUg0YLQtdC60YPRidC10LPQviDQsNC00YDQtdGB0LAg0L/RgNC+0YHRgtCw0LLQuNGC0Ywg0LIgc2NvcGUg0YLQtdC60YPRidGD0Y4g0YHRgtGA0LDQvdC40YbRgyAo0Lgg0L/QvtC80LXQvdGP0YLRjCDQt9Cw0LPQvtC70L7QstC+0Log0YHRgtGA0LDQvdC40YbRiylcbiAgZGV0ZXJtaW5lX2N1cnJlbnRfcGFnZSA9IC0+XG4gICAgJHJvb3RTY29wZS50aGlzX3BhZ2UgPSBwYWdlcy5maWx0ZXIoKHJvdXRlKSAtPiByb3V0ZS51cmwgPT0gJGxvY2F0aW9uLiQkcGF0aClbMF1cbiAgICBkb2N1bWVudC50aXRsZSA9ICRyb290U2NvcGUudGhpc19wYWdlLnRpdGxlXG5cbiAgICAjINGD0YHRgtCw0L3QvtCy0LjRgtGMINC90LAgYm9keSDQutC70LDRgdGBINC00LvRjyDRjdGC0L7QuSDRgdGC0YDQsNC90LjRhtGLXG4gICAgJHRpbWVvdXQgLT5cbiAgICAgIGZvciByb3V0ZSBpbiBwYWdlc1xuICAgICAgICBpZiAkcm9vdFNjb3BlLnRoaXNfcGFnZSA9PSByb3V0ZVxuICAgICAgICAgICRzY29wZS5ib2R5LmFkZENsYXNzKHJvdXRlLnBhZ2UgKyAnX3BhZ2UnKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgJHNjb3BlLmJvZHkucmVtb3ZlQ2xhc3Mocm91dGUucGFnZSArICdfcGFnZScpXG5cbiAgZGV0ZXJtaW5lX2N1cnJlbnRfcGFnZSgpXG5cbiAgIyDQndCw0YfQsNC70L4g0L/QtdGA0LXRhdC+0LTQsCDQvdCwINC90L7QstGL0Lkg0YHQutGA0LjQvVxuICAkc2NvcGUuJG9uICckcm91dGVDaGFuZ2VTdGFydCcsIChldmVudCwgbmV4dCwgY3VycmVudCkgLT5cblxuICAgICMg0JfQsNC60YDRi9GC0LjQtSBQcm9taXNlJ9C+0LIg0L/RgNC4INGD0YXQvtC00LUg0YHQviDRgdGC0YDQsNC90LjRhtGLLlxuXG4gICAgIyDQtdGB0LvQuCDQvdC10YIg0LDQutGC0LjQstC90YvRhSBQcm9taXNlJ9C+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1IC0g0L3QtSDQstC80LXRiNC40LLQsNGC0YzRgdGPINCyINC/0YDQvtGG0LXRgdGBXG4gICAgaWYgbm90IFByb21pc2VzLnBlbmRpbmcoKVxuICAgICAgZm9yIGhhbmRsZXJfaWQgaW4gJHNjb3BlLmtleV9oYW5kbGVyc1xuICAgICAgICAkc2NvcGUub2ZmX2tleShoYW5kbGVyX2lkKVxuICAgICAgcmV0dXJuXG5cbiAgICAjINC10YHRgtGMINCw0LrRgtC40LLQvdGL0LUgUHJvbWlzZSfRiyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcblxuICAgICMg0L7RgtC80LXQvdC40YLRjCDQv9C10YDQtdGF0L7QtCDRgSDRgtC10LrRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtGLXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgIyDQutGD0LTQsCDRgdC+0LHQuNGA0LDQu9C40YHRjCDQv9C10YDQtdC50YLQuFxuICAgICRyb290U2NvcGUubmV4dF9yb3V0ZSA9IG5leHRcblxuICAgICMg0L7QttC40LTQsNGC0Ywg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LLRgdC10YUgUHJvbWlzZSfQvtCyINC90LAg0YLQtdC60YPRidC10Lkg0YHRgtGA0LDQvdC40YbQtVxuICAgIFByb21pc2VzLndhaXQoKVxuXG4gICAgIyDQutC+0LPQtNCwINCy0YHQtSBQcm9taXNlJ9GLINC90LAg0YLQtdC60YPRidC10Lkg0YHRgtGA0LDQvdC40YbQtSDQsdGD0LTRg9GCINCy0YvQv9C+0LvQvdC10L3RiyxcbiAgICAjINCy0YvQv9C+0LvQvdC40YLRjCDQv9GA0LXRgNCy0LDQvdC90YvQuSDQv9C10YDQtdGF0L7QtFxuICAgIFByb21pc2VzLndoZW5fZG9uZSAtPlxuICAgICAgIyDQtdGB0LvQuCDQtNCw0L3QvdGL0Lkg0L/QtdGA0LXRhdC+0LQg0YHQviDRgdGC0YDQsNC90LjRhtGLINCx0YvQuyDQvtGC0LzQtdC90ZHQvSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvCDQv9C+INC60L3QvtC/0LrQtSxcbiAgICAgICMg0YLQviDQvdC1INC/0LXRgNC10YXQvtC00LjRgtGMINC90LAg0L3QsNC80LXRh9C10L3QvdGD0Y4g0YDQsNC90LXQtSDRgdGC0YDQsNC90LjRhtGDXG4gICAgICByZXR1cm4gaWYgJHJvb3RTY29wZS5uZXh0X3JvdXRlICE9IG5leHRcblxuICAgICAgIyDQv9C10YDQtdC50YLQuCDQvdCwINC90LDQvNC10YfQtdC90L3Rg9GOINGA0LDQvdC10LUg0YHRgtGA0LDQvdC40YbRg1xuICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT4gXG4gICAgICAgICRyb290U2NvcGUubmF2aWdhdGVfYXdheSgpXG5cbiAgIyDQl9Cw0LLQtdGA0YjQtdC90LjQtSDQv9C10YDQtdGF0L7QtNCwINC90LAg0L3QvtCy0YvQuSDRgdC60YDQuNC9XG4gICRzY29wZS4kb24gJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCAoc2NvcGUsIG5leHQsIGN1cnJlbnQpIC0+XG4gICAgZGV0ZXJtaW5lX2N1cnJlbnRfcGFnZSgpXG5cbiAgICAjINCX0LDQutGA0YvRgtC40LUg0YLQsNC50LzQsNGD0YLQvtCyINC/0YDQuCDRgdC80LXQvdC1INCw0LTRgNC10YHQsC5cbiAgICAjINCh0L/QvtGA0L3Ri9C5INC60L7QtDsg0LzQvtCz0YPRgiDQv9C+0L3QsNC00L7QsdC40YLRjNGB0Y8g0LrQsNC60LjQtS3QvdC40LHRg9C00YwgXCLQs9C70L7QsdCw0LvRjNC90YvQtVwiINGC0LDQudC80LDRg9GC0YsuXG4gICAgZm9yIHRpbWVvdXQgaW4gJHJvb3RTY29wZS50aW1lb3V0c1xuICAgICAgbG9nLmluZm8oJ0NhbmNlbGxpbmcgdGltZW91dCcpXG4gICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dClcblxuICAgICRyb290U2NvcGUudGltZW91dHMgPSBbXVxuXG4gICMg0L/RgNC40LvQvtC20LXQvdC40LUg0LfQsNCz0YDRg9C20LDQtdGC0YHRjy4uLlxuICBTdGF0dXMuYnVzeSgpXG5cbiAgY29uZmlndXJhdGlvbi52ZXJzaW9uID0gVmVyc2lvbihjb25maWd1cmF0aW9uLnZlcnNpb24pXG4gICRyb290U2NvcGUuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb25cbiAgc2V0X2xhbmd1YWdlKGNvbmZpZ3VyYXRpb24ubGFuZ3VhZ2UsICR0cmFuc2xhdGUpXG5cbiAgIyDRgdGH0LjRgtCw0YLRjCDQv9Cw0YDQsNC80LXRgtGA0Ysg0YPRgdGC0YDQvtC50YHRgtCy0LAg0LjQtyDQvdCw0YHRgtGA0L7QtdC6XG4gIGFuZ3VsYXIuZXh0ZW5kKERldmljZV9zZXR0aW5ncywgJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLmRldmljZSlcbiAgZGVsZXRlICRyb290U2NvcGUuY29uZmlndXJhdGlvbi5kZXZpY2VcblxuICBFbnVtcy5BQ0xfRmlsdGVyLkxldmVsNF9kYXRhLm1hc2suYml0cyA9IERldmljZV9zZXR0aW5ncy5sZXZlbF80X2RhdGFfbWF4X2J5dGVzICogOFxuXG4gICMg0Y3RgtCwINGE0YPQvdC60YbQuNGPINCx0YPQtNC10YIg0LLRi9C30YvQstCw0YLRjNGB0Y8g0YDQtdC60YPRgNGB0LjQstC90L4sXG4gICMg0L/QvtC60LAg0L7RgiDQttC10LvQtdC30LrQuCDQvdC1INC/0YDQuNC00ZHRgiDQvtGC0LLQtdGCINGBIEh0dHAgc3RhdHVzIGNvZGUgMjAwXG4gIHByb2NlZWRfbG9hZGluZyA9IC0+XG4gICAgIyDQv9C+0LvRg9GH0LjRgtGMINC00LDQvdC90YvQtSDQviDQv9C+0YDRgtCw0YUg0YPRgdGC0YDQvtC50YHRgtCy0LBcbiAgICBEZXZpY2UuaW5pdGlhbGl6ZSgpLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICMg0YPQsdGA0LDRgtGMINC60YDRg9GC0LjQu9C60YMgXCLRg9GB0YLRgNC+0LnRgdGC0LLQviDQt9Cw0LPRgNGD0LbQsNC10YLRgdGPXCJcbiAgICAgICRyb290U2NvcGUuc2FmZUFwcGx5IC0+XG4gICAgICAgICRyb290U2NvcGUuZGV2aWNlX2lzX2Jvb3RpbmcgPSBub1xuXG4gICAgICAjINC/0YDQvtC00L7Qu9C20LjRgtGMINC30LDQs9GA0YPQt9C60YMg0L/RgNC40LvQvtC20LXQvdC40Y9cbiAgICAgIHdoZW5fZGV2aWNlX2lzX2Jvb3RlZChyZXN1bHQpXG5cbiAgICAjINC10YHQu9C4INC20LXQu9C10LfQutCwINC10YnRkSDQt9Cw0LPRgNGD0LbQsNC10YLRgdGPLCDRgtC+INC/0L7QtNC+0LbQtNCw0YLRjCDQuCDQv9C+0L/RgNC+0LHQvtCy0LDRgtGMINGB0L3QvtCy0LBcbiAgICAuY2F0Y2ggYXBpLmVycm9yLmRldmljZV9pc19ib290aW5nX3VwLCAoZXJyb3IpIC0+XG4gICAgICAjINC/0L7QutCw0LfQsNGC0Ywg0LrRgNGD0YLQuNC70LrRgyBcItGD0YHRgtGA0L7QudGB0YLQstC+INC30LDQs9GA0YPQttCw0LXRgtGB0Y9cIlxuICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgJHJvb3RTY29wZS5kZXZpY2VfaXNfYm9vdGluZyA9IHllc1xuXG4gICAgICAjINC/0YDQvtCx0L7QstCw0YLRjCDQtdGJ0ZEg0YDQsNC3INGH0LXRgNC10Lcg0L3QtdCx0L7Qu9GM0YjQvtC5INC/0YDQvtC80LXQttGD0YLQvtC6INCy0YDQtdC80LXQvdC4XG4gICAgICBzZXRUaW1lb3V0KHByb2NlZWRfbG9hZGluZywgMTAwMClcblxuICAgICMg0LXRgdC70Lgg0L/RgNC+0LjQt9C+0YjQu9CwINC60LDQutCw0Y8t0YLQviDQtNGA0YPQs9Cw0Y8g0L7RiNC40LHQutCwXG4gICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgIGxvZy5lcnJvcihlcnJvcilcbiAgICAgIFN0YXR1cy5lcnJvcihlcnJvcilcblxuICBwcm9jZWVkX2xvYWRpbmcoKVxuXG4gICMg0Y3RgtC+0YIg0LzQtdGC0L7QtCDQstGL0LfRi9Cy0LDQtdGC0YHRjywg0LrQvtCz0LTQsCBEZXZpY2UuaW5pdGlhbGl6ZSgpINC/0YDQvtGI0ZHQuyDRgSBIdHRwINC60L7QtNC+0LwgMjAwXG4gIHdoZW5fZGV2aWNlX2lzX2Jvb3RlZCA9IC0+XG5cbiAgICBQcm9taXNlLnJlc29sdmUoeWVzKS50aGVuIC0+XG5cbiAgICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgRGV2aWNlX0dVSS5pbml0aWFsaXplKClcblxuICAgICAgICAjINC10YHQu9C4INGN0YLQviDQutC+0L3RgdC+0LvRjCDQvtGC0LvQsNC00LrQuCAtINC90LUg0L7QsdC90L7QstC70Y/RgtGMINGB0L7RgdGC0L7Rj9C90LjQtSDQv9C+0YDRgtC+0LIsINGH0YLQvtCx0Ysg0L3QtSDQt9Cw0YHQvtGA0Y/RgtGMINC60L7QvdGB0L7Qu9GMIE5ldHdvcmsg0LIgRGV2IFRvb2xzXG4gICAgICAgIGlmICRyb290U2NvcGUudGhpc19wYWdlLnBhZ2UgIT0gJ2RlYnVnJ1xuICAgICAgICAgICMg0LfQsNC/0YPRgdGC0LjRgtGMINGC0LDQudC80LXRgCDRgNC10LPRg9C70Y/RgNC90L7Qs9C+INC+0LHQvdC+0LLQu9C10L3QuNGPINC00LDQvdC90YvRhSDQviDQv9C+0YDRgtCw0YUg0YPRgdGC0YDQvtC50YHRgtCy0LBcbiAgICAgICAgICAkcm9vdFNjb3BlLnN0YXJ0X3BlcmlvZGljYWxfcG9ydF9yZWZyZXNoKClcblxuICAgICAgICAkcm9vdFNjb3BlLmFwcGxpY2F0aW9uX3ZpZXdfcmVhZHkgPSB5ZXNcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB5ZXNcblxuICAgIC50aGVuIC0+XG4gICAgICBMb2dpbi5hdXRoZW50aWNhdGUoKVxuXG4gICAgLnRoZW4gKHVzZXIpIC0+XG4gICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyXG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlZnJlc2ggaGVpZ2h0JylcbiAgICAgICRyb290U2NvcGUuaW5pdGlhbGl6ZV9hcHBsaWNhdGlvbigpXG5cbiAgICAuY2F0Y2goYXBpLmVycm9yLm5vdF9hdXRoZW50aWNhdGVkLCAoZXJyb3IpIC0+XG5cbiAgICAgICMg0LXRgdC70Lgg0L3QtdCy0L7Qt9C80L7QttC90L4g0L/QvtC60LDQt9Cw0YLRjCDQvtC60L3QviDQstGF0L7QtNCwINCyINGB0LjRgdGC0LXQvNGDIC0gXG4gICAgICAjINGB0LrQsNC30LDRgtGMINC+0LEg0L7RiNC40LHQutC1INC90LXQstGF0L7QtNCwINGH0LXRgNC10LcgYWxlcnRcbiAgICAgIGlmIG5vdCAkcm9vdFNjb3BlLmFwcGxpY2F0aW9uX3ZpZXdfcmVhZHlcbiAgICAgICAgYWxlcnQodHJhbnNsYXRlKCdlcnJvci51bmF1dGhlbnRpY2F0ZWQnKSlcbiAgICAgICAgbG9nLmVycm9yKGVycm9yKVxuICAgICAgZWxzZVxuICAgICAgICAjINGD0LHRgNCw0YLRjCDQutGA0YPRgtC40LvQutGDLCDRh9GC0L7QsdGLINC+0L3QsCDQvdC1INC60YDRg9GC0LjQu9Cw0YHRjCDQv9C+0LQg0YTQvtGA0LzQvtC5INCy0YXQvtC00LBcbiAgICAgICAgU3RhdHVzLmlkbGUoKVxuICAgICAgICAjINC/0L7QutCw0LfQsNGC0Ywg0YTQvtGA0LzRgyDQstGF0L7QtNCwXG4gICAgICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICBMb2dpbi5ub3RfYXV0aGVudGljYXRlZCgpXG4gICAgKVxuICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpXG4gICAgICBTdGF0dXMuZXJyb3IoZXJyb3IubWVzc2FnZSlcblxuIyDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyByb3V0aW5nJ9CwXG5hcHAuY29uZmlnICgkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIC0+XG5cdCMg0L7QtNC90L7RgdGC0YDQsNC90LjRh9C90YvQuSDRgNC10LbQuNC8XG5cdCRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh5ZXMpXG5cbiAgIyDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0YLRjCDQvNCw0YDRiNGA0YPRgtGLINGB0YLRgNCw0L3QuNGGXG5cdGZvciByb3V0ZSBpbiBwYWdlc1xuXHRcdHBhZ2UgPSB0ZW1wbGF0ZVVybDogJy9wYWdlcy8nICsgcm91dGUucGFnZSArICcuaHRtbCdcblx0XHRpZiByb3V0ZS5jb250cm9sbGVyXG4gICAgICBwYWdlLmNvbnRyb2xsZXIgPSByb3V0ZS5jb250cm9sbGVyXG5cdFx0JHJvdXRlUHJvdmlkZXIud2hlbihyb3V0ZS51cmwsIHBhZ2UpXG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciAkJCwgYXBwLCBsb2dfZXJyb3IsIHJlcG9ydF9lcnJvciwgc2V0X2xhbmd1YWdlO1xuXG4gIHJlcG9ydF9lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gYWxlcnQobWVzc2FnZSk7XG4gIH07XG5cbiAgbG9nX2Vycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnJvcik7XG4gIH07XG5cbiAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIHVybCwgbGluZSwgY29sLCBlcnJvcikge1xuICAgIHZhciBleHRyYSwgcmVmLCByZWYxO1xuICAgIGxvZ19lcnJvcihlcnJvcik7XG4gICAgZXh0cmEgPSAocmVmID0gIWNvbCkgIT0gbnVsbCA/IHJlZiA6IHtcbiAgICAgICcnOiAnXFxuY29sdW1uOiAnICsgY29sXG4gICAgfTtcbiAgICBleHRyYSArPSAocmVmMSA9ICFlcnJvcikgIT0gbnVsbCA/IHJlZjEgOiB7XG4gICAgICAnJzogJ1xcbmVycm9yOiAnICsgZXJyb3JcbiAgICB9O1xuICAgIHJlcG9ydF9lcnJvcihcIkVycm9yOiBcIiArIG1zZyArIFwiXFxudXJsOiBcIiArIHVybCArIFwiXFxubGluZTogXCIgKyBsaW5lICsgZXh0cmEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdFcnJvckNhdGNoZXInLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgbG9nX2Vycm9yKGV4Y2VwdGlvbik7XG4gICAgICByZXR1cm4gcmVwb3J0X2Vycm9yKGV4Y2VwdGlvbi5tZXNzYWdlKTtcbiAgICB9O1xuICB9KTtcblxuICAkJCA9IGFuZ3VsYXIuZWxlbWVudDtcblxuICBhcHAgPSBhbmd1bGFyLm1vZHVsZShcImFwcFwiLCBbJ25nUm91dGUnLCAnbmdTYW5pdGl6ZScsICduZ01lc3NhZ2VzJywgJ3VpLmJvb3RzdHJhcCcsICdsdmwuZGlyZWN0aXZlcy5kcmFnZHJvcCcsICdhbmd1bGFyLXN2Zy1yb3VuZC1wcm9ncmVzcycsICdhbmd1bGFyRmlsZVVwbG9hZCcsICdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJywgJ0Vycm9yQ2F0Y2hlciddKS5jb25maWcoZnVuY3Rpb24oJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XG4gICAgdmFyIGtleSwgdmFsdWU7XG4gICAgZm9yIChrZXkgaW4gaTE4bikge1xuICAgICAgdmFsdWUgPSBpMThuW2tleV07XG4gICAgICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKGtleSwgdmFsdWUpO1xuICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZVNhbml0aXplVmFsdWVTdHJhdGVneSgnZXNjYXBlJyk7XG4gICAgfVxuICAgIHJldHVybiAkdHJhbnNsYXRlUHJvdmlkZXIuZmFsbGJhY2tMYW5ndWFnZSgnZW5fVVMnKTtcbiAgfSk7XG5cbiAgdGhpcy4kJCA9IGpRdWVyeTtcblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICAkJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGh0bWw7XG4gICAgaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07XG4gICAgaHRtbC5zZXRBdHRyaWJ1dGUoJ25nLWFwcCcsICdhcHAnKTtcbiAgICBodG1sLmRhdGFzZXQubmdBcHAgPSAnYXBwJztcbiAgICByZXR1cm4gYW5ndWxhci5ib290c3RyYXAoaHRtbCwgWydhcHAnXSk7XG4gIH0pO1xuXG4gIHNldF9sYW5ndWFnZSA9IChmdW5jdGlvbihfdGhpcykge1xuICAgIHJldHVybiBmdW5jdGlvbihsYW5ndWFnZSwgJHRyYW5zbGF0ZSkge1xuICAgICAgdmFyIGksIGxlbiwgcGFnZSwgcmVmLCByZXN1bHRzO1xuICAgICAgJHRyYW5zbGF0ZS51c2UobGFuZ3VhZ2UpO1xuICAgICAgcmVmID0gX3RoaXMucGFnZXM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcGFnZSA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHBhZ2UudGl0bGUgPSAkdHJhbnNsYXRlLmluc3RhbnQoXCJwYWdlLlwiICsgcGFnZS5wYWdlICsgXCIudGl0bGVcIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgfSkodGhpcyk7XG5cbiAgYXBwLmNvbnRyb2xsZXIoXCJBcHBDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkZmlsdGVyLCAkcSwgJHRpbWVvdXQsICR0cmFuc2xhdGUsIGxvZywgYXBpLCBEZXZpY2UsIERldmljZV9yb3V0aW5nLCBEZXZpY2VfR1VJLCBHVUksIFBvcnQsIFJ1bGUsIENvbmZpZ3VyYXRpb24sIENvbmZpZ3VyYXRpb25zLCBFbnVtcywgU3RhdHVzLCBNb2RlbCwgRGV2aWNlX3NldHRpbmdzLCBWZXJzaW9uLCBMb2dpbiwgdHJhbnNsYXRlLCBSb3V0aW5nX21vZGVsX2Vycm9ycywgUG9ydF92aWV3LCBQb3J0X251bWVyYXRpb24sIFByb21pc2VzLCBCcm93c2VyKSB7XG4gICAgdmFyIGRlZmF1bHRfcm91dGUsIGRldGVybWluZV9jdXJyZW50X3BhZ2UsIHByb2NlZWRfbG9hZGluZywgd2hlbl9kZXZpY2VfaXNfYm9vdGVkO1xuICAgIHJlcG9ydF9lcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IobWVzc2FnZSk7XG4gICAgfTtcbiAgICBsb2dfZXJyb3IgPSBmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICByZXR1cm4gbG9nLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgICRzY29wZS5rZXlfaGFuZGxlcnMgPSBbXTtcbiAgICAkc2NvcGUub25fa2V5ID0gZnVuY3Rpb24oYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlcl9pZDtcbiAgICAgIGhhbmRsZXJfaWQgPSBLZXlib2FyZF9saXN0ZW5lci5vbihhY3Rpb24pO1xuICAgICAgdGhpcy5rZXlfaGFuZGxlcnMucHVzaChoYW5kbGVyX2lkKTtcbiAgICAgIHJldHVybiBoYW5kbGVyX2lkO1xuICAgIH07XG4gICAgJHNjb3BlLm9mZl9rZXkgPSBmdW5jdGlvbihoYW5kbGVyX2lkKSB7XG4gICAgICB0aGlzLmtleV9oYW5kbGVycy5yZW1vdmUoaGFuZGxlcl9pZCk7XG4gICAgICByZXR1cm4gS2V5Ym9hcmRfbGlzdGVuZXIub2ZmKGhhbmRsZXJfaWQpO1xuICAgIH07XG4gICAgS2V5Ym9hcmRfbGlzdGVuZXIub24oZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5LmlzKCdGMScsIHtcbiAgICAgICAgc3dhbGxvdzogdHJ1ZVxuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIGxvZy5kb3dubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgICRyb290U2NvcGUuY291bnRXYXRjaGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHEsIHNjb3BlLCB3YXRjaGVycztcbiAgICAgIHEgPSBbJHJvb3RTY29wZV07XG4gICAgICB3YXRjaGVycyA9IDA7XG4gICAgICBzY29wZSA9IHZvaWQgMDtcbiAgICAgIHdoaWxlIChxLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2NvcGUgPSBxLnBvcCgpO1xuICAgICAgICBpZiAoc2NvcGUuJCR3YXRjaGVycykge1xuICAgICAgICAgIHdhdGNoZXJzICs9IHNjb3BlLiQkd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY29wZS4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHEucHVzaChzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlLiQkbmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICBxLnB1c2goc2NvcGUuJCRuZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpbmRvdy5jb25zb2xlLmxvZygnV2F0Y2hlcnMgY291bnQgLS0tLScsIHdhdGNoZXJzKTtcbiAgICB9O1xuICAgICQkKGRvY3VtZW50KS5vbigna2V5ZG93bicsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlICE9PSAyNykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAod2luZG93LmNsb3NlYWJsZV9ieV9lc2NhcGUgJiYgIXdpbmRvdy5jbG9zZWFibGVfYnlfZXNjYXBlLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuY2xvc2VhYmxlX2J5X2VzY2FwZS5wb3AoKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICAkcm9vdFNjb3BlLnN0YXRlID0ge307XG4gICAgJHNjb3BlLnN0YXRlLmlzX2FwcGxpY2F0aW9uX2xvYWRlZCA9IGZhbHNlO1xuICAgICRzY29wZS53aGVuX2xvYWRlZCA9IGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgdmFyIHVuYmluZDtcbiAgICAgIGlmICgkcm9vdFNjb3BlLnN0YXRlLmlzX2FwcGxpY2F0aW9uX2xvYWRlZCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5iaW5kID0gJHNjb3BlLiRvbignYXBwbGljYXRpb24gbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHVuYmluZCgpO1xuICAgICAgICByZXR1cm4gYWN0aW9uKCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5pbml0aWFsaXplX3BhZ2Vfd2l0aCA9IGZ1bmN0aW9uKGluaXRpYWxpemVyKSB7XG4gICAgICB2YXIgaW5pdGlhbGl6YXRpb247XG4gICAgICBpbml0aWFsaXphdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmluaXNoLCBwcm9taXNlO1xuICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmdfcGFnZSA9IHRydWU7XG4gICAgICAgIHByb21pc2UgPSBpbml0aWFsaXplcigpO1xuICAgICAgICBmaW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5sb2FkaW5nX3BhZ2UgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKChwcm9taXNlID09IG51bGwpIHx8IChwcm9taXNlW1wiZmluYWxseVwiXSA9PSBudWxsKSkge1xuICAgICAgICAgIHJldHVybiBmaW5pc2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZpbmlzaCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAkcm9vdFNjb3BlLnBhZ2VfaW5pdGlhbGl6ZXIgPSBpbml0aWFsaXphdGlvbjtcbiAgICAgIHJldHVybiAkc2NvcGUud2hlbl9sb2FkZWQoaW5pdGlhbGl6YXRpb24pO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS5pbml0aWFsaXplX3BhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgkcm9vdFNjb3BlLnBhZ2VfaW5pdGlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5wYWdlX2luaXRpYWxpemVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLmFwcGxpY2F0aW9uX2xvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgJHJvb3RTY29wZS5zdGF0ZS5pc19hcHBsaWNhdGlvbl9sb2FkZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICRyb290U2NvcGUuJGJyb2FkY2FzdCgnYXBwbGljYXRpb24gbG9hZGVkJyk7XG4gICAgfTtcbiAgICAkc2NvcGUub25fdXBsb2FkX2NvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbihmaWxlcykge1xuICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb25zLnVwbG9hZChmaWxlc1swXSk7XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLmJsb2NrX2V2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLnNhZmVBcHBseSA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICB2YXIgcGhhc2U7XG4gICAgICBwaGFzZSA9IHRoaXMuJHJvb3QuJCRwaGFzZTtcbiAgICAgIGlmIChwaGFzZSA9PT0gJyRhcHBseScgfHwgcGhhc2UgPT09ICckZGlnZXN0Jykge1xuICAgICAgICBpZiAoZm4gJiYgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRhcHBseShmbik7XG4gICAgICB9XG4gICAgfTtcbiAgICAkc2NvcGUucmVtZW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXksIHJlbTtcbiAgICAgIGtleSA9ICdyZW0nICsgJGxvY2F0aW9uLnBhdGgoKS5yZXBsYWNlKCcvJywgJy0nKTtcbiAgICAgIHJlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICByZW0gPSByZW0gPyBKU09OLnBhcnNlKHJlbSkgOiB7fTtcbiAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIHJlbVthcmd1bWVudHNbMF1dO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmVtW2FyZ3VtZW50c1swXV0gPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShyZW0pKTtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgIH07XG4gICAgJHNjb3BlLnBlcmlvZGljYWxfcHJvbWlzZWQgPSBmdW5jdGlvbihhY3Rpb24sIHBlcmlvZCkge1xuICAgICAgdmFyIGFnYWluLCBpc19jYW5jZWxsZWQsIHRpY2ssIHRpbWVvdXQ7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlzX2NhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgYWdhaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGlzX2NhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZW91dCA9ICR0aW1lb3V0KHRpY2ssIHBlcmlvZCk7XG4gICAgICB9O1xuICAgICAgdGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWN0aW9uKClbXCJmaW5hbGx5XCJdKGFnYWluKTtcbiAgICAgIH07XG4gICAgICB0aWNrKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlzX2NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHJldHVybiB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLmluaXRpYWxpemVfYXBwbGljYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIFN0YXR1cy5idXN5KCk7XG4gICAgICByZXR1cm4gRGV2aWNlX3JvdXRpbmcuTEJHLkhhc2hfcHJvZmlsZS5mZXRjaF9hbGwoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5OZXR3b3JrLmxvYWRfaW50b19tb2RlbCgpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgTW9kZWwucnVsZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24ucmVhZF9sb2NhbF9yb3V0aW5nX2NvbmZpZ3VyYXRpb24oKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNb2RlbC5ydWxlcyA9ICRyb290U2NvcGUucm91dGluZy5ydWxlcztcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gU3RhdHVzLmlkbGUoKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoQnJvd3Nlci52YWxpZGF0ZSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5wcm9ncmVzcyhCcm93c2VyLmdldEVycm9yTWVzc2FnZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYXBpLmlzX2FwaV9lcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFJvdXRpbmdfbW9kZWxfZXJyb3JzLmlzKGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcihSb3V0aW5nX21vZGVsX2Vycm9ycy5tZXNzYWdlKGVycm9yKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcih0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uZXJyb3IuY29uZmlndXJhdGlvbl91cGxvYWRfZmFpbGVkJykpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUuYXBwbGljYXRpb25fbG9hZGVkKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRGV2aWNlX0dVSS5yZWZyZXNoX3BvcnRfY29vcmRpbmF0ZXMoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS51cmdlX3BvcnRfcmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRyb290U2NvcGUucG9ydF9yZWZyZXNoZXIpIHtcbiAgICAgICAgJHJvb3RTY29wZS5wb3J0X3JlZnJlc2hlci5jYW5jZWwoKTtcbiAgICAgIH1cbiAgICAgICRyb290U2NvcGUuc3RhcnRfcGVyaW9kaWNhbF9wb3J0X3JlZnJlc2goKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS5zdGFydF9wZXJpb2RpY2FsX3BvcnRfcmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRyb290U2NvcGUucG9ydF9yZWZyZXNoZXIgPSAkc2NvcGUucGVyaW9kaWNhbF9wcm9taXNlZChEZXZpY2UucmVmcmVzaF9wb3J0cywgJHNjb3BlLl9wb3J0X3N0YXRlX3JlZnJlc2hfaW50ZXJ2YWwgKiAxMDAwKTtcbiAgICB9O1xuICAgICRyb290U2NvcGUuc2Nyb2xsX2J5ID0gZnVuY3Rpb24oc2Nyb2xsX2J5KSB7XG4gICAgICB2YXIgZGVsYXllZDtcbiAgICAgICRyb290U2NvcGUud2luZG93X3Njcm9sbF9ieSA9IGZhbHNlO1xuICAgICAgZGVsYXllZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICRyb290U2NvcGUud2luZG93X3Njcm9sbF9ieSA9IHNjcm9sbF9ieTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGRlbGF5ZWQuZGVsYXkoMCk7XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLm5vdF9hdXRoZW50aWNhdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICBTdGF0dXMubm90X2F1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIHJldHVybiBMb2dpbi5ub3RfYXV0aGVudGljYXRlZCgpO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS5zaG93X25hdmlnYXRpb25fY29uZmlybWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJHJvb3RTY29wZS5uZXh0X3JvdXRlO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS5kb250X25hdmlnYXRlX2F3YXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkcm9vdFNjb3BlLm5leHRfcm91dGUgPSBudWxsO1xuICAgIH07XG4gICAgJHJvb3RTY29wZS5uYXZpZ2F0ZV9hd2F5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoUHJvbWlzZXMucGVuZGluZygpKSB7XG4gICAgICAgIFByb21pc2VzLmNhbmNlbCgpO1xuICAgICAgICBQcm9taXNlcy5yZXNldCgpO1xuICAgICAgICBTdGF0dXMubm90X2J1c3koKTtcbiAgICAgIH1cbiAgICAgICRsb2NhdGlvbi5wYXRoKCRyb290U2NvcGUubmV4dF9yb3V0ZS4kJHJvdXRlLm9yaWdpbmFsUGF0aCk7XG4gICAgICByZXR1cm4gJHJvb3RTY29wZS5uZXh0X3JvdXRlID0gbnVsbDtcbiAgICB9O1xuICAgICRyb290U2NvcGUubG9nID0gbG9nO1xuICAgICRyb290U2NvcGUuRW51bXMgPSBFbnVtcztcbiAgICAkcm9vdFNjb3BlLkdVSSA9IEdVSTtcbiAgICAkcm9vdFNjb3BlLkRldmljZV9HVUkgPSBEZXZpY2VfR1VJO1xuICAgICRyb290U2NvcGUuUG9ydCA9IFBvcnQ7XG4gICAgJHJvb3RTY29wZS5Qb3J0X3ZpZXcgPSBQb3J0X3ZpZXc7XG4gICAgJHJvb3RTY29wZS5Qb3J0X251bWVyYXRpb24gPSBQb3J0X251bWVyYXRpb247XG4gICAgJHJvb3RTY29wZS5SdWxlID0gUnVsZTtcbiAgICAkcm9vdFNjb3BlLkNvbmZpZ3VyYXRpb24gPSBDb25maWd1cmF0aW9uO1xuICAgICRyb290U2NvcGUuQ29uZmlndXJhdGlvbnMgPSBDb25maWd1cmF0aW9ucztcbiAgICAkcm9vdFNjb3BlLm1vZGVsID0gTW9kZWw7XG4gICAgJHJvb3RTY29wZS5TdGF0dXMgPSBTdGF0dXM7XG4gICAgJHJvb3RTY29wZS5EZXZpY2Vfc2V0dGluZ3MgPSBEZXZpY2Vfc2V0dGluZ3M7XG4gICAgJHJvb3RTY29wZS5Mb2dpbiA9IExvZ2luO1xuICAgICRzY29wZS5wYWdlcyA9IHBhZ2VzO1xuICAgICRzY29wZS5mbG9vciA9IE1hdGguZmxvb3I7XG4gICAgJHNjb3BlLmNlaWxpbmcgPSBNYXRoLmNlaWw7XG4gICAgJHNjb3BlLmlzX3NldCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4ICE9IG51bGw7XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLnVubWFza2VkX2FjbF9maWx0ZXJfdHlwZXMgPSBbJ2V0aGVybmV0X3Byb3RvY29sJywgJ0lQX3Byb3RvY29sJywgJ211bHRpX0lQX2FkZHJlc3MnLCAnSVBfcHJvdG9jb2xfc291cmNlJywgJ0lQX3Byb3RvY29sX2Rlc3RpbmF0aW9uJywgJ0xldmVsNF9kYXRhJ107XG4gICAgJHNjb3BlLm5vdyA9IG5ldyBEYXRlKCk7XG4gICAgJHJvb3RTY29wZS50aW1lb3V0cyA9IFtdO1xuICAgIFByb21pc2VzLnJlc2V0KCk7XG4gICAgJHJvb3RTY29wZS5kYXRhID0ge307XG4gICAgJHJvb3RTY29wZS5zdGF0cyA9IHtcbiAgICAgIHBvcnRzOiB7fVxuICAgIH07XG4gICAgJHJvb3RTY29wZS52aWV3ID0ge1xuICAgICAgcG9ydHM6IHt9XG4gICAgfTtcbiAgICAkcm9vdFNjb3BlLmdyb3VwcyA9IFtdO1xuICAgICRzY29wZS5fcG9ydF9zdGF0ZV9yZWZyZXNoX2ludGVydmFsID0gMjtcbiAgICBpZiAoJGxvY2F0aW9uLnBhdGgoKSA9PT0gXCIvXCIpIHtcbiAgICAgIGRlZmF1bHRfcm91dGUgPSBwYWdlcy5maWx0ZXIoZnVuY3Rpb24ocm91dGUpIHtcbiAgICAgICAgcmV0dXJuIHJvdXRlLmZpcnN0X3NjcmVlbjtcbiAgICAgIH0pWzBdO1xuICAgICAgaWYgKGRlZmF1bHRfcm91dGUpIHtcbiAgICAgICAgJGxvY2F0aW9uLnVybChkZWZhdWx0X3JvdXRlLnVybCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgICRzY29wZS5ib2R5ID0gJCQoZG9jdW1lbnQuYm9keSk7XG4gICAgJHNjb3BlLmxvY2F0aW9uID0gJGxvY2F0aW9uO1xuICAgIGRldGVybWluZV9jdXJyZW50X3BhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICRyb290U2NvcGUudGhpc19wYWdlID0gcGFnZXMuZmlsdGVyKGZ1bmN0aW9uKHJvdXRlKSB7XG4gICAgICAgIHJldHVybiByb3V0ZS51cmwgPT09ICRsb2NhdGlvbi4kJHBhdGg7XG4gICAgICB9KVswXTtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gJHJvb3RTY29wZS50aGlzX3BhZ2UudGl0bGU7XG4gICAgICByZXR1cm4gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHJlc3VsdHMsIHJvdXRlO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBhZ2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcm91dGUgPSBwYWdlc1tpXTtcbiAgICAgICAgICBpZiAoJHJvb3RTY29wZS50aGlzX3BhZ2UgPT09IHJvdXRlKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goJHNjb3BlLmJvZHkuYWRkQ2xhc3Mocm91dGUucGFnZSArICdfcGFnZScpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCRzY29wZS5ib2R5LnJlbW92ZUNsYXNzKHJvdXRlLnBhZ2UgKyAnX3BhZ2UnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkZXRlcm1pbmVfY3VycmVudF9wYWdlKCk7XG4gICAgJHNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbihldmVudCwgbmV4dCwgY3VycmVudCkge1xuICAgICAgdmFyIGhhbmRsZXJfaWQsIGksIGxlbiwgcmVmO1xuICAgICAgaWYgKCFQcm9taXNlcy5wZW5kaW5nKCkpIHtcbiAgICAgICAgcmVmID0gJHNjb3BlLmtleV9oYW5kbGVycztcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaGFuZGxlcl9pZCA9IHJlZltpXTtcbiAgICAgICAgICAkc2NvcGUub2ZmX2tleShoYW5kbGVyX2lkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJHJvb3RTY29wZS5uZXh0X3JvdXRlID0gbmV4dDtcbiAgICAgIFByb21pc2VzLndhaXQoKTtcbiAgICAgIHJldHVybiBQcm9taXNlcy53aGVuX2RvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkcm9vdFNjb3BlLm5leHRfcm91dGUgIT09IG5leHQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRyb290U2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLm5hdmlnYXRlX2F3YXkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAkc2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oc2NvcGUsIG5leHQsIGN1cnJlbnQpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgdGltZW91dDtcbiAgICAgIGRldGVybWluZV9jdXJyZW50X3BhZ2UoKTtcbiAgICAgIHJlZiA9ICRyb290U2NvcGUudGltZW91dHM7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGltZW91dCA9IHJlZltpXTtcbiAgICAgICAgbG9nLmluZm8oJ0NhbmNlbGxpbmcgdGltZW91dCcpO1xuICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJHJvb3RTY29wZS50aW1lb3V0cyA9IFtdO1xuICAgIH0pO1xuICAgIFN0YXR1cy5idXN5KCk7XG4gICAgY29uZmlndXJhdGlvbi52ZXJzaW9uID0gVmVyc2lvbihjb25maWd1cmF0aW9uLnZlcnNpb24pO1xuICAgICRyb290U2NvcGUuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgc2V0X2xhbmd1YWdlKGNvbmZpZ3VyYXRpb24ubGFuZ3VhZ2UsICR0cmFuc2xhdGUpO1xuICAgIGFuZ3VsYXIuZXh0ZW5kKERldmljZV9zZXR0aW5ncywgJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLmRldmljZSk7XG4gICAgZGVsZXRlICRyb290U2NvcGUuY29uZmlndXJhdGlvbi5kZXZpY2U7XG4gICAgRW51bXMuQUNMX0ZpbHRlci5MZXZlbDRfZGF0YS5tYXNrLmJpdHMgPSBEZXZpY2Vfc2V0dGluZ3MubGV2ZWxfNF9kYXRhX21heF9ieXRlcyAqIDg7XG4gICAgcHJvY2VlZF9sb2FkaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRGV2aWNlLmluaXRpYWxpemUoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5kZXZpY2VfaXNfYm9vdGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdoZW5fZGV2aWNlX2lzX2Jvb3RlZChyZXN1bHQpO1xuICAgICAgfSlbXCJjYXRjaFwiXShhcGkuZXJyb3IuZGV2aWNlX2lzX2Jvb3RpbmdfdXAsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICRyb290U2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmRldmljZV9pc19ib290aW5nID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHByb2NlZWRfbG9hZGluZywgMTAwMCk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBwcm9jZWVkX2xvYWRpbmcoKTtcbiAgICByZXR1cm4gd2hlbl9kZXZpY2VfaXNfYm9vdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIERldmljZV9HVUkuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgIGlmICgkcm9vdFNjb3BlLnRoaXNfcGFnZS5wYWdlICE9PSAnZGVidWcnKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXJ0X3BlcmlvZGljYWxfcG9ydF9yZWZyZXNoKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRyb290U2NvcGUuYXBwbGljYXRpb25fdmlld19yZWFkeSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIExvZ2luLmF1dGhlbnRpY2F0ZSgpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXI7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncmVmcmVzaCBoZWlnaHQnKTtcbiAgICAgICAgcmV0dXJuICRyb290U2NvcGUuaW5pdGlhbGl6ZV9hcHBsaWNhdGlvbigpO1xuICAgICAgfSlbXCJjYXRjaFwiXShhcGkuZXJyb3Iubm90X2F1dGhlbnRpY2F0ZWQsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmICghJHJvb3RTY29wZS5hcHBsaWNhdGlvbl92aWV3X3JlYWR5KSB7XG4gICAgICAgICAgYWxlcnQodHJhbnNsYXRlKCdlcnJvci51bmF1dGhlbnRpY2F0ZWQnKSk7XG4gICAgICAgICAgcmV0dXJuIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgU3RhdHVzLmlkbGUoKTtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBMb2dpbi5ub3RfYXV0aGVudGljYXRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBhcHAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgIHZhciBpLCBsZW4sIHBhZ2UsIHJlc3VsdHMsIHJvdXRlO1xuICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gMCwgbGVuID0gcGFnZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJvdXRlID0gcGFnZXNbaV07XG4gICAgICBwYWdlID0ge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJy9wYWdlcy8nICsgcm91dGUucGFnZSArICcuaHRtbCdcbiAgICAgIH07XG4gICAgICBpZiAocm91dGUuY29udHJvbGxlcikge1xuICAgICAgICBwYWdlLmNvbnRyb2xsZXIgPSByb3V0ZS5jb250cm9sbGVyO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKCRyb3V0ZVByb3ZpZGVyLndoZW4ocm91dGUudXJsLCBwYWdlKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gZ2V0U3ltYm9sKHRyYW5zbGF0ZSkge1xuICAgIHZhciBzeW1ib2wgPSBbJ2JwcycsICdrYnBzJywgJ01icHMnLCAnR2JwcyddO1xuICAgIHJldHVybiBzeW1ib2wubWFwKGZ1bmN0aW9uIChyYXRlKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRlKCduZXR3b3JrLnJhdGUuJyArIHJhdGUpXG4gICAgfSk7XG4gIH1cbiAgLyog0J7QutGA0YPQs9C70LXQvdC40LUgKi9cbiAgZnVuY3Rpb24gcHJlY2lzZV9yb3VuZChudW0sIGRlY2ltYWxzKSB7IHJldHVybiBudW0udG9GaXhlZChkZWNpbWFscyk7IH1cblxuICAvLyDQpNC40LvRjNGC0YAg0LTQu9GPINC90LDRhdC+0LbQtNC10L3QuNGPINGN0LvQtdC80LXQvdGC0LAg0L/QviDQutC70Y7Rh9GDXG4gIGFwcC5maWx0ZXIoXCJmaW5ka2V5XCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwga2V5bmFtZSwga2V5dmFsLCBmaWVsZG5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YoYXJyYXkpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgbyA9ICQuZ3JlcChhcnJheSwgZnVuY3Rpb24oaSl7IHJldHVybiAoaVtrZXluYW1lXSA9PSBrZXl2YWwpIH0pO1xuICAgICAgICBpZiAoby5sZW5ndGgpIHsgaWYgKGZpZWxkbmFtZSkgcmV0dXJuIG9bMF1bZmllbGRuYW1lXTsgZWxzZSByZXR1cm4gb1swXTsgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyDQpNC40LvRjNGC0YAg0LTQu9GPINC90LDRhdC+0LbQtNC10L3QuNGPINGB0L/QuNGB0LrQsCDRjdC70LXQvNC10L3RgtCwINC/0L4g0LrQu9GO0YfRg1xuICBhcHAuZmlsdGVyKFwiZmluZGtleWFyclwiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGtleW5hbWUsIGtleXZhbCwgZXhpc3QpIHtcbiAgICAgIGlmICh0eXBlb2YoYXJyYXkpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgbyA9ICQuZ3JlcChhcnJheSwgZnVuY3Rpb24oaSl7IHJldHVybiAoIWV4aXN0KSA/IGlba2V5bmFtZV0gIT0ga2V5dmFsIDogaVtrZXluYW1lXSA9PSBrZXl2YWw7IH0pO1xuICAgICAgICByZXR1cm4gbztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qINCk0L7RgNC80LDRgtC40YDQvtCy0LDQvdC40LUg0YHQutC+0YDQvtGB0YLQuCDQv9C10YDQtdC00LDRh9C4INC00LDQvdC90YvRhS4g0JLRhdC+0LQ6INCx0LDQudGC0YsgKFwi0L7QutGC0LXRgtGLXCIpINCyINGB0LXQutGD0L3QtNGDICovXG4gIGFwcC5maWx0ZXIoXCJyYXRlZm9ybWF0XCIsIGZ1bmN0aW9uKHRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihyYXRlKSB7XG4gICAgICAvLyDQs9GA0LDQtNCw0YbQuNC4XG5cbiAgICAgIHZhciBzeW1ib2wgPSBnZXRTeW1ib2wodHJhbnNsYXRlKTtcblxuICAgICAgdmFyIGJhc2UgPSAxMDAwLCByYW5rID0gMDtcbiAgICAgIC8vINC/0YDQtdC+0LHRgNCw0LfQvtCy0LDRgtGMINC40Lcg0LHQsNC50YLQvtCyIChcItC+0LrRgtC10YLQvtCyXCIpINCyINGB0LXQutGD0L3QtNGDINCyINCx0LjRgtGLINCyINGB0LXQutGD0L3QtNGDXG4gICAgICByYXRlID0gKCFyYXRlIHx8ICtyYXRlPD0wICkgPyAwIDogcmF0ZSo4O1xuICAgICAgLy8g0LLRi9GP0YHQvdC40YLRjCDQvdCw0LjQsdC+0LvRjNGI0LjQuSByYW5rINC00LDQvdC90L7QuSDQstC10LvQuNGH0LjQvdGLXG4gICAgICBpZiAocmF0ZSE9MCkge2ZvciAodmFyIGk9MTsgaTw9MzsgaSsrKSBpZiAocmF0ZSA+PSBiYXNlKSB7cmF0ZSA9IHJhdGUgLyBiYXNlOyByYW5rID0gaX0gfVxuICAgICAgLy8g0L7QutGA0YPQs9C70LjRgtGMINCy0LXQu9C40YfQuNC90YMg0LTQviDQv9C10YDQstC+0LPQviDQt9C90LDQutCwINC/0L7RgdC70LUg0LfQsNC/0Y/RgtC+0LkgKNGBINGD0YfRkdGC0L7QvCByYW5rJ9CwKVxuICAgICAgcmF0ZSA9IChyYW5rPj0xKSA/IHByZWNpc2Vfcm91bmQocmF0ZSwgMSkgOiBwcmVjaXNlX3JvdW5kKHJhdGUsIDApO1xuICAgICAgLy8g0LLRi9Cy0LXRgdGC0Lgg0LLQvNC10YHRgtC1INGBINC10LTQuNC90LjRhtC10Lkg0LjQt9C80LXRgNC10L3QuNGPXG4gICAgICByZXR1cm4gKHJhdGUudG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyhbXlxcZF18JCkpL2csIFwiJDHigIlcIikucmVwbGFjZShcIi5cIiwgXCIsXCIpICsgXCJcXHUwMEEwXCIgKyBzeW1ib2xbcmFua10pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyog0KTQvtGA0LzQsNGC0LjRgNC+0LLQsNC90LjQtSDRgdC60L7RgNC+0YHRgtC4INC/0LXRgNC10LTQsNGH0Lgg0LTQsNC90L3Ri9GFLiDQktGF0L7QtDog0LHQsNC50YLRiyAoXCLQvtC60YLQtdGC0YtcIikg0LIg0YHQtdC60YPQvdC00YMgKi9cbiAgYXBwLmZpbHRlcihcInJhdGVmb3JtYXRTcGVjaWFsXCIsIGZ1bmN0aW9uKHRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihyYXRlKSB7XG4gICAgICAvLyDQs9GA0LDQtNCw0YbQuNC4XG4gICAgICB2YXIgc3ltYm9sID0gZ2V0U3ltYm9sKHRyYW5zbGF0ZSksIGJhc2UgPSAxMDAwLCByYW5rID0gMDtcbiAgICAgIC8vINC/0YDQtdC+0LHRgNCw0LfQvtCy0LDRgtGMINC40Lcg0LHQsNC50YLQvtCyIChcItC+0LrRgtC10YLQvtCyXCIpINCyINGB0LXQutGD0L3QtNGDINCyINCx0LjRgtGLINCyINGB0LXQutGD0L3QtNGDXG4gICAgICByYXRlID0gKCFyYXRlIHx8ICtyYXRlPD0wICkgPyAwIDogcmF0ZSo4O1xuXG4gICAgICBpZiAocmF0ZSA9PSAwKSByZXR1cm4gXCLigJRcIjtcblxuICAgICAgLy8g0LLRi9GP0YHQvdC40YLRjCDQvdCw0LjQsdC+0LvRjNGI0LjQuSByYW5rINC00LDQvdC90L7QuSDQstC10LvQuNGH0LjQvdGLXG4gICAgICBpZiAocmF0ZSE9MCkge2ZvciAodmFyIGk9MTsgaTw9MzsgaSsrKSBpZiAocmF0ZSA+PSBiYXNlKSB7cmF0ZSA9IHJhdGUgLyBiYXNlOyByYW5rID0gaX0gfVxuICAgICAgLy8g0L7QutGA0YPQs9C70LjRgtGMINCy0LXQu9C40YfQuNC90YMg0LTQviDQv9C10YDQstC+0LPQviDQt9C90LDQutCwINC/0L7RgdC70LUg0LfQsNC/0Y/RgtC+0LkgKNGBINGD0YfRkdGC0L7QvCByYW5rJ9CwKVxuICAgICAgcmF0ZSA9IChyYW5rPj0xKSA/IHByZWNpc2Vfcm91bmQocmF0ZSwgMSkgOiBwcmVjaXNlX3JvdW5kKHJhdGUsIDApO1xuICAgICAgLy8g0LLRi9Cy0LXRgdGC0Lgg0LLQvNC10YHRgtC1INGBINC10LTQuNC90LjRhtC10Lkg0LjQt9C80LXRgNC10L3QuNGPXG4gICAgICByZXR1cm4gKHJhdGUudG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyhbXlxcZF18JCkpL2csIFwiJDHigIlcIikucmVwbGFjZShcIi5cIiwgXCIsXCIpICsgXCJcXHUwMEEwXCIgKyBzeW1ib2xbcmFua10pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8g0KTQuNC70YzRgtGALCDQv9GA0L7Qv9GD0YHQutCw0Y7RidC40Lkg0YLQvtC70YzQutC+INGC0LUg0LfQvdCw0YfQtdC90LjRjywg0LrQvtGC0L7RgNGL0LUg0LXRidGRINC90LUg0LLRi9Cx0YDQsNC90YtcbiAgYXBwLmZpbHRlcigndW51c2VkX2ZpbHRlcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihjb21wbGV0ZV9saXN0LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVfbGlzdC5maWx0ZXIoZnVuY3Rpb24obGlzdF9pdGVtKSB7XG4gICAgICAgIHJldHVybiAhb3B0aW9ucy5pc191c2VkKGxpc3RfaXRlbSlcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vINCh0L3QsNGH0LDQu9CwINC90LXRh9GR0YLQvdGL0LVcbiAgYXBwLmZpbHRlcignb2RkX2ZpcnN0JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICB2YXIgaTtcblxuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWVzW2ldKTtcbiAgICAgICAgaSArPSAyO1xuICAgICAgfVxuXG4gICAgICBpID0gMTtcbiAgICAgIHdoaWxlIChpIDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQucHVzaCh2YWx1ZXNbaV0pO1xuICAgICAgICBpICs9IDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfSk7XG4gIC8qKlxuICAgKiDQpNC40LvRjNGC0YAg0LTQu9GPINGB0LjQu9GLINGB0LjQs9C90LDQu9CwXG4gICAqL1xuICBhcHAuZmlsdGVyKCdwZXJjZW50X251bWJlcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gdmFsdWUgKyAnJSdcbiAgICAgICAgOiAnJztcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICog0KPQtNCw0LvQtdC90LjQtSBcItChXCIg0LIg0LrQvtC90YbQtSDQt9C90LDRh9C10L3QuNGPINGC0LXQvNC/0LXRgNCw0YLRg9GA0Ysg0Lgg0LTQvtCx0LDQstC70LXQvdC40LUgXCLCsFwiLlxuICAgKi9cbiAgYXBwLmZpbHRlcignc2ZwX3RlbXBlcmF0dXJlJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBwYXJzZUludCh2YWx1ZSwgMTApICsgJ8KwJ1xuICAgICAgICA6IHZhbHVlO1xuICAgIH07XG4gIH0pO1xuICAvKipcbiAgICog0KPRgdGC0LDQvdC+0LLQutCwINC/0YDQvtCx0LXQu9CwINCyINGB0YLRgNC+0LrQsNGFINC80LXQttC00YMg0LfQvdCw0YfQtdC90LjQtdC8INC4INC10LTQuNC90LjRhtC+0Lkg0LjQt9C80LXRgNC10L3QuNGPXG4gICAqINC/0YDQuCDQuNGFINGB0LvQuNGC0L3QvtGB0YLQuC5cbiAgICovXG4gIGFwcC5maWx0ZXIoJ3NwYWNlX2RlbGltaXRlcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcZC5cXC0rXSsoPz1bYS16QS1a0LAt0Y/QkC3Qr9GR0IFdKS9nLCBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0ICsgJyAnO1xuICAgICAgfSlcbiAgICB9O1xuICB9KTtcblxufSkoKTsiLCJAcGFnZXMgPSBbeyBcblx0dXJsICAgICAgICAgIDogXCIvcG9ydHNcIlxuXHRwYWdlICAgICAgICAgOiBcInBvcnRzXCJcblx0Y29udHJvbGxlciAgIDogXCJQb3J0c0N0cmxcIlxuXHRtZW51ICAgICAgICAgOiB5ZXNcblx0Zmlyc3Rfc2NyZWVuIDogeWVzXG59LCB7IFxuXHR1cmwgICAgICAgICAgOiBcIi9ydWxlc1wiXG5cdHBhZ2UgICAgICAgICA6IFwicm91dGluZ1wiXG5cdGNvbnRyb2xsZXIgICA6IFwiUnVsZXNDdHJsXCJcblx0bWVudSAgICAgICAgIDogeWVzXG5cdG5vdGl0bGUgICAgICA6IHllc1xuXHRub3BhZGRpbmdzICAgOiB5ZXNcbn0sIHsgXG5cdHVybCAgICAgICAgICA6IFwiL3NldHRpbmdzXCJcblx0cGFnZSAgICAgICAgIDogXCJzZXR0aW5nc1wiXG5cdGNvbnRyb2xsZXIgICA6IFwiU2V0dGluZ3NDdHJsXCJcblx0bWVudSAgICAgICAgIDogeWVzXG59LCB7IFxuXHR1cmwgICAgICAgICAgOiBcIi9kZWJ1Z1wiXG5cdHBhZ2UgICAgICAgICA6IFwiZGVidWdcIlxuXHRjb250cm9sbGVyICAgOiBcIkRlYnVnQ3RybFwiXG5cdHN0YXR1cyAgICAgICA6IG5vXG59LCB7IFxuXHR1cmwgICAgICAgICAgOiBcIi9hZG1pblwiXG5cdHBhZ2UgICAgICAgICA6IFwiYWRtaW5cIlxuXHRjb250cm9sbGVyICAgOiBcIkFkbWluQ3RybFwiXG59XSIsIihmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlcyA9IFtcbiAgICB7XG4gICAgICB1cmw6IFwiL3BvcnRzXCIsXG4gICAgICBwYWdlOiBcInBvcnRzXCIsXG4gICAgICBjb250cm9sbGVyOiBcIlBvcnRzQ3RybFwiLFxuICAgICAgbWVudTogdHJ1ZSxcbiAgICAgIGZpcnN0X3NjcmVlbjogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHVybDogXCIvcnVsZXNcIixcbiAgICAgIHBhZ2U6IFwicm91dGluZ1wiLFxuICAgICAgY29udHJvbGxlcjogXCJSdWxlc0N0cmxcIixcbiAgICAgIG1lbnU6IHRydWUsXG4gICAgICBub3RpdGxlOiB0cnVlLFxuICAgICAgbm9wYWRkaW5nczogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHVybDogXCIvc2V0dGluZ3NcIixcbiAgICAgIHBhZ2U6IFwic2V0dGluZ3NcIixcbiAgICAgIGNvbnRyb2xsZXI6IFwiU2V0dGluZ3NDdHJsXCIsXG4gICAgICBtZW51OiB0cnVlXG4gICAgfSwge1xuICAgICAgdXJsOiBcIi9kZWJ1Z1wiLFxuICAgICAgcGFnZTogXCJkZWJ1Z1wiLFxuICAgICAgY29udHJvbGxlcjogXCJEZWJ1Z0N0cmxcIixcbiAgICAgIHN0YXR1czogZmFsc2VcbiAgICB9LCB7XG4gICAgICB1cmw6IFwiL2FkbWluXCIsXG4gICAgICBwYWdlOiBcImFkbWluXCIsXG4gICAgICBjb250cm9sbGVyOiBcIkFkbWluQ3RybFwiXG4gICAgfVxuICBdO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiLy8gVXNhZ2U6XG4vL1xuLy8gJChkb2N1bWVudCkub24oJ2tleWRvd24uZ2xvYmFsX2hvdGtleScsIGZ1bmN0aW9uKGV2ZW50KVxuLy8ge1xuLy8gXHRpZiAoS2V5Ym9hcmQuaXMoJ0N0cmwnLCAneicsIGV2ZW50KSlcbi8vIFx0e1xuLy8gXHRcdHVuZG8oKVxuLy9cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuLy8gXHRcdHJldHVybiBmYWxzZVxuLy8gXHR9XG4vLyB9XG5cbnZhciBLZXlib2FyZCA9XG57XG5cdEJhY2tzcGFjZTogOCxcblx0VGFiOiA5LFxuXHRcblx0RW50ZXI6IDEzLFxuXHRcblx0Q3RybDogMTgsXG5cdEFsdDogMTcsXG5cdFNoaWZ0OiAxNixcblx0XG5cdFBhdXNlOiAxOSxcblx0RXNjYXBlOiAyNyxcblx0XG5cdFNwYWNlOiAzMixcblx0XG5cdFBhZ2VfdXA6IDMzLFxuXHRQYWdlX2Rvd246IDM0LFxuXHRcblx0RW5kOiAzNSxcblx0SG9tZTogMzYsXG5cdFxuXHRMZWZ0OiAzNyxcblx0XG5cdFVwOiAzOCxcblx0XG5cdFJpZ2h0OiAzOSxcblx0XG5cdERvd246IDQwLFxuXHRcblx0SW5zZXJ0OiA0NSxcblx0XG5cdERlbGV0ZTogNDYsXG5cdFxuXHQnMCc6IDQ4LFxuXHQnMSc6IDQ5LFxuXHQnMic6IDUwLFxuXHQnMyc6IDUxLFxuXHQnNCc6IDUyLFxuXHQnNSc6IDUzLFxuXHQnNic6IDU0LFxuXHQnNyc6IDU1LFxuXHQnOCc6IDU2LFxuXHQnOSc6IDU3LFxuXHRcblx0QTogNjUsXG5cdEI6IDY2LFxuXHRDOiA2Nyxcblx0RDogNjgsXG5cdEU6IDY5LFxuXHRGOiA3MCxcblx0RzogNzEsXG5cdEg6IDcyLFxuXHRJOiA3Myxcblx0SjogNzQsXG5cdEs6IDc1LFxuXHRMOiA3Nixcblx0TTogNzcsXG5cdE46IDc4LFxuXHRPOiA3OSxcblx0UDogODAsXG5cdFE6IDgxLFxuXHRSOiA4Mixcblx0UzogODMsXG5cdFQ6IDg0LFxuXHRVOiA4NSxcblx0VjogODYsXG5cdFc6IDg3LFxuXHRYOiA4OCxcblx0WTogODksXG5cdFo6IDkwLFxuXHRcblx0aHlwaGVuOiAxODksXG5cdFxuXHQnLSc6IDEwOSxcblx0JysnOiAxMDcsXG5cdFxuXHRGMTogMTEyLFxuXHRGMjogMTEzLFxuXHRGMzogMTE0LFxuXHRGNDogMTE1LFxuXHRcblx0RjU6IDExNixcblx0RjY6IDExNyxcblx0Rjc6IDExOCxcblx0Rjg6IDExOSxcblx0XG5cdEY5OiAxMjAsXG5cdEYxMDogMTIxLFxuXHRGMTE6IDEyMixcblx0RjEyOiAxMjMsXG5cdFxuXHQvKlxuXHRhOiA5Nyxcblx0YjogOTgsXG5cdGM6IDk5LFxuXHRkOiAxMDAsXG5cdGU6IDEwMSxcblx0ZjogMTAyLFxuXHRnOiAxMDMsXG5cdGg6IDEwNCxcblx0aTogMTA1LFxuXHRqOiAxMDYsXG5cdGs6IDEwNyxcblx0bDogMTA4LFxuXHRtOiAxMDksXG5cdG46IDExMCxcblx0bzogMTExLFxuXHRwOiAxMTIsXG5cdHE6IDExMyxcblx0cjogMTE0LFxuXHRzOiAxMTUsXG5cdHQ6IDExNixcblx0dTogMTE3LFxuXHR2OiAxMTgsXG5cdHc6IDExOSxcblx0eDogMTIwLFxuXHR5OiAxMjEsXG5cdHo6IDEyMixcblx0Ki9cblx0XG5cdCc7JzogMTg2LFxuXHQnPSc6IDE4Nyxcblx0JywnOiAxODgsXG5cdCctJzogMTg5LFxuXHQnLic6IDE5MCxcblx0Jy8nOiAxOTEsXG5cdCdgJzogMTkyLFxuXHRcblx0J1snOiAyMjEsXG5cdCddJzogMjIzLFxuXHRcblx0Lypcblx0RjE6IDExMixcblx0RjI6IDExMyxcblx0RjM6IDExNCxcblx0RjQ6IDExNSxcblx0RjU6IDExNixcblx0RjY6IDExNyxcblx0Rjc6IDExOCxcblx0Rjg6IDExOSxcblx0Rjk6IDEyMCxcblx0RjEwOiAxMjEsXG5cdEYxMTogMTIyLFxuXHRGMTI6IDEyMyxcblx0Ki9cblxuXHRkaXNhYmxlOiBmdW5jdGlvbigpXG5cdHtcblx0XHR0aGlzLmRpc2FibGVkID0gdHJ1ZVxuXHR9LFxuXHRcblx0ZW5hYmxlOiBmdW5jdGlvbigpXG5cdHtcblx0XHR0aGlzLmRpc2FibGVkID0gZmFsc2Vcblx0fSxcblx0XG5cdC8vINCy0L3Rg9GC0YDQtdC90L3QuNC5INC80LXRgtC+0LRcblx0aGFzOiBmdW5jdGlvbihrZXksIGNvZGUpXG5cdHtcblx0XHRpZiAodHlwZW9mIGNvZGUgIT09ICdudW1iZXInKVxuXHRcdHtcblx0XHRcdHZhciBldmVudCA9IGNvZGVcblx0XHRcdGNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXG5cdFx0XHRcblx0XHRcdHN3aXRjaCAoa2V5KVxuXHRcdFx0e1xuXHRcdFx0XHRjYXNlICdDdHJsJzpcblx0XHRcdFx0XHRpZiAoZXZlbnQuY3RybEtleSlcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcblx0XHRcdFx0Y2FzZSAnQWx0Jzpcblx0XHRcdFx0XHRpZiAoZXZlbnQuYWx0S2V5KVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRjYXNlICdTaGlmdCc6XG5cdFx0XHRcdFx0aWYgKGV2ZW50LnNoaWZ0S2V5KVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRjYXNlICdDb21tYW5kJzpcblx0XHRcdFx0XHRpZiAoZXZlbnQuY21kS2V5KVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZiAodGhpc1trZXldIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0e1xuXHRcdFx0dmFyIGkgPSAwXG5cdFx0XHR3aGlsZSAoaSA8IHRoaXNba2V5XS5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChjb2RlID09PSB0aGlzW2tleV1baV0pXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdFx0aSsrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGNvZGUgPT09IHRoaXNba2V5XSlcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcblx0XHRyZXR1cm4gZmFsc2Vcblx0fSxcblx0XG5cdC8vINCe0L/RgNC10LTQtdC70Y/QtdGCLCDQsdGL0LvQsCDQu9C4INC90LDQttCw0YLQsCDQtNCw0L3QvdCw0Y8g0LrQvtC80LHQuNC90LDRhtC40Y8g0LrQu9Cw0LLQuNGILlxuXHQvLyBcblx0Ly8g0JjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LU6XG5cdC8vIEtleWJvYXJkLmlzKCdDdHJsJywgJ1NoaWZ0JywgJ04nLCBldmVudClcblx0aXM6IGZ1bmN0aW9uKClcblx0e1xuXHRcdHZhciBtZXRhID0gZmFsc2Vcblx0XHR2YXIgY3RybCA9IGZhbHNlXG5cdFx0dmFyIGFsdCA9IGZhbHNlXG5cdFx0dmFyIHNoaWZ0ID0gZmFsc2Vcblx0XG5cdFx0dmFyIGtleXNcblx0XHR2YXIgZXZlbnRcblx0XHR2YXIgY29kZVxuXHRcdFxuXHRcdGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBBcnJheSlcblx0XHR7XG5cdFx0XHQvLyBjb3B5XG5cdFx0XHRrZXlzID0gYXJndW1lbnRzWzBdLm1hcChmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGtleSB9KVxuXHRcdFx0dmFyIGV2ZW50X29yX2NvZGUgPSBhcmd1bWVudHNbMV1cblx0XHRcdFxuXHRcdFx0aWYgKHR5cGVvZiBldmVudF9vcl9jb2RlID09PSAnbnVtYmVyJylcblx0XHRcdFx0Y29kZSA9IGV2ZW50X29yX2NvZGVcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZXZlbnQgPSBldmVudF9vcl9jb2RlXG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblx0XHRcdFxuXHRcdFx0dmFyIGV2ZW50X29yX2NvZGUgPSBhcmdzLnBvcCgpXG5cdFx0XHRcblx0XHRcdGlmICh0eXBlb2YgZXZlbnRfb3JfY29kZSA9PT0gJ251bWJlcicpXG5cdFx0XHRcdGNvZGUgPSBldmVudF9vcl9jb2RlXG5cdFx0XHRlbHNlXG5cdFx0XHRcdGV2ZW50ID0gZXZlbnRfb3JfY29kZVxuXHRcdFx0XG5cdFx0XHQvLyBjb3B5XG5cdFx0XHRrZXlzID0gYXJnc1xuXHRcdH1cblx0XHRcblx0XHRpZiAoZXZlbnQpXG5cdFx0e1xuXHRcdFx0aWYgKGV2ZW50LndoaWNoKVxuXHRcdFx0XHRjb2RlID0gZXZlbnQud2hpY2hcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y29kZSA9IGV2ZW50LmtleUNvZGVcblx0XHR9XG5cdFx0XHRcblx0XHRpZiAoa2V5cy5oYXMoJ0NvbW1hbmQnKSlcblx0XHR7XG5cdFx0XHRtZXRhID0gdHJ1ZVxuXHRcdFx0a2V5cy5yZW1vdmUoJ0NvbW1hbmQnKVxuXHRcdH1cblx0XHRcblx0XHRpZiAoa2V5cy5oYXMoJ0N0cmwnKSlcblx0XHR7XG5cdFx0XHRjdHJsID0gdHJ1ZVxuXHRcdFx0a2V5cy5yZW1vdmUoJ0N0cmwnKVxuXHRcdH1cblx0XHRcdFxuXHRcdGlmIChrZXlzLmhhcygnQWx0JykpXG5cdFx0e1xuXHRcdFx0YWx0ID0gdHJ1ZVxuXHRcdFx0a2V5cy5yZW1vdmUoJ0FsdCcpXG5cdFx0fVxuXHRcdFx0XG5cdFx0aWYgKGtleXMuaGFzKCdTaGlmdCcpKVxuXHRcdHtcblx0XHRcdHNoaWZ0ID0gdHJ1ZVxuXHRcdFx0a2V5cy5yZW1vdmUoJ1NoaWZ0Jylcblx0XHR9XG5cblx0XHRpZiAoIWV2ZW50ICYmIChtZXRhIHx8IGN0cmwgfHwgYWx0IHx8IHNoaWZ0KSlcblx0XHRcdHRocm93ICdFdmVudCB3YXNuXFwndCBwcm92aWRlZCBmb3IgdGhpcyBmdW5jdGlvbmFsaXR5J1xuXHRcdFxuXHRcdGlmIChtZXRhKVxuXHRcdHtcblx0XHRcdGlmICghZXZlbnQubWV0YUtleSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXHRcdGVsc2UgaWYgKGV2ZW50KVxuXHRcdHtcblx0XHRcdGlmIChldmVudC5tZXRhS2V5KVxuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cblx0XHRpZiAoY3RybClcblx0XHR7XG5cdFx0XHRpZiAoIWV2ZW50LmN0cmxLZXkpXG5cdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH1cblx0XHRlbHNlIGlmIChldmVudClcblx0XHR7XG5cdFx0XHRpZiAoZXZlbnQuY3RybEtleSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXHRcdFxuXHRcdGlmIChhbHQpXG5cdFx0e1xuXHRcdFx0aWYgKCFldmVudC5hbHRLZXkpXG5cdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH1cblx0XHRlbHNlIGlmIChldmVudClcblx0XHR7XG5cdFx0XHRpZiAoZXZlbnQuYWx0S2V5KVxuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cdFx0XHRcdFxuXHRcdGlmIChzaGlmdClcblx0XHR7XG5cdFx0XHRpZiAoIWV2ZW50LnNoaWZ0S2V5KVxuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZXZlbnQpXG5cdFx0e1xuXHRcdFx0aWYgKGV2ZW50LnNoaWZ0S2V5KVxuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9XG5cdFx0XG5cdFx0aWYgKGtleXMubGVuZ3RoID09PSAwKVxuXHRcdHtcblx0XHRcdC8vYWxlcnQoZXZlbnQua2V5Q29kZSlcblx0XHRcdHJldHVybiB0cnVlXG5cdFx0fVxuXHRcdFx0XG5cdFx0aWYgKGtleXMubGVuZ3RoICE9PSAxKVxuXHRcdFx0dGhyb3cgJ1RvbyBtdWNoIGNoYXJhY3RlciBrZXlzLiBPbmx5IG9uZSBhbGxvd2VkLidcblx0XHRcblx0XHR2YXIga2V5ID0ga2V5c1swXVxuXHRcdFxuXHRcdGlmIChrZXkubGVuZ3RoID09PSAxKVx0XHRcdFx0XG5cdFx0XHRpZiAoc2hpZnQpXG5cdFx0XHRcdGtleSA9IGtleS50b1VwcGVyQ2FzZSgpXG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuaGFzKGtleSwgY29kZSlcblx0fSxcblx0XG5cdC8vINCe0L/RgNC10LTQtdC70Y/QtdGCINC/0L4g0YHQvtCx0YvRgtC40Y4sINC60LDQutCw0Y8g0LrQvtC80LHQuNC90LDRhtC40Y8g0LrQu9Cw0LLQuNGIINCx0YvQu9CwINC90LDQttCw0YLQsFxuXHR3aGF0OiBmdW5jdGlvbihldmVudClcblx0e1xuXHRcdHZhciBrZXlzID0gW11cblx0XHRcdFxuXHRcdGlmIChldmVudC5tZXRhS2V5KVxuXHRcdHtcblx0XHRcdGtleXMucHVzaCgnQ29tbWFuZCcpXG5cdFx0fVxuXHRcdFx0XG5cdFx0aWYgKGV2ZW50LmN0cmxLZXkpXG5cdFx0e1xuXHRcdFx0a2V5cy5wdXNoKCdDdHJsJylcblx0XHR9XG5cdFx0XHRcblx0XHRpZiAoZXZlbnQuYWx0S2V5KVxuXHRcdHtcblx0XHRcdGtleXMucHVzaCgnQWx0Jylcblx0XHR9XG5cdFx0XHRcblx0XHRpZiAoZXZlbnQuc2hpZnRLZXkpXG5cdFx0e1xuXHRcdFx0a2V5cy5wdXNoKCdTaGlmdCcpXG5cdFx0fVxuXHRcdFxuXHRcdHZhciBjb2RlXG5cdFx0XG5cdFx0aWYgKGV2ZW50LndoaWNoKVxuXHRcdFx0Y29kZSA9IGV2ZW50LndoaWNoXG5cdFx0ZWxzZVxuXHRcdFx0Y29kZSA9IGV2ZW50LmtleUNvZGVcblx0XHRcblx0XHR2YXIgdGhlX2tleVxuXHRcdFxuXHRcdE9iamVjdC5mb3JfZWFjaCh0aGlzLCBmdW5jdGlvbihrZXksIHZhbHVlKVxuXHRcdHtcblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgaSA9IDBcblx0XHRcdFx0d2hpbGUgKGkgPCB2YWx1ZS5sZW5ndGgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoY29kZSA9PT0gdmFsdWVbaV0pXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhlX2tleSA9IGtleVxuXHRcdFx0XHRcdGkrK1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IGNvZGUpXG5cdFx0XHRcdFx0dGhlX2tleSA9IGtleVxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0XG5cdFx0c3dpdGNoIChjb2RlKVxuXHRcdHtcblx0XHRcdGNhc2UgMTY6XG5cdFx0XHRjYXNlIDE3OlxuXHRcdFx0Y2FzZSAxODpcblx0XHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdFxuXHRcdGlmICghZXZlbnQua2V5Q29kZSlcblx0XHRcdHJldHVyblxuXHRcdFxuXHRcdGlmICghdGhlX2tleSlcblx0XHRcdHRocm93ICdLZXkgY29kZSBub3QgcmVjb2duaXplZDogJyArIGNvZGVcblx0XHRcblx0XHRrZXlzLnB1c2godGhlX2tleSlcblx0XHRcblx0XHRyZXR1cm4ga2V5c1xuXHR9LFxuXHRcblx0Ly8gbmF2aWdhdGluZzogZnVuY3Rpb24oZXZlbnQpXG5cdC8vIHtcblx0Ly8gXHRpZiAoS2V5Ym9hcmQuaXMoJ9CS0LvQtdCy0L4nLCBldmVudCkgfHxcblx0Ly8gXHRcdEtleWJvYXJkLmlzKCfQktC/0YDQsNCy0L4nLCBldmVudCkgfHxcblx0Ly8gXHRcdEtleWJvYXJkLmlzKCfQktCy0LXRgNGFJywgZXZlbnQpIHx8XG5cdC8vIFx0XHRLZXlib2FyZC5pcygn0JLQvdC40LcnLCBldmVudCkgfHxcblx0Ly8gXHRcdEtleWJvYXJkLmlzKCdIb21lJywgZXZlbnQpIHx8XG5cdC8vIFx0XHRLZXlib2FyZC5pcygnRW5kJywgZXZlbnQpIHx8XG5cdC8vIFx0XHRLZXlib2FyZC5pcygnUGFnZV91cCcsIGV2ZW50KSB8fFxuXHQvLyBcdFx0S2V5Ym9hcmQuaXMoJ1BhZ2VfZG93bicsIGV2ZW50KSlcblx0Ly8gXHR7XG5cdC8vIFx0XHRyZXR1cm4gdHJ1ZVxuXHQvLyBcdH1cblx0Ly8gfSxcblx0XG5cdC8vIHByaW50X2NvbWJpbmF0aW9uOiBmdW5jdGlvbihrZXlzKVxuXHQvLyB7XG5cdC8vIFx0cmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gJ8KrJyArIGtleSArICfCuycgfSkuam9pbignLCAnKVxuXHQvLyB9LFxuXHRcblx0Ly8gc29ydGVkOiBmdW5jdGlvbihrZXlzKVxuXHQvLyB7XG5cdC8vIFx0a2V5cyA9IEFycmF5LmNsb25lKGtleXMpXG5cdFx0XG5cdC8vIFx0dmFyIHNvcnRlZCA9IFtdXG5cdFx0XG5cdC8vIFx0dmFyIG1ldGFfa2V5cyA9IFsnQ29tbWFuZCcsICdDdHJsJywgJ0FsdCcsICdTaGlmdCddXG5cdFx0XG5cdC8vIFx0bWV0YV9rZXlzLmZvckVhY2goZnVuY3Rpb24obWV0YV9rZXkpXG5cdC8vIFx0e1xuXHQvLyBcdFx0aWYgKGtleXMuaGFzKG1ldGFfa2V5KSlcblx0Ly8gXHRcdHtcblx0Ly8gXHRcdFx0c29ydGVkLnB1c2gobWV0YV9rZXkpXG5cdC8vIFx0XHRcdGtleXMucmVtb3ZlKG1ldGFfa2V5KVxuXHQvLyBcdFx0fVxuXHQvLyBcdH0pXG5cdFx0XG5cdC8vIFx0c29ydGVkLmFwcGVuZChrZXlzLnNvcnQoKSlcblx0XHRcblx0Ly8gXHRyZXR1cm4gc29ydGVkXG5cdC8vIH0sXG59XG5cbnZhciBLZXlib2FyZF9saXN0ZW5lciA9IHtcblxuXHRrZXlfaGFuZGxlcnM6IHt9LFxuXHRcblx0Ly8g0LTQvtCx0LDQstC70Y/QtdGCINC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNGPIGtleWRvd25cblx0b246IGZ1bmN0aW9uKGFjdGlvbilcblx0e1xuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlX3VuaXF1ZV9rZXlfaW5fb2JqZWN0KHRhcmdldClcblx0XHR7XG5cdFx0XHR2YXIga2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygpXG5cdFx0XHRcblx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKVxuXHRcdFx0XHRyZXR1cm4ga2V5XG5cdFx0XHRcblx0XHRcdHJldHVybiBnZW5lcmF0ZV91bmlxdWVfa2V5X2luX29iamVjdCh0YXJnZXQpXG5cdFx0fVxuXHRcdFxuXHRcdHZhciBoYW5kbGVyX2lkID0gZ2VuZXJhdGVfdW5pcXVlX2tleV9pbl9vYmplY3QodGhpcy5rZXlfaGFuZGxlcnMpXG5cblx0XHR0aGlzLmtleV9oYW5kbGVyc1toYW5kbGVyX2lkXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHR2YXIgaGVscGVyID0ge1xuXHRcdFx0XHRpczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cblx0XHRcdFx0XHR2YXIgb3B0aW9uc1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgYXJncy5sYXN0KCkgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zID0gYXJncy5wb3AoKVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFyZ3MucHVzaChldmVudClcblxuXHRcdFx0XHRcdHZhciByZXN1bHQgPSBLZXlib2FyZC5pcy5hcHBseShLZXlib2FyZCwgYXJncylcblxuXHRcdFx0XHRcdGlmIChyZXN1bHQpIHtcblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnN3YWxsb3cpIHtcblx0XHRcdFx0XHRcdFx0aGVscGVyLnN0b3AoKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRcblx0XHRcdFx0fSxcblx0XHRcdFx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXZlbnQ6IGV2ZW50XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhY3Rpb24oaGVscGVyKVxuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyX2lkXG5cdH0sXG5cdFxuXHQvLyDRg9Cx0LjRgNCw0LXRgiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDRgdC+0LHRi9GC0LjRjyBrZXlkb3duXG5cdG9mZjogZnVuY3Rpb24oaWQpXG5cdHtcblx0XHRkZWxldGUgdGhpcy5rZXlfaGFuZGxlcnNbaWRdXG5cdH1cblx0XG5cdC8vIG9uX2VsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGtleXMsIGFjdGlvbilcblx0Ly8ge1xuXHQvLyBcdGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldmVudClcblx0Ly8gXHR7XG5cdC8vIFx0XHRpZiAoS2V5Ym9hcmQuaXMoa2V5cywgZXZlbnQpKVxuXHQvLyBcdFx0e1xuXHQvLyBcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdC8vIFx0XHRcdGFjdGlvbigpXG5cdC8vIFx0XHR9XG5cdC8vIFx0fSlcblx0Ly8gfSxcbn1cblxuJChkb2N1bWVudCkub24oJ2tleWRvd24ua2V5cycsIGZ1bmN0aW9uKGV2ZW50KVxue1xuXHRpZiAoS2V5Ym9hcmQuZGlzYWJsZWQpXG5cdHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0cmV0dXJuXG5cdH1cblx0XG5cdE9iamVjdC5mb3JfZWFjaChLZXlib2FyZF9saXN0ZW5lci5rZXlfaGFuZGxlcnMsIGZ1bmN0aW9uKGlkLCBoYW5kbGVyKVxuXHR7XG5cdFx0aGFuZGxlcihldmVudClcblx0fSlcbn0pOyIsIkBpMThuID0ge30iLCIoZnVuY3Rpb24oKSB7XG4gIHRoaXMuaTE4biA9IHt9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwidmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwibHZsLmRpcmVjdGl2ZXMuZHJhZ2Ryb3BcIiwgWydsdmwuc2VydmljZXMnXSk7XG5cbm1vZHVsZS5kaXJlY3RpdmUoJ2x2bERyYWdnYWJsZScsIFsnJHJvb3RTY29wZScsICd1dWlkJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgdXVpZCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgXHRsdmxEcmFnZ2FibGU6ICc9JyxcbiAgICAgICAgICAgIG9uRHJhZzogJyYnLFxuICAgICAgICAgICAgbXVsdGlwbGU6ICc9J1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHJzLCBjb250cm9sbGVyKSB7XG5cdFx0XHR2YXIgJGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWwpO1xuXG5cdFx0XHRzY29wZS4kd2F0Y2goJ2x2bERyYWdnYWJsZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdCRlbGVtZW50LmF0dHIoXCJkcmFnZ2FibGVcIiwgdmFsdWUpO1xuXHRcdFx0fSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGlkID0gJGVsZW1lbnQuYXR0cihcImlkXCIpO1xuICAgICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgICAgIGlkID0gdXVpZC5uZXcoKVxuICAgICAgICAgICAgICAgICRlbGVtZW50LmF0dHIoXCJpZFwiLCBpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgICBlbC5iaW5kKFwiZHJhZ3N0YXJ0XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdEcmFnc3RhcnQnKTtcbiAgICAgICAgICAgIFx0XG4gICAgICAgICAgICAgICAgaWYgKCRlbGVtZW50Lmhhc0NsYXNzKCdub2RyYWcnKSkge1xuICAgICAgICAgICAgXHRcdHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIFx0fVxuXG4gICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dCcsIGlkKTtcblxuICAgICAgICAgICAgICAgIC8vINCf0YDQvtCy0LXRgNC60LAg0LHRgNCw0YPQt9C10YDQsC4g0J3QsNC/0YDQuNC80LXRgCwg0LIgU2FmYXJpIGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZSDQvdC10LzQtdC00LvQtdC90L3QviDQstGL0LfRi9Cy0LDQtdGCICBkcmFnZW5kINC4INGB0L7QvtGC0LIuINGC0LDRgdC60LDQvdC40LUg0L3QtSDRgNCw0LHQvtGC0LDQtdGCIVxuICAgICAgICAgICAgICAgIC8vINCU0LvRjyDQtNGA0YPQs9C40YUg0LHRgNCw0YPQt9C10YDQvtCyINGC0L7QttC1INC80L7QttC10YIg0L/QvtC90LDQtNC+0LHQuNGC0YzRgdGPINC/0YDQvtCy0LXRgNC60LBcbiAgICAgICAgICAgICAgICB2YXIgaXNTYWZhcmkgPSBuYXZpZ2F0b3IudmVuZG9yLmluZGV4T2YoXCJBcHBsZVwiKT09MCAmJiAvXFxzU2FmYXJpXFwvLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAgICAgIFxuXHQgICAgICAgICAgICAvLyDQlNC70Y8g0LzQvdC+0LbQtdGB0YLQstC10L3QvdC+0LPQviDQstGL0LTQtdC70LXQvdC40Y8g0L/QvtC00LzQtdC90Y/QtdGC0YHRjyDQutCw0YDRgtC40L3QutCwXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLm11bHRpcGxlICYmIGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZSAmJiAhaXNTYWZhcmkpIHtcblx0XHRcdFx0XHR2YXIgZHggPSAwO1xuXHRcdFx0XHRcdHZhciBkeSA9IDA7XG5cdFx0XHRcdFx0dmFyIGRyYWdfaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJhZ2ltYWdlJykuY2xvbmVOb2RlKCk7XG5cdFx0XHRcdFx0ZHJhZ19pbWFnZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRcdCAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGRyYWdfaW1hZ2UsIGR4LCBkeSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdChcIkxWTC1EUkFHLVNUQVJUXCIpO1xuXHRcdFx0XHRzY29wZS4kYXBwbHkoc2NvcGUub25EcmFnKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsLmJpbmQoXCJkcmFnZW5kXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkcmFnRW5kLS0tJyk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdChcIkxWTC1EUkFHLUVORFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cdH1cbn1dKTtcblxubW9kdWxlLmRpcmVjdGl2ZSgnbHZsRHJvcFRhcmdldCcsIFsnJHJvb3RTY29wZScsICd1dWlkJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgdXVpZCkge1xuXHRyZXR1cm4ge1xuXHRcdHJlc3RyaWN0OiAnQScsXG5cdFx0bGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVyKSB7XG5cblx0XHRcdHZhciBvbkRyb3AgPSBmdW5jdGlvbihkYXRhKSB7IHNjb3BlLiRldmFsKGF0dHJzLm9uRHJvcCwgZGF0YSkgfTtcblxuXHRcdFx0dmFyIG5vZGUgPSBlbGVtZW50WzBdO1xuXHRcdFx0dmFyICRlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuXG5cdFx0XHRmdW5jdGlvbiBpc19hY3RpdmUoKSB7XG5cdFx0XHRcdHJldHVybiAhJGVsZW1lbnQuaGFzQ2xhc3MoXCJub2Ryb3BcIilcblx0XHRcdH1cblxuXHRcdFx0Ly8g0LzQvtC20LXRgiDQsdGL0YLRjCDRjdGC0L7Qs9C+INC90LUg0YLRgNC10LHRg9C10YLRgdGPXG5cdFx0XHR2YXIgaWQgPSAkZWxlbWVudC5hdHRyKFwiaWRcIik7XG5cdFx0XHRpZiAoIWlkKSB7XG5cdFx0XHRcdGlkID0gdXVpZC5uZXcoKVxuXHRcdFx0XHQkZWxlbWVudC5hdHRyKFwiaWRcIiwgaWQpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBoaWdoZXN0X3BhcmVudF9vcl9kcm9wX3pvbmUoZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudCA9PT0gbm9kZSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBoaWdoZXN0X3BhcmVudF9vcl9kcm9wX3pvbmUoZWxlbWVudC5wYXJlbnROb2RlKTtcblx0XHRcdH1cblxuXHRcdFx0JGVsZW1lbnQub24oXCJkcm9wXCIsIGZ1bmN0aW9uIChldmVudCkge1xuXG5cdFx0XHRcdGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIE5lY2Vzc2FyeS4gQWxsb3dzIHVzIHRvIGRyb3AuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIE5lY2Vzc2FyeS4gQWxsb3dzIHVzIHRvIGRyb3AuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaWQgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHRcIik7XG5cblx0XHRcdFx0aWYgKGlzX2FjdGl2ZSgpKSB7XG5cdFx0XHRcdFx0b25Ecm9wKHsgZWxlbWVudHM6IHtkcmFnZ2VkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCksIGRyb3BwZWQ6IGVsZW1lbnR9IH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0ZWxlbWVudC5vbihcImRyYWdvdmVyXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIE5lY2Vzc2FyeS4gQWxsb3dzIHVzIHRvIGRyb3AuXG5cdFx0XHRcdH1cblx0XHRcdFx0ZXZlbnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7ICAvLyBTZWUgdGhlIHNlY3Rpb24gb24gdGhlIERhdGFUcmFuc2ZlciBvYmplY3QuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuXG5cdFx0XHRqUXVlcnkoZWxlbWVudCkuZHJhZ3N0ZXIoe1xuXHRcdFx0XHRlbnRlcjogZnVuY3Rpb24oZHJhZ3N0ZXJFdmVudCwgZXZlbnQpIHtcblx0XHRcdFx0XHRpZiAoaXNfYWN0aXZlKCkpIHtcblx0XHRcdFx0XHRcdCRlbGVtZW50LmFkZENsYXNzKCdkcmFnZ2VkLW92ZXInKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0bGVhdmU6IGZ1bmN0aW9uKGRyYWdzdGVyRXZlbnQsIGV2ZW50KSB7XG5cdFx0XHRcdFx0JGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2RyYWdnZWQtb3ZlcicpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGRyb3A6IGZ1bmN0aW9uKGRyYWdzdGVyRXZlbnQsIGV2ZW50KSB7XG5cdFx0XHRcdFx0JGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2RyYWdnZWQtb3ZlcicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdFx0XHQkcm9vdFNjb3BlLiRvbihcIkxWTC1EUkFHLVNUQVJUXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRlbGVtZW50LmFkZENsYXNzKFwibHZsLXRhcmdldFwiKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQkcm9vdFNjb3BlLiRvbihcIkxWTC1EUkFHLUVORFwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZWxlbWVudC5yZW1vdmVDbGFzcyhcImx2bC10YXJnZXRcIik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn1dKTsiLCJpMThuLmVuX1VTID1cblx0bGFuZ3VhZ2VfbmFtZTogJ0VuZ2xpc2gnXG5cblx0dGl0bGU6ICdUcmFmZmljIEFnZ3JlZ2F0b3InXG5cblx0bG9naW46XG5cdFx0dGl0bGU6ICdMb2dpbidcblxuXHRcdHBhc3N3b3JkOlxuXHRcdFx0dG9vbHRpcDogJ0VudGVyIHBhc3N3b3JkJ1xuXG5cdEFDTDpcblx0XHRydWxlOlxuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRiYWxhbmNlICA6ICdCYWxhbmNlJ1xuXHRcdFx0XHRyZWRpcmVjdCA6ICdSZWRpcmVjdCdcblx0XHRcdFx0bWlycm9yICAgOiAnTWlycm9yJ1xuXHRcdFx0XHRkdWJiaW5nICA6ICdEdWJiaW5nJ1xuXHRcdFx0XHRkcm9wICAgICA6ICdEcm9wJ1xuXHRcdFx0XHRwZXJtaXQgICA6ICdQZXJtaXQnXG5cblx0XHRcdGZpbHRlcjpcblx0XHRcdFx0bm9uZSAgIDogJ05vbmUnXG5cdFx0XHRcdHBlcm1pdCA6ICdQZXJtaXQnXG5cdFx0XHRcdGRyb3AgICA6ICdEcm9wJ1xuXG5cdFx0XHRcdHR5cGU6XG5cdFx0XHRcdFx0ZXRoZXJuZXRfcHJvdG9jb2wgICAgICAgOiAnRXRoZXJUeXBlJ1xuXHRcdFx0XHRcdHNvdXJjZV9NQUNfYWRkcmVzcyAgICAgIDogJ1NvdXJjZSBNQUMgYWRkcmVzcydcblx0XHRcdFx0XHRkZXN0aW5hdGlvbl9NQUNfYWRkcmVzcyA6ICdEZXN0aW5hdGlvbiBNQUMgYWRkcmVzcydcblx0XHRcdFx0XHRzb3VyY2VfSVBfYWRkcmVzcyAgICAgICA6ICdTb3VyY2UgSVAgYWRkcmVzcydcblx0XHRcdFx0XHRkZXN0aW5hdGlvbl9JUF9hZGRyZXNzICA6ICdEZXN0aW5hdGlvbiBJUCBhZGRyZXNzJ1xuXHRcdFx0XHRcdG11bHRpX0lQX2FkZHJlc3MgICAgICAgIDogJ011bHRpIElQIGFkZHJlc3MnXG5cdFx0XHRcdFx0SVBfcHJvdG9jb2wgICAgICAgICAgICAgOiAnSVAgcHJvdG9jb2wnXG5cdFx0XHRcdFx0SVBfcHJvdG9jb2xfc291cmNlICAgICAgOiAnRGVzdGluYXRpb24gcG9ydCdcblx0XHRcdFx0XHRJUF9wcm90b2NvbF9kZXN0aW5hdGlvbiA6ICdTb3VyY2UgcG9ydCdcblx0XHRcdFx0XHRWTEFOICAgICAgICAgICAgICAgICAgICA6ICdWTEFOJ1xuXHRcdFx0XHRcdFZMQU4yICAgICAgICAgICAgICAgICAgIDogJ1ZMQU4yJ1xuXHRcdFx0XHRcdExldmVsNF9kYXRhICAgICAgICAgICAgIDogJ0w0IHBhY2tldCBjb250ZW50IChEUEkpJ1xuXG5cdHBhZ2U6XG5cdFx0cG9ydHM6XG5cdFx0XHR0aXRsZTogJ1BvcnRzJ1xuXG5cdFx0XHRzZnA6ICdTRlAgbW9kdWxlIGluc3RhbGxlZCdcblxuXHRcdFx0c2ZwX2luZm86XG5cdFx0XHRcdHBvcnQ6ICAgICAgICAgJ1BvcnQnXG5cdFx0XHRcdGluZm86ICAgICAgICAgJ1NGUC1tb2R1bGUgaW5mbydcblx0XHRcdFx0aWRlbnRpZmllcjogICAnSWRlbnRpZmllcidcblx0XHRcdFx0c3BlY19jb21wOiAgICAnVHlwZSdcblx0XHRcdFx0dmVuZG9yX25hbWU6ICAnVmVuZG9yJ1xuXHRcdFx0XHRwYXJ0X251bWJlcjogICdQYXJ0IG51bWJlcidcblx0XHRcdFx0dGVtcGVyYXR1cmU6ICAnVGVtcGVyYXR1cmUnXG5cdFx0XHRcdHJ4X3Bvd2VyOiAgICAgJ1JYIHBvd2VyJ1xuXHRcdFx0XHR0eF9wb3dlcjogICAgICdUWCBwb3dlcidcblxuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRyZXNldF9jb3VudGVyczogJ1Jlc2V0IGNvdW50ZXJzJ1xuXHRcdFx0XHRzaG93X2dyYXBoczogJ0dyYXBocydcblxuXHRcdFx0YWRkX2NvbW1lbnQ6ICdlZGl0J1xuXG5cdFx0XHR0YWJsZTpcblx0XHRcdFx0bnVtYmVyICAgICAgIDogJ1BvcnQgTm8nXG5cdFx0XHRcdHJ4ICAgICAgICAgICA6ICdSWCdcblx0XHRcdFx0dHggICAgICAgICAgIDogJ1RYJ1xuXHRcdFx0XHRyeF9yYXRlICAgICAgOiAnUlgsXFxuYml0cmF0ZSdcblx0XHRcdFx0dHhfcmF0ZSAgICAgIDogJ1RYLFxcbmJpdHJhdGUnXG5cdFx0XHRcdHJ4X29jdGV0cyAgICA6ICdSWCxcXG5vY3RldHMnXG5cdFx0XHRcdHJ4X3NpZ25hbCAgICA6ICdSWCxcXG5zaWduYWwnXG5cdFx0XHRcdHR4X29jdGV0cyAgICA6ICdUWCxcXG5vY3RldHMnXG5cdFx0XHRcdG1vZGUgICAgICAgICA6ICdNb2RlJ1xuXHRcdFx0XHRjb21tZW50cyAgICAgOiAnQ29tbWVudHMnXG5cdFx0XHRcdGNyYyAgICAgICAgICA6ICdDUkNcXG5lcnJvcnMnXG5cdFx0XHRcdGRyb3BzICAgICAgICA6ICdEcm9wcGVkXFxucGFja2V0cydcblx0XHRcdFx0cGFyc2VyX2xldmVsIDogJ1BhcnNlclxcbmxldmVsJ1xuXHRcdFx0XHRncmFwaCAgICAgICAgOiAnR3JhcGgnXG5cdFx0XHRcdGRwaSAgICAgICAgICA6ICdEUEknXG5cblx0XHRcdGZvcmNlX3VwX2Rlc2NyaXB0aW9uIDogJ0ZvcmNlIGxpbmsgdXAgd2l0aG91dCBSWCdcblx0XHRcdGxvb3BiYWNrX2Rlc2NyaXB0aW9uIDogJ0ludGVybmFsIHJvdXRpbmcgVFggdG8gUlgnXG5cdFx0XHRsb29wYmFja19jb25maXJtICAgICA6ICdEbyB5b3Ugd2FudCB0byBhY3RpdmF0ZSBpbnRlcm5hbCByb3V0aW5nIFRYIHRvIFJYPydcblxuXHRcdHJvdXRpbmc6XG5cdFx0XHR0aXRsZTogJ1J1bGVzJ1xuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRuZXdfcnVsZSAgICAgICAgIDogJ0FkZCBydWxlJ1xuXHRcdFx0XHRkZWxldGVfYWxsICAgICAgIDogJ0RlbGV0ZSBhbGwnXG5cdFx0XHRcdGVkaXRfcnVsZV9pbnB1dHMgOiAnQ3RybCtFLiBNYW51YWwgY29udHJvbCdcblx0XHRcdFx0ZWRpdF9ydWxlX2lucHV0c190aXRsZSA6ICdNYW51YWwgY29udHJvbCBtb2RlLiBFZGl0IHBvcnRzIGJ5IGVudGVyIHBvcnQgbnVtYmVycyBpbiB0ZXh0YXJlYS4nXG5cdFx0XHRcdGVuYWJsZV9hbGxcdFx0IDogJ0VuYWJsZSBhbGwnXG5cdFx0XHRcdGRpc2FibGVfYWxsICAgICAgOiAnRGlzYWJsZSBhbGwnXG5cblx0XHRcdGRldmVsb3Blcl9tb2RlOiAnWW91IGFyZSBpbiBkZXZlbG9wZXIgbW9kZS4gUnVsZXMgeW91IHNhdmVkIHRoZSBsYXN0IHRpbWUgYXJlIG5vdCB0aGUgc2FtZSBhcyB0aGUgY3VycmVudCBydWxlcyBvbiB0aGUgZGV2aWNlLidcblxuXHRcdFx0cmVzZXQ6ICdSZXNldCBhbGwgcnVsZXMgb24gdGhlIGRldmljZT8nXG5cdFx0XHRjbGVhcjogJ0NsZWFyIGFsbCBydWxlcz8nXG5cblx0XHRcdHJ1bGU6XG5cdFx0XHRcdGlucHV0cyAgOiAnSW5wdXQgcG9ydHMnXG5cdFx0XHRcdG91dHB1dHMgOiAnT3V0cHV0IHBvcnRzJ1xuXG5cdFx0XHRcdG5hbWU6IFwiUnVsZSBObyB7e2lkfX1cIlxuXG5cdFx0XHRcdGRlbGV0ZV9jb25maXJtYXRpb246ICdEZWxldGUgcnVsZSDCq3t7cnVsZX19wrs/J1xuXG5cdFx0XHRcdGlzX2ZpbHRlcmVkOiAnRmlsdGVyZWQnXG5cblx0XHRcdFx0YmFsYW5jZTpcblx0XHRcdFx0XHRieTogJ0JhbGFuY2UgYnknXG5cblx0XHRcdFx0XHRvdXRwdXRfcG9ydHNfcmVxdWlyZWQ6ICdPdXRwdXQgcG9ydHMgcmVxdWlyZWQgZm9yIGJhbGFuY2luZydcblxuXHRcdFx0XHRhY3Rpb246XG5cdFx0XHRcdFx0bG93ZXJfcHJpb3JpdHk6ICdMb3dlciBwcmlvcml0eSdcblx0XHRcdFx0XHRoaWdoZXJfcHJpb3JpdHk6ICdIaWdoZXIgcHJpb3JpdHknXG5cblx0XHRcdFx0XHRkdXBsaWNhdGU6ICdEdXBsaWNhdGUnXG5cdFx0XHRcdFx0ZGVsZXRlOiAnRGVsZXRlJ1xuXG5cdFx0XHRcdFx0YWdncmVnYXRpb246ICdBZ2dyZWdhdGlvbidcblxuXHRcdFx0XHRncmFwaDpcblx0XHRcdFx0XHRncmFwaCAgICAgICA6ICdHcmFwaCdcblx0XHRcdFx0XHRzdW0gICAgICAgICA6ICdTdW0nXG5cdFx0XHRcdFx0aW4gICAgICAgICAgOiAnSW5wdXQnXG5cdFx0XHRcdFx0aW5zICAgICAgICAgOiAnSW5wdXRzJ1xuXHRcdFx0XHRcdG91dCAgICAgICAgIDogJ091dHB1dCdcblx0XHRcdFx0XHRvdXRzICAgICAgICA6ICdPdXRwdXRzJ1xuXHRcdFx0XHRcdHBvcnRfbnVtYmVyIDogJ1BvcnQgTm8nXG5cblx0XHRcdFx0ZmlsdGVyaW5nOlxuXHRcdFx0XHRcdGZpbHRlciA6ICdGaWx0ZXInXG5cdFx0XHRcdFx0dmFsdWUgIDogJ1ZhbHVlJ1xuXHRcdFx0XHRcdG1hc2sgICA6ICdNYXNrJ1xuXG5cdFx0XHRcdFx0c2V0X2ludGVydmFsICA6ICdJbnRlcnZhbCdcblx0XHRcdFx0XHRhZGRfbWFzayAgICAgIDogJ01hc2snXG5cdFx0XHRcdFx0cmVtb3ZlX2ZpbHRlciA6ICdSZW1vdmUnXG5cdFx0XHRcdFx0YWRkX2ZpbHRlciAgICA6ICdBZGQgZmlsdGVyJ1xuXG5cdFx0XHRcdFx0ZXJyb3I6XG5cdFx0XHRcdFx0XHRpbnZhbGlkX21hc2s6ICdJbnZhbGlkIG1hc2snXG5cblx0XHRcdFx0ZXJyb3I6XG5cdFx0XHRcdFx0aW5wdXRfcG9ydHNfcmVxdWlyZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdTcGVjaWZ5IGlucHV0IHBvcnRzJ1xuXHRcdFx0XHRcdG91dHB1dF9wb3J0c19yZXF1aXJlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnU3BlY2lmeSBvdXRwdXQgcG9ydHMnXG5cdFx0XHRcdFx0Y2FuX3JlZGlyZWN0X3RvX2Ffc2luZ2xlX3BvcnRfb25seSAgICAgICAgICAgICAgICAgICAgICA6ICdFYWNoIHJlZGlyZWN0IHJ1bGUgY2FuIGhhdmUgYSBzaW5nbGUgb3V0cHV0IHBvcnQgb25seSdcblx0XHRcdFx0XHRvbmx5X3RoZV9maXJzdF9zdWJwb3J0X29mXzQwZ19wb3J0X2Nhbl9iZV91c2VkX2luX3J1bGVzIDogJ0lmIGEgam9pbnQgcG9ydCBpcyBzZXQgdG8gNDBHIG1vZGUgdGhlbiBvbmx5IHRoZSBmaXJzdCBwb3J0IG9mIHRoaXMgam9pbnQgcG9ydCBjYW4gYmUgdXNlZCBpbiBydWxlcydcblx0XHRcdFx0XHRmaWx0ZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ1RoZXJlXFwncyBhbiBlcnJvciBpbiB0aGlzIHJ1bGVcXCdzIGZpbHRlcnMnXG5cdFx0XHRcdFx0cG9ydF9maWx0ZXJfcmVxdWlyZXNfaXBfcHJvdG9jb2wgICAgICAgICAgICAgICAgICAgICAgICA6ICdZb3UgbXVzdCBmaXJzdCBzZXQgSVAgcHJvdG9jb2wgZmlsdGVyICh1c3VhbGx5IFRDUCBvciBVRFApIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gZmlsdGVyIGJ5IHBvcnQgbnVtYmVyJ1xuXHRcdFx0XHRcdHRvb19tYW55X2ludGVydmFsc19pbl9maWx0ZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnQXBwbHlpbmcgcnVsZXMgZmFpbGVkOiB0b28gbWFueSBpbnRlcnZhbHMgaW4gcnVsZXNcXCcgZmlsdGVycydcblx0XHRcdFx0XHRyZWRpcmVjdGluZ190b19zZXZlcmFsX3BvcnRzX2lzX2JhbGFuY2luZyAgICAgICAgICAgICAgIDogJ1JlZGlyZWN0aW5nIHRvIHNldmVyYWwgcG9ydHMgaXMgYWN0dWFsbHkgYmFsYW5jaW5nJ1xuXHRcdFx0XHRcdGV4aXRfcG9ydF9lZGl0aW5nX21vZGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnRXhpdCBwb3J0IGVkaXRpbmcgbW9kZSdcblx0XHRcdFx0XHRpbnZhbGlkX2lucHV0c190ZXh0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ0ludmFsaWQgcnVsZSBpbnB1dHMgdGV4dCdcblx0XHRcdFx0XHRpbnZhbGlkX291dHB1dHNfdGV4dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ0ludmFsaWQgcnVsZSBvdXRwdXRzIHRleHQnXG5cdFx0XHRcdFx0aW52YWxpZF9tdWx0aV9pcF9jb3VudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdNYXhpbXVtIG51bWJlciBpcyB7e2NvdW50fX0nXG5cdFx0XHRcdFx0aW52YWxpZF9mb3JtYXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdJbnZhbGlkIGZvcm1hdCdcblxuXHRcdFx0c3RhdHVzOlxuXHRcdFx0XHRsb2FkaW5nX3J1bGVzX2ludG9fZGV2aWNlIDogJ0xvYWRpbmcgcnVsZXMgaW50byB0aGUgZGV2aWNlJ1xuXHRcdFx0XHRyZWFkaW5nX3J1bGVzX2Zyb21fZGV2aWNlIDogJ1JlYWRpbmcgcnVsZXMnXG5cdFx0XHRcdHJ1bGVzX3NhdmVkICAgICAgICAgICAgICAgOiAnUnVsZXMgc2F2ZWQnXG5cdFx0XHRcdGVycm9yc19pbl9ydWxlcyAgICAgICAgICAgOiAnVGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgcnVsZXMnXG5cdFx0XHRcdGFwcGx5aW5nX3J1bGVzICAgICAgICAgICAgOiAnQXBwbHlpbmcgcnVsZXMnXG5cblx0XHRzZXR0aW5nczpcblx0XHRcdHRpdGxlOiAnU2V0dGluZ3MnXG5cblx0XHRcdG1hbnVhbDogJ01hbnVhbCdcblx0XHRcdGRoY3A6ICdESENQJ1xuXG5cdFx0XHRpcF9hZGRyZXNzOiAnSVAgYWRkcmVzcydcblx0XHRcdHN1Ym5ldF9tYXNrOiAnU3VibmV0IG1hc2snXG5cdFx0XHRnYXRld2F5OiAnR2F0ZXdheSdcblx0XHRcdHBsYXRmb3JtOiAnUGxhdGZvcm0nXG5cblx0XHRcdGNoYW5nZV9wYXNzd29yZCAgICAgICAgOiAnQ2hhbmdlIHBhc3N3b3JkJ1xuXHRcdFx0bmV3X3Bhc3N3b3JkICAgICBcdCAgIDogJ05ldyBwYXNzd29yZCdcblx0XHRcdGNvbmZpcm1fcGFzc3dvcmQgICAgICAgOiAnQ29uZmlybSBwYXNzd29yZCdcblx0XHRcdHBhc3N3b3JkX2NoYW5nZWQgICAgICAgOiAnUGFzc3dvcmQgY2hhbmdlZCdcblx0XHRcdGN1cnJlbnRfcGFzc3dvcmQgICAgICAgOiAn0KF1cnJlbnQgcGFzc3dvcmQnXG5cblx0XHRcdGxpY2Vuc2U6XG5cdFx0XHRcdHRpdGxlOiAnTGljZW5zaW5nJ1xuXHRcdFx0XHRkcmFnX25fZHJvcDogJ0Ryb3AgdGhlIGxpY2Vuc2UgZmlsZSBoZXJlJ1xuXG5cdFx0XHRcdHNlcmlhbDogJ0luIG9yZGVyIHRvIHB1cmNoYXNlIHRoZSBsaWNlbmNlIHlvdSB3aWxsIG5lZWQgdGhlIGRldmljZSBzZXJpYWwgbnVtYmVyJ1xuXHRcdFx0XHRzZXJpYWxfZXh0cmE6ICdFYWNoIGxpY2Vuc2UgY29ycmVzcG9uZHMgdG8gYSBzcGVjaWZpYyBzZXQgb2YgZmVhdHVyZXMnXG5cblx0XHRcdGZpcm13YXJlOlxuXHRcdFx0XHR0aXRsZTogJ1VwZGF0aW5nIGRldmljZSBmaXJtd2FyZSdcblx0XHRcdFx0ZHJhZ19uX2Ryb3A6ICdEcm9wIHRoZSBmaXJtd2FyZSBmaWxlIGhlcmUnXG5cblx0XHRcdGFjdGlvbjpcblx0XHRcdFx0cmVzZXQ6ICdSZXNldCBhbGwgc2V0dGluZ3MnXG5cblx0XHRcdGVycm9yOlxuXHRcdFx0XHRmb3JtX2Vycm9yczogJ1RoZSB2YWx1ZXMgeW91IGVudGVyZWQgaGF2ZSBlcnJvcnMnXG5cblx0XHRcdFx0aXBfYWRkcmVzc19yZXF1aXJlZDogJ0VudGVyIGFuIElQIGFkZHJlc3MnXG5cdFx0XHRcdGludmFsaWRfaXBfYWRkcmVzczogJ0ludmFsaWQgSVAgYWRkcmVzcydcblxuXHRcdFx0XHRzdWJuZXRfbWFza19yZXF1aXJlZDogJ0VudGVyIGEgc3VibmV0IG1hc2snXG5cdFx0XHRcdGludmFsaWRfc3VibmV0X21hc2s6ICdJbnZhbGlkIHN1Ym5ldCBtYXNrJ1xuXG5cdFx0XHRcdGdhdGV3YXlfcmVxdWlyZWQ6ICdFbnRlciBhIGdhdGV3YXkgSVAgYWRkcmVzcydcblx0XHRcdFx0aW52YWxpZF9nYXRld2F5OiAnSW52YWxpZCBnYXRld2F5IElQIGFkZHJlc3MnXG5cblx0XHRcdFx0cGFzc3dvcmRfcmVxdWlyZWQ6ICdFbnRlciBhIHBhc3N3b3JkJ1xuXG5cdFx0XHRzdGF0dXM6XG5cdFx0XHRcdHVwbG9hZGluZ19maXJtd2FyZTogJ1VwbG9hZGluZyBmaXJtd2FyZSdcblx0XHRcdFx0dXBkYXRpbmdfZmlybXdhcmU6ICdVcGRhdGluZyBmaXJtd2FyZS4gV2FpdC4uLidcblx0XHRcdFx0dmFsaWRhdGluZ19maXJtd2FyZTogJ1ZhbGlkYXRpbmcgZmlybXdhcmUnXG5cdFx0XHRcdGZpcm13YXJlX3VwZGF0ZV9mYWlsZWQ6ICdGaXJtd2FyZSB1cGRhdGUgZmFpbGVkJ1xuXG5cdFx0XHRcdHVwbG9hZGluZ19saWNlbnNlOiAnVXBsb2FkaW5nIGxpY2Vuc2UnXG5cdFx0XHRcdHZhbGlkYXRpbmdfbGljZW5zZTogJ1ZhbGlkYXRpbmcgbGljZW5zZSdcblx0XHRcdFx0bGljZW5zZV91cGRhdGVfZmFpbGVkOiAnTGljZW5zZSB1cGRhdGUgZmFpbGVkJ1xuXG5cdFx0XHRcdHJlYm9vdGluZzogJ1NldHRpbmdzIHNhdmVkLiBSZWJvb3RpbmcgZGV2aWNlLi4uJ1xuXG5cdFx0ZGVidWc6XG5cdFx0XHR0aXRsZTogJ0RlYnVnJ1xuXG5cdFx0XHRjb21tYW5kOlxuXHRcdFx0XHRuYW1lICAgICAgIDogJ0NvbW1hbmQnXG5cdFx0XHRcdHBhcmFtZXRlcnMgOiAnUGFyYW1ldGVycydcblx0XHRcdFx0b3V0cHV0ICAgICA6ICdSZXN1bHQnXG5cblx0XHRcdFx0b3V0cHV0X21vZGU6XG5cdFx0XHRcdFx0dHJlZTogJ3RyZWUnXG5cdFx0XHRcdFx0Y29kZTogJ2NvZGUnXG5cblx0XHRcdFx0ZXJyb3I6XG5cdFx0XHRcdFx0Y29tbWFuZF9uYW1lX3JlcXVpcmVkICAgICAgIDogJ0VudGVyIGNvbW1hbmQgbmFtZSdcblx0XHRcdFx0XHRjb21tYW5kX3BhcmFtZXRlcnNfcmVxdWlyZWQgOiAnRW50ZXIgY29tbWFuZCBwYXJhbWV0ZXJzJ1xuXHRcdFx0XHRcdGpzb246ICdTeW50YXggZXJyb3IgaW4gdGhlIGlucHV0IEpTT046XFxuXFxue3tlcnJvcn19J1xuXG5cdFx0XHRjb21tYW5kczpcblx0XHRcdFx0bmFtZTogJ0NvbW1hbmRzIChiYXRjaCknXG5cblx0XHRcdFx0ZXJyb3I6XG5cdFx0XHRcdFx0Y29tbWFuZHNfcmVxdWlyZWQ6ICdFbnRlciBjb21tYW5kcydcblxuXHRcdFx0XHRcdGJhdGNoX2Zvcm1hdDogJ0ludmFsaWQgSnNvbiBScGMgYmF0Y2ggZm9ybWF0LiBJdCBtdXN0IGJlIGFuIGFycmF5IG9mIEpzb24gUnBjIGNvbW1hbmRzLidcblx0XHRcdFx0XHRiYXRjaF9qc29uOiAnU3ludGV4IGVycm9yIGluIGJhdGNoIGlucHV0IEpTT046XFxuXFxue3tlcnJvcn19J1xuXG5cdFx0XHRjb25maWd1cmF0aW9uOlxuXHRcdFx0XHRzZWN0aW9uX3RpdGxlOiAnRGV2aWNlIGNvbmZpZ3VyYXRpb24nXG5cdFx0XHRcdG91dHB1dF90aXRsZTogJ0NvbmZpZ3VyYXRpb24nXG5cblx0XHRcdFx0cmVmcmVzaGluZzogJ1JlZnJlc2hpbmcuLi4nXG5cblx0XHRcdFx0ZG93bmxvYWQ6ICdkb3dubG9hZCdcblx0XHRcdFx0ZG93bmxvYWRfYmF0Y2g6ICdiYXRjaCdcblx0XHRcdFx0cG9ydHNldCAgICAgICA6ICdQb3J0c2V0J1xuXHRcdFx0XHRwb3J0cyAgICAgICAgIDogJ1BvcnRzJ1xuXHRcdFx0XHRoYXNoX3Byb2ZpbGUgIDogJ0hhc2hpbmcgcHJvZmlsZSdcblx0XHRcdFx0bGJnICAgICAgICAgICA6ICdMb2FkIEJhbGFuY2luZyBHcm91cHMnXG5cdFx0XHRcdG1pcnJvcl9ncm91cHMgOiAnTWlycm9yaW5nIEdyb3Vwcydcblx0XHRcdFx0bWFwcGVycyAgICAgICA6ICdNYXBwZXJzJ1xuXHRcdFx0XHRhY2wgICAgICAgICAgIDogJ0FjY2VzcyBDb250cm9sIExpc3RzJ1xuXHRcdFx0XHRuZXR3b3JrICAgICAgIDogJ05ldHdvcmsnXG5cdFx0XHRcdHJvdXRpbmcgICAgICAgOiAnUnVsZXMnXG5cdFx0XHRcdHRhX3J1bGVzICAgICAgOiAnVGEgcnVsZXMnXG5cdFx0XHRcdHVzZXJzICAgICAgICAgOiAnVXNlcnMnXG5cblx0XHRcdGFkbWluaXN0cmF0aW9uOlxuXHRcdFx0XHRzZWN0aW9uX3RpdGxlOiAnQWRtaW5pc3RyYXRpb24nXG5cdFx0XHRcdGNvbmZpZ3VyYXRpb246ICdDb25maWd1cmF0aW9uJ1xuXHRcdFx0XHRsYW5ndWFnZTogJ0xhbmd1YWdlJ1xuXG5cdFx0XHRcdGVycm9yOlxuXHRcdFx0XHRcdGNvbmZpZ3VyYXRpb25fcmVxdWlyZWQ6ICdDb25maWd1cmF0aW9uIEpTT04gcmVxdWlyZWQnXG5cdFx0XHRcdFx0Y29uZmlndXJhdGlvbl9qc29uOiAnU3ludGF4IGVycm9yIGluIGRldmljZSBjb25maWd1cmF0aW9uIEpTT046XFxuXFxue3tlcnJvcn19J1xuXG5cdFx0XHRwcm9ncmFtX2luZm9ybWF0aW9uOlxuXHRcdFx0XHR2ZXJzaW9uOiAnVmVyc2lvbidcblx0XHRcdFx0cmV2aXNpb246ICdyZXZpc2lvbidcblxuXHRcdFx0ZXJyb3I6XG5cdFx0XHRcdGdlbmVyaWM6ICdFcnJvciB7e3N0YXR1c319OiB7e2RhdGF9fSdcblxuXHRcdFx0bm90aWZpY2F0aW9uOlxuXHRcdFx0XHRyZXN0YXJ0X2d1bHA6ICdSZXN0YXJ0IHlvdXIgZ3VscCBub3cnXG5cdFx0YWRtaW46XG5cdFx0XHR0aXRsZTogJ0FkbWluaXN0cmF0aW9uJ1xuXG5cdGFjdGlvbjpcblx0XHRhcHBseSAgIDogJ0FwcGx5J1xuXHRcdGV4ZWN1dGUgOiAnRXhlY3V0ZSdcblx0XHRzYXZlICAgIDogJ1NhdmUnXG5cdFx0b2sgICAgICA6ICdPSydcblx0XHRjYW5jZWwgIDogJ0NhbmNlbCdcblx0XHR5ZXMgICAgIDogJ1llcydcblx0XHRubyAgICAgIDogJ05vJ1xuXG5cdGZpbGVfdXBsb2FkOlxuXHRcdGNob29zZV9maWxlOiAnQ2hvb3NlIGEgZmlsZSdcblx0XHR1cGxvYWRpbmc6ICdVcGxvYWRpbmcgZmlsZeKApidcblxuXHRtZW51OlxuXHRcdGNvbmZpZ3VyYXRpb246XG5cdFx0XHR0aXRsZTogJ0NvbmZpZ3VyYXRpb24nXG5cblx0XHRcdG9wZW46XG5cdFx0XHRcdHRpdGxlOiAnT3Blbidcblx0XHRcdFx0dG9vbHRpcDogJ0xvYWQgY29uZmlndXJhdGlvbiBmcm9tIGZpbGUnXG5cblx0XHRcdHNhdmU6XG5cdFx0XHRcdHRpdGxlOiAnU2F2ZSdcblx0XHRcdFx0dG9vbHRpcDogJ1NhdmUgY29uZmlndXJhdGlvbiB0byBmaWxlJ1xuXG5cdFx0bG9nb3V0OiAnTG9nb3V0J1xuXG5cdFx0bG9nOiAnTG9nJ1xuXHRcdGRlYnVnOiAnRGVidWcnXG5cblx0bmV0d29yazpcblx0XHRyYXRlOlxuXHRcdFx0YnBzICA6ICdicHMnXG5cdFx0XHRrYnBzIDogJ2ticHMnXG5cdFx0XHRNYnBzIDogJ01icHMnXG5cdFx0XHRHYnBzIDogJ0dicHMnXG5cblx0ZXJyb3I6XG5cdFx0amF2YXNjcmlwdDogJ0phdmFzY3JpcHQgaXMgZGlzYWJsZWQgaW4geW91ciB3ZWIgYnJvd3Nlci4gRW5hYmxlIEphdmFzY3JpcHQgaW4gb3JkZXIgdG8gbWFrZSB0aGlzIGFwcGxpY2F0aW9uIHdvcmsuJ1xuXHRcdGdlbmVyaWM6ICdFcnJvcjoge3ttZXNzYWdlfX0nXG5cdFx0d3JvbmdfcGFzc3dvcmQ6ICdXcm9uZyBwYXNzd29yZCdcblx0XHR1bmF1dGhlbnRpY2F0ZWQ6ICdUaGUgcmVxdWVzdGVkIG9wZXJhdGlvbiByZXF1aXJlcyBhdXRoZW50aWNhdGlvbidcblx0XHRvbGRfYnJvd3NlcjogJ1VwZGF0ZSB5b3VyIGJyb3dzZXIuIFN1cHBvcnRlZCBicm93c2Vyczoge3ticm93c2Vyc319J1xuXG5cdFx0ZGV2aWNlOlxuXHRcdFx0cmVzZXRfZmFpbGVkOiAnRGV2aWNlIHJlc2V0IGZhaWxlZCdcblxuXHRjb25maWd1cmF0aW9uOlxuXHRcdHN0YXR1czpcblx0XHRcdGFwcGxpY2F0aW9uX3Jlc3RhcnRpbmc6ICdSZXN0YXJ0aW5nIHRoZSBhcHBsaWNhdGlvbidcblx0XHRcdHNhdmVkOiAnQ29uZmlndXJhdGlvbiBzYXZlZCdcblx0XHRcdGFwcGx5aW5nOiAnQXBwbHlpbmcgY29uZmlndXJhdGlvbidcblx0XHRcdGxvYWRlZDogJ0NvbmZpZ3VyYXRpb24gbG9hZGVkJ1xuXHRcdFx0ZGVsZXRlZDogJ0NvbmZpZ3VyYXRpb24gZGVsZXRlZCdcblxuXHRcdGVycm9yOlxuXHRcdFx0ZmlsdGVyX3Nob3VsZF9ub3RfaGF2ZV9hX21hc2s6ICdGaWx0ZXIgwqt7e2ZpbHRlcn19wrsgc2hvdWxkIG5vdCBoYXZlIGEgbWFzaydcblx0XHRcdGludmFsaWQ6ICdJbnZhbGlkIGNvbmZpZ3VyYXRpb24nXG5cdFx0XHRpbmNvbnNpc3RlbnQ6ICdUaGUgY29uZmlndXJhdGlvbiBkb2VzblxcJ3QgZml0IHRoaXMgZGV2aWNlJ1xuXHRcdFx0Y29uZmlndXJhdGlvbl91cGxvYWRfZmFpbGVkOiAnQ29uZmlndXJhdGlvbiB1cGxvYWQgZmFpbGVkJ1xuXHRcdFx0dG9vX21hbnlfaW50ZXJ2YWxzX2luX2ZpbHRlcnM6ICdVbmFibGUgdG8gYXBwbHkgcnVsZXM6IHRvbyBtYW55IGludGVydmFscyBpbiBmaWx0ZXJzJ1xuXHRcdFx0bWF4X21pcnJvcmluZ19wb3J0czogJ1RvbyBtYW55IG1pcnJvcmluZyBkZXN0aW5hdGlvbiBwb3J0cyAobWF4IHt7bWF4fX0pJ1xuXHRcdFx0bWF4X2FjbHM6ICdUb28gbWFueSBpbnB1dCBwb3J0cyBpbiBydWxlcyAobWF4IHt7bWF4fX0pJ1xuXG5cdFx0Y29uZmlybV9yZXNldDogJ0FsbCB0aGUgc2V0dGluZ3Mgd2lsbCBiZSByZXNldCBvbiB0aGUgZGV2aWNlLiBBcmUgeW91IHN1cmU/J1xuXHRcdGNvbmZpcm1fZGVsZXRpb246ICdEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIGNvbmZpZ3VyYXRpb24gwqt7e25hbWV9fcK7PydcblxuXHRkZXZpY2U6XG5cdFx0c3RhdHVzOlxuXHRcdFx0dW5rbm93bl9wbGF0Zm9ybTogJ1Vua25vd24gcGxhdGZvcm0nXG5cdFx0XHRjb25uZWN0aW5nOiAnV2FpdGluZyBmb3IgZGV2aWNlLi4uJ1xuXHRcdFx0YXBwbHlpbmdfcnVsZXM6ICdBcHBseWluZyBydWxlcyBvbiB0aGUgZGV2aWNlJ1xuXHRcdFx0cmVib290aW5nOiAnUmVib290aW5nIGRldmljZS4gV2FpdC4uLidcblx0XHRcdHJvdXRpbmdfY29uZmlndXJhdGlvbl9hcHBsaWVkOiAnUnVsZXMgaGF2ZSBiZWVuIHNhdmVkJ1xuXG5cdGdyYXBoOlxuXHRcdHRpbWU6XG5cdFx0XHRtaW51dGVzOiAnTWludXRlcydcblx0XHRcdGhvdXJzICA6ICdIb3Vycydcblx0XHRcdGRheXMgICA6ICdEYXlzJ1xuXHRcdFx0bW9udGhzIDogJ01vbnRocydcblxuXHRcdHZhbHVlOlxuXHRcdFx0dHlwZTpcblx0XHRcdFx0cmF0ZSAgICAgOiAnUmF0ZSdcblx0XHRcdFx0cnhfcmF0ZSAgOiAnUlggcmF0ZSdcblx0XHRcdFx0dHhfcmF0ZSAgOiAnVFggcmF0ZSdcblx0XHRcdFx0Y3JjICAgICAgOiAnQ1JDIGVycm9ycydcblx0XHRcdFx0ZHJvcHMgICAgOiAnRHJvcHMnXG5cblx0c3RhdHVzOlxuXHRcdGxvYWRpbmdfcGFnZTogJ0xvYWRpbmcgcGFnZSdcblxuXHRlbnRlcl9zeXN0ZW1fcGFzc3dvcmQ6ICdFbnRlciBzeXN0ZW0gcGFzc3dvcmQnXG5cblx0b3BlcmF0aW9uc19wZW5kaW5nX29uX3BhZ2U6ICdPcGVyYXRpb25zIHBlbmRpbmcgb24gdGhpcyBwYWdlLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsIGV2ZXJ5dGhpbmcgYW5kIG5hdmlnYXRlIGF3YXkgZnJvbSB0aGlzIHBhZ2U/J1xuXG5cdGRldmljZV9pc19ib290aW5nOiAnRGV2aWNlIGlzIGJvb3RpbmcnIiwiKGZ1bmN0aW9uKCkge1xuICBpMThuLmVuX1VTID0ge1xuICAgIGxhbmd1YWdlX25hbWU6ICdFbmdsaXNoJyxcbiAgICB0aXRsZTogJ1RyYWZmaWMgQWdncmVnYXRvcicsXG4gICAgbG9naW46IHtcbiAgICAgIHRpdGxlOiAnTG9naW4nLFxuICAgICAgcGFzc3dvcmQ6IHtcbiAgICAgICAgdG9vbHRpcDogJ0VudGVyIHBhc3N3b3JkJ1xuICAgICAgfVxuICAgIH0sXG4gICAgQUNMOiB7XG4gICAgICBydWxlOiB7XG4gICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgIGJhbGFuY2U6ICdCYWxhbmNlJyxcbiAgICAgICAgICByZWRpcmVjdDogJ1JlZGlyZWN0JyxcbiAgICAgICAgICBtaXJyb3I6ICdNaXJyb3InLFxuICAgICAgICAgIGR1YmJpbmc6ICdEdWJiaW5nJyxcbiAgICAgICAgICBkcm9wOiAnRHJvcCcsXG4gICAgICAgICAgcGVybWl0OiAnUGVybWl0J1xuICAgICAgICB9LFxuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICBub25lOiAnTm9uZScsXG4gICAgICAgICAgcGVybWl0OiAnUGVybWl0JyxcbiAgICAgICAgICBkcm9wOiAnRHJvcCcsXG4gICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgZXRoZXJuZXRfcHJvdG9jb2w6ICdFdGhlclR5cGUnLFxuICAgICAgICAgICAgc291cmNlX01BQ19hZGRyZXNzOiAnU291cmNlIE1BQyBhZGRyZXNzJyxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uX01BQ19hZGRyZXNzOiAnRGVzdGluYXRpb24gTUFDIGFkZHJlc3MnLFxuICAgICAgICAgICAgc291cmNlX0lQX2FkZHJlc3M6ICdTb3VyY2UgSVAgYWRkcmVzcycsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbl9JUF9hZGRyZXNzOiAnRGVzdGluYXRpb24gSVAgYWRkcmVzcycsXG4gICAgICAgICAgICBtdWx0aV9JUF9hZGRyZXNzOiAnTXVsdGkgSVAgYWRkcmVzcycsXG4gICAgICAgICAgICBJUF9wcm90b2NvbDogJ0lQIHByb3RvY29sJyxcbiAgICAgICAgICAgIElQX3Byb3RvY29sX3NvdXJjZTogJ0Rlc3RpbmF0aW9uIHBvcnQnLFxuICAgICAgICAgICAgSVBfcHJvdG9jb2xfZGVzdGluYXRpb246ICdTb3VyY2UgcG9ydCcsXG4gICAgICAgICAgICBWTEFOOiAnVkxBTicsXG4gICAgICAgICAgICBWTEFOMjogJ1ZMQU4yJyxcbiAgICAgICAgICAgIExldmVsNF9kYXRhOiAnTDQgcGFja2V0IGNvbnRlbnQgKERQSSknXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwYWdlOiB7XG4gICAgICBwb3J0czoge1xuICAgICAgICB0aXRsZTogJ1BvcnRzJyxcbiAgICAgICAgc2ZwOiAnU0ZQIG1vZHVsZSBpbnN0YWxsZWQnLFxuICAgICAgICBzZnBfaW5mbzoge1xuICAgICAgICAgIHBvcnQ6ICdQb3J0JyxcbiAgICAgICAgICBpbmZvOiAnU0ZQLW1vZHVsZSBpbmZvJyxcbiAgICAgICAgICBpZGVudGlmaWVyOiAnSWRlbnRpZmllcicsXG4gICAgICAgICAgc3BlY19jb21wOiAnVHlwZScsXG4gICAgICAgICAgdmVuZG9yX25hbWU6ICdWZW5kb3InLFxuICAgICAgICAgIHBhcnRfbnVtYmVyOiAnUGFydCBudW1iZXInLFxuICAgICAgICAgIHRlbXBlcmF0dXJlOiAnVGVtcGVyYXR1cmUnLFxuICAgICAgICAgIHJ4X3Bvd2VyOiAnUlggcG93ZXInLFxuICAgICAgICAgIHR4X3Bvd2VyOiAnVFggcG93ZXInXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgIHJlc2V0X2NvdW50ZXJzOiAnUmVzZXQgY291bnRlcnMnLFxuICAgICAgICAgIHNob3dfZ3JhcGhzOiAnR3JhcGhzJ1xuICAgICAgICB9LFxuICAgICAgICBhZGRfY29tbWVudDogJ2VkaXQnLFxuICAgICAgICB0YWJsZToge1xuICAgICAgICAgIG51bWJlcjogJ1BvcnQgTm8nLFxuICAgICAgICAgIHJ4OiAnUlgnLFxuICAgICAgICAgIHR4OiAnVFgnLFxuICAgICAgICAgIHJ4X3JhdGU6ICdSWCxcXG5iaXRyYXRlJyxcbiAgICAgICAgICB0eF9yYXRlOiAnVFgsXFxuYml0cmF0ZScsXG4gICAgICAgICAgcnhfb2N0ZXRzOiAnUlgsXFxub2N0ZXRzJyxcbiAgICAgICAgICByeF9zaWduYWw6ICdSWCxcXG5zaWduYWwnLFxuICAgICAgICAgIHR4X29jdGV0czogJ1RYLFxcbm9jdGV0cycsXG4gICAgICAgICAgbW9kZTogJ01vZGUnLFxuICAgICAgICAgIGNvbW1lbnRzOiAnQ29tbWVudHMnLFxuICAgICAgICAgIGNyYzogJ0NSQ1xcbmVycm9ycycsXG4gICAgICAgICAgZHJvcHM6ICdEcm9wcGVkXFxucGFja2V0cycsXG4gICAgICAgICAgcGFyc2VyX2xldmVsOiAnUGFyc2VyXFxubGV2ZWwnLFxuICAgICAgICAgIGdyYXBoOiAnR3JhcGgnLFxuICAgICAgICAgIGRwaTogJ0RQSSdcbiAgICAgICAgfSxcbiAgICAgICAgZm9yY2VfdXBfZGVzY3JpcHRpb246ICdGb3JjZSBsaW5rIHVwIHdpdGhvdXQgUlgnLFxuICAgICAgICBsb29wYmFja19kZXNjcmlwdGlvbjogJ0ludGVybmFsIHJvdXRpbmcgVFggdG8gUlgnLFxuICAgICAgICBsb29wYmFja19jb25maXJtOiAnRG8geW91IHdhbnQgdG8gYWN0aXZhdGUgaW50ZXJuYWwgcm91dGluZyBUWCB0byBSWD8nXG4gICAgICB9LFxuICAgICAgcm91dGluZzoge1xuICAgICAgICB0aXRsZTogJ1J1bGVzJyxcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgbmV3X3J1bGU6ICdBZGQgcnVsZScsXG4gICAgICAgICAgZGVsZXRlX2FsbDogJ0RlbGV0ZSBhbGwnLFxuICAgICAgICAgIGVkaXRfcnVsZV9pbnB1dHM6ICdDdHJsK0UuIE1hbnVhbCBjb250cm9sJyxcbiAgICAgICAgICBlZGl0X3J1bGVfaW5wdXRzX3RpdGxlOiAnTWFudWFsIGNvbnRyb2wgbW9kZS4gRWRpdCBwb3J0cyBieSBlbnRlciBwb3J0IG51bWJlcnMgaW4gdGV4dGFyZWEuJyxcbiAgICAgICAgICBlbmFibGVfYWxsOiAnRW5hYmxlIGFsbCcsXG4gICAgICAgICAgZGlzYWJsZV9hbGw6ICdEaXNhYmxlIGFsbCdcbiAgICAgICAgfSxcbiAgICAgICAgZGV2ZWxvcGVyX21vZGU6ICdZb3UgYXJlIGluIGRldmVsb3BlciBtb2RlLiBSdWxlcyB5b3Ugc2F2ZWQgdGhlIGxhc3QgdGltZSBhcmUgbm90IHRoZSBzYW1lIGFzIHRoZSBjdXJyZW50IHJ1bGVzIG9uIHRoZSBkZXZpY2UuJyxcbiAgICAgICAgcmVzZXQ6ICdSZXNldCBhbGwgcnVsZXMgb24gdGhlIGRldmljZT8nLFxuICAgICAgICBjbGVhcjogJ0NsZWFyIGFsbCBydWxlcz8nLFxuICAgICAgICBydWxlOiB7XG4gICAgICAgICAgaW5wdXRzOiAnSW5wdXQgcG9ydHMnLFxuICAgICAgICAgIG91dHB1dHM6ICdPdXRwdXQgcG9ydHMnLFxuICAgICAgICAgIG5hbWU6IFwiUnVsZSBObyB7e2lkfX1cIixcbiAgICAgICAgICBkZWxldGVfY29uZmlybWF0aW9uOiAnRGVsZXRlIHJ1bGUgwqt7e3J1bGV9fcK7PycsXG4gICAgICAgICAgaXNfZmlsdGVyZWQ6ICdGaWx0ZXJlZCcsXG4gICAgICAgICAgYmFsYW5jZToge1xuICAgICAgICAgICAgYnk6ICdCYWxhbmNlIGJ5JyxcbiAgICAgICAgICAgIG91dHB1dF9wb3J0c19yZXF1aXJlZDogJ091dHB1dCBwb3J0cyByZXF1aXJlZCBmb3IgYmFsYW5jaW5nJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICBsb3dlcl9wcmlvcml0eTogJ0xvd2VyIHByaW9yaXR5JyxcbiAgICAgICAgICAgIGhpZ2hlcl9wcmlvcml0eTogJ0hpZ2hlciBwcmlvcml0eScsXG4gICAgICAgICAgICBkdXBsaWNhdGU6ICdEdXBsaWNhdGUnLFxuICAgICAgICAgICAgXCJkZWxldGVcIjogJ0RlbGV0ZScsXG4gICAgICAgICAgICBhZ2dyZWdhdGlvbjogJ0FnZ3JlZ2F0aW9uJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JhcGg6IHtcbiAgICAgICAgICAgIGdyYXBoOiAnR3JhcGgnLFxuICAgICAgICAgICAgc3VtOiAnU3VtJyxcbiAgICAgICAgICAgIFwiaW5cIjogJ0lucHV0JyxcbiAgICAgICAgICAgIGluczogJ0lucHV0cycsXG4gICAgICAgICAgICBvdXQ6ICdPdXRwdXQnLFxuICAgICAgICAgICAgb3V0czogJ091dHB1dHMnLFxuICAgICAgICAgICAgcG9ydF9udW1iZXI6ICdQb3J0IE5vJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsdGVyaW5nOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICdGaWx0ZXInLFxuICAgICAgICAgICAgdmFsdWU6ICdWYWx1ZScsXG4gICAgICAgICAgICBtYXNrOiAnTWFzaycsXG4gICAgICAgICAgICBzZXRfaW50ZXJ2YWw6ICdJbnRlcnZhbCcsXG4gICAgICAgICAgICBhZGRfbWFzazogJ01hc2snLFxuICAgICAgICAgICAgcmVtb3ZlX2ZpbHRlcjogJ1JlbW92ZScsXG4gICAgICAgICAgICBhZGRfZmlsdGVyOiAnQWRkIGZpbHRlcicsXG4gICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICBpbnZhbGlkX21hc2s6ICdJbnZhbGlkIG1hc2snXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgaW5wdXRfcG9ydHNfcmVxdWlyZWQ6ICdTcGVjaWZ5IGlucHV0IHBvcnRzJyxcbiAgICAgICAgICAgIG91dHB1dF9wb3J0c19yZXF1aXJlZDogJ1NwZWNpZnkgb3V0cHV0IHBvcnRzJyxcbiAgICAgICAgICAgIGNhbl9yZWRpcmVjdF90b19hX3NpbmdsZV9wb3J0X29ubHk6ICdFYWNoIHJlZGlyZWN0IHJ1bGUgY2FuIGhhdmUgYSBzaW5nbGUgb3V0cHV0IHBvcnQgb25seScsXG4gICAgICAgICAgICBvbmx5X3RoZV9maXJzdF9zdWJwb3J0X29mXzQwZ19wb3J0X2Nhbl9iZV91c2VkX2luX3J1bGVzOiAnSWYgYSBqb2ludCBwb3J0IGlzIHNldCB0byA0MEcgbW9kZSB0aGVuIG9ubHkgdGhlIGZpcnN0IHBvcnQgb2YgdGhpcyBqb2ludCBwb3J0IGNhbiBiZSB1c2VkIGluIHJ1bGVzJyxcbiAgICAgICAgICAgIGZpbHRlcnM6ICdUaGVyZVxcJ3MgYW4gZXJyb3IgaW4gdGhpcyBydWxlXFwncyBmaWx0ZXJzJyxcbiAgICAgICAgICAgIHBvcnRfZmlsdGVyX3JlcXVpcmVzX2lwX3Byb3RvY29sOiAnWW91IG11c3QgZmlyc3Qgc2V0IElQIHByb3RvY29sIGZpbHRlciAodXN1YWxseSBUQ1Agb3IgVURQKSBpbiBvcmRlciB0byBiZSBhYmxlIHRvIGZpbHRlciBieSBwb3J0IG51bWJlcicsXG4gICAgICAgICAgICB0b29fbWFueV9pbnRlcnZhbHNfaW5fZmlsdGVyczogJ0FwcGx5aW5nIHJ1bGVzIGZhaWxlZDogdG9vIG1hbnkgaW50ZXJ2YWxzIGluIHJ1bGVzXFwnIGZpbHRlcnMnLFxuICAgICAgICAgICAgcmVkaXJlY3RpbmdfdG9fc2V2ZXJhbF9wb3J0c19pc19iYWxhbmNpbmc6ICdSZWRpcmVjdGluZyB0byBzZXZlcmFsIHBvcnRzIGlzIGFjdHVhbGx5IGJhbGFuY2luZycsXG4gICAgICAgICAgICBleGl0X3BvcnRfZWRpdGluZ19tb2RlOiAnRXhpdCBwb3J0IGVkaXRpbmcgbW9kZScsXG4gICAgICAgICAgICBpbnZhbGlkX2lucHV0c190ZXh0OiAnSW52YWxpZCBydWxlIGlucHV0cyB0ZXh0JyxcbiAgICAgICAgICAgIGludmFsaWRfb3V0cHV0c190ZXh0OiAnSW52YWxpZCBydWxlIG91dHB1dHMgdGV4dCcsXG4gICAgICAgICAgICBpbnZhbGlkX211bHRpX2lwX2NvdW50OiAnTWF4aW11bSBudW1iZXIgaXMge3tjb3VudH19JyxcbiAgICAgICAgICAgIGludmFsaWRfZm9ybWF0OiAnSW52YWxpZCBmb3JtYXQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICBsb2FkaW5nX3J1bGVzX2ludG9fZGV2aWNlOiAnTG9hZGluZyBydWxlcyBpbnRvIHRoZSBkZXZpY2UnLFxuICAgICAgICAgIHJlYWRpbmdfcnVsZXNfZnJvbV9kZXZpY2U6ICdSZWFkaW5nIHJ1bGVzJyxcbiAgICAgICAgICBydWxlc19zYXZlZDogJ1J1bGVzIHNhdmVkJyxcbiAgICAgICAgICBlcnJvcnNfaW5fcnVsZXM6ICdUaGVyZSBhcmUgZXJyb3JzIGluIHRoZSBydWxlcycsXG4gICAgICAgICAgYXBwbHlpbmdfcnVsZXM6ICdBcHBseWluZyBydWxlcydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHRpdGxlOiAnU2V0dGluZ3MnLFxuICAgICAgICBtYW51YWw6ICdNYW51YWwnLFxuICAgICAgICBkaGNwOiAnREhDUCcsXG4gICAgICAgIGlwX2FkZHJlc3M6ICdJUCBhZGRyZXNzJyxcbiAgICAgICAgc3VibmV0X21hc2s6ICdTdWJuZXQgbWFzaycsXG4gICAgICAgIGdhdGV3YXk6ICdHYXRld2F5JyxcbiAgICAgICAgcGxhdGZvcm06ICdQbGF0Zm9ybScsXG4gICAgICAgIGNoYW5nZV9wYXNzd29yZDogJ0NoYW5nZSBwYXNzd29yZCcsXG4gICAgICAgIG5ld19wYXNzd29yZDogJ05ldyBwYXNzd29yZCcsXG4gICAgICAgIGNvbmZpcm1fcGFzc3dvcmQ6ICdDb25maXJtIHBhc3N3b3JkJyxcbiAgICAgICAgcGFzc3dvcmRfY2hhbmdlZDogJ1Bhc3N3b3JkIGNoYW5nZWQnLFxuICAgICAgICBjdXJyZW50X3Bhc3N3b3JkOiAn0KF1cnJlbnQgcGFzc3dvcmQnLFxuICAgICAgICBsaWNlbnNlOiB7XG4gICAgICAgICAgdGl0bGU6ICdMaWNlbnNpbmcnLFxuICAgICAgICAgIGRyYWdfbl9kcm9wOiAnRHJvcCB0aGUgbGljZW5zZSBmaWxlIGhlcmUnLFxuICAgICAgICAgIHNlcmlhbDogJ0luIG9yZGVyIHRvIHB1cmNoYXNlIHRoZSBsaWNlbmNlIHlvdSB3aWxsIG5lZWQgdGhlIGRldmljZSBzZXJpYWwgbnVtYmVyJyxcbiAgICAgICAgICBzZXJpYWxfZXh0cmE6ICdFYWNoIGxpY2Vuc2UgY29ycmVzcG9uZHMgdG8gYSBzcGVjaWZpYyBzZXQgb2YgZmVhdHVyZXMnXG4gICAgICAgIH0sXG4gICAgICAgIGZpcm13YXJlOiB7XG4gICAgICAgICAgdGl0bGU6ICdVcGRhdGluZyBkZXZpY2UgZmlybXdhcmUnLFxuICAgICAgICAgIGRyYWdfbl9kcm9wOiAnRHJvcCB0aGUgZmlybXdhcmUgZmlsZSBoZXJlJ1xuICAgICAgICB9LFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICByZXNldDogJ1Jlc2V0IGFsbCBzZXR0aW5ncydcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBmb3JtX2Vycm9yczogJ1RoZSB2YWx1ZXMgeW91IGVudGVyZWQgaGF2ZSBlcnJvcnMnLFxuICAgICAgICAgIGlwX2FkZHJlc3NfcmVxdWlyZWQ6ICdFbnRlciBhbiBJUCBhZGRyZXNzJyxcbiAgICAgICAgICBpbnZhbGlkX2lwX2FkZHJlc3M6ICdJbnZhbGlkIElQIGFkZHJlc3MnLFxuICAgICAgICAgIHN1Ym5ldF9tYXNrX3JlcXVpcmVkOiAnRW50ZXIgYSBzdWJuZXQgbWFzaycsXG4gICAgICAgICAgaW52YWxpZF9zdWJuZXRfbWFzazogJ0ludmFsaWQgc3VibmV0IG1hc2snLFxuICAgICAgICAgIGdhdGV3YXlfcmVxdWlyZWQ6ICdFbnRlciBhIGdhdGV3YXkgSVAgYWRkcmVzcycsXG4gICAgICAgICAgaW52YWxpZF9nYXRld2F5OiAnSW52YWxpZCBnYXRld2F5IElQIGFkZHJlc3MnLFxuICAgICAgICAgIHBhc3N3b3JkX3JlcXVpcmVkOiAnRW50ZXIgYSBwYXNzd29yZCdcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgdXBsb2FkaW5nX2Zpcm13YXJlOiAnVXBsb2FkaW5nIGZpcm13YXJlJyxcbiAgICAgICAgICB1cGRhdGluZ19maXJtd2FyZTogJ1VwZGF0aW5nIGZpcm13YXJlLiBXYWl0Li4uJyxcbiAgICAgICAgICB2YWxpZGF0aW5nX2Zpcm13YXJlOiAnVmFsaWRhdGluZyBmaXJtd2FyZScsXG4gICAgICAgICAgZmlybXdhcmVfdXBkYXRlX2ZhaWxlZDogJ0Zpcm13YXJlIHVwZGF0ZSBmYWlsZWQnLFxuICAgICAgICAgIHVwbG9hZGluZ19saWNlbnNlOiAnVXBsb2FkaW5nIGxpY2Vuc2UnLFxuICAgICAgICAgIHZhbGlkYXRpbmdfbGljZW5zZTogJ1ZhbGlkYXRpbmcgbGljZW5zZScsXG4gICAgICAgICAgbGljZW5zZV91cGRhdGVfZmFpbGVkOiAnTGljZW5zZSB1cGRhdGUgZmFpbGVkJyxcbiAgICAgICAgICByZWJvb3Rpbmc6ICdTZXR0aW5ncyBzYXZlZC4gUmVib290aW5nIGRldmljZS4uLidcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlYnVnOiB7XG4gICAgICAgIHRpdGxlOiAnRGVidWcnLFxuICAgICAgICBjb21tYW5kOiB7XG4gICAgICAgICAgbmFtZTogJ0NvbW1hbmQnLFxuICAgICAgICAgIHBhcmFtZXRlcnM6ICdQYXJhbWV0ZXJzJyxcbiAgICAgICAgICBvdXRwdXQ6ICdSZXN1bHQnLFxuICAgICAgICAgIG91dHB1dF9tb2RlOiB7XG4gICAgICAgICAgICB0cmVlOiAndHJlZScsXG4gICAgICAgICAgICBjb2RlOiAnY29kZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBjb21tYW5kX25hbWVfcmVxdWlyZWQ6ICdFbnRlciBjb21tYW5kIG5hbWUnLFxuICAgICAgICAgICAgY29tbWFuZF9wYXJhbWV0ZXJzX3JlcXVpcmVkOiAnRW50ZXIgY29tbWFuZCBwYXJhbWV0ZXJzJyxcbiAgICAgICAgICAgIGpzb246ICdTeW50YXggZXJyb3IgaW4gdGhlIGlucHV0IEpTT046XFxuXFxue3tlcnJvcn19J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tbWFuZHM6IHtcbiAgICAgICAgICBuYW1lOiAnQ29tbWFuZHMgKGJhdGNoKScsXG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvbW1hbmRzX3JlcXVpcmVkOiAnRW50ZXIgY29tbWFuZHMnLFxuICAgICAgICAgICAgYmF0Y2hfZm9ybWF0OiAnSW52YWxpZCBKc29uIFJwYyBiYXRjaCBmb3JtYXQuIEl0IG11c3QgYmUgYW4gYXJyYXkgb2YgSnNvbiBScGMgY29tbWFuZHMuJyxcbiAgICAgICAgICAgIGJhdGNoX2pzb246ICdTeW50ZXggZXJyb3IgaW4gYmF0Y2ggaW5wdXQgSlNPTjpcXG5cXG57e2Vycm9yfX0nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgc2VjdGlvbl90aXRsZTogJ0RldmljZSBjb25maWd1cmF0aW9uJyxcbiAgICAgICAgICBvdXRwdXRfdGl0bGU6ICdDb25maWd1cmF0aW9uJyxcbiAgICAgICAgICByZWZyZXNoaW5nOiAnUmVmcmVzaGluZy4uLicsXG4gICAgICAgICAgZG93bmxvYWQ6ICdkb3dubG9hZCcsXG4gICAgICAgICAgZG93bmxvYWRfYmF0Y2g6ICdiYXRjaCcsXG4gICAgICAgICAgcG9ydHNldDogJ1BvcnRzZXQnLFxuICAgICAgICAgIHBvcnRzOiAnUG9ydHMnLFxuICAgICAgICAgIGhhc2hfcHJvZmlsZTogJ0hhc2hpbmcgcHJvZmlsZScsXG4gICAgICAgICAgbGJnOiAnTG9hZCBCYWxhbmNpbmcgR3JvdXBzJyxcbiAgICAgICAgICBtaXJyb3JfZ3JvdXBzOiAnTWlycm9yaW5nIEdyb3VwcycsXG4gICAgICAgICAgbWFwcGVyczogJ01hcHBlcnMnLFxuICAgICAgICAgIGFjbDogJ0FjY2VzcyBDb250cm9sIExpc3RzJyxcbiAgICAgICAgICBuZXR3b3JrOiAnTmV0d29yaycsXG4gICAgICAgICAgcm91dGluZzogJ1J1bGVzJyxcbiAgICAgICAgICB0YV9ydWxlczogJ1RhIHJ1bGVzJyxcbiAgICAgICAgICB1c2VyczogJ1VzZXJzJ1xuICAgICAgICB9LFxuICAgICAgICBhZG1pbmlzdHJhdGlvbjoge1xuICAgICAgICAgIHNlY3Rpb25fdGl0bGU6ICdBZG1pbmlzdHJhdGlvbicsXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogJ0NvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIGxhbmd1YWdlOiAnTGFuZ3VhZ2UnLFxuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uX3JlcXVpcmVkOiAnQ29uZmlndXJhdGlvbiBKU09OIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25fanNvbjogJ1N5bnRheCBlcnJvciBpbiBkZXZpY2UgY29uZmlndXJhdGlvbiBKU09OOlxcblxcbnt7ZXJyb3J9fSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByb2dyYW1faW5mb3JtYXRpb246IHtcbiAgICAgICAgICB2ZXJzaW9uOiAnVmVyc2lvbicsXG4gICAgICAgICAgcmV2aXNpb246ICdyZXZpc2lvbidcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBnZW5lcmljOiAnRXJyb3Ige3tzdGF0dXN9fToge3tkYXRhfX0nXG4gICAgICAgIH0sXG4gICAgICAgIG5vdGlmaWNhdGlvbjoge1xuICAgICAgICAgIHJlc3RhcnRfZ3VscDogJ1Jlc3RhcnQgeW91ciBndWxwIG5vdydcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFkbWluOiB7XG4gICAgICAgIHRpdGxlOiAnQWRtaW5pc3RyYXRpb24nXG4gICAgICB9XG4gICAgfSxcbiAgICBhY3Rpb246IHtcbiAgICAgIGFwcGx5OiAnQXBwbHknLFxuICAgICAgZXhlY3V0ZTogJ0V4ZWN1dGUnLFxuICAgICAgc2F2ZTogJ1NhdmUnLFxuICAgICAgb2s6ICdPSycsXG4gICAgICBjYW5jZWw6ICdDYW5jZWwnLFxuICAgICAgeWVzOiAnWWVzJyxcbiAgICAgIG5vOiAnTm8nXG4gICAgfSxcbiAgICBmaWxlX3VwbG9hZDoge1xuICAgICAgY2hvb3NlX2ZpbGU6ICdDaG9vc2UgYSBmaWxlJyxcbiAgICAgIHVwbG9hZGluZzogJ1VwbG9hZGluZyBmaWxl4oCmJ1xuICAgIH0sXG4gICAgbWVudToge1xuICAgICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgICB0aXRsZTogJ0NvbmZpZ3VyYXRpb24nLFxuICAgICAgICBvcGVuOiB7XG4gICAgICAgICAgdGl0bGU6ICdPcGVuJyxcbiAgICAgICAgICB0b29sdGlwOiAnTG9hZCBjb25maWd1cmF0aW9uIGZyb20gZmlsZSdcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZToge1xuICAgICAgICAgIHRpdGxlOiAnU2F2ZScsXG4gICAgICAgICAgdG9vbHRpcDogJ1NhdmUgY29uZmlndXJhdGlvbiB0byBmaWxlJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbG9nb3V0OiAnTG9nb3V0JyxcbiAgICAgIGxvZzogJ0xvZycsXG4gICAgICBkZWJ1ZzogJ0RlYnVnJ1xuICAgIH0sXG4gICAgbmV0d29yazoge1xuICAgICAgcmF0ZToge1xuICAgICAgICBicHM6ICdicHMnLFxuICAgICAgICBrYnBzOiAna2JwcycsXG4gICAgICAgIE1icHM6ICdNYnBzJyxcbiAgICAgICAgR2JwczogJ0dicHMnXG4gICAgICB9XG4gICAgfSxcbiAgICBlcnJvcjoge1xuICAgICAgamF2YXNjcmlwdDogJ0phdmFzY3JpcHQgaXMgZGlzYWJsZWQgaW4geW91ciB3ZWIgYnJvd3Nlci4gRW5hYmxlIEphdmFzY3JpcHQgaW4gb3JkZXIgdG8gbWFrZSB0aGlzIGFwcGxpY2F0aW9uIHdvcmsuJyxcbiAgICAgIGdlbmVyaWM6ICdFcnJvcjoge3ttZXNzYWdlfX0nLFxuICAgICAgd3JvbmdfcGFzc3dvcmQ6ICdXcm9uZyBwYXNzd29yZCcsXG4gICAgICB1bmF1dGhlbnRpY2F0ZWQ6ICdUaGUgcmVxdWVzdGVkIG9wZXJhdGlvbiByZXF1aXJlcyBhdXRoZW50aWNhdGlvbicsXG4gICAgICBvbGRfYnJvd3NlcjogJ1VwZGF0ZSB5b3VyIGJyb3dzZXIuIFN1cHBvcnRlZCBicm93c2Vyczoge3ticm93c2Vyc319JyxcbiAgICAgIGRldmljZToge1xuICAgICAgICByZXNldF9mYWlsZWQ6ICdEZXZpY2UgcmVzZXQgZmFpbGVkJ1xuICAgICAgfVxuICAgIH0sXG4gICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgc3RhdHVzOiB7XG4gICAgICAgIGFwcGxpY2F0aW9uX3Jlc3RhcnRpbmc6ICdSZXN0YXJ0aW5nIHRoZSBhcHBsaWNhdGlvbicsXG4gICAgICAgIHNhdmVkOiAnQ29uZmlndXJhdGlvbiBzYXZlZCcsXG4gICAgICAgIGFwcGx5aW5nOiAnQXBwbHlpbmcgY29uZmlndXJhdGlvbicsXG4gICAgICAgIGxvYWRlZDogJ0NvbmZpZ3VyYXRpb24gbG9hZGVkJyxcbiAgICAgICAgZGVsZXRlZDogJ0NvbmZpZ3VyYXRpb24gZGVsZXRlZCdcbiAgICAgIH0sXG4gICAgICBlcnJvcjoge1xuICAgICAgICBmaWx0ZXJfc2hvdWxkX25vdF9oYXZlX2FfbWFzazogJ0ZpbHRlciDCq3t7ZmlsdGVyfX3CuyBzaG91bGQgbm90IGhhdmUgYSBtYXNrJyxcbiAgICAgICAgaW52YWxpZDogJ0ludmFsaWQgY29uZmlndXJhdGlvbicsXG4gICAgICAgIGluY29uc2lzdGVudDogJ1RoZSBjb25maWd1cmF0aW9uIGRvZXNuXFwndCBmaXQgdGhpcyBkZXZpY2UnLFxuICAgICAgICBjb25maWd1cmF0aW9uX3VwbG9hZF9mYWlsZWQ6ICdDb25maWd1cmF0aW9uIHVwbG9hZCBmYWlsZWQnLFxuICAgICAgICB0b29fbWFueV9pbnRlcnZhbHNfaW5fZmlsdGVyczogJ1VuYWJsZSB0byBhcHBseSBydWxlczogdG9vIG1hbnkgaW50ZXJ2YWxzIGluIGZpbHRlcnMnLFxuICAgICAgICBtYXhfbWlycm9yaW5nX3BvcnRzOiAnVG9vIG1hbnkgbWlycm9yaW5nIGRlc3RpbmF0aW9uIHBvcnRzIChtYXgge3ttYXh9fSknLFxuICAgICAgICBtYXhfYWNsczogJ1RvbyBtYW55IGlucHV0IHBvcnRzIGluIHJ1bGVzIChtYXgge3ttYXh9fSknXG4gICAgICB9LFxuICAgICAgY29uZmlybV9yZXNldDogJ0FsbCB0aGUgc2V0dGluZ3Mgd2lsbCBiZSByZXNldCBvbiB0aGUgZGV2aWNlLiBBcmUgeW91IHN1cmU/JyxcbiAgICAgIGNvbmZpcm1fZGVsZXRpb246ICdEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZGVsZXRlIGNvbmZpZ3VyYXRpb24gwqt7e25hbWV9fcK7PydcbiAgICB9LFxuICAgIGRldmljZToge1xuICAgICAgc3RhdHVzOiB7XG4gICAgICAgIHVua25vd25fcGxhdGZvcm06ICdVbmtub3duIHBsYXRmb3JtJyxcbiAgICAgICAgY29ubmVjdGluZzogJ1dhaXRpbmcgZm9yIGRldmljZS4uLicsXG4gICAgICAgIGFwcGx5aW5nX3J1bGVzOiAnQXBwbHlpbmcgcnVsZXMgb24gdGhlIGRldmljZScsXG4gICAgICAgIHJlYm9vdGluZzogJ1JlYm9vdGluZyBkZXZpY2UuIFdhaXQuLi4nLFxuICAgICAgICByb3V0aW5nX2NvbmZpZ3VyYXRpb25fYXBwbGllZDogJ1J1bGVzIGhhdmUgYmVlbiBzYXZlZCdcbiAgICAgIH1cbiAgICB9LFxuICAgIGdyYXBoOiB7XG4gICAgICB0aW1lOiB7XG4gICAgICAgIG1pbnV0ZXM6ICdNaW51dGVzJyxcbiAgICAgICAgaG91cnM6ICdIb3VycycsXG4gICAgICAgIGRheXM6ICdEYXlzJyxcbiAgICAgICAgbW9udGhzOiAnTW9udGhzJ1xuICAgICAgfSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICByYXRlOiAnUmF0ZScsXG4gICAgICAgICAgcnhfcmF0ZTogJ1JYIHJhdGUnLFxuICAgICAgICAgIHR4X3JhdGU6ICdUWCByYXRlJyxcbiAgICAgICAgICBjcmM6ICdDUkMgZXJyb3JzJyxcbiAgICAgICAgICBkcm9wczogJ0Ryb3BzJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzdGF0dXM6IHtcbiAgICAgIGxvYWRpbmdfcGFnZTogJ0xvYWRpbmcgcGFnZSdcbiAgICB9LFxuICAgIGVudGVyX3N5c3RlbV9wYXNzd29yZDogJ0VudGVyIHN5c3RlbSBwYXNzd29yZCcsXG4gICAgb3BlcmF0aW9uc19wZW5kaW5nX29uX3BhZ2U6ICdPcGVyYXRpb25zIHBlbmRpbmcgb24gdGhpcyBwYWdlLiBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsIGV2ZXJ5dGhpbmcgYW5kIG5hdmlnYXRlIGF3YXkgZnJvbSB0aGlzIHBhZ2U/JyxcbiAgICBkZXZpY2VfaXNfYm9vdGluZzogJ0RldmljZSBpcyBib290aW5nJ1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwidmFyIG1vZHVsZTtcblxudHJ5IHtcbiAgICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbHZsLnNlcnZpY2VzJyk7ICBcbn0gY2F0Y2ggKGUpIHtcbiAgICBtb2R1bGUgID0gYW5ndWxhci5tb2R1bGUoJ2x2bC5zZXJ2aWNlcycsIFtdKTtcbn1cblxubW9kdWxlLmZhY3RvcnkoJ3V1aWQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3ZjID0ge1xuICAgICAgICBuZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gX3A4KHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KStcIjAwMDAwMDAwMFwiKS5zdWJzdHIoMiw4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcyA/IFwiLVwiICsgcC5zdWJzdHIoMCw0KSArIFwiLVwiICsgcC5zdWJzdHIoNCw0KSA6IHAgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9wOCgpICsgX3A4KHRydWUpICsgX3A4KHRydWUpICsgX3A4KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gc3ZjO1xufSk7IiwiaTE4bi5ydV9SVSA9XG5cdGxhbmd1YWdlX25hbWU6ICfQoNGD0YHRgdC60LjQuSdcblxuXHR0aXRsZTogJ9CQ0LPRgNC10LPQsNGC0L7RgCDQotGA0LDRhNC40LrQsCdcblxuXHRsb2dpbjpcblx0XHR0aXRsZTogJ9CS0YXQvtC0INCyINGB0LjRgdGC0LXQvNGDJ1xuXG5cdFx0cGFzc3dvcmQ6XG5cdFx0XHR0b29sdGlwOiAn0JLQstC10LTQuNGC0LUg0L/QsNGA0L7Qu9GMJ1xuXG5cdEFDTDpcblx0XHRydWxlOlxuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRiYWxhbmNlICA6ICfQkdCw0LvQsNC90YHQuNGA0L7QstC60LAnXG5cdFx0XHRcdHJlZGlyZWN0IDogJ9Cf0LXRgNC10L3QsNC/0YDQsNCy0LvQtdC90LjQtSdcblx0XHRcdFx0bWlycm9yICAgOiAn0JrQvtC/0LjRgNC+0LLQsNC90LjQtSdcblx0XHRcdFx0ZHViYmluZyAgOiAn0JrQu9C+0L3QuNGA0L7QstCw0L3QuNC1INGH0LXRgNC10LcgbG9vcGJhY2snXG5cdFx0XHRcdGRyb3AgICAgIDogJ9CR0LvQvtC60LjRgNC+0LLQutCwJ1xuXHRcdFx0XHRwZXJtaXQgICA6ICfQn9GA0L7Qv9GD0YHQuidcblxuXHRcdFx0ZmlsdGVyOlxuXHRcdFx0XHRub25lICAgOiAn0JHQtdC3INGE0LjQu9GM0YLRgNCw0YbQuNC4J1xuXHRcdFx0XHRwZXJtaXQgOiAn0J7RgtCx0L7RgCDQv9Cw0LrQtdGC0L7Qsidcblx0XHRcdFx0ZHJvcCAgIDogJ9CR0LvQvtC60LjRgNC+0LLQutCwINC/0LDQutC10YLQvtCyJ1xuXG5cdFx0XHRcdHR5cGU6XG5cdFx0XHRcdFx0ZXRoZXJuZXRfcHJvdG9jb2wgICAgICAgOiAnRXRoZXJUeXBlJ1xuXHRcdFx0XHRcdHNvdXJjZV9NQUNfYWRkcmVzcyAgICAgIDogJ01BQyDQsNC00YDQtdGBINC+0YLQv9GA0LDQstC40YLQtdC70Y8nXG5cdFx0XHRcdFx0ZGVzdGluYXRpb25fTUFDX2FkZHJlc3MgOiAnTUFDINCw0LTRgNC10YEg0L/QvtC70YPRh9Cw0YLQtdC70Y8nXG5cdFx0XHRcdFx0c291cmNlX0lQX2FkZHJlc3MgICAgICAgOiAnSVAg0L7RgtC/0YDQsNCy0LjRgtC10LvRjydcblx0XHRcdFx0XHRkZXN0aW5hdGlvbl9JUF9hZGRyZXNzICA6ICdJUCDQv9C+0LvRg9GH0LDRgtC10LvRjydcblx0XHRcdFx0XHRtdWx0aV9JUF9hZGRyZXNzICAgICAgICA6ICfQnNGD0LvRjNGC0LggSVAt0LDQtNGA0LXRgSdcblx0XHRcdFx0XHRJUF9wcm90b2NvbCAgICAgICAgICAgICA6ICdJUCDQv9GA0L7RgtC+0LrQvtC7J1xuXHRcdFx0XHRcdElQX3Byb3RvY29sX3NvdXJjZSAgICAgIDogJ9CY0YHRhdC+0LTRj9GJ0LjQuSDQv9C+0YDRgidcblx0XHRcdFx0XHRJUF9wcm90b2NvbF9kZXN0aW5hdGlvbiA6ICfQktGF0L7QtNGP0YnQuNC5INC/0L7RgNGCJ1xuXHRcdFx0XHRcdFZMQU4gICAgICAgICAgICAgICAgICAgIDogJ1ZMQU4nXG5cdFx0XHRcdFx0VkxBTjIgICAgICAgICAgICAgICAgICAgOiAnVkxBTjInXG5cdFx0XHRcdFx0TGV2ZWw0X2RhdGEgICAgICAgICAgICAgOiAn0KHQvtC00LXRgNC20LjQvNC+0LUg0L/QsNC60LXRgtCwIChEUEkpJ1xuXG5cdHBhZ2U6XG5cdFx0cG9ydHM6XG5cdFx0XHR0aXRsZTogJ9Cf0L7RgNGC0YsnXG5cblx0XHRcdHNmcDogJ9Cj0YHRgtCw0L3QvtCy0LvQtdC9INC80L7QtNGD0LvRjCBTRlAnXG5cblx0XHRcdHNmcF9pbmZvOlxuXHRcdFx0XHRwb3J0OiAgICAgICAgICfQn9C+0YDRgidcblx0XHRcdFx0aW5mbzogICAgICAgICAn0JjQvdGE0L7RgNC80LDRhtC40Y8g0L4gU0ZQLdC80L7QtNGD0LvQtSdcblx0XHRcdFx0aWRlbnRpZmllcjogICAn0JjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAnXG5cdFx0XHRcdHNwZWNfY29tcDogICAgJ9Ci0LjQvydcblx0XHRcdFx0dmVuZG9yX25hbWU6ICAn0J/RgNC+0LjQt9Cy0L7QtNC40YLQtdC70YwnXG5cdFx0XHRcdHBhcnRfbnVtYmVyOiAgJ1BhcnQgbnVtYmVyJ1xuXHRcdFx0XHR0ZW1wZXJhdHVyZTogICfQotC10LzQv9C10YDQsNGC0YPRgNCwJ1xuXHRcdFx0XHRyeF9wb3dlcjogICAgICfQktGF0L7QtNC90L7QuSDRgdC40LPQvdCw0LsnXG5cdFx0XHRcdHR4X3Bvd2VyOiAgICAgJ9CS0YvRhdC+0LTQvdC+0Lkg0YHQuNCz0L3QsNC7J1xuXG5cdFx0XHRhY3Rpb246XG5cdFx0XHRcdHJlc2V0X2NvdW50ZXJzOiAn0KHQsdGA0L7RgdC40YLRjCDRgdGH0ZHRgtGH0LjQutC4J1xuXHRcdFx0XHRzaG93X2dyYXBoczogJ9CT0YDQsNGE0LjQutC4J1xuXG5cdFx0XHRhZGRfY29tbWVudDogJ9Ca0L7QvNC80LXQvdGC0LDRgNC40LknXG5cblx0XHRcdHRhYmxlOlxuXHRcdFx0XHRudW1iZXIgICAgICAgOiAn4oSWINC/0L7RgNGC0LAnXG5cdFx0XHRcdHJ4ICAgICAgICAgICA6ICdSWCdcblx0XHRcdFx0dHggICAgICAgICAgIDogJ1RYJ1xuXHRcdFx0XHR0eCAgICAgICAgICAgOiAnVFgnXG5cdFx0XHRcdHJ4X3JhdGUgICAgICA6ICdSWCxcXG7QsdC40YLRgNC10LnRgidcblx0XHRcdFx0dHhfcmF0ZSAgICAgIDogJ1RYLFxcbtCx0LjRgtGA0LXQudGCJ1xuXHRcdFx0XHRyeF9vY3RldHMgICAgOiAnUlgsXFxu0L7QutGC0LXRgtGLJ1xuXHRcdFx0XHRyeF9zaWduYWwgICAgOiAnUlgsXFxu0YHQuNCz0L3QsNC7J1xuXHRcdFx0XHR0eF9vY3RldHMgICAgOiAnVFgsXFxu0L7QutGC0LXRgtGLJ1xuXHRcdFx0XHRtb2RlICAgICAgICAgOiAn0KDQtdC20LjQvCdcblx0XHRcdFx0Y29tbWVudHMgICAgIDogJ9Ca0L7QvNC80LXQvdGC0LDRgNC40LgnXG5cdFx0XHRcdGNyYyAgICAgICAgICA6ICfQntGI0LjQsdC60LhcXG5DUkMnXG5cdFx0XHRcdGRyb3BzICAgICAgICA6ICfQntGC0LHRgNC+0YjQtdC90L3Ri9C1XFxu0L/QsNC60LXRgtGLJ1xuXHRcdFx0XHRwYXJzZXJfbGV2ZWwgOiAn0JPQu9GD0LHQuNC90LBcXG7QsNC90LDQu9C40LfQsCdcblx0XHRcdFx0Z3JhcGggICAgICAgIDogJ9CT0YDQsNGE0LjQuidcblx0XHRcdFx0ZHBpICAgICAgICAgIDogJ0RQSSdcblxuXHRcdFx0Zm9yY2VfdXBfZGVzY3JpcHRpb24gOiAn0J/RgNC40L3Rg9C00LjRgtC10LvRjNC90L4g0L/QvtC00L3QuNC80LDRgtGMINC70LjQvdC6INC/0YDQuCDQvtGC0YHRg9GC0YHRgtCy0LjQuCDRgtGA0LDRhNC40LrQsCDQvdCwIFJYJ1xuXHRcdFx0bG9vcGJhY2tfZGVzY3JpcHRpb24gOiAn0JLQvdGD0YLRgNC10L3QtdC1INC30LDQvNGL0LrQsNC90LjQtSDRgtGA0LDRhNC40LrQsCDRgSBUWCDQvdCwIFJYJ1xuXHRcdFx0bG9vcGJhY2tfY29uZmlybSAgICAgOiAn0JLRiyDRg9Cy0LXRgNC10L3Riywg0YfRgtC+INGF0L7RgtC40YLQtSDQstC60LvRjtGH0LjRgtGMINCy0L3Rg9GC0YDQtdC90LXQtSDQt9Cw0LzRi9C60LDQvdC40LUg0YLRgNCw0YTQuNC60LAg0YEgVFgg0L3QsCBSWD8nXG5cblxuXHRcdHJvdXRpbmc6XG5cdFx0XHR0aXRsZTogJ9Cf0YDQsNCy0LjQu9CwJ1xuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRuZXdfcnVsZSAgICAgICAgIDogJ9Cd0L7QstC+0LUg0L/RgNCw0LLQuNC70L4nXG5cdFx0XHRcdGRlbGV0ZV9hbGwgICAgICAgOiAn0KPQtNCw0LvQuNGC0Ywg0LLRgdC1J1xuXHRcdFx0XHRlZGl0X3J1bGVfaW5wdXRzIDogJ0N0cmwrRSDigJQg0KDRg9GH0L3QvtC1INGD0L/RgNCw0LLQu9C10L3QuNC1J1xuXHRcdFx0XHRlZGl0X3J1bGVfaW5wdXRzX3RpdGxlIDogJ9CSINGA0LXQttC40LzQtSDRgNGD0YfQvdC+0LPQviDRg9C/0YDQsNCy0LvQtdC90LjRjywg0L/QvtGA0YLRiyDQtNC+0LHQsNCy0LvRj9GO0YLRgdGPINCy0LLQvtC00L7QvCDQuNGFINC90L7QvNC10YDQvtCyINCyINGC0LXQutGB0YLQvtCy0L7QtSDQv9C+0LvQtS4nXG5cdFx0XHRcdGVuYWJsZV9hbGxcdFx0IDogJ9CS0LrQu9GO0YfQuNGC0Ywg0LLRgdC1J1xuXHRcdFx0XHRkaXNhYmxlX2FsbCAgICAgIDogJ9CS0YvQutC70Y7Rh9C40YLRjCDQstGB0LUnXG5cblx0XHRcdGRldmVsb3Blcl9tb2RlOiAn0JLRiyDQvdCw0YXQvtC00LjRgtC10YHRjCDQsiDRgNC10LbQuNC80LUg0YDQsNC30YDQsNCx0L7RgtGH0LjQutCwLiDQn9GA0LDQstC40LvQsCwg0YHQvtGF0YDQsNC90ZHQvdC90YvQtSDQstCw0LzQuCDQsiDQv9C+0YHQu9C10LTQvdC40Lkg0YDQsNC3LCDQvdC1INGB0L7QstC/0LDQtNCw0Y7RgiDRgSDRgtC10LrRg9GJ0LjQvNC4INC/0YDQsNCy0LjQu9Cw0LzQuCDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1LidcblxuXHRcdFx0cmVzZXQ6ICfQodCx0YDQvtGB0LjRgtGMINCy0YHQtSDQv9GA0LDQstC40LvQsCDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1Pydcblx0XHRcdGNsZWFyOiAn0KPQtNCw0LvQuNGC0Ywg0LLRgdC1INC/0YDQsNCy0LjQu9CwPydcblxuXHRcdFx0cnVsZTpcblx0XHRcdFx0bG9hZGluZzogJ9Ch0YfQuNGC0YvQstCw0L3QuNC1INC/0YDQsNCy0LjQuydcblx0XHRcdFx0aW5wdXRzICA6ICfQktGF0L7QtNC90YvQtSDQv9C+0YDRgtGLJ1xuXHRcdFx0XHRvdXRwdXRzIDogJ9CS0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiydcblxuXHRcdFx0XHRuYW1lOiBcItCf0YDQsNCy0LjQu9C+IOKEliB7e2lkfX1cIlxuXG5cdFx0XHRcdGRlbGV0ZV9jb25maXJtYXRpb246ICfQo9C00LDQu9C40YLRjCDQv9GA0LDQstC40LvQviDCq3t7cnVsZX19wrs/J1xuXG5cdFx0XHRcdGlzX2ZpbHRlcmVkOiAn0KTQuNC70YzRgtGA0LDRhtC40Y8nXG5cblx0XHRcdFx0YmFsYW5jZTpcblx0XHRcdFx0XHRieTogJ9CR0LDQu9Cw0L3RgdC40YDQvtCy0LDRgtGMINC/0L4nXG5cblx0XHRcdFx0XHRvdXRwdXRfcG9ydHNfcmVxdWlyZWQ6ICfQlNC+0LHQsNCy0YzRgtC1INCy0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiyDQtNC70Y8g0LHQsNC70LDQvdGB0LjRgNC+0LLQutC4J1xuXG5cdFx0XHRcdGFjdGlvbjpcblx0XHRcdFx0XHRsb3dlcl9wcmlvcml0eTogJ9Cc0LXQvdGM0YjQtSDQv9GA0LjQvtGA0LjRgtC10YInXG5cdFx0XHRcdFx0aGlnaGVyX3ByaW9yaXR5OiAn0JHQvtC70YzRiNC1INC/0YDQuNC+0YDQuNGC0LXRgidcblxuXHRcdFx0XHRcdGR1cGxpY2F0ZTogJ9CU0YPQsdC70LjRgNC+0LLQsNGC0YwnXG5cdFx0XHRcdFx0ZGVsZXRlOiAn0KPQtNCw0LvQuNGC0YwnXG5cblx0XHRcdFx0XHRhZ2dyZWdhdGlvbjogJ9CQ0LPRgNC10LPQsNGG0LjRjydcblxuXHRcdFx0XHRncmFwaDpcblx0XHRcdFx0XHRncmFwaCAgICAgICA6ICfQk9GA0LDRhNC40LonXG5cdFx0XHRcdFx0c3VtICAgICAgICAgOiAn0KHRg9C80LzQuNGA0L7QstCw0YLRjCdcblx0XHRcdFx0XHRpbiAgICAgICAgICA6ICfQktGF0L7QtCdcblx0XHRcdFx0XHRpbnMgICAgICAgICA6ICfQktGF0L7QtNGLJ1xuXHRcdFx0XHRcdG91dCAgICAgICAgIDogJ9CS0YvRhdC+0LQnXG5cdFx0XHRcdFx0b3V0cyAgICAgICAgOiAn0JLRi9GF0L7QtNGLJ1xuXHRcdFx0XHRcdHBvcnRfbnVtYmVyIDogJ9Cf0L7RgNGCIOKElidcblxuXHRcdFx0XHRmaWx0ZXJpbmc6XG5cdFx0XHRcdFx0ZmlsdGVyIDogJ9Ck0LjQu9GM0YLRgCdcblx0XHRcdFx0XHR2YWx1ZSAgOiAn0JfQvdCw0YfQtdC90LjQtSdcblx0XHRcdFx0XHRtYXNrICAgOiAn0JzQsNGB0LrQsCdcblxuXHRcdFx0XHRcdHNldF9pbnRlcnZhbCAgOiAn0JTQuNCw0L/QsNC30L7QvSdcblx0XHRcdFx0XHRhZGRfbWFzayAgICAgIDogJ9CX0LDQtNCw0YLRjCDQvNCw0YHQutGDJ1xuXHRcdFx0XHRcdHJlbW92ZV9maWx0ZXIgOiAn0KPQtNCw0LvQuNGC0YwnXG5cdFx0XHRcdFx0YWRkX2ZpbHRlciAgICA6ICfQlNC+0LHQsNCy0LjRgtGMINGE0LjQu9GM0YLRgCdcblxuXHRcdFx0XHRcdGVycm9yOlxuXHRcdFx0XHRcdFx0aW52YWxpZF9tYXNrOiAn0J3QtdCy0LXRgNC90LDRjyDQvNCw0YHQutCwJ1xuXG5cdFx0XHRcdGVycm9yOlxuXHRcdFx0XHRcdGlucHV0X3BvcnRzX3JlcXVpcmVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAn0JTQvtCx0LDQstGM0YLQtSDQstGF0L7QtNC90YvQtSDQv9C+0YDRgtGLJ1xuXHRcdFx0XHRcdG91dHB1dF9wb3J0c19yZXF1aXJlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAn0JTQvtCx0LDQstGM0YLQtSDQstGL0YXQvtC00L3Ri9C1INC/0L7RgNGC0YsnXG5cdFx0XHRcdFx0Y2FuX3JlZGlyZWN0X3RvX2Ffc2luZ2xlX3BvcnRfb25seSAgICAgICAgICAgICAgICAgICAgICA6ICfQkiDQv9GA0LDQstC40LvQsNGFINC/0LXRgNC10L3QsNC/0YDQsNCy0LvQtdC90LjRjyDQvNC+0LbQtdGCINCx0YvRgtGMINGC0L7Qu9GM0LrQviDQv9C+INC+0LTQvdC+0LzRgyDQstGL0YXQvtC00L3QvtC80YMg0L/QvtGA0YLRgydcblx0XHRcdFx0XHRvbmx5X3RoZV9maXJzdF9zdWJwb3J0X29mXzQwZ19wb3J0X2Nhbl9iZV91c2VkX2luX3J1bGVzIDogJ9CV0YHQu9C4INGB0L7RgdGC0LDQstC90L7QuSDQv9C+0YDRgiDQv9C10YDQtdCy0LXQtNGR0L0g0LIg0YDQtdC20LjQvCA0MEcsINGC0L4g0LIg0L/RgNCw0LLQuNC70LDRhSDQvNC+0LbQtdGCINGD0YfQsNGB0YLQstC+0LLQsNGC0Ywg0YLQvtC70YzQutC+INC/0LXRgNCy0YvQuSDQv9C+0LTQv9C+0YDRgiDRjdGC0L7Qs9C+INGB0L7RgdGC0LDQstC90L7Qs9C+INC/0L7RgNGC0LAnXG5cdFx0XHRcdFx0ZmlsdGVycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfQndC10L/RgNCw0LLQuNC70YzQvdC+INC30LDQtNCw0L3RiyDRhNC40LvRjNGC0YDRiyDRjdGC0L7Qs9C+INC/0YDQsNCy0LjQu9CwJ1xuXHRcdFx0XHRcdHBvcnRfZmlsdGVyX3JlcXVpcmVzX2lwX3Byb3RvY29sICAgICAgICAgICAgICAgICAgICAgICAgOiAn0JTQu9GPINGE0LjQu9GM0YLRgNCw0YbQuNC4INC/0L4g0L3QvtC80LXRgNGDINC/0L7RgNGC0LAg0YLRgNC10LHRg9C10YLRgdGPINGC0LDQutC20LUg0LfQsNC00LDRgtGMINGE0LjQu9GM0YLRgCDQv9C+INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LXQvNGDIElQINC/0YDQvtGC0L7QutC+0LvRgyAo0L7QsdGL0YfQvdC+INGN0YLQviBUQ1Ag0LjQu9C4IFVEUCknXG5cdFx0XHRcdFx0dG9vX21hbnlfaW50ZXJ2YWxzX2luX2ZpbHRlcnMgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfQndC1INGD0LTQsNC70L7RgdGMINC/0YDQuNC80LXQvdC40YLRjCDQv9GA0LDQstC40LvQsDog0L/RgNC10LLRi9GI0LXQvdC+INC60L7Qu9C40YfQtdGB0YLQstC+INC40L3RgtC10YDQstCw0LvQvtCyINCyINGE0LjQu9GM0YLRgNCw0YUnXG5cdFx0XHRcdFx0cmVkaXJlY3RpbmdfdG9fc2V2ZXJhbF9wb3J0c19pc19iYWxhbmNpbmcgICAgICAgICAgICAgICA6ICfQn9C10YDQtdC90LDQv9GA0LDQstC70LXQvdC40LUg0L3QsCDQvdC10YHQutC+0LvRjNC60L4g0L/QvtGA0YLQvtCyIOKAlCDRjdGC0L4g0LHQsNC70LDQvdGB0LjRgNC+0LLQutCwJ1xuXHRcdFx0XHRcdGV4aXRfcG9ydF9lZGl0aW5nX21vZGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAn0JLRi9C50LTQuNGC0LUg0LjQtyDRgNC10LbQuNC80LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9C+0YDRgtC+0LInXG5cdFx0XHRcdFx0aW52YWxpZF9pbnB1dHNfdGV4dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfQntGI0LjQsdC60LAg0LIg0YHQv9C40YHQutC1INCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7Qsidcblx0XHRcdFx0XHRpbnZhbGlkX291dHB1dHNfdGV4dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ9Ce0YjQuNCx0LrQsCDQsiDRgdC/0LjRgdC60LUg0LLRi9GF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LInXG5cdFx0XHRcdFx0aW52YWxpZF9tdWx0aV9pcF9jb3VudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfQn9GA0LXQstGL0YjQtdC90L4g0LzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INCyIHt7Y291bnR9fSdcblx0XHRcdFx0XHRpbnZhbGlkX2Zvcm1hdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ9Cd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCJ1xuXG5cdFx0XHRzdGF0dXM6XG5cdFx0XHRcdGxvYWRpbmdfcnVsZXNfaW50b19kZXZpY2UgOiAn0J/RgNC+0LPRgNGD0LbQsNC10Lwg0L/RgNCw0LLQuNC70LAg0LIg0YPRgdGC0YDQvtC50YHRgtCy0L4nXG5cdFx0XHRcdHJlYWRpbmdfcnVsZXNfZnJvbV9kZXZpY2UgOiAn0KHRh9C40YLRi9Cy0LDQtdC8INC/0YDQsNCy0LjQu9CwJ1xuXHRcdFx0XHRydWxlc19zYXZlZCAgICAgICAgICAgICAgIDogJ9Cf0YDQsNCy0LjQu9CwINGB0L7RhdGA0LDQvdC10L3Riydcblx0XHRcdFx0ZXJyb3JzX2luX3J1bGVzICAgICAgICAgICA6ICfQntGI0LjQsdC60LAg0LIg0L/RgNCw0LLQuNC70LDRhSdcblx0XHRcdFx0YXBwbHlpbmdfcnVsZXMgICAgICAgICAgICA6ICfQn9GA0LjQvNC10L3Rj9C10Lwg0L/RgNCw0LLQuNC70LAnXG5cblx0XHRzZXR0aW5nczpcblx0XHRcdHRpdGxlOiAn0J3QsNGB0YLRgNC+0LnQutC4J1xuXG5cdFx0XHRtYW51YWw6ICfQktGA0YPRh9C90YPRjidcblx0XHRcdGRoY3A6ICdESENQJ1xuXG5cdFx0XHRpcF9hZGRyZXNzOiAnSVAt0LDQtNGA0LXRgSdcblx0XHRcdHN1Ym5ldF9tYXNrOiAn0JzQsNGB0LrQsCDQv9C+0LTRgdC10YLQuCdcblx0XHRcdGdhdGV3YXk6ICfQqNC70Y7Qtydcblx0XHRcdHBsYXRmb3JtOiAn0J/Qu9Cw0YLRhNC+0YDQvNCwJ1xuXG5cdFx0XHRjaGFuZ2VfcGFzc3dvcmQgICAgICAgIDogJ9Ch0LzQtdC90LjRgtGMINC/0LDRgNC+0LvRjCdcblx0XHRcdG5ld19wYXNzd29yZCAgICAgXHQgICA6ICfQndC+0LLRi9C5INC/0LDRgNC+0LvRjCdcblx0XHRcdGNvbmZpcm1fcGFzc3dvcmQgICAgICAgOiAn0J/QvtC00YLQstC10YDQtNC40YLQtSDQv9Cw0YDQvtC70YwnXG5cdFx0XHRwYXNzd29yZF9jaGFuZ2VkICAgICAgIDogJ9Cf0LDRgNC+0LvRjCDQuNC30LzQtdC90ZHQvSdcblx0XHRcdGN1cnJlbnRfcGFzc3dvcmQgICAgICAgOiAn0KLQtdC60YPRidC40Lkg0L/QsNGA0L7Qu9GMJ1xuXG5cdFx0XHRsaWNlbnNlOlxuXHRcdFx0XHR0aXRsZTogJ9Cb0LjRhtC10L3Qt9C40LgnXG5cdFx0XHRcdGRyYWdfbl9kcm9wOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YTQsNC50Lsg0LvQuNGG0LXQvdC30LjQuCDRgdGO0LTQsCdcblxuXHRcdFx0XHRzZXJpYWw6ICfQlNC70Y8g0L/RgNC40L7QsdGA0LXRgtC10L3QuNGPINC70LjRhtC10L3Qt9C40Lgg0LLQsNC8INC/0L7QvdCw0LTQvtCx0LjRgtGB0Y8g0YHQtdGA0LjQudC90YvQuSDQvdC+0LzQtdGAINGD0YHRgtGA0L7QudGB0YLQstCwJ1xuXHRcdFx0XHRzZXJpYWxfZXh0cmE6ICfQmtCw0LbQtNC+0Lkg0LvQuNGG0LXQvdC30LjQuCDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0LXRgiDQvtC/0YDQtdC00LXQu9GR0L3QvdGL0Lkg0YTRg9C90LrRhtC40L7QvdCw0Lsg0YPRgdGC0YDQvtC50YHRgtCy0LAnXG5cblx0XHRcdGZpcm13YXJlOlxuXHRcdFx0XHR0aXRsZTogJ9Ce0LHQvdC+0LLQu9C10L3QuNC1INC/0YDQvtGI0LjQstC60Lgg0YPRgdGC0YDQvtC50YHRgtCy0LAnXG5cdFx0XHRcdGRyYWdfbl9kcm9wOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YTQsNC50Lsg0L/RgNC+0YjQuNCy0LrQuCDRgdGO0LTQsCdcblxuXHRcdFx0YWN0aW9uOlxuXHRcdFx0XHRyZXNldDogJ9Ch0LHRgNC+0YEg0LLRgdC10YUg0L3QsNGB0YLRgNC+0LXQuidcblxuXHRcdFx0ZXJyb3I6XG5cdFx0XHRcdGZvcm1fZXJyb3JzOiAn0JjRgdC/0YDQsNCy0YzRgtC1INC+0YjQuNCx0LrQuCDQstC+INCy0LLQtdC00ZHQvdC90YvRhSDQt9C90LDRh9C10L3QuNGP0YUnXG5cblx0XHRcdFx0aXBfYWRkcmVzc19yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1IElQLdCw0LTRgNC10YEnXG5cdFx0XHRcdGludmFsaWRfaXBfYWRkcmVzczogJ9Cd0LXQstC10YDQvdGL0LkgSVAt0LDQtNGA0LXRgSdcblxuXHRcdFx0XHRzdWJuZXRfbWFza19yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1INC80LDRgdC60YMg0L/QvtC00YHQtdGC0LgnXG5cdFx0XHRcdGludmFsaWRfc3VibmV0X21hc2s6ICfQndC10LLQtdGA0L3QsNGPINC80LDRgdC60LAg0L/QvtC00YHQtdGC0LgnXG5cblx0XHRcdFx0Z2F0ZXdheV9yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1IElQLdCw0LTRgNC10YEnXG5cdFx0XHRcdGludmFsaWRfZ2F0ZXdheTogJ9Cd0LXQstC10YDQvdGL0LkgSVAt0LDQtNGA0LXRgSDRiNC70Y7Qt9CwJ1xuXG5cdFx0XHRcdHBhc3N3b3JkX3JlcXVpcmVkOiAn0JLQstC10LTQuNGC0LUg0L/QsNGA0L7Qu9GMJ1xuXG5cdFx0XHRzdGF0dXM6XG5cdFx0XHRcdHVwbG9hZGluZ19maXJtd2FyZTogJ9Cf0YDQvtGI0LjQstC60LAg0LfQsNCz0YDRg9C20LDQtdGC0YHRjyDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvidcblx0XHRcdFx0dXBkYXRpbmdfZmlybXdhcmU6ICfQmNC00ZHRgiDQvtCx0L3QvtCy0LvQtdC90LjQtSDQv9GA0L7RiNC40LLQutC4INGD0YHRgtGA0L7QudGB0YLQstCwLiDQltC00LjRgtC1Li4uJ1xuXHRcdFx0XHR2YWxpZGF0aW5nX2Zpcm13YXJlOiAn0J/RgNC+0LLQtdGA0LrQsCDQt9Cw0LPRgNGD0LbQtdC90L3QvtC5INC/0YDQvtGI0LjQstC60LgnXG5cdFx0XHRcdGZpcm13YXJlX3VwZGF0ZV9mYWlsZWQ6ICfQndC1INGD0LTQsNC70L7RgdGMINC+0LHQvdC+0LLQuNGC0Ywg0L/RgNC+0YjQuNCy0LrRgydcblxuXHRcdFx0XHR1cGxvYWRpbmdfbGljZW5zZTogJ9Cb0LjRhtC10L3Qt9C40Y8g0LfQsNCz0YDRg9C20LDQtdGC0YHRjydcblx0XHRcdFx0dmFsaWRhdGluZ19saWNlbnNlOiAn0JvQuNC10YbQvdC30LjRjyDQv9GA0L7QstC10YDRj9C10YLRgdGPJ1xuXHRcdFx0XHRsaWNlbnNlX3VwZGF0ZV9mYWlsZWQ6ICfQl9Cw0LPRgNGD0LfQutCwINC70LjRhtC10L3Qt9C40Lgg0L3QtSDRg9C00LDQu9Cw0YHRjCdcblxuXHRcdFx0XHRyZWJvb3Rpbmc6ICfQndCw0YHRgtGA0L7QudC60Lgg0YHQvtGF0YDQsNC90LXQvdGLLiDQo9GB0YLRgNC+0LnRgdGC0LLQviDQv9C10YDQtdC30LDQs9GA0YPQttCw0LXRgtGB0Y8uLi4nXG5cblx0XHRkZWJ1Zzpcblx0XHRcdHRpdGxlOiAn0J7RgtC70LDQtNC60LAnXG5cblx0XHRcdGNvbW1hbmQ6XG5cdFx0XHRcdG5hbWUgICAgICAgOiAn0JrQvtC80LDQvdC00LAnXG5cdFx0XHRcdHBhcmFtZXRlcnMgOiAn0JTQsNC90L3Ri9C1J1xuXHRcdFx0XHRvdXRwdXQgICAgIDogJ9Cg0LXQt9GD0LvRjNGC0LDRgidcblxuXHRcdFx0XHRvdXRwdXRfbW9kZTpcblx0XHRcdFx0XHR0cmVlOiAn0LTRgNC10LLQvidcblx0XHRcdFx0XHRjb2RlOiAn0LrQvtC0J1xuXG5cdFx0XHRcdGVycm9yOlxuXHRcdFx0XHRcdGNvbW1hbmRfbmFtZV9yZXF1aXJlZCAgICAgICA6ICfQktCy0LXQtNC40YLQtSDQutC+0LzQsNC90LTRgydcblx0XHRcdFx0XHRjb21tYW5kX3BhcmFtZXRlcnNfcmVxdWlyZWQgOiAn0JLQstC10LTQuNGC0LUg0LTQsNC90L3Ri9C1INC60L7QvNCw0L3QtNGLJ1xuXHRcdFx0XHRcdGpzb246ICfQntGI0LjQsdC60LAg0YHQuNC90YLQsNC60YHQuNGB0LAg0LLQviDQstGF0L7QtNC90L7QvCBKU09OLdC1Olxcblxcbnt7ZXJyb3J9fSdcblxuXHRcdFx0Y29tbWFuZHM6XG5cdFx0XHRcdG5hbWU6ICfQmtC+0LzQsNC90LTRiyAo0LHQsNGC0YcpJ1xuXG5cdFx0XHRcdGVycm9yOlxuXHRcdFx0XHRcdGNvbW1hbmRzX3JlcXVpcmVkOiAn0JLQstC10LTQuNGC0LUg0LrQvtC80LDQvdC00YsnXG5cblx0XHRcdFx0XHRiYXRjaF9mb3JtYXQ6ICfQndC10L/RgNCw0LLQuNC70YzQvdGL0Lkg0YTQvtGA0LzQsNGCIEpzb24gUnBjINCx0LDRgtGH0LAuINCU0L7Qu9C20LXQvSDQsdGL0YLRjCDQvNCw0YHRgdC40LIgSnNvbiBScGMg0LrQvtC80LDQvdC0Lidcblx0XHRcdFx0XHRiYXRjaF9qc29uOiAn0J7RiNC40LHQutCwINGB0LjQvdGC0LDQutGB0LjRgdCwINCy0L4g0LLRhdC+0LTQvdC+0LwgSlNPTi3QtSDQsdCw0YLRh9CwOlxcblxcbnt7ZXJyb3J9fSdcblxuXHRcdFx0Y29uZmlndXJhdGlvbjpcblx0XHRcdFx0c2VjdGlvbl90aXRsZTogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDRg9GB0YLRgNC+0LnRgdGC0LLQsCdcblx0XHRcdFx0b3V0cHV0X3RpdGxlOiAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPJ1xuXG5cdFx0XHRcdHJlZnJlc2hpbmc6ICfQntCx0L3QvtCy0LvRj9C10YLRgdGPLi4uJ1xuXG5cdFx0XHRcdGRvd25sb2FkOiAn0YHQutCw0YfQsNGC0YwnXG5cdFx0XHRcdGRvd25sb2FkX2JhdGNoOiAnYmF0Y2gnXG5cdFx0XHRcdHBvcnRzZXQgICAgICAgOiAn0J/QvtGA0YLRgdC10YInXG5cdFx0XHRcdHBvcnRzICAgICAgICAgOiAn0J/QvtGA0YLRiydcblx0XHRcdFx0aGFzaF9wcm9maWxlICA6ICfQn9GA0L7RhNC40LvRjCDRhdC10YjQuNGA0L7QstCw0L3QuNGPJ1xuXHRcdFx0XHRsYmcgICAgICAgICAgIDogJ9CT0YDRg9C/0L/RiyDQsdCw0LvQsNC90YHQuNGA0L7QstC60LgnXG5cdFx0XHRcdG1pcnJvcl9ncm91cHMgOiAn0JPRgNGD0L/Qv9GLINC30LXRgNC60LDQu9C40YDQvtCy0LDQvdC40Y8nXG5cdFx0XHRcdG1hcHBlcnMgICAgICAgOiAnTWFwcGVycydcblx0XHRcdFx0YWNsICAgICAgICAgICA6ICdBY2Nlc3MgQ29udHJvbCBMaXN0cydcblx0XHRcdFx0bmV0d29yayAgICAgICA6ICfQodC10YLRjCdcblx0XHRcdFx0cm91dGluZyAgICAgICA6ICfQn9GA0LDQstC40LvQsCdcblx0XHRcdFx0dGFfcnVsZXMgICAgICA6ICfQn9GA0LDQstC40LvQsCB0YSdcblx0XHRcdFx0dXNlcnMgICAgICAgICA6ICfQn9C+0LvRjNC30L7QstCw0YLQtdC70LgnXG5cblx0XHRcdGFkbWluaXN0cmF0aW9uOlxuXHRcdFx0XHRzZWN0aW9uX3RpdGxlOiAn0JDQtNC80LjQvdC40YHRgtGA0LjRgNC+0LLQsNC90LjQtSdcblx0XHRcdFx0Y29uZmlndXJhdGlvbjogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjydcblx0XHRcdFx0bGFuZ3VhZ2U6ICfQr9C30YvQuidcblxuXHRcdFx0XHRlcnJvcjpcblx0XHRcdFx0XHRjb25maWd1cmF0aW9uX3JlcXVpcmVkOiAn0JLQstC10LTQuNGC0LUg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINGD0YHRgtGA0L7QudGB0YLQstCwJ1xuXHRcdFx0XHRcdGNvbmZpZ3VyYXRpb25fanNvbjogJ9Ce0YjQuNCx0LrQsCDRgdC40L3RgtCw0LrRgdC40YHQsCDQsiBKU09OLdC1INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDRg9GB0YLRgNC+0LnRgdGC0LLQsDpcXG5cXG57e2Vycm9yfX0nXG5cblx0XHRcdHByb2dyYW1faW5mb3JtYXRpb246XG5cdFx0XHRcdHZlcnNpb246ICfQktC10YDRgdC40Y8nXG5cdFx0XHRcdHJldmlzaW9uOiAn0YDQtdCy0LjQt9C40Y8nXG5cblx0XHRcdGVycm9yOlxuXHRcdFx0XHRnZW5lcmljOiAn0J7RiNC40LHQutCwIHt7c3RhdHVzfX06IHt7ZGF0YX19J1xuXG5cdFx0XHRub3RpZmljYXRpb246XG5cdFx0XHRcdHJlc3RhcnRfZ3VscDogJ9Ci0LXQv9C10YDRjCDQv9C10YDQtdC30LDQv9GD0YHRgtC40YLQtSDRgdCy0L7QuSBndWxwJ1xuXG5cdFx0YWRtaW46XG5cdFx0XHR0aXRsZTogJ9Cj0L/RgNCw0LLQu9C10L3QuNC1J1xuXG5cdGFjdGlvbjpcblx0XHRhcHBseSAgIDogJ9Cf0YDQuNC80LXQvdC40YLRjCdcblx0XHRleGVjdXRlIDogJ9CS0YvQv9C+0LvQvdC40YLRjCdcblx0XHRzYXZlICAgIDogJ9Ch0L7RhdGA0LDQvdC40YLRjCdcblx0XHRvayAgICAgIDogJ09LJ1xuXHRcdGNhbmNlbCAgOiAn0J7RgtC80LXQvdCwJ1xuXHRcdHllcyAgICAgOiAn0JTQsCdcblx0XHRubyAgICAgIDogJ9Cd0LXRgidcblxuXHRmaWxlX3VwbG9hZDpcblx0XHRjaG9vc2VfZmlsZTogJ9CS0YvQsdGA0LDRgtGMINGE0LDQudC7J1xuXHRcdHVwbG9hZGluZzogJ9Ck0LDQudC7INC30LDQs9GA0YPQttCw0LXRgtGB0Y/igKYnXG5cblx0bWVudTpcblx0XHRjb25maWd1cmF0aW9uOlxuXHRcdFx0dGl0bGU6ICfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8nXG5cblx0XHRcdG9wZW46XG5cdFx0XHRcdHRpdGxlOiAn0J7RgtC60YDRi9GC0YwnXG5cdFx0XHRcdHRvb2x0aXA6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC40Lcg0YTQsNC50LvQsCdcblxuXHRcdFx0c2F2ZTpcblx0XHRcdFx0dGl0bGU6ICfQodC+0YXRgNCw0L3QuNGC0YwnXG5cdFx0XHRcdHRvb2x0aXA6ICfQodC+0YXRgNCw0L3QuNGC0Ywg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINCyINGE0LDQudC7J1xuXG5cdFx0bG9nb3V0OiAn0JLRi9GF0L7QtCdcblxuXHRcdGxvZzogJ9Cb0L7Qsydcblx0XHRkZWJ1ZzogJ9Ce0YLQu9Cw0LTQutCwJ1xuXG5cdG5ldHdvcms6XG5cdFx0cmF0ZTpcblx0XHRcdGJwcyAgOiAn0LHQuNGCL9GBJ1xuXHRcdFx0a2JwcyA6ICfQutCx0LjRgi/RgSdcblx0XHRcdE1icHMgOiAn0JzQsdC40YIv0YEnXG5cdFx0XHRHYnBzIDogJ9CT0LHQuNGCL9GBJ1xuXG5cdGVycm9yOlxuXHRcdGphdmFzY3JpcHQ6ICfQkiDQsdGA0LDRg9C30LXRgNC1INC+0YLQutC70Y7Rh9C10L3QsCDQv9C+0LTQtNC10YDQttC60LAgSmF2YXNjcmlwdC4g0JTQu9GPINGA0LDQsdC+0YLRiyDQv9GA0LjQu9C+0LbQtdC90LjRjyDQstC60LvRjtGH0LjRgtC1IEphdmFzY3JpcHQuJ1xuXHRcdGdlbmVyaWM6ICfQntGI0LjQsdC60LA6IHt7bWVzc2FnZX19J1xuXHRcdHdyb25nX3Bhc3N3b3JkOiAn0JLRiyDQstCy0LXQu9C4INC90LXQstC10YDQvdGL0Lkg0L/QsNGA0L7Qu9GMJ1xuXHRcdHVuYXV0aGVudGljYXRlZDogJ9CX0LDQv9GA0L7RiNC10L3QvdCw0Y8g0L7Qv9C10YDQsNGG0LjRjyDRgtGA0LXQsdGD0LXRgiDQstGF0L7QtNCwINCyINGB0LjRgdGC0LXQvNGDJ1xuXHRcdG9sZF9icm93c2VyOiAn0J7QsdC90L7QstC40YLQtSDQstCw0Ygg0LHRgNCw0YPQt9C10YAuINCf0L7QtNC00LXRgNC20LjQstCw0LXQvNGL0LU6IHt7YnJvd3NlcnN9fSdcblxuXHRcdGRldmljZTpcblx0XHRcdHJlc2V0X2ZhaWxlZDogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0YHQsdGA0L7RgdC40YLRjCDRg9GB0YLRgNC+0LnRgdGC0LLQvidcblxuXHRjb25maWd1cmF0aW9uOlxuXHRcdHN0YXR1czpcblx0XHRcdGFwcGxpY2F0aW9uX3Jlc3RhcnRpbmc6ICfQn9GA0L7Qs9GA0LDQvNC80LAg0L/QtdGA0LXQt9Cw0L/Rg9GB0LrQsNC10YLRgdGPJ1xuXHRcdFx0c2F2ZWQ6ICfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YHQvtGF0YDQsNC90LXQvdCwJ1xuXHRcdFx0YXBwbHlpbmc6ICfQn9GA0LjQvNC10L3Rj9C10Lwg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOJ1xuXHRcdFx0bG9hZGVkOiAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINC30LDQs9GA0YPQttC10L3QsCdcblx0XHRcdGRlbGV0ZWQ6ICfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YPQtNCw0LvQtdC90LAnXG5cblx0XHRlcnJvcjpcblx0XHRcdGZpbHRlcl9zaG91bGRfbm90X2hhdmVfYV9tYXNrOiAn0KMg0YTQuNC70YzRgtGA0LAgwqt7e2ZpbHRlcn19wrsg0L3QtSDQtNC+0LvQttC90LAg0LHRi9GC0Ywg0LfQsNC00LDQvdCwINC80LDRgdC60LAnXG5cdFx0XHRpbnZhbGlkOiAn0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YIg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4J1xuXHRcdFx0aW5jb25zaXN0ZW50OiAn0J3QtdCy0L7Qt9C80L7QttC90L4g0L/RgNC40LzQtdC90LjRgtGMINC00LDQvdC90YPRjiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0L3QsCDRjdGC0L7QvCDRg9GB0YLRgNC+0LnRgdGC0LLQtSdcblx0XHRcdGNvbmZpZ3VyYXRpb25fdXBsb2FkX2ZhaWxlZDogJ9Ce0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCdcblx0XHRcdHRvb19tYW55X2ludGVydmFsc19pbl9maWx0ZXJzOiAn0J3QtSDRg9C00LDQu9C+0YHRjCDQv9GA0LjQvNC10L3QuNGC0Ywg0L/RgNCw0LLQuNC70LA6INC/0YDQtdCy0YvRiNC10L3QviDQutC+0LvQuNGH0LXRgdGC0LLQviDQuNC90YLQtdGA0LLQsNC70L7QsiDQsiDRhNC40LvRjNGC0YDQsNGFJ1xuXHRcdFx0bWF4X21pcnJvcmluZ19wb3J0czogJ9Cf0YDQtdCy0YvRiNC10L3QviDQtNC+0L/Rg9GB0YLQuNC80L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9C+0YDRgtC+0LIsINCyINC60L7RgtC+0YDRi9C1INC60L7Qv9C40YDRg9C10YLRgdGPINGC0YDQsNGE0LjQuiAoe3ttYXh9fSknXG5cdFx0XHRtYXhfYWNsczogJ9Cf0YDQtdCy0YvRiNC10L3QviDQtNC+0L/Rg9GB0YLQuNC80L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQstGF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LIg0L3QsCDRg9GB0YLRgNC+0LnRgdGC0LLQtSAoe3ttYXh9fSknXG5cblx0XHRjb25maXJtX3Jlc2V0OiAn0JLRgdC1INC90LDRgdGC0YDQvtC50LrQuCDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1INCx0YPQtNGD0YIg0YHQsdGA0L7RiNC10L3Riy4g0J/RgNC+0LTQvtC70LbQuNGC0Yw/J1xuXHRcdGNvbmZpcm1fZGVsZXRpb246ICfQo9C00LDQu9C40YLRjCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4gwqt7e25hbWV9fcK7PydcblxuXHRkZXZpY2U6XG5cdFx0c3RhdHVzOlxuXHRcdFx0dW5rbm93bl9wbGF0Zm9ybTogJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCwJ1xuXHRcdFx0Y29ubmVjdGluZzogJ9Ce0LbQuNC00LDQvdC40LUg0L7RgtCy0LXRgtCwINC+0YIg0YPRgdGC0YDQvtC50YHRgtCy0LAuLi4nXG5cdFx0XHRhcHBseWluZ19ydWxlczogJ9Cf0YDQuNC80LXQvdC10L3QuNC1INC/0YDQsNCy0LjQuyDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1J1xuXHRcdFx0cmVib290aW5nOiAn0KPRgdGC0YDQvtC50YHRgtCy0L4g0L/QtdGA0LXQt9Cw0LPRgNGD0LbQsNC10YLRgdGPLCDQttC00LjRgtC1Li4uJ1xuXHRcdFx0cm91dGluZ19jb25maWd1cmF0aW9uX2FwcGxpZWQ6ICfQn9GA0LDQstC40LvQsCDRgdC+0YXRgNCw0L3QtdC90YsnXG5cblx0Z3JhcGg6XG5cdFx0dGltZTpcblx0XHRcdG1pbnV0ZXM6ICfQnNC40L3Rg9GC0YsnXG5cdFx0XHRob3VycyAgOiAn0KfQsNGB0YsnXG5cdFx0XHRkYXlzICAgOiAn0JTQvdC4J1xuXHRcdFx0bW9udGhzIDogJ9Cc0LXRgdGP0YbRiydcblxuXHRcdHZhbHVlOlxuXHRcdFx0dHlwZTpcblx0XHRcdFx0cmF0ZSAgOiAn0JHQuNGC0YDQtdC50YInXG5cdFx0XHRcdHJ4X3JhdGUgIDogJ1JYINCx0LjRgtGA0LXQudGCJ1xuXHRcdFx0XHR0eF9yYXRlICA6ICdUWCDQsdC40YLRgNC10LnRgidcblx0XHRcdFx0cmF0ZSAgOiAn0JHQuNGC0YDQtdC50YInXG5cdFx0XHRcdGNyYyAgIDogJ9Ce0YjQuNCx0LrQuCBDUkMnXG5cdFx0XHRcdGRyb3BzIDogJ9Ce0YLQsdGA0L7RiNC10L3QvdGL0LUg0L/QsNC60LXRgtGLJ1xuXG5cdHN0YXR1czpcblx0XHRsb2FkaW5nX3BhZ2U6ICfQl9Cw0LPRgNGD0LfQutCwINGB0YLRgNCw0L3QuNGG0YsnXG5cblx0ZW50ZXJfc3lzdGVtX3Bhc3N3b3JkOiAn0JLQstC10LTQuNGC0LUg0L/QsNGA0L7Qu9GMINC00LvRjyDQstGF0L7QtNCwINCyINGB0LjRgdGC0LXQvNGDJ1xuXG5cdG9wZXJhdGlvbnNfcGVuZGluZ19vbl9wYWdlOiAn0JLRiyDRgdC+0LHQuNGA0LDQtdGC0LXRgdGMINC/0L7QutC40L3Rg9GC0Ywg0YHRgtGA0LDQvdC40YbRgywg0L3QsCDQutC+0YLQvtGA0L7QuSDQvdC1INC30LDQutC+0L3Rh9C10L3QsCDRgNCw0LHQvtGC0LAuINCS0Ysg0YPQstC10YDQtdC90YssINGH0YLQviDQttC10LvQsNC10YLQtSDQvtGC0LzQtdC90LjRgtGMINCy0YHRkSDQuCDRg9C50YLQuCDRgSDRjdGC0L7QuSDRgdGC0YDQsNC90LjRhtGLPydcblxuXHRkZXZpY2VfaXNfYm9vdGluZzogJ9Cj0YHRgtGA0L7QudGB0YLQstC+INC30LDQs9GA0YPQttCw0LXRgtGB0Y8nIiwiKGZ1bmN0aW9uKCkge1xuICBpMThuLnJ1X1JVID0ge1xuICAgIGxhbmd1YWdlX25hbWU6ICfQoNGD0YHRgdC60LjQuScsXG4gICAgdGl0bGU6ICfQkNCz0YDQtdCz0LDRgtC+0YAg0KLRgNCw0YTQuNC60LAnLFxuICAgIGxvZ2luOiB7XG4gICAgICB0aXRsZTogJ9CS0YXQvtC0INCyINGB0LjRgdGC0LXQvNGDJyxcbiAgICAgIHBhc3N3b3JkOiB7XG4gICAgICAgIHRvb2x0aXA6ICfQktCy0LXQtNC40YLQtSDQv9Cw0YDQvtC70YwnXG4gICAgICB9XG4gICAgfSxcbiAgICBBQ0w6IHtcbiAgICAgIHJ1bGU6IHtcbiAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgYmFsYW5jZTogJ9CR0LDQu9Cw0L3RgdC40YDQvtCy0LrQsCcsXG4gICAgICAgICAgcmVkaXJlY3Q6ICfQn9C10YDQtdC90LDQv9GA0LDQstC70LXQvdC40LUnLFxuICAgICAgICAgIG1pcnJvcjogJ9Ca0L7Qv9C40YDQvtCy0LDQvdC40LUnLFxuICAgICAgICAgIGR1YmJpbmc6ICfQmtC70L7QvdC40YDQvtCy0LDQvdC40LUg0YfQtdGA0LXQtyBsb29wYmFjaycsXG4gICAgICAgICAgZHJvcDogJ9CR0LvQvtC60LjRgNC+0LLQutCwJyxcbiAgICAgICAgICBwZXJtaXQ6ICfQn9GA0L7Qv9GD0YHQuidcbiAgICAgICAgfSxcbiAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgbm9uZTogJ9CR0LXQtyDRhNC40LvRjNGC0YDQsNGG0LjQuCcsXG4gICAgICAgICAgcGVybWl0OiAn0J7RgtCx0L7RgCDQv9Cw0LrQtdGC0L7QsicsXG4gICAgICAgICAgZHJvcDogJ9CR0LvQvtC60LjRgNC+0LLQutCwINC/0LDQutC10YLQvtCyJyxcbiAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICBldGhlcm5ldF9wcm90b2NvbDogJ0V0aGVyVHlwZScsXG4gICAgICAgICAgICBzb3VyY2VfTUFDX2FkZHJlc3M6ICdNQUMg0LDQtNGA0LXRgSDQvtGC0L/RgNCw0LLQuNGC0LXQu9GPJyxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uX01BQ19hZGRyZXNzOiAnTUFDINCw0LTRgNC10YEg0L/QvtC70YPRh9Cw0YLQtdC70Y8nLFxuICAgICAgICAgICAgc291cmNlX0lQX2FkZHJlc3M6ICdJUCDQvtGC0L/RgNCw0LLQuNGC0LXQu9GPJyxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uX0lQX2FkZHJlc3M6ICdJUCDQv9C+0LvRg9GH0LDRgtC10LvRjycsXG4gICAgICAgICAgICBtdWx0aV9JUF9hZGRyZXNzOiAn0JzRg9C70YzRgtC4IElQLdCw0LTRgNC10YEnLFxuICAgICAgICAgICAgSVBfcHJvdG9jb2w6ICdJUCDQv9GA0L7RgtC+0LrQvtC7JyxcbiAgICAgICAgICAgIElQX3Byb3RvY29sX3NvdXJjZTogJ9CY0YHRhdC+0LTRj9GJ0LjQuSDQv9C+0YDRgicsXG4gICAgICAgICAgICBJUF9wcm90b2NvbF9kZXN0aW5hdGlvbjogJ9CS0YXQvtC00Y/RidC40Lkg0L/QvtGA0YInLFxuICAgICAgICAgICAgVkxBTjogJ1ZMQU4nLFxuICAgICAgICAgICAgVkxBTjI6ICdWTEFOMicsXG4gICAgICAgICAgICBMZXZlbDRfZGF0YTogJ9Ch0L7QtNC10YDQttC40LzQvtC1INC/0LDQutC10YLQsCAoRFBJKSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZ2U6IHtcbiAgICAgIHBvcnRzOiB7XG4gICAgICAgIHRpdGxlOiAn0J/QvtGA0YLRiycsXG4gICAgICAgIHNmcDogJ9Cj0YHRgtCw0L3QvtCy0LvQtdC9INC80L7QtNGD0LvRjCBTRlAnLFxuICAgICAgICBzZnBfaW5mbzoge1xuICAgICAgICAgIHBvcnQ6ICfQn9C+0YDRgicsXG4gICAgICAgICAgaW5mbzogJ9CY0L3RhNC+0YDQvNCw0YbQuNGPINC+IFNGUC3QvNC+0LTRg9C70LUnLFxuICAgICAgICAgIGlkZW50aWZpZXI6ICfQmNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCcsXG4gICAgICAgICAgc3BlY19jb21wOiAn0KLQuNC/JyxcbiAgICAgICAgICB2ZW5kb3JfbmFtZTogJ9Cf0YDQvtC40LfQstC+0LTQuNGC0LXQu9GMJyxcbiAgICAgICAgICBwYXJ0X251bWJlcjogJ1BhcnQgbnVtYmVyJyxcbiAgICAgICAgICB0ZW1wZXJhdHVyZTogJ9Ci0LXQvNC/0LXRgNCw0YLRg9GA0LAnLFxuICAgICAgICAgIHJ4X3Bvd2VyOiAn0JLRhdC+0LTQvdC+0Lkg0YHQuNCz0L3QsNC7JyxcbiAgICAgICAgICB0eF9wb3dlcjogJ9CS0YvRhdC+0LTQvdC+0Lkg0YHQuNCz0L3QsNC7J1xuICAgICAgICB9LFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICByZXNldF9jb3VudGVyczogJ9Ch0LHRgNC+0YHQuNGC0Ywg0YHRh9GR0YLRh9C40LrQuCcsXG4gICAgICAgICAgc2hvd19ncmFwaHM6ICfQk9GA0LDRhNC40LrQuCdcbiAgICAgICAgfSxcbiAgICAgICAgYWRkX2NvbW1lbnQ6ICfQmtC+0LzQvNC10L3RgtCw0YDQuNC5JyxcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICBudW1iZXI6ICfihJYg0L/QvtGA0YLQsCcsXG4gICAgICAgICAgcng6ICdSWCcsXG4gICAgICAgICAgdHg6ICdUWCcsXG4gICAgICAgICAgdHg6ICdUWCcsXG4gICAgICAgICAgcnhfcmF0ZTogJ1JYLFxcbtCx0LjRgtGA0LXQudGCJyxcbiAgICAgICAgICB0eF9yYXRlOiAnVFgsXFxu0LHQuNGC0YDQtdC50YInLFxuICAgICAgICAgIHJ4X29jdGV0czogJ1JYLFxcbtC+0LrRgtC10YLRiycsXG4gICAgICAgICAgcnhfc2lnbmFsOiAnUlgsXFxu0YHQuNCz0L3QsNC7JyxcbiAgICAgICAgICB0eF9vY3RldHM6ICdUWCxcXG7QvtC60YLQtdGC0YsnLFxuICAgICAgICAgIG1vZGU6ICfQoNC10LbQuNC8JyxcbiAgICAgICAgICBjb21tZW50czogJ9Ca0L7QvNC80LXQvdGC0LDRgNC40LgnLFxuICAgICAgICAgIGNyYzogJ9Ce0YjQuNCx0LrQuFxcbkNSQycsXG4gICAgICAgICAgZHJvcHM6ICfQntGC0LHRgNC+0YjQtdC90L3Ri9C1XFxu0L/QsNC60LXRgtGLJyxcbiAgICAgICAgICBwYXJzZXJfbGV2ZWw6ICfQk9C70YPQsdC40L3QsFxcbtCw0L3QsNC70LjQt9CwJyxcbiAgICAgICAgICBncmFwaDogJ9CT0YDQsNGE0LjQuicsXG4gICAgICAgICAgZHBpOiAnRFBJJ1xuICAgICAgICB9LFxuICAgICAgICBmb3JjZV91cF9kZXNjcmlwdGlvbjogJ9Cf0YDQuNC90YPQtNC40YLQtdC70YzQvdC+INC/0L7QtNC90LjQvNCw0YLRjCDQu9C40L3QuiDQv9GA0Lgg0L7RgtGB0YPRgtGB0YLQstC40Lgg0YLRgNCw0YTQuNC60LAg0L3QsCBSWCcsXG4gICAgICAgIGxvb3BiYWNrX2Rlc2NyaXB0aW9uOiAn0JLQvdGD0YLRgNC10L3QtdC1INC30LDQvNGL0LrQsNC90LjQtSDRgtGA0LDRhNC40LrQsCDRgSBUWCDQvdCwIFJYJyxcbiAgICAgICAgbG9vcGJhY2tfY29uZmlybTogJ9CS0Ysg0YPQstC10YDQtdC90YssINGH0YLQviDRhdC+0YLQuNGC0LUg0LLQutC70Y7Rh9C40YLRjCDQstC90YPRgtGA0LXQvdC10LUg0LfQsNC80YvQutCw0L3QuNC1INGC0YDQsNGE0LjQutCwINGBIFRYINC90LAgUlg/J1xuICAgICAgfSxcbiAgICAgIHJvdXRpbmc6IHtcbiAgICAgICAgdGl0bGU6ICfQn9GA0LDQstC40LvQsCcsXG4gICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgIG5ld19ydWxlOiAn0J3QvtCy0L7QtSDQv9GA0LDQstC40LvQvicsXG4gICAgICAgICAgZGVsZXRlX2FsbDogJ9Cj0LTQsNC70LjRgtGMINCy0YHQtScsXG4gICAgICAgICAgZWRpdF9ydWxlX2lucHV0czogJ0N0cmwrRSDigJQg0KDRg9GH0L3QvtC1INGD0L/RgNCw0LLQu9C10L3QuNC1JyxcbiAgICAgICAgICBlZGl0X3J1bGVfaW5wdXRzX3RpdGxlOiAn0JIg0YDQtdC20LjQvNC1INGA0YPRh9C90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPLCDQv9C+0YDRgtGLINC00L7QsdCw0LLQu9GP0Y7RgtGB0Y8g0LLQstC+0LTQvtC8INC40YUg0L3QvtC80LXRgNC+0LIg0LIg0YLQtdC60YHRgtC+0LLQvtC1INC/0L7Qu9C1LicsXG4gICAgICAgICAgZW5hYmxlX2FsbDogJ9CS0LrQu9GO0YfQuNGC0Ywg0LLRgdC1JyxcbiAgICAgICAgICBkaXNhYmxlX2FsbDogJ9CS0YvQutC70Y7Rh9C40YLRjCDQstGB0LUnXG4gICAgICAgIH0sXG4gICAgICAgIGRldmVsb3Blcl9tb2RlOiAn0JLRiyDQvdCw0YXQvtC00LjRgtC10YHRjCDQsiDRgNC10LbQuNC80LUg0YDQsNC30YDQsNCx0L7RgtGH0LjQutCwLiDQn9GA0LDQstC40LvQsCwg0YHQvtGF0YDQsNC90ZHQvdC90YvQtSDQstCw0LzQuCDQsiDQv9C+0YHQu9C10LTQvdC40Lkg0YDQsNC3LCDQvdC1INGB0L7QstC/0LDQtNCw0Y7RgiDRgSDRgtC10LrRg9GJ0LjQvNC4INC/0YDQsNCy0LjQu9Cw0LzQuCDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1LicsXG4gICAgICAgIHJlc2V0OiAn0KHQsdGA0L7RgdC40YLRjCDQstGB0LUg0L/RgNCw0LLQuNC70LAg0L3QsCDRg9GB0YLRgNC+0LnRgdGC0LLQtT8nLFxuICAgICAgICBjbGVhcjogJ9Cj0LTQsNC70LjRgtGMINCy0YHQtSDQv9GA0LDQstC40LvQsD8nLFxuICAgICAgICBydWxlOiB7XG4gICAgICAgICAgbG9hZGluZzogJ9Ch0YfQuNGC0YvQstCw0L3QuNC1INC/0YDQsNCy0LjQuycsXG4gICAgICAgICAgaW5wdXRzOiAn0JLRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiycsXG4gICAgICAgICAgb3V0cHV0czogJ9CS0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiycsXG4gICAgICAgICAgbmFtZTogXCLQn9GA0LDQstC40LvQviDihJYge3tpZH19XCIsXG4gICAgICAgICAgZGVsZXRlX2NvbmZpcm1hdGlvbjogJ9Cj0LTQsNC70LjRgtGMINC/0YDQsNCy0LjQu9C+IMKre3tydWxlfX3Cuz8nLFxuICAgICAgICAgIGlzX2ZpbHRlcmVkOiAn0KTQuNC70YzRgtGA0LDRhtC40Y8nLFxuICAgICAgICAgIGJhbGFuY2U6IHtcbiAgICAgICAgICAgIGJ5OiAn0JHQsNC70LDQvdGB0LjRgNC+0LLQsNGC0Ywg0L/QvicsXG4gICAgICAgICAgICBvdXRwdXRfcG9ydHNfcmVxdWlyZWQ6ICfQlNC+0LHQsNCy0YzRgtC1INCy0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiyDQtNC70Y8g0LHQsNC70LDQvdGB0LjRgNC+0LLQutC4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICBsb3dlcl9wcmlvcml0eTogJ9Cc0LXQvdGM0YjQtSDQv9GA0LjQvtGA0LjRgtC10YInLFxuICAgICAgICAgICAgaGlnaGVyX3ByaW9yaXR5OiAn0JHQvtC70YzRiNC1INC/0YDQuNC+0YDQuNGC0LXRgicsXG4gICAgICAgICAgICBkdXBsaWNhdGU6ICfQlNGD0LHQu9C40YDQvtCy0LDRgtGMJyxcbiAgICAgICAgICAgIFwiZGVsZXRlXCI6ICfQo9C00LDQu9C40YLRjCcsXG4gICAgICAgICAgICBhZ2dyZWdhdGlvbjogJ9CQ0LPRgNC10LPQsNGG0LjRjydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdyYXBoOiB7XG4gICAgICAgICAgICBncmFwaDogJ9CT0YDQsNGE0LjQuicsXG4gICAgICAgICAgICBzdW06ICfQodGD0LzQvNC40YDQvtCy0LDRgtGMJyxcbiAgICAgICAgICAgIFwiaW5cIjogJ9CS0YXQvtC0JyxcbiAgICAgICAgICAgIGluczogJ9CS0YXQvtC00YsnLFxuICAgICAgICAgICAgb3V0OiAn0JLRi9GF0L7QtCcsXG4gICAgICAgICAgICBvdXRzOiAn0JLRi9GF0L7QtNGLJyxcbiAgICAgICAgICAgIHBvcnRfbnVtYmVyOiAn0J/QvtGA0YIg4oSWJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsdGVyaW5nOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICfQpNC40LvRjNGC0YAnLFxuICAgICAgICAgICAgdmFsdWU6ICfQl9C90LDRh9C10L3QuNC1JyxcbiAgICAgICAgICAgIG1hc2s6ICfQnNCw0YHQutCwJyxcbiAgICAgICAgICAgIHNldF9pbnRlcnZhbDogJ9CU0LjQsNC/0LDQt9C+0L0nLFxuICAgICAgICAgICAgYWRkX21hc2s6ICfQl9Cw0LTQsNGC0Ywg0LzQsNGB0LrRgycsXG4gICAgICAgICAgICByZW1vdmVfZmlsdGVyOiAn0KPQtNCw0LvQuNGC0YwnLFxuICAgICAgICAgICAgYWRkX2ZpbHRlcjogJ9CU0L7QsdCw0LLQuNGC0Ywg0YTQuNC70YzRgtGAJyxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgIGludmFsaWRfbWFzazogJ9Cd0LXQstC10YDQvdCw0Y8g0LzQsNGB0LrQsCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICBpbnB1dF9wb3J0c19yZXF1aXJlZDogJ9CU0L7QsdCw0LLRjNGC0LUg0LLRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiycsXG4gICAgICAgICAgICBvdXRwdXRfcG9ydHNfcmVxdWlyZWQ6ICfQlNC+0LHQsNCy0YzRgtC1INCy0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiycsXG4gICAgICAgICAgICBjYW5fcmVkaXJlY3RfdG9fYV9zaW5nbGVfcG9ydF9vbmx5OiAn0JIg0L/RgNCw0LLQuNC70LDRhSDQv9C10YDQtdC90LDQv9GA0LDQstC70LXQvdC40Y8g0LzQvtC20LXRgiDQsdGL0YLRjCDRgtC+0LvRjNC60L4g0L/QviDQvtC00L3QvtC80YMg0LLRi9GF0L7QtNC90L7QvNGDINC/0L7RgNGC0YMnLFxuICAgICAgICAgICAgb25seV90aGVfZmlyc3Rfc3VicG9ydF9vZl80MGdfcG9ydF9jYW5fYmVfdXNlZF9pbl9ydWxlczogJ9CV0YHQu9C4INGB0L7RgdGC0LDQstC90L7QuSDQv9C+0YDRgiDQv9C10YDQtdCy0LXQtNGR0L0g0LIg0YDQtdC20LjQvCA0MEcsINGC0L4g0LIg0L/RgNCw0LLQuNC70LDRhSDQvNC+0LbQtdGCINGD0YfQsNGB0YLQstC+0LLQsNGC0Ywg0YLQvtC70YzQutC+INC/0LXRgNCy0YvQuSDQv9C+0LTQv9C+0YDRgiDRjdGC0L7Qs9C+INGB0L7RgdGC0LDQstC90L7Qs9C+INC/0L7RgNGC0LAnLFxuICAgICAgICAgICAgZmlsdGVyczogJ9Cd0LXQv9GA0LDQstC40LvRjNC90L4g0LfQsNC00LDQvdGLINGE0LjQu9GM0YLRgNGLINGN0YLQvtCz0L4g0L/RgNCw0LLQuNC70LAnLFxuICAgICAgICAgICAgcG9ydF9maWx0ZXJfcmVxdWlyZXNfaXBfcHJvdG9jb2w6ICfQlNC70Y8g0YTQuNC70YzRgtGA0LDRhtC40Lgg0L/QviDQvdC+0LzQtdGA0YMg0L/QvtGA0YLQsCDRgtGA0LXQsdGD0LXRgtGB0Y8g0YLQsNC60LbQtSDQt9Cw0LTQsNGC0Ywg0YTQuNC70YzRgtGAINC/0L4g0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQtdC80YMgSVAg0L/RgNC+0YLQvtC60L7Qu9GDICjQvtCx0YvRh9C90L4g0Y3RgtC+IFRDUCDQuNC70LggVURQKScsXG4gICAgICAgICAgICB0b29fbWFueV9pbnRlcnZhbHNfaW5fZmlsdGVyczogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L/RgNC40LzQtdC90LjRgtGMINC/0YDQsNCy0LjQu9CwOiDQv9GA0LXQstGL0YjQtdC90L4g0LrQvtC70LjRh9C10YHRgtCy0L4g0LjQvdGC0LXRgNCy0LDQu9C+0LIg0LIg0YTQuNC70YzRgtGA0LDRhScsXG4gICAgICAgICAgICByZWRpcmVjdGluZ190b19zZXZlcmFsX3BvcnRzX2lzX2JhbGFuY2luZzogJ9Cf0LXRgNC10L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvdCwINC90LXRgdC60L7Qu9GM0LrQviDQv9C+0YDRgtC+0LIg4oCUINGN0YLQviDQsdCw0LvQsNC90YHQuNGA0L7QstC60LAnLFxuICAgICAgICAgICAgZXhpdF9wb3J0X2VkaXRpbmdfbW9kZTogJ9CS0YvQudC00LjRgtC1INC40Lcg0YDQtdC20LjQvNCwINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0L/QvtGA0YLQvtCyJyxcbiAgICAgICAgICAgIGludmFsaWRfaW5wdXRzX3RleHQ6ICfQntGI0LjQsdC60LAg0LIg0YHQv9C40YHQutC1INCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7QsicsXG4gICAgICAgICAgICBpbnZhbGlkX291dHB1dHNfdGV4dDogJ9Ce0YjQuNCx0LrQsCDQsiDRgdC/0LjRgdC60LUg0LLRi9GF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LInLFxuICAgICAgICAgICAgaW52YWxpZF9tdWx0aV9pcF9jb3VudDogJ9Cf0YDQtdCy0YvRiNC10L3QviDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LIge3tjb3VudH19JyxcbiAgICAgICAgICAgIGludmFsaWRfZm9ybWF0OiAn0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YInXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICBsb2FkaW5nX3J1bGVzX2ludG9fZGV2aWNlOiAn0J/RgNC+0LPRgNGD0LbQsNC10Lwg0L/RgNCw0LLQuNC70LAg0LIg0YPRgdGC0YDQvtC50YHRgtCy0L4nLFxuICAgICAgICAgIHJlYWRpbmdfcnVsZXNfZnJvbV9kZXZpY2U6ICfQodGH0LjRgtGL0LLQsNC10Lwg0L/RgNCw0LLQuNC70LAnLFxuICAgICAgICAgIHJ1bGVzX3NhdmVkOiAn0J/RgNCw0LLQuNC70LAg0YHQvtGF0YDQsNC90LXQvdGLJyxcbiAgICAgICAgICBlcnJvcnNfaW5fcnVsZXM6ICfQntGI0LjQsdC60LAg0LIg0L/RgNCw0LLQuNC70LDRhScsXG4gICAgICAgICAgYXBwbHlpbmdfcnVsZXM6ICfQn9GA0LjQvNC10L3Rj9C10Lwg0L/RgNCw0LLQuNC70LAnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICB0aXRsZTogJ9Cd0LDRgdGC0YDQvtC50LrQuCcsXG4gICAgICAgIG1hbnVhbDogJ9CS0YDRg9GH0L3Rg9GOJyxcbiAgICAgICAgZGhjcDogJ0RIQ1AnLFxuICAgICAgICBpcF9hZGRyZXNzOiAnSVAt0LDQtNGA0LXRgScsXG4gICAgICAgIHN1Ym5ldF9tYXNrOiAn0JzQsNGB0LrQsCDQv9C+0LTRgdC10YLQuCcsXG4gICAgICAgIGdhdGV3YXk6ICfQqNC70Y7QtycsXG4gICAgICAgIHBsYXRmb3JtOiAn0J/Qu9Cw0YLRhNC+0YDQvNCwJyxcbiAgICAgICAgY2hhbmdlX3Bhc3N3b3JkOiAn0KHQvNC10L3QuNGC0Ywg0L/QsNGA0L7Qu9GMJyxcbiAgICAgICAgbmV3X3Bhc3N3b3JkOiAn0J3QvtCy0YvQuSDQv9Cw0YDQvtC70YwnLFxuICAgICAgICBjb25maXJtX3Bhc3N3b3JkOiAn0J/QvtC00YLQstC10YDQtNC40YLQtSDQv9Cw0YDQvtC70YwnLFxuICAgICAgICBwYXNzd29yZF9jaGFuZ2VkOiAn0J/QsNGA0L7Qu9GMINC40LfQvNC10L3RkdC9JyxcbiAgICAgICAgY3VycmVudF9wYXNzd29yZDogJ9Ci0LXQutGD0YnQuNC5INC/0LDRgNC+0LvRjCcsXG4gICAgICAgIGxpY2Vuc2U6IHtcbiAgICAgICAgICB0aXRsZTogJ9Cb0LjRhtC10L3Qt9C40LgnLFxuICAgICAgICAgIGRyYWdfbl9kcm9wOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YTQsNC50Lsg0LvQuNGG0LXQvdC30LjQuCDRgdGO0LTQsCcsXG4gICAgICAgICAgc2VyaWFsOiAn0JTQu9GPINC/0YDQuNC+0LHRgNC10YLQtdC90LjRjyDQu9C40YbQtdC90LfQuNC4INCy0LDQvCDQv9C+0L3QsNC00L7QsdC40YLRgdGPINGB0LXRgNC40LnQvdGL0Lkg0L3QvtC80LXRgCDRg9GB0YLRgNC+0LnRgdGC0LLQsCcsXG4gICAgICAgICAgc2VyaWFsX2V4dHJhOiAn0JrQsNC20LTQvtC5INC70LjRhtC10L3Qt9C40Lgg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0L7Qv9GA0LXQtNC10LvRkdC90L3Ri9C5INGE0YPQvdC60YbQuNC+0L3QsNC7INGD0YHRgtGA0L7QudGB0YLQstCwJ1xuICAgICAgICB9LFxuICAgICAgICBmaXJtd2FyZToge1xuICAgICAgICAgIHRpdGxlOiAn0J7QsdC90L7QstC70LXQvdC40LUg0L/RgNC+0YjQuNCy0LrQuCDRg9GB0YLRgNC+0LnRgdGC0LLQsCcsXG4gICAgICAgICAgZHJhZ19uX2Ryb3A6ICfQn9C10YDQtdGC0LDRidC40YLQtSDRhNCw0LnQuyDQv9GA0L7RiNC40LLQutC4INGB0Y7QtNCwJ1xuICAgICAgICB9LFxuICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICByZXNldDogJ9Ch0LHRgNC+0YEg0LLRgdC10YUg0L3QsNGB0YLRgNC+0LXQuidcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICBmb3JtX2Vycm9yczogJ9CY0YHQv9GA0LDQstGM0YLQtSDQvtGI0LjQsdC60Lgg0LLQviDQstCy0LXQtNGR0L3QvdGL0YUg0LfQvdCw0YfQtdC90LjRj9GFJyxcbiAgICAgICAgICBpcF9hZGRyZXNzX3JlcXVpcmVkOiAn0JLQstC10LTQuNGC0LUgSVAt0LDQtNGA0LXRgScsXG4gICAgICAgICAgaW52YWxpZF9pcF9hZGRyZXNzOiAn0J3QtdCy0LXRgNC90YvQuSBJUC3QsNC00YDQtdGBJyxcbiAgICAgICAgICBzdWJuZXRfbWFza19yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1INC80LDRgdC60YMg0L/QvtC00YHQtdGC0LgnLFxuICAgICAgICAgIGludmFsaWRfc3VibmV0X21hc2s6ICfQndC10LLQtdGA0L3QsNGPINC80LDRgdC60LAg0L/QvtC00YHQtdGC0LgnLFxuICAgICAgICAgIGdhdGV3YXlfcmVxdWlyZWQ6ICfQktCy0LXQtNC40YLQtSBJUC3QsNC00YDQtdGBJyxcbiAgICAgICAgICBpbnZhbGlkX2dhdGV3YXk6ICfQndC10LLQtdGA0L3Ri9C5IElQLdCw0LTRgNC10YEg0YjQu9GO0LfQsCcsXG4gICAgICAgICAgcGFzc3dvcmRfcmVxdWlyZWQ6ICfQktCy0LXQtNC40YLQtSDQv9Cw0YDQvtC70YwnXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czoge1xuICAgICAgICAgIHVwbG9hZGluZ19maXJtd2FyZTogJ9Cf0YDQvtGI0LjQstC60LAg0LfQsNCz0YDRg9C20LDQtdGC0YHRjyDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvicsXG4gICAgICAgICAgdXBkYXRpbmdfZmlybXdhcmU6ICfQmNC00ZHRgiDQvtCx0L3QvtCy0LvQtdC90LjQtSDQv9GA0L7RiNC40LLQutC4INGD0YHRgtGA0L7QudGB0YLQstCwLiDQltC00LjRgtC1Li4uJyxcbiAgICAgICAgICB2YWxpZGF0aW5nX2Zpcm13YXJlOiAn0J/RgNC+0LLQtdGA0LrQsCDQt9Cw0LPRgNGD0LbQtdC90L3QvtC5INC/0YDQvtGI0LjQstC60LgnLFxuICAgICAgICAgIGZpcm13YXJlX3VwZGF0ZV9mYWlsZWQ6ICfQndC1INGD0LTQsNC70L7RgdGMINC+0LHQvdC+0LLQuNGC0Ywg0L/RgNC+0YjQuNCy0LrRgycsXG4gICAgICAgICAgdXBsb2FkaW5nX2xpY2Vuc2U6ICfQm9C40YbQtdC90LfQuNGPINC30LDQs9GA0YPQttCw0LXRgtGB0Y8nLFxuICAgICAgICAgIHZhbGlkYXRpbmdfbGljZW5zZTogJ9Cb0LjQtdGG0L3Qt9C40Y8g0L/RgNC+0LLQtdGA0Y/QtdGC0YHRjycsXG4gICAgICAgICAgbGljZW5zZV91cGRhdGVfZmFpbGVkOiAn0JfQsNCz0YDRg9C30LrQsCDQu9C40YbQtdC90LfQuNC4INC90LUg0YPQtNCw0LvQsNGB0YwnLFxuICAgICAgICAgIHJlYm9vdGluZzogJ9Cd0LDRgdGC0YDQvtC50LrQuCDRgdC+0YXRgNCw0L3QtdC90YsuINCj0YHRgtGA0L7QudGB0YLQstC+INC/0LXRgNC10LfQsNCz0YDRg9C20LDQtdGC0YHRjy4uLidcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlYnVnOiB7XG4gICAgICAgIHRpdGxlOiAn0J7RgtC70LDQtNC60LAnLFxuICAgICAgICBjb21tYW5kOiB7XG4gICAgICAgICAgbmFtZTogJ9Ca0L7QvNCw0L3QtNCwJyxcbiAgICAgICAgICBwYXJhbWV0ZXJzOiAn0JTQsNC90L3Ri9C1JyxcbiAgICAgICAgICBvdXRwdXQ6ICfQoNC10LfRg9C70YzRgtCw0YInLFxuICAgICAgICAgIG91dHB1dF9tb2RlOiB7XG4gICAgICAgICAgICB0cmVlOiAn0LTRgNC10LLQvicsXG4gICAgICAgICAgICBjb2RlOiAn0LrQvtC0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvbW1hbmRfbmFtZV9yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1INC60L7QvNCw0L3QtNGDJyxcbiAgICAgICAgICAgIGNvbW1hbmRfcGFyYW1ldGVyc19yZXF1aXJlZDogJ9CS0LLQtdC00LjRgtC1INC00LDQvdC90YvQtSDQutC+0LzQsNC90LTRiycsXG4gICAgICAgICAgICBqc29uOiAn0J7RiNC40LHQutCwINGB0LjQvdGC0LDQutGB0LjRgdCwINCy0L4g0LLRhdC+0LTQvdC+0LwgSlNPTi3QtTpcXG5cXG57e2Vycm9yfX0nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb21tYW5kczoge1xuICAgICAgICAgIG5hbWU6ICfQmtC+0LzQsNC90LTRiyAo0LHQsNGC0YcpJyxcbiAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgY29tbWFuZHNfcmVxdWlyZWQ6ICfQktCy0LXQtNC40YLQtSDQutC+0LzQsNC90LTRiycsXG4gICAgICAgICAgICBiYXRjaF9mb3JtYXQ6ICfQndC10L/RgNCw0LLQuNC70YzQvdGL0Lkg0YTQvtGA0LzQsNGCIEpzb24gUnBjINCx0LDRgtGH0LAuINCU0L7Qu9C20LXQvSDQsdGL0YLRjCDQvNCw0YHRgdC40LIgSnNvbiBScGMg0LrQvtC80LDQvdC0LicsXG4gICAgICAgICAgICBiYXRjaF9qc29uOiAn0J7RiNC40LHQutCwINGB0LjQvdGC0LDQutGB0LjRgdCwINCy0L4g0LLRhdC+0LTQvdC+0LwgSlNPTi3QtSDQsdCw0YLRh9CwOlxcblxcbnt7ZXJyb3J9fSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBzZWN0aW9uX3RpdGxlOiAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINGD0YHRgtGA0L7QudGB0YLQstCwJyxcbiAgICAgICAgICBvdXRwdXRfdGl0bGU6ICfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8nLFxuICAgICAgICAgIHJlZnJlc2hpbmc6ICfQntCx0L3QvtCy0LvRj9C10YLRgdGPLi4uJyxcbiAgICAgICAgICBkb3dubG9hZDogJ9GB0LrQsNGH0LDRgtGMJyxcbiAgICAgICAgICBkb3dubG9hZF9iYXRjaDogJ2JhdGNoJyxcbiAgICAgICAgICBwb3J0c2V0OiAn0J/QvtGA0YLRgdC10YInLFxuICAgICAgICAgIHBvcnRzOiAn0J/QvtGA0YLRiycsXG4gICAgICAgICAgaGFzaF9wcm9maWxlOiAn0J/RgNC+0YTQuNC70Ywg0YXQtdGI0LjRgNC+0LLQsNC90LjRjycsXG4gICAgICAgICAgbGJnOiAn0JPRgNGD0L/Qv9GLINCx0LDQu9Cw0L3RgdC40YDQvtCy0LrQuCcsXG4gICAgICAgICAgbWlycm9yX2dyb3VwczogJ9CT0YDRg9C/0L/RiyDQt9C10YDQutCw0LvQuNGA0L7QstCw0L3QuNGPJyxcbiAgICAgICAgICBtYXBwZXJzOiAnTWFwcGVycycsXG4gICAgICAgICAgYWNsOiAnQWNjZXNzIENvbnRyb2wgTGlzdHMnLFxuICAgICAgICAgIG5ldHdvcms6ICfQodC10YLRjCcsXG4gICAgICAgICAgcm91dGluZzogJ9Cf0YDQsNCy0LjQu9CwJyxcbiAgICAgICAgICB0YV9ydWxlczogJ9Cf0YDQsNCy0LjQu9CwIHRhJyxcbiAgICAgICAgICB1c2VyczogJ9Cf0L7Qu9GM0LfQvtCy0LDRgtC10LvQuCdcbiAgICAgICAgfSxcbiAgICAgICAgYWRtaW5pc3RyYXRpb246IHtcbiAgICAgICAgICBzZWN0aW9uX3RpdGxlOiAn0JDQtNC80LjQvdC40YHRgtGA0LjRgNC+0LLQsNC90LjQtScsXG4gICAgICAgICAgY29uZmlndXJhdGlvbjogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjycsXG4gICAgICAgICAgbGFuZ3VhZ2U6ICfQr9C30YvQuicsXG4gICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25fcmVxdWlyZWQ6ICfQktCy0LXQtNC40YLQtSDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0YPRgdGC0YDQvtC50YHRgtCy0LAnLFxuICAgICAgICAgICAgY29uZmlndXJhdGlvbl9qc29uOiAn0J7RiNC40LHQutCwINGB0LjQvdGC0LDQutGB0LjRgdCwINCyIEpTT04t0LUg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INGD0YHRgtGA0L7QudGB0YLQstCwOlxcblxcbnt7ZXJyb3J9fSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByb2dyYW1faW5mb3JtYXRpb246IHtcbiAgICAgICAgICB2ZXJzaW9uOiAn0JLQtdGA0YHQuNGPJyxcbiAgICAgICAgICByZXZpc2lvbjogJ9GA0LXQstC40LfQuNGPJ1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIGdlbmVyaWM6ICfQntGI0LjQsdC60LAge3tzdGF0dXN9fToge3tkYXRhfX0nXG4gICAgICAgIH0sXG4gICAgICAgIG5vdGlmaWNhdGlvbjoge1xuICAgICAgICAgIHJlc3RhcnRfZ3VscDogJ9Ci0LXQv9C10YDRjCDQv9C10YDQtdC30LDQv9GD0YHRgtC40YLQtSDRgdCy0L7QuSBndWxwJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWRtaW46IHtcbiAgICAgICAgdGl0bGU6ICfQo9C/0YDQsNCy0LvQtdC90LjQtSdcbiAgICAgIH1cbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgYXBwbHk6ICfQn9GA0LjQvNC10L3QuNGC0YwnLFxuICAgICAgZXhlY3V0ZTogJ9CS0YvQv9C+0LvQvdC40YLRjCcsXG4gICAgICBzYXZlOiAn0KHQvtGF0YDQsNC90LjRgtGMJyxcbiAgICAgIG9rOiAnT0snLFxuICAgICAgY2FuY2VsOiAn0J7RgtC80LXQvdCwJyxcbiAgICAgIHllczogJ9CU0LAnLFxuICAgICAgbm86ICfQndC10YInXG4gICAgfSxcbiAgICBmaWxlX3VwbG9hZDoge1xuICAgICAgY2hvb3NlX2ZpbGU6ICfQktGL0LHRgNCw0YLRjCDRhNCw0LnQuycsXG4gICAgICB1cGxvYWRpbmc6ICfQpNCw0LnQuyDQt9Cw0LPRgNGD0LbQsNC10YLRgdGP4oCmJ1xuICAgIH0sXG4gICAgbWVudToge1xuICAgICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgICB0aXRsZTogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjycsXG4gICAgICAgIG9wZW46IHtcbiAgICAgICAgICB0aXRsZTogJ9Ce0YLQutGA0YvRgtGMJyxcbiAgICAgICAgICB0b29sdGlwOiAn0JfQsNCz0YDRg9C30LjRgtGMINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDQuNC3INGE0LDQudC70LAnXG4gICAgICAgIH0sXG4gICAgICAgIHNhdmU6IHtcbiAgICAgICAgICB0aXRsZTogJ9Ch0L7RhdGA0LDQvdC40YLRjCcsXG4gICAgICAgICAgdG9vbHRpcDogJ9Ch0L7RhdGA0LDQvdC40YLRjCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0LIg0YTQsNC50LsnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBsb2dvdXQ6ICfQktGL0YXQvtC0JyxcbiAgICAgIGxvZzogJ9Cb0L7QsycsXG4gICAgICBkZWJ1ZzogJ9Ce0YLQu9Cw0LTQutCwJ1xuICAgIH0sXG4gICAgbmV0d29yazoge1xuICAgICAgcmF0ZToge1xuICAgICAgICBicHM6ICfQsdC40YIv0YEnLFxuICAgICAgICBrYnBzOiAn0LrQsdC40YIv0YEnLFxuICAgICAgICBNYnBzOiAn0JzQsdC40YIv0YEnLFxuICAgICAgICBHYnBzOiAn0JPQsdC40YIv0YEnXG4gICAgICB9XG4gICAgfSxcbiAgICBlcnJvcjoge1xuICAgICAgamF2YXNjcmlwdDogJ9CSINCx0YDQsNGD0LfQtdGA0LUg0L7RgtC60LvRjtGH0LXQvdCwINC/0L7QtNC00LXRgNC20LrQsCBKYXZhc2NyaXB0LiDQlNC70Y8g0YDQsNCx0L7RgtGLINC/0YDQuNC70L7QttC10L3QuNGPINCy0LrQu9GO0YfQuNGC0LUgSmF2YXNjcmlwdC4nLFxuICAgICAgZ2VuZXJpYzogJ9Ce0YjQuNCx0LrQsDoge3ttZXNzYWdlfX0nLFxuICAgICAgd3JvbmdfcGFzc3dvcmQ6ICfQktGLINCy0LLQtdC70Lgg0L3QtdCy0LXRgNC90YvQuSDQv9Cw0YDQvtC70YwnLFxuICAgICAgdW5hdXRoZW50aWNhdGVkOiAn0JfQsNC/0YDQvtGI0LXQvdC90LDRjyDQvtC/0LXRgNCw0YbQuNGPINGC0YDQtdCx0YPQtdGCINCy0YXQvtC00LAg0LIg0YHQuNGB0YLQtdC80YMnLFxuICAgICAgb2xkX2Jyb3dzZXI6ICfQntCx0L3QvtCy0LjRgtC1INCy0LDRiCDQsdGA0LDRg9C30LXRgC4g0J/QvtC00LTQtdGA0LbQuNCy0LDQtdC80YvQtToge3ticm93c2Vyc319JyxcbiAgICAgIGRldmljZToge1xuICAgICAgICByZXNldF9mYWlsZWQ6ICfQndC1INGD0LTQsNC70L7RgdGMINGB0LHRgNC+0YHQuNGC0Ywg0YPRgdGC0YDQvtC50YHRgtCy0L4nXG4gICAgICB9XG4gICAgfSxcbiAgICBjb25maWd1cmF0aW9uOiB7XG4gICAgICBzdGF0dXM6IHtcbiAgICAgICAgYXBwbGljYXRpb25fcmVzdGFydGluZzogJ9Cf0YDQvtCz0YDQsNC80LzQsCDQv9C10YDQtdC30LDQv9GD0YHQutCw0LXRgtGB0Y8nLFxuICAgICAgICBzYXZlZDogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDRgdC+0YXRgNCw0L3QtdC90LAnLFxuICAgICAgICBhcHBseWluZzogJ9Cf0YDQuNC80LXQvdGP0LXQvCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4nLFxuICAgICAgICBsb2FkZWQ6ICfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0LfQsNCz0YDRg9C20LXQvdCwJyxcbiAgICAgICAgZGVsZXRlZDogJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDRg9C00LDQu9C10L3QsCdcbiAgICAgIH0sXG4gICAgICBlcnJvcjoge1xuICAgICAgICBmaWx0ZXJfc2hvdWxkX25vdF9oYXZlX2FfbWFzazogJ9CjINGE0LjQu9GM0YLRgNCwIMKre3tmaWx0ZXJ9fcK7INC90LUg0LTQvtC70LbQvdCwINCx0YvRgtGMINC30LDQtNCw0L3QsCDQvNCw0YHQutCwJyxcbiAgICAgICAgaW52YWxpZDogJ9Cd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCINC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCcsXG4gICAgICAgIGluY29uc2lzdGVudDogJ9Cd0LXQstC+0LfQvNC+0LbQvdC+INC/0YDQuNC80LXQvdC40YLRjCDQtNCw0L3QvdGD0Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC90LAg0Y3RgtC+0Lwg0YPRgdGC0YDQvtC50YHRgtCy0LUnLFxuICAgICAgICBjb25maWd1cmF0aW9uX3VwbG9hZF9mYWlsZWQ6ICfQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDQutC+0L3RhNC40LPRg9GA0LDRhtC40LgnLFxuICAgICAgICB0b29fbWFueV9pbnRlcnZhbHNfaW5fZmlsdGVyczogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L/RgNC40LzQtdC90LjRgtGMINC/0YDQsNCy0LjQu9CwOiDQv9GA0LXQstGL0YjQtdC90L4g0LrQvtC70LjRh9C10YHRgtCy0L4g0LjQvdGC0LXRgNCy0LDQu9C+0LIg0LIg0YTQuNC70YzRgtGA0LDRhScsXG4gICAgICAgIG1heF9taXJyb3JpbmdfcG9ydHM6ICfQn9GA0LXQstGL0YjQtdC90L4g0LTQvtC/0YPRgdGC0LjQvNC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QvtGA0YLQvtCyLCDQsiDQutC+0YLQvtGA0YvQtSDQutC+0L/QuNGA0YPQtdGC0YHRjyDRgtGA0LDRhNC40LogKHt7bWF4fX0pJyxcbiAgICAgICAgbWF4X2FjbHM6ICfQn9GA0LXQstGL0YjQtdC90L4g0LTQvtC/0YPRgdGC0LjQvNC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0LLRhdC+0LTQvdGL0YUg0L/QvtGA0YLQvtCyINC90LAg0YPRgdGC0YDQvtC50YHRgtCy0LUgKHt7bWF4fX0pJ1xuICAgICAgfSxcbiAgICAgIGNvbmZpcm1fcmVzZXQ6ICfQktGB0LUg0L3QsNGB0YLRgNC+0LnQutC4INC90LAg0YPRgdGC0YDQvtC50YHRgtCy0LUg0LHRg9C00YPRgiDRgdCx0YDQvtGI0LXQvdGLLiDQn9GA0L7QtNC+0LvQttC40YLRjD8nLFxuICAgICAgY29uZmlybV9kZWxldGlvbjogJ9Cj0LTQsNC70LjRgtGMINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDCq3t7bmFtZX19wrs/J1xuICAgIH0sXG4gICAgZGV2aWNlOiB7XG4gICAgICBzdGF0dXM6IHtcbiAgICAgICAgdW5rbm93bl9wbGF0Zm9ybTogJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCwJyxcbiAgICAgICAgY29ubmVjdGluZzogJ9Ce0LbQuNC00LDQvdC40LUg0L7RgtCy0LXRgtCwINC+0YIg0YPRgdGC0YDQvtC50YHRgtCy0LAuLi4nLFxuICAgICAgICBhcHBseWluZ19ydWxlczogJ9Cf0YDQuNC80LXQvdC10L3QuNC1INC/0YDQsNCy0LjQuyDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1JyxcbiAgICAgICAgcmVib290aW5nOiAn0KPRgdGC0YDQvtC50YHRgtCy0L4g0L/QtdGA0LXQt9Cw0LPRgNGD0LbQsNC10YLRgdGPLCDQttC00LjRgtC1Li4uJyxcbiAgICAgICAgcm91dGluZ19jb25maWd1cmF0aW9uX2FwcGxpZWQ6ICfQn9GA0LDQstC40LvQsCDRgdC+0YXRgNCw0L3QtdC90YsnXG4gICAgICB9XG4gICAgfSxcbiAgICBncmFwaDoge1xuICAgICAgdGltZToge1xuICAgICAgICBtaW51dGVzOiAn0JzQuNC90YPRgtGLJyxcbiAgICAgICAgaG91cnM6ICfQp9Cw0YHRiycsXG4gICAgICAgIGRheXM6ICfQlNC90LgnLFxuICAgICAgICBtb250aHM6ICfQnNC10YHRj9GG0YsnXG4gICAgICB9LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgIHJhdGU6ICfQkdC40YLRgNC10LnRgicsXG4gICAgICAgICAgcnhfcmF0ZTogJ1JYINCx0LjRgtGA0LXQudGCJyxcbiAgICAgICAgICB0eF9yYXRlOiAnVFgg0LHQuNGC0YDQtdC50YInLFxuICAgICAgICAgIHJhdGU6ICfQkdC40YLRgNC10LnRgicsXG4gICAgICAgICAgY3JjOiAn0J7RiNC40LHQutC4IENSQycsXG4gICAgICAgICAgZHJvcHM6ICfQntGC0LHRgNC+0YjQtdC90L3Ri9C1INC/0LDQutC10YLRiydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3RhdHVzOiB7XG4gICAgICBsb2FkaW5nX3BhZ2U6ICfQl9Cw0LPRgNGD0LfQutCwINGB0YLRgNCw0L3QuNGG0YsnXG4gICAgfSxcbiAgICBlbnRlcl9zeXN0ZW1fcGFzc3dvcmQ6ICfQktCy0LXQtNC40YLQtSDQv9Cw0YDQvtC70Ywg0LTQu9GPINCy0YXQvtC00LAg0LIg0YHQuNGB0YLQtdC80YMnLFxuICAgIG9wZXJhdGlvbnNfcGVuZGluZ19vbl9wYWdlOiAn0JLRiyDRgdC+0LHQuNGA0LDQtdGC0LXRgdGMINC/0L7QutC40L3Rg9GC0Ywg0YHRgtGA0LDQvdC40YbRgywg0L3QsCDQutC+0YLQvtGA0L7QuSDQvdC1INC30LDQutC+0L3Rh9C10L3QsCDRgNCw0LHQvtGC0LAuINCS0Ysg0YPQstC10YDQtdC90YssINGH0YLQviDQttC10LvQsNC10YLQtSDQvtGC0LzQtdC90LjRgtGMINCy0YHRkSDQuCDRg9C50YLQuCDRgSDRjdGC0L7QuSDRgdGC0YDQsNC90LjRhtGLPycsXG4gICAgZGV2aWNlX2lzX2Jvb3Rpbmc6ICfQo9GB0YLRgNC+0LnRgdGC0LLQviDQt9Cw0LPRgNGD0LbQsNC10YLRgdGPJ1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiZnVuY3Rpb24gbWQ1ICggc3RyICkge1x0Ly8gQ2FsY3VsYXRlIHRoZSBtZDUgaGFzaCBvZiBhIHN0cmluZ1xuXHQvLyBcblx0Ly8gKyAgIG9yaWdpbmFsIGJ5OiBXZWJ0b29sa2l0LmluZm8gKGh0dHA6Ly93d3cud2VidG9vbGtpdC5pbmZvLylcblx0Ly8gKyBuYW1lc3BhY2VkIGJ5OiBNaWNoYWVsIFdoaXRlIChodHRwOi8vY3Jlc3RpZGcuY29tKVxuXG5cdHZhciBSb3RhdGVMZWZ0ID0gZnVuY3Rpb24obFZhbHVlLCBpU2hpZnRCaXRzKSB7XG5cdFx0XHRyZXR1cm4gKGxWYWx1ZTw8aVNoaWZ0Qml0cykgfCAobFZhbHVlPj4+KDMyLWlTaGlmdEJpdHMpKTtcblx0XHR9O1xuXG5cdHZhciBBZGRVbnNpZ25lZCA9IGZ1bmN0aW9uKGxYLGxZKSB7XG5cdFx0XHR2YXIgbFg0LGxZNCxsWDgsbFk4LGxSZXN1bHQ7XG5cdFx0XHRsWDggPSAobFggJiAweDgwMDAwMDAwKTtcblx0XHRcdGxZOCA9IChsWSAmIDB4ODAwMDAwMDApO1xuXHRcdFx0bFg0ID0gKGxYICYgMHg0MDAwMDAwMCk7XG5cdFx0XHRsWTQgPSAobFkgJiAweDQwMDAwMDAwKTtcblx0XHRcdGxSZXN1bHQgPSAobFggJiAweDNGRkZGRkZGKSsobFkgJiAweDNGRkZGRkZGKTtcblx0XHRcdGlmIChsWDQgJiBsWTQpIHtcblx0XHRcdFx0cmV0dXJuIChsUmVzdWx0IF4gMHg4MDAwMDAwMCBeIGxYOCBeIGxZOCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobFg0IHwgbFk0KSB7XG5cdFx0XHRcdGlmIChsUmVzdWx0ICYgMHg0MDAwMDAwMCkge1xuXHRcdFx0XHRcdHJldHVybiAobFJlc3VsdCBeIDB4QzAwMDAwMDAgXiBsWDggXiBsWTgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiAobFJlc3VsdCBeIDB4NDAwMDAwMDAgXiBsWDggXiBsWTgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gKGxSZXN1bHQgXiBsWDggXiBsWTgpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0dmFyIEYgPSBmdW5jdGlvbih4LHkseikgeyByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7IH07XG5cdHZhciBHID0gZnVuY3Rpb24oeCx5LHopIHsgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpOyB9O1xuXHR2YXIgSCA9IGZ1bmN0aW9uKHgseSx6KSB7IHJldHVybiAoeCBeIHkgXiB6KTsgfTtcblx0dmFyIEkgPSBmdW5jdGlvbih4LHkseikgeyByZXR1cm4gKHkgXiAoeCB8ICh+eikpKTsgfTtcblxuXHR2YXIgRkYgPSBmdW5jdGlvbihhLGIsYyxkLHgscyxhYykge1xuXHRcdFx0YSA9IEFkZFVuc2lnbmVkKGEsIEFkZFVuc2lnbmVkKEFkZFVuc2lnbmVkKEYoYiwgYywgZCksIHgpLCBhYykpO1xuXHRcdFx0cmV0dXJuIEFkZFVuc2lnbmVkKFJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuXHRcdH07XG5cblx0dmFyIEdHID0gZnVuY3Rpb24oYSxiLGMsZCx4LHMsYWMpIHtcblx0XHRcdGEgPSBBZGRVbnNpZ25lZChhLCBBZGRVbnNpZ25lZChBZGRVbnNpZ25lZChHKGIsIGMsIGQpLCB4KSwgYWMpKTtcblx0XHRcdHJldHVybiBBZGRVbnNpZ25lZChSb3RhdGVMZWZ0KGEsIHMpLCBiKTtcblx0XHR9O1xuXG5cdHZhciBISCA9IGZ1bmN0aW9uKGEsYixjLGQseCxzLGFjKSB7XG5cdFx0XHRhID0gQWRkVW5zaWduZWQoYSwgQWRkVW5zaWduZWQoQWRkVW5zaWduZWQoSChiLCBjLCBkKSwgeCksIGFjKSk7XG5cdFx0XHRyZXR1cm4gQWRkVW5zaWduZWQoUm90YXRlTGVmdChhLCBzKSwgYik7XG5cdFx0fTtcblxuXHR2YXIgSUkgPSBmdW5jdGlvbihhLGIsYyxkLHgscyxhYykge1xuXHRcdFx0YSA9IEFkZFVuc2lnbmVkKGEsIEFkZFVuc2lnbmVkKEFkZFVuc2lnbmVkKEkoYiwgYywgZCksIHgpLCBhYykpO1xuXHRcdFx0cmV0dXJuIEFkZFVuc2lnbmVkKFJvdGF0ZUxlZnQoYSwgcyksIGIpO1xuXHRcdH07XG5cblx0dmFyIENvbnZlcnRUb1dvcmRBcnJheSA9IGZ1bmN0aW9uKHN0cikge1xuXHRcdFx0dmFyIGxXb3JkQ291bnQ7XG5cdFx0XHR2YXIgbE1lc3NhZ2VMZW5ndGggPSBzdHIubGVuZ3RoO1xuXHRcdFx0dmFyIGxOdW1iZXJPZldvcmRzX3RlbXAxPWxNZXNzYWdlTGVuZ3RoICsgODtcblx0XHRcdHZhciBsTnVtYmVyT2ZXb3Jkc190ZW1wMj0obE51bWJlck9mV29yZHNfdGVtcDEtKGxOdW1iZXJPZldvcmRzX3RlbXAxICUgNjQpKS82NDtcblx0XHRcdHZhciBsTnVtYmVyT2ZXb3JkcyA9IChsTnVtYmVyT2ZXb3Jkc190ZW1wMisxKSoxNjtcblx0XHRcdHZhciBsV29yZEFycmF5PUFycmF5KGxOdW1iZXJPZldvcmRzLTEpO1xuXHRcdFx0dmFyIGxCeXRlUG9zaXRpb24gPSAwO1xuXHRcdFx0dmFyIGxCeXRlQ291bnQgPSAwO1xuXHRcdFx0d2hpbGUgKCBsQnl0ZUNvdW50IDwgbE1lc3NhZ2VMZW5ndGggKSB7XG5cdFx0XHRcdGxXb3JkQ291bnQgPSAobEJ5dGVDb3VudC0obEJ5dGVDb3VudCAlIDQpKS80O1xuXHRcdFx0XHRsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSo4O1xuXHRcdFx0XHRsV29yZEFycmF5W2xXb3JkQ291bnRdID0gKGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gfCAoc3RyLmNoYXJDb2RlQXQobEJ5dGVDb3VudCk8PGxCeXRlUG9zaXRpb24pKTtcblx0XHRcdFx0bEJ5dGVDb3VudCsrO1xuXHRcdFx0fVxuXHRcdFx0bFdvcmRDb3VudCA9IChsQnl0ZUNvdW50LShsQnl0ZUNvdW50ICUgNCkpLzQ7XG5cdFx0XHRsQnl0ZVBvc2l0aW9uID0gKGxCeXRlQ291bnQgJSA0KSo4O1xuXHRcdFx0bFdvcmRBcnJheVtsV29yZENvdW50XSA9IGxXb3JkQXJyYXlbbFdvcmRDb3VudF0gfCAoMHg4MDw8bEJ5dGVQb3NpdGlvbik7XG5cdFx0XHRsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzLTJdID0gbE1lc3NhZ2VMZW5ndGg8PDM7XG5cdFx0XHRsV29yZEFycmF5W2xOdW1iZXJPZldvcmRzLTFdID0gbE1lc3NhZ2VMZW5ndGg+Pj4yOTtcblx0XHRcdHJldHVybiBsV29yZEFycmF5O1xuXHRcdH07XG5cblx0dmFyIFdvcmRUb0hleCA9IGZ1bmN0aW9uKGxWYWx1ZSkge1xuXHRcdFx0dmFyIFdvcmRUb0hleFZhbHVlPVwiXCIsV29yZFRvSGV4VmFsdWVfdGVtcD1cIlwiLGxCeXRlLGxDb3VudDtcblx0XHRcdGZvciAobENvdW50ID0gMDtsQ291bnQ8PTM7bENvdW50KyspIHtcblx0XHRcdFx0bEJ5dGUgPSAobFZhbHVlPj4+KGxDb3VudCo4KSkgJiAyNTU7XG5cdFx0XHRcdFdvcmRUb0hleFZhbHVlX3RlbXAgPSBcIjBcIiArIGxCeXRlLnRvU3RyaW5nKDE2KTtcblx0XHRcdFx0V29yZFRvSGV4VmFsdWUgPSBXb3JkVG9IZXhWYWx1ZSArIFdvcmRUb0hleFZhbHVlX3RlbXAuc3Vic3RyKFdvcmRUb0hleFZhbHVlX3RlbXAubGVuZ3RoLTIsMik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gV29yZFRvSGV4VmFsdWU7XG5cdFx0fTtcblxuXHR2YXIgeD1BcnJheSgpO1xuXHR2YXIgayxBQSxCQixDQyxERCxhLGIsYyxkO1xuXHR2YXIgUzExPTcsIFMxMj0xMiwgUzEzPTE3LCBTMTQ9MjI7XG5cdHZhciBTMjE9NSwgUzIyPTkgLCBTMjM9MTQsIFMyND0yMDtcblx0dmFyIFMzMT00LCBTMzI9MTEsIFMzMz0xNiwgUzM0PTIzO1xuXHR2YXIgUzQxPTYsIFM0Mj0xMCwgUzQzPTE1LCBTNDQ9MjE7XG5cblx0c3RyID0gdGhpcy51dGY4X2VuY29kZShzdHIpO1xuXHR4ID0gQ29udmVydFRvV29yZEFycmF5KHN0cik7XG5cdGEgPSAweDY3NDUyMzAxOyBiID0gMHhFRkNEQUI4OTsgYyA9IDB4OThCQURDRkU7IGQgPSAweDEwMzI1NDc2O1xuXG5cdGZvciAoaz0wO2s8eC5sZW5ndGg7ays9MTYpIHtcblx0XHRBQT1hOyBCQj1iOyBDQz1jOyBERD1kO1xuXHRcdGE9RkYoYSxiLGMsZCx4W2srMF0sIFMxMSwweEQ3NkFBNDc4KTtcblx0XHRkPUZGKGQsYSxiLGMseFtrKzFdLCBTMTIsMHhFOEM3Qjc1Nik7XG5cdFx0Yz1GRihjLGQsYSxiLHhbaysyXSwgUzEzLDB4MjQyMDcwREIpO1xuXHRcdGI9RkYoYixjLGQsYSx4W2srM10sIFMxNCwweEMxQkRDRUVFKTtcblx0XHRhPUZGKGEsYixjLGQseFtrKzRdLCBTMTEsMHhGNTdDMEZBRik7XG5cdFx0ZD1GRihkLGEsYixjLHhbays1XSwgUzEyLDB4NDc4N0M2MkEpO1xuXHRcdGM9RkYoYyxkLGEsYix4W2srNl0sIFMxMywweEE4MzA0NjEzKTtcblx0XHRiPUZGKGIsYyxkLGEseFtrKzddLCBTMTQsMHhGRDQ2OTUwMSk7XG5cdFx0YT1GRihhLGIsYyxkLHhbays4XSwgUzExLDB4Njk4MDk4RDgpO1xuXHRcdGQ9RkYoZCxhLGIsYyx4W2srOV0sIFMxMiwweDhCNDRGN0FGKTtcblx0XHRjPUZGKGMsZCxhLGIseFtrKzEwXSxTMTMsMHhGRkZGNUJCMSk7XG5cdFx0Yj1GRihiLGMsZCxhLHhbaysxMV0sUzE0LDB4ODk1Q0Q3QkUpO1xuXHRcdGE9RkYoYSxiLGMsZCx4W2srMTJdLFMxMSwweDZCOTAxMTIyKTtcblx0XHRkPUZGKGQsYSxiLGMseFtrKzEzXSxTMTIsMHhGRDk4NzE5Myk7XG5cdFx0Yz1GRihjLGQsYSxiLHhbaysxNF0sUzEzLDB4QTY3OTQzOEUpO1xuXHRcdGI9RkYoYixjLGQsYSx4W2srMTVdLFMxNCwweDQ5QjQwODIxKTtcblx0XHRhPUdHKGEsYixjLGQseFtrKzFdLCBTMjEsMHhGNjFFMjU2Mik7XG5cdFx0ZD1HRyhkLGEsYixjLHhbays2XSwgUzIyLDB4QzA0MEIzNDApO1xuXHRcdGM9R0coYyxkLGEsYix4W2srMTFdLFMyMywweDI2NUU1QTUxKTtcblx0XHRiPUdHKGIsYyxkLGEseFtrKzBdLCBTMjQsMHhFOUI2QzdBQSk7XG5cdFx0YT1HRyhhLGIsYyxkLHhbays1XSwgUzIxLDB4RDYyRjEwNUQpO1xuXHRcdGQ9R0coZCxhLGIsYyx4W2srMTBdLFMyMiwweDI0NDE0NTMpO1xuXHRcdGM9R0coYyxkLGEsYix4W2srMTVdLFMyMywweEQ4QTFFNjgxKTtcblx0XHRiPUdHKGIsYyxkLGEseFtrKzRdLCBTMjQsMHhFN0QzRkJDOCk7XG5cdFx0YT1HRyhhLGIsYyxkLHhbays5XSwgUzIxLDB4MjFFMUNERTYpO1xuXHRcdGQ9R0coZCxhLGIsYyx4W2srMTRdLFMyMiwweEMzMzcwN0Q2KTtcblx0XHRjPUdHKGMsZCxhLGIseFtrKzNdLCBTMjMsMHhGNEQ1MEQ4Nyk7XG5cdFx0Yj1HRyhiLGMsZCxhLHhbays4XSwgUzI0LDB4NDU1QTE0RUQpO1xuXHRcdGE9R0coYSxiLGMsZCx4W2srMTNdLFMyMSwweEE5RTNFOTA1KTtcblx0XHRkPUdHKGQsYSxiLGMseFtrKzJdLCBTMjIsMHhGQ0VGQTNGOCk7XG5cdFx0Yz1HRyhjLGQsYSxiLHhbays3XSwgUzIzLDB4Njc2RjAyRDkpO1xuXHRcdGI9R0coYixjLGQsYSx4W2srMTJdLFMyNCwweDhEMkE0QzhBKTtcblx0XHRhPUhIKGEsYixjLGQseFtrKzVdLCBTMzEsMHhGRkZBMzk0Mik7XG5cdFx0ZD1ISChkLGEsYixjLHhbays4XSwgUzMyLDB4ODc3MUY2ODEpO1xuXHRcdGM9SEgoYyxkLGEsYix4W2srMTFdLFMzMywweDZEOUQ2MTIyKTtcblx0XHRiPUhIKGIsYyxkLGEseFtrKzE0XSxTMzQsMHhGREU1MzgwQyk7XG5cdFx0YT1ISChhLGIsYyxkLHhbaysxXSwgUzMxLDB4QTRCRUVBNDQpO1xuXHRcdGQ9SEgoZCxhLGIsYyx4W2srNF0sIFMzMiwweDRCREVDRkE5KTtcblx0XHRjPUhIKGMsZCxhLGIseFtrKzddLCBTMzMsMHhGNkJCNEI2MCk7XG5cdFx0Yj1ISChiLGMsZCxhLHhbaysxMF0sUzM0LDB4QkVCRkJDNzApO1xuXHRcdGE9SEgoYSxiLGMsZCx4W2srMTNdLFMzMSwweDI4OUI3RUM2KTtcblx0XHRkPUhIKGQsYSxiLGMseFtrKzBdLCBTMzIsMHhFQUExMjdGQSk7XG5cdFx0Yz1ISChjLGQsYSxiLHhbayszXSwgUzMzLDB4RDRFRjMwODUpO1xuXHRcdGI9SEgoYixjLGQsYSx4W2srNl0sIFMzNCwweDQ4ODFEMDUpO1xuXHRcdGE9SEgoYSxiLGMsZCx4W2srOV0sIFMzMSwweEQ5RDREMDM5KTtcblx0XHRkPUhIKGQsYSxiLGMseFtrKzEyXSxTMzIsMHhFNkRCOTlFNSk7XG5cdFx0Yz1ISChjLGQsYSxiLHhbaysxNV0sUzMzLDB4MUZBMjdDRjgpO1xuXHRcdGI9SEgoYixjLGQsYSx4W2srMl0sIFMzNCwweEM0QUM1NjY1KTtcblx0XHRhPUlJKGEsYixjLGQseFtrKzBdLCBTNDEsMHhGNDI5MjI0NCk7XG5cdFx0ZD1JSShkLGEsYixjLHhbays3XSwgUzQyLDB4NDMyQUZGOTcpO1xuXHRcdGM9SUkoYyxkLGEsYix4W2srMTRdLFM0MywweEFCOTQyM0E3KTtcblx0XHRiPUlJKGIsYyxkLGEseFtrKzVdLCBTNDQsMHhGQzkzQTAzOSk7XG5cdFx0YT1JSShhLGIsYyxkLHhbaysxMl0sUzQxLDB4NjU1QjU5QzMpO1xuXHRcdGQ9SUkoZCxhLGIsYyx4W2srM10sIFM0MiwweDhGMENDQzkyKTtcblx0XHRjPUlJKGMsZCxhLGIseFtrKzEwXSxTNDMsMHhGRkVGRjQ3RCk7XG5cdFx0Yj1JSShiLGMsZCxhLHhbaysxXSwgUzQ0LDB4ODU4NDVERDEpO1xuXHRcdGE9SUkoYSxiLGMsZCx4W2srOF0sIFM0MSwweDZGQTg3RTRGKTtcblx0XHRkPUlJKGQsYSxiLGMseFtrKzE1XSxTNDIsMHhGRTJDRTZFMCk7XG5cdFx0Yz1JSShjLGQsYSxiLHhbays2XSwgUzQzLDB4QTMwMTQzMTQpO1xuXHRcdGI9SUkoYixjLGQsYSx4W2srMTNdLFM0NCwweDRFMDgxMUExKTtcblx0XHRhPUlJKGEsYixjLGQseFtrKzRdLCBTNDEsMHhGNzUzN0U4Mik7XG5cdFx0ZD1JSShkLGEsYixjLHhbaysxMV0sUzQyLDB4QkQzQUYyMzUpO1xuXHRcdGM9SUkoYyxkLGEsYix4W2srMl0sIFM0MywweDJBRDdEMkJCKTtcblx0XHRiPUlJKGIsYyxkLGEseFtrKzldLCBTNDQsMHhFQjg2RDM5MSk7XG5cdFx0YT1BZGRVbnNpZ25lZChhLEFBKTtcblx0XHRiPUFkZFVuc2lnbmVkKGIsQkIpO1xuXHRcdGM9QWRkVW5zaWduZWQoYyxDQyk7XG5cdFx0ZD1BZGRVbnNpZ25lZChkLEREKTtcblx0fVxuXG5cdHZhciB0ZW1wID0gV29yZFRvSGV4KGEpK1dvcmRUb0hleChiKStXb3JkVG9IZXgoYykrV29yZFRvSGV4KGQpO1xuXG5cdHJldHVybiB0ZW1wLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIHV0ZjhfZW5jb2RlICggc3RyX2RhdGEgKSB7XHQvLyBFbmNvZGVzIGFuIElTTy04ODU5LTEgc3RyaW5nIHRvIFVURi04XG5cdC8vIFxuXHQvLyArICAgb3JpZ2luYWwgYnk6IFdlYnRvb2xraXQuaW5mbyAoaHR0cDovL3d3dy53ZWJ0b29sa2l0LmluZm8vKVxuXG5cdHN0cl9kYXRhID0gc3RyX2RhdGEucmVwbGFjZSgvXFxyXFxuL2csXCJcXG5cIik7XG5cdHZhciB1dGZ0ZXh0ID0gXCJcIjtcblxuXHRmb3IgKHZhciBuID0gMDsgbiA8IHN0cl9kYXRhLmxlbmd0aDsgbisrKSB7XG5cdFx0dmFyIGMgPSBzdHJfZGF0YS5jaGFyQ29kZUF0KG4pO1xuXHRcdGlmIChjIDwgMTI4KSB7XG5cdFx0XHR1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG5cdFx0fSBlbHNlIGlmKChjID4gMTI3KSAmJiAoYyA8IDIwNDgpKSB7XG5cdFx0XHR1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgPj4gNikgfCAxOTIpO1xuXHRcdFx0dXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgNjMpIHwgMTI4KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXRmdGV4dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjID4+IDEyKSB8IDIyNCk7XG5cdFx0XHR1dGZ0ZXh0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjID4+IDYpICYgNjMpIHwgMTI4KTtcblx0XHRcdHV0ZnRleHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDYzKSB8IDEyOCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHV0ZnRleHQ7XG59XG4iLCJPYmplY3QuZm9yX2VhY2ggPSAob2JqZWN0LCBhY3Rpb24pIC0+XG5cdGZvciBrZXksIHZhbHVlIG9mIG9iamVjdFxuXHRcdGFjdGlvbihrZXksIHZhbHVlKVxuXG5PYmplY3Qubm90X2VtcHR5ID0gKG9iamVjdCkgLT4gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGggPiAwXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBBcnJheS5wcm90b3R5cGUsIFwiY2xvbmVcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChlbGVtZW50KSAtPiBAc2xpY2UoMClcblxuIyDRgNCw0LHQvtGC0LDQtdGCINGC0L7Qu9GM0LrQviDQtNC70Y8g0L/RgNC40LzQuNGC0LjQstC+0LIg0YLQuNC/0LAgaW50ZWdlciDQuCBzdHJpbmdcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBBcnJheS5wcm90b3R5cGUsIFwiaW50ZXJzZWN0XCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoYXJyYXkpIC0+XG5cdFx0YSA9IHRoaXMuY2xvbmUoKVxuXHRcdGIgPSBhcnJheS5jbG9uZSgpXG5cblx0XHRhLnNvcnQoKGEsIGIpIC0+IGEgLSBiKVxuXHRcdGIuc29ydCgoYSwgYikgLT4gYSAtIGIpXG5cblx0XHRyZXN1bHQgPSBbXVxuXG5cdFx0YWkgPSAwXG5cdFx0YmkgPSAwXG5cblx0XHR3aGlsZSBhaSA8IGEubGVuZ3RoICYmIGJpIDwgYi5sZW5ndGhcblx0XHRcdGlmIGFbYWldIDwgYltiaV1cblx0XHRcdFx0YWkrK1xuXHRcdFx0ZWxzZSBpZiBhW2FpXSA+IGJbYmldXG5cdFx0XHRcdGJpKytcblx0XHRcdGVsc2UgXG5cdFx0XHRcdCMgdGhleSdyZSBlcXVhbFxuXHRcdFx0XHRyZXN1bHQucHVzaChhW2FpXSlcblx0XHRcdFx0YWkrK1xuXHRcdFx0XHRiaSsrXG5cblx0XHRyZXR1cm4gcmVzdWx0XG5cbiMg0YDQsNCx0L7RgtCw0LXRgiDRgtC+0LvRjNC60L4g0LTQu9GPINC/0YDQuNC80LjRgtC40LLQvtCyINGC0LjQv9CwIGludGVnZXIg0Lggc3RyaW5nXG5PYmplY3QuZGVmaW5lUHJvcGVydHkgQXJyYXkucHJvdG90eXBlLCBcImludGVyc2VjdHNcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChhcnJheSkgLT4gQGludGVyc2VjdChhcnJheSkubm90X2VtcHR5KClcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEFycmF5LnByb3RvdHlwZSwgXCJzdWJzdHJhY3RcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChhcnJheSkgLT4gQGZpbHRlciAoaXRlbSkgLT4gYXJyYXkuaW5kZXhPZihpdGVtKSA8IDBcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEFycmF5LnByb3RvdHlwZSwgXCJyZW1vdmVcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChlbGVtZW50KSAtPlxuXHRcdGFycmF5ID0gQFxuXG5cdFx0dGVzdCA9IChpKSAtPlxuXHRcdFx0aWYgdHlwZW9mIGVsZW1lbnQgPT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0XHRyZXR1cm4gZWxlbWVudC5iaW5kKGFycmF5W2ldKShhcnJheVtpXSlcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIGFycmF5W2ldID09IGVsZW1lbnRcblxuXHRcdGkgPSAwXG5cdFx0d2hpbGUgaSA8IHRoaXMubGVuZ3RoXG5cdFx0XHRpZiB0ZXN0KGkpXG5cdFx0XHRcdHRoaXMuc3BsaWNlKGksIDEpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHRpKytcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEFycmF5LnByb3RvdHlwZSwgXCJyZW1vdmVfYXRcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChpbmRleCkgLT4gQHNwbGljZShpbmRleCwgMSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEFycmF5LnByb3RvdHlwZSwgXCJoYXNcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IChlbGVtZW50KSAtPiBAaW5kZXhPZihlbGVtZW50KSA+PSAwXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBBcnJheS5wcm90b3R5cGUsIFwiaGFzX25vXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoZWxlbWVudCkgLT4gIUBoYXMoZWxlbWVudClcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEFycmF5LnByb3RvdHlwZSwgXCJub3RfZW1wdHlcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IC0+IEBsZW5ndGggPiAwXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBBcnJheS5wcm90b3R5cGUsIFwiaXNfZW1wdHlcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IC0+IEBsZW5ndGggPT0gMFxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkgQXJyYXkucHJvdG90eXBlLCBcImxhc3RcIixcblx0ZW51bWVyYWJsZTogbm9cblx0dmFsdWU6IC0+XG5cdFx0cmV0dXJuIGlmIEBpc19lbXB0eSgpXG5cdFx0cmV0dXJuIEBbQGxlbmd0aCAtIDFdXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBBcnJheS5wcm90b3R5cGUsIFwiY29tYmluYXRpb25zXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAtPlxuXHRcdHJldHVybiBbXSBpZiBAaXNfZW1wdHkoKVxuXHRcdFx0XG5cdFx0Zmlyc3QgPSBAWzBdXG5cblx0XHRyZXR1cm4gZmlyc3QgaWYgQGxlbmd0aCA9PSAxXG5cdFx0XG5cdFx0cmVzdWx0ID0gW11cblx0XHRyZXN0X2NvbWJpbmF0aW9ucyA9IEAuc2xpY2UoMSkuY29tYmluYXRpb25zKClcblx0XHRcblx0XHRyZXN0X2NvbWJpbmF0aW9ucy5yZWR1Y2UoKChyZWR1Y2VkLCByZXN0X2NvbWJpbmF0aW9uKSAtPlxuXHRcdFx0cmVkdWNlZC5jb25jYXQoZmlyc3QubWFwKCh4KSAtPiB4ICsgcmVzdF9jb21iaW5hdGlvbikpXG5cdFx0KSwgW10pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBTdHJpbmcucHJvdG90eXBlLCBcInN0YXJ0c193aXRoXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoc3Vic3RyaW5nKSAtPiBAaW5kZXhPZihzdWJzdHJpbmcpID09IDBcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IFN0cmluZy5wcm90b3R5cGUsIFwiZW5kc193aXRoXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoc3Vic3RyaW5nKSAtPlxuXHRcdGluZGV4ID0gdGhpcy5sYXN0SW5kZXhPZihzdWJzdHJpbmcpXG5cdFx0cmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPT0gdGhpcy5sZW5ndGggLSBzdWJzdHJpbmcubGVuZ3RoXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBTdHJpbmcucHJvdG90eXBlLCBcImlzX2VtcHR5XCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAtPiBAbGVuZ3RoID09IDBcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IFN0cmluZy5wcm90b3R5cGUsIFwibm90X2VtcHR5XCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAtPiAhQGlzX2VtcHR5KClcblxuIyDQn9GA0L7RgdGC0LDQstC70Y/QtdGCINC60LvRjtGHINC+0LHRitC10LrRgtCwINCyINC30L3QsNGH0LXQvdC40LVcbiMgT2JqZWN0LnNldChvYmplY3QsIGtleTEsIGtleTIsIC4uLiwgdmFsdWUpXG5PYmplY3Quc2V0ID0gLT5cblx0cGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMClcblxuXHRvYmplY3QgPSBwYXJhbWV0ZXJzLnNoaWZ0KClcblx0dmFsdWUgPSBwYXJhbWV0ZXJzLnBvcCgpXG5cblx0aWYgbm90IG9iamVjdFxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IGlzIG51bGwnKVxuXG5cdGtleXMgPSBwYXJhbWV0ZXJzLnJlZHVjZSgocmVkdWNlZCwgdmFsdWUpIC0+XG5cdFx0cmVkdWNlZC5jb25jYXQodmFsdWUudG9TdHJpbmcoKS5zcGxpdCgnLicpKVxuXHQsIFxuXHRbXSlcblxuXHRsYXN0X2tleSA9IGtleXMucG9wKClcblxuXHRmb3Iga2V5IGluIGtleXNcblx0XHRpZiBub3Qgb2JqZWN0W2tleV1cblx0XHRcdG9iamVjdFtrZXldID0ge31cblx0XHRvYmplY3QgPSBvYmplY3Rba2V5XVxuXG5cdG9iamVjdFtsYXN0X2tleV0gPSB2YWx1ZVxuXG5cdHJldHVybiBvYmplY3RcblxuIyDQktC+0LfQstGA0LDRidCw0LXRgiDQt9C90LDRh9C10L3QuNC1INC/0L4g0LrQu9GO0YfRgyDQuNC3INC+0LHRitC10LrRgtCwXG4jIE9iamVjdC5nZXQob2JqZWN0LCBrZXkxLCBrZXkyLCAuLi4pXG5PYmplY3QuZ2V0ID0gKG9iamVjdCwgcGF0aCkgLT5cblx0cGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMClcblx0cGFyYW1ldGVycy5zaGlmdCgpXG5cblx0cGF0aF9lbGVtZW50cyA9IHBhcmFtZXRlcnMucmVkdWNlKChyZWR1Y2VkLCBwYXRoX2VsZW1lbnQpIC0+XG5cdFx0cmVkdWNlZC5jb25jYXQocGF0aF9lbGVtZW50LnRvU3RyaW5nKCkuc3BsaXQoJy4nKSlcblx0LFxuXHRbXSlcblxuXHRmb3Iga2V5IGluIHBhdGhfZWxlbWVudHNcblx0XHRyZXR1cm4gaWYgbm90IG9iamVjdFxuXHRcdG9iamVjdCA9IG9iamVjdFtrZXldXG5cblx0cmV0dXJuIG9iamVjdFxuXG5PYmplY3QuZXF1YWxzID0gKGEsIGIpIC0+IGFuZ3VsYXIuZXF1YWxzKGEsIGIpXG5cbkBmb3JtYXQgPSAodGVtcGxhdGUsIHBhcmFtZXRlcnMpIC0+XG5cdHRlbXBsYXRlLnJlcGxhY2UgL1xceyhbXlxcfV0rKVxcfS9nLCAodGV4dCwgbWF0Y2gpIC0+XG5cdFx0T2JqZWN0LmdldChwYXJhbWV0ZXJzLCBtYXRjaClcblxuT2JqZWN0LmV4dGVuZCA9IC0+IGFuZ3VsYXIuZXh0ZW5kLmFwcGx5KEAsIGFyZ3VtZW50cylcblxuIyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMTA4ODM3L2dldC10aGUtZGVsdGEtb2YtdHdvLWphdmFzY3JpcHQtb2JqZWN0c1xuIyBiINC/0YDQtdC+0LHQu9Cw0LTQsNC10YIg0L3QsNC0IGFcbmpzb25fZGlmZiA9IChhLCBiKSAtPlxuXHRkaWZmID0ge31cblxuXHRpZiB0eXBlb2YgYiA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0J1xuXHRcdGZvciBpLCB2YWx1ZSBvZiBiXG5cdFx0XHRpbm5lckRpZmYgPSB7fVxuXHRcdFx0aWYgYltpXSBpbnN0YW5jZW9mIEFycmF5XG5cdFx0XHRcdGlmIG5vdCBhW2ldP1xuXHRcdFx0XHRcdGRpZmZbaV0gPSBiW2ldXG5cdFx0XHRcdGVsc2UgaWYgbm90IGFuZ3VsYXIuZXF1YWxzKGJbaV0sIGFbaV0pXG5cdFx0XHRcdFx0YXJyYXkgPSBbXVxuXHRcdFx0XHRcdGogPSAwXG5cdFx0XHRcdFx0d2hpbGUgaiA8IGJbaV0ubGVuZ3RoXG5cdFx0XHRcdFx0XHRpZiBqIDwgYVtpXS5sZW5ndGhcblx0XHRcdFx0XHRcdFx0YXJyYXlfZGlmZiA9IGpzb25fZGlmZihhW2ldW2pdLCBiW2ldW2pdKVxuXHRcdFx0XHRcdFx0XHRpZiB0eXBlb2YgYXJyYXlfZGlmZiA9PSAnb2JqZWN0J1xuXHRcdFx0XHRcdFx0XHRcdGlmIE9iamVjdC5rZXlzKGFycmF5X2RpZmYpLmxlbmd0aCA+IDBcblx0XHRcdFx0XHRcdFx0XHRcdGFycmF5LnB1c2goYXJyYXlfZGlmZilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdGlmIGFycmF5X2RpZmY/XG5cdFx0XHRcdFx0XHRcdFx0XHRhcnJheS5wdXNoKGFycmF5X2RpZmYpXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdGFycmF5LnB1c2goYltpXVtqXSlcblx0XHRcdFx0XHRcdGorK1xuXHRcdFx0XHRcdGRpZmZbaV0gPSBhcnJheVxuXHRcdFx0ZWxzZSBpZiB0eXBlb2YgYltpXSA9PSAnb2JqZWN0J1xuXHRcdFx0XHRpbm5lckRpZmYgPSBqc29uX2RpZmYoYVtpXSwgYltpXSlcblx0XHRcdFx0aWYgT2JqZWN0LmtleXMoaW5uZXJEaWZmKS5sZW5ndGggPiAwXG5cdFx0XHRcdFx0ZGlmZltpXSA9IGlubmVyRGlmZlxuXHRcdFx0ZWxzZSBpZiBub3QgYVxuXHRcdFx0XHRkaWZmW2ldID0gYltpXVxuXHRcdFx0ZWxzZSBpZiBub3QgYS5oYXNPd25Qcm9wZXJ0eShpKVxuXHRcdFx0XHRkaWZmW2ldID0gYltpXVxuXHRcdFx0ZWxzZSBpZiBhW2ldICE9IGJbaV1cblx0XHRcdFx0ZGlmZltpXSA9IGJbaV1cblx0ZWxzZVxuXHRcdGlmIGEgPT0gYlxuXHRcdFx0ZGlmZiA9IHt9XG5cdFx0ZWxzZVxuXHRcdFx0ZGlmZiA9IGJcblxuXHRyZXR1cm4gZGlmZlxuXG5PYmplY3QuZGlmZiA9IChhLCBiKSAtPiBbanNvbl9kaWZmKGIsIGEpLCBqc29uX2RpZmYoYSwgYildXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBGdW5jdGlvbi5wcm90b3R5cGUsIFwiZGVsYXlcIixcblx0d3JpdGFibGU6IHllc1xuXHRlbnVtZXJhYmxlOiBub1xuXHR2YWx1ZTogKHRpbWUpIC0+IHNldFRpbWVvdXQoQCwgdGltZSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IEZ1bmN0aW9uLnByb3RvdHlwZSwgXCJwZXJpb2RpY2FsXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoaW50ZXJ2YWwpIC0+XG5cdFx0YWN0aW9uID0gQFxuXHRcdHBlcmlvZGljYWwgPSAtPlxuXHRcdFx0YWN0aW9uKClcblx0XHRcdHBlcmlvZGljYWwuZGVsYXkoaW50ZXJ2YWwpXG5cblx0XHRwZXJpb2RpY2FsKClcblxuaWYgbm90IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBGdW5jdGlvbi5wcm90b3R5cGUsIFwiYmluZFwiLFxuXHRcdGVudW1lcmFibGU6IG5vXG5cdFx0dmFsdWU6IChzY29wZSkgLT4gKCkgPT4gQC5hcHBseShzY29wZSwgYXJndW1lbnRzKVxuXG4jIEBpc19ub2RlID0gLT4gdHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0c1xuIyBAaXNfYW5ndWxhciA9IC0+IHR5cGVvZiBhbmd1bGFyICE9ICd1bmRlZmluZWQnXG5cbkBkb3dubG9hZF9maWxlID0gKGNvbnRlbnQsIG5hbWUpIC0+XG5cblx0aWYgdHlwZW9mIGNvbnRlbnQgPT0gJ29iamVjdCdcblx0XHRjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoY29udGVudCwgbnVsbCwgMilcblxuXHRmYWtlX2Zvcm0gPSBhbmd1bGFyLmVsZW1lbnQoJzxmb3JtIGFjdGlvbj1cIi9kb3dubG9hZFwiIG1ldGhvZD1cInBvc3RcIi8+JylcblxuXHRmYWtlX2Zvcm0uYXBwZW5kKGFuZ3VsYXIuZWxlbWVudCgnPHRleHRhcmVhIG5hbWU9XCJmaWxlbmFtZVwiLz4nKS52YWwobmFtZSkpXG5cblx0dGV4dCA9IGFuZ3VsYXIuZWxlbWVudCgnPHRleHRhcmVhIG5hbWU9XCJkYXRhXCIvPicpXG5cdHRleHQudmFsKGNvbnRlbnQpXG5cblx0ZmFrZV9mb3JtLmFwcGVuZCh0ZXh0KVxuXG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmFrZV9mb3JtWzBdKVxuXHRmYWtlX2Zvcm1bMF0uc3VibWl0KClcblx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChmYWtlX2Zvcm1bMF0pXG5cblx0cmV0dXJuIHllc1xuXG4jIHJlcGVhdHMgYSBzdHJpbmcgTiB0aW1lc1xuT2JqZWN0LmRlZmluZVByb3BlcnR5IFN0cmluZy5wcm90b3R5cGUsIFwicmVwZWF0XCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAodGltZXMpIC0+XG5cdFx0cmVzdWx0ID0gJydcblx0XHR3aGlsZSB0aW1lcyA+IDBcblx0XHRcdHJlc3VsdCArPSBAXG5cdFx0XHR0aW1lcy0tXG5cdFx0cmV0dXJuIHJlc3VsdFxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkgU3RyaW5nLnByb3RvdHlwZSwgXCJyZXBsYWNlX2F0XCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAoaW5kZXgsIGNoYXJhY3RlcikgLT5cbiAgICBcdEBzdWJzdHIoMCwgaW5kZXgpICsgY2hhcmFjdGVyICsgQHN1YnN0cihpbmRleCArIGNoYXJhY3Rlci5sZW5ndGgpXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSBTdHJpbmcucHJvdG90eXBlLCBcImhhc1wiLFxuXHRlbnVtZXJhYmxlOiBub1xuXHR2YWx1ZTogKHdoYXQpIC0+IEBpbmRleE9mKHdoYXQpID49IDBcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5IFN0cmluZy5wcm90b3R5cGUsIFwiYmVmb3JlXCIsXG5cdGVudW1lcmFibGU6IG5vXG5cdHZhbHVlOiAod2hhdCkgLT4gXG5cdFx0aW5kZXggPSBAaW5kZXhPZih3aGF0KVxuXHRcdHJldHVybiBAIGlmIGluZGV4IDwgMFxuXHRcdHJldHVybiBAc3Vic3RyaW5nKDAsIGluZGV4KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkgU3RyaW5nLnByb3RvdHlwZSwgXCJhZnRlclwiLFxuXHRlbnVtZXJhYmxlOiBub1xuXHR2YWx1ZTogKHdoYXQpIC0+IFxuXHRcdGluZGV4ID0gQGluZGV4T2Yod2hhdClcblx0XHRyZXR1cm4gJycgaWYgaW5kZXggPCAwXG5cdFx0cmV0dXJuIEBzdWJzdHJpbmcoaW5kZXggKyAxKVxuXG4jINC/0L7Rh9C10LzRgy3RgtC+INC+0LHRi9GH0L3Ri9C5IGFuZ3VsYXIuZWxlbWVudCDQvdC1INGA0LDQsdC+0YLQsNC10YIuXG4jINC/0YDQuNGF0L7QtNC40YLRgdGPINC00LXQu9Cw0YLRjCDRh9C10YDQtdC3IGpRdWVyeSgpXG5AZmluZF9lbGVtZW50X2J5X3BhdGggPSAocGF0aCwgcmVsYXRpdmVfdG8pIC0+XG5cdG1hdGNoID0gcGF0aC5tYXRjaCgvcGFyZW50XFwoKC4qKStcXCkoPzogKT8oPzooLiopKyk/Lylcblx0cmVsYXRpdmVfdG8gPSBqUXVlcnkocmVsYXRpdmVfdG8pXG5cdHJlc3VsdCA9IHJlbGF0aXZlX3RvXG5cdGlmIG1hdGNoWzFdXG5cdFx0cmVzdWx0ID0galF1ZXJ5KHJlbGF0aXZlX3RvLnBhcmVudHMobWF0Y2hbMV0pWzBdKVxuXHRpZiBtYXRjaFsyXVxuXHRcdHJlc3VsdCA9IHJlc3VsdC5maW5kKG1hdGNoWzJdKVxuXHRyZXR1cm4gcmVzdWx0XG5cbkB3YWl0ID0gKGRlbGF5KSAtPiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSAtPiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSkuY2FuY2VsbGFibGUoKVxuXG5AcmVwbGFjZV93aXRoID0gKHRvLCBmcm9tKSAtPlxuXHRmb3Iga2V5LCB2YWx1ZSBvZiBmcm9tXG5cdFx0dG9ba2V5XSA9IGZyb21ba2V5XVxuXG5AY3VzdG9tX2Vycm9yID0gKG5hbWUpIC0+XG5cdGNsYXNzIEN1c3RvbV9lcnJvciBleHRlbmRzIEVycm9yXG5cdFx0Y29uc3RydWN0b3I6IChlcnJvcikgLT5cblx0XHRcdGlmIGVycm9yP1xuXHRcdFx0XHRpZiBlcnJvci5jb2RlP1xuXHRcdFx0XHRcdEBjb2RlID0gZXJyb3IuY29kZVxuXHRcdFx0XHRAbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgZXJyb3Jcblx0XHRcdEBuYW1lID0gbmFtZVxuXHRcdFx0aWYgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2Vcblx0XHRcdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3VzdG9tX2Vycm9yKVxuXG5cdEN1c3RvbV9lcnJvci5pc19jdXN0b21fZXJyb3IgPSB5ZXNcblxuXHRyZXR1cm4gQ3VzdG9tX2Vycm9yXG5cbkBzY3JvbGxfdG9fZWxlbWVudCA9IChlbGVtZW50KSAtPlxuXHR0b3Bfb2Zmc2V0ID0galF1ZXJ5KGVsZW1lbnQpLm9mZnNldCgpLnRvcFxuXHR0b3Bfb2Zmc2V0IC09IHBhcnNlSW50KGpRdWVyeSgnLmxheW91dCcpLmNzcygnbWFyZ2luLXRvcCcpKVxuXHR0b3Bfb2Zmc2V0ICs9IDIwXG5cblx0IyBqUXVlcnkoZG9jdW1lbnQpLnNjcm9sbFRvcCh0b3Bfb2Zmc2V0KVxuXHRib2R5ID0galF1ZXJ5KFwiaHRtbCwgYm9keVwiKVxuXHRib2R5LmFuaW1hdGUoeyBzY3JvbGxUb3A6IHRvcF9vZmZzZXQgKyAncHgnIH0pXG5cbkBkdW1teV9wcm9taXNlID0gKHJlc3VsdCkgLT4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkuY2FuY2VsbGFibGUoKVxuXG4jIEJsdWViaXJkIHByb21pc2UgQ2FuY2VsbGF0aW9uRXJyb3JcblByb21pc2VfY2FuY2VsbGF0aW9uX2Vycm9yID0gY3VzdG9tX2Vycm9yKCdVc2VyIG5hdmlnYXRlZCBhd2F5IGZyb20gdGhlIHBhZ2UnKVxuQFByb21pc2VfY2FuY2VsbGF0aW9uX2Vycm9yID0gUHJvbWlzZV9jYW5jZWxsYXRpb25fZXJyb3JcblxuaXNfY2FuY2VsbGF0aW9uX2Vycm9yID0gKGVycm9yKSAtPiBlcnJvciBpbnN0YW5jZW9mIFByb21pc2VfY2FuY2VsbGF0aW9uX2Vycm9yXG5ub3RfYV9jYW5jZWxsYXRpb25fZXJyb3IgPSAoZXJyb3IpIC0+ICFpc19jYW5jZWxsYXRpb25fZXJyb3IoZXJyb3IpXG5cbiMg0LTQtdC70LDQtdGCIHNhZmVBcHBseSgpLCDQtdGB0LvQuCAkc2NvcGUg0LXRidGRIFwi0LLQsNC70LjQtNC10L1cIlxuIyAoJHNjb3BlINC/0LXRgNC10YHRgtCw0ZHRgiDQsdGL0YLRjCBcItCy0LDQu9C40LTQvdGL0LxcIiwg0LrQvtCz0LTQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YPRhdC+0LTQuNGCINC90LAg0LTRgNGD0LPRg9GOINGB0YLRgNCw0L3QuNGG0YMg0L/RgNC40LvQvtC20LXQvdC40Y8pXG5Qcm9taXNlLnByb3RvdHlwZS4kYXBwbHkgPSAoJHNjb3BlKSAtPlxuXHRALnRoZW4gLT4gXG5cdFx0JHNjb3BlLnNhZmVBcHBseSgpXG5cdFx0XG5cdC5jYXRjaCBub3RfYV9jYW5jZWxsYXRpb25fZXJyb3IsIChlcnJvcikgLT5cblx0XHQkc2NvcGUuc2FmZUFwcGx5KClcblx0XHR0aHJvdyBlcnJvciIsIihmdW5jdGlvbigpIHtcbiAgdmFyIFByb21pc2VfY2FuY2VsbGF0aW9uX2Vycm9yLCBpc19jYW5jZWxsYXRpb25fZXJyb3IsIGpzb25fZGlmZiwgbm90X2FfY2FuY2VsbGF0aW9uX2Vycm9yLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgT2JqZWN0LmZvcl9lYWNoID0gZnVuY3Rpb24ob2JqZWN0LCBhY3Rpb24pIHtcbiAgICB2YXIga2V5LCByZXN1bHRzLCB2YWx1ZTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgcmVzdWx0cy5wdXNoKGFjdGlvbihrZXksIHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIE9iamVjdC5ub3RfZW1wdHkgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGggPiAwO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY2xvbmVcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5zbGljZSgwKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiaW50ZXJzZWN0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHZhciBhLCBhaSwgYiwgYmksIHJlc3VsdDtcbiAgICAgIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgICBiID0gYXJyYXkuY2xvbmUoKTtcbiAgICAgIGEuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuICAgICAgYi5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG4gICAgICByZXN1bHQgPSBbXTtcbiAgICAgIGFpID0gMDtcbiAgICAgIGJpID0gMDtcbiAgICAgIHdoaWxlIChhaSA8IGEubGVuZ3RoICYmIGJpIDwgYi5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGFbYWldIDwgYltiaV0pIHtcbiAgICAgICAgICBhaSsrO1xuICAgICAgICB9IGVsc2UgaWYgKGFbYWldID4gYltiaV0pIHtcbiAgICAgICAgICBiaSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGFbYWldKTtcbiAgICAgICAgICBhaSsrO1xuICAgICAgICAgIGJpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImludGVyc2VjdHNcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihhcnJheSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0KGFycmF5KS5ub3RfZW1wdHkoKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwic3Vic3RyYWN0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKGl0ZW0pIDwgMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJyZW1vdmVcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgYXJyYXksIGksIHJlc3VsdHMsIHRlc3Q7XG4gICAgICBhcnJheSA9IHRoaXM7XG4gICAgICB0ZXN0ID0gZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5iaW5kKGFycmF5W2ldKShhcnJheVtpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaSA9IDA7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAoaSA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0ZXN0KGkpKSB7XG4gICAgICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKGkrKyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwicmVtb3ZlX2F0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImhhc1wiLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4T2YoZWxlbWVudCkgPj0gMDtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiaGFzX25vXCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuICF0aGlzLmhhcyhlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwibm90X2VtcHR5XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJpc19lbXB0eVwiLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJsYXN0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5pc19lbXB0eSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCBcImNvbWJpbmF0aW9uc1wiLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZpcnN0LCByZXN0X2NvbWJpbmF0aW9ucywgcmVzdWx0O1xuICAgICAgaWYgKHRoaXMuaXNfZW1wdHkoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBmaXJzdCA9IHRoaXNbMF07XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZpcnN0O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gW107XG4gICAgICByZXN0X2NvbWJpbmF0aW9ucyA9IHRoaXMuc2xpY2UoMSkuY29tYmluYXRpb25zKCk7XG4gICAgICByZXR1cm4gcmVzdF9jb21iaW5hdGlvbnMucmVkdWNlKChmdW5jdGlvbihyZWR1Y2VkLCByZXN0X2NvbWJpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiByZWR1Y2VkLmNvbmNhdChmaXJzdC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgIHJldHVybiB4ICsgcmVzdF9jb21iaW5hdGlvbjtcbiAgICAgICAgfSkpO1xuICAgICAgfSksIFtdKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInN0YXJ0c193aXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oc3Vic3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHN1YnN0cmluZykgPT09IDA7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJlbmRzX3dpdGhcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihzdWJzdHJpbmcpIHtcbiAgICAgIHZhciBpbmRleDtcbiAgICAgIGluZGV4ID0gdGhpcy5sYXN0SW5kZXhPZihzdWJzdHJpbmcpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPT09IHRoaXMubGVuZ3RoIC0gc3Vic3RyaW5nLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcImlzX2VtcHR5XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDA7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJub3RfZW1wdHlcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhdGhpcy5pc19lbXB0eSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LnNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrLCBrZXksIGtleXMsIGxhc3Rfa2V5LCBsZW4sIG9iamVjdCwgcGFyYW1ldGVycywgdmFsdWU7XG4gICAgcGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgb2JqZWN0ID0gcGFyYW1ldGVycy5zaGlmdCgpO1xuICAgIHZhbHVlID0gcGFyYW1ldGVycy5wb3AoKTtcbiAgICBpZiAoIW9iamVjdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBrZXlzID0gcGFyYW1ldGVycy5yZWR1Y2UoZnVuY3Rpb24ocmVkdWNlZCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiByZWR1Y2VkLmNvbmNhdCh2YWx1ZS50b1N0cmluZygpLnNwbGl0KCcuJykpO1xuICAgIH0sIFtdKTtcbiAgICBsYXN0X2tleSA9IGtleXMucG9wKCk7XG4gICAgZm9yIChrID0gMCwgbGVuID0ga2V5cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAga2V5ID0ga2V5c1trXTtcbiAgICAgIGlmICghb2JqZWN0W2tleV0pIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB7fTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgIH1cbiAgICBvYmplY3RbbGFzdF9rZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICBPYmplY3QuZ2V0ID0gZnVuY3Rpb24ob2JqZWN0LCBwYXRoKSB7XG4gICAgdmFyIGssIGtleSwgbGVuLCBwYXJhbWV0ZXJzLCBwYXRoX2VsZW1lbnRzO1xuICAgIHBhcmFtZXRlcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIHBhcmFtZXRlcnMuc2hpZnQoKTtcbiAgICBwYXRoX2VsZW1lbnRzID0gcGFyYW1ldGVycy5yZWR1Y2UoZnVuY3Rpb24ocmVkdWNlZCwgcGF0aF9lbGVtZW50KSB7XG4gICAgICByZXR1cm4gcmVkdWNlZC5jb25jYXQocGF0aF9lbGVtZW50LnRvU3RyaW5nKCkuc3BsaXQoJy4nKSk7XG4gICAgfSwgW10pO1xuICAgIGZvciAoayA9IDAsIGxlbiA9IHBhdGhfZWxlbWVudHMubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIGtleSA9IHBhdGhfZWxlbWVudHNba107XG4gICAgICBpZiAoIW9iamVjdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICBPYmplY3QuZXF1YWxzID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhhLCBiKTtcbiAgfTtcblxuICB0aGlzLmZvcm1hdCA9IGZ1bmN0aW9uKHRlbXBsYXRlLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xceyhbXlxcfV0rKVxcfS9nLCBmdW5jdGlvbih0ZXh0LCBtYXRjaCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXQocGFyYW1ldGVycywgbWF0Y2gpO1xuICAgIH0pO1xuICB9O1xuXG4gIE9iamVjdC5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYW5ndWxhci5leHRlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICBqc29uX2RpZmYgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIGFycmF5LCBhcnJheV9kaWZmLCBkaWZmLCBpLCBpbm5lckRpZmYsIGosIHZhbHVlO1xuICAgIGRpZmYgPSB7fTtcbiAgICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnICYmIHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yIChpIGluIGIpIHtcbiAgICAgICAgdmFsdWUgPSBiW2ldO1xuICAgICAgICBpbm5lckRpZmYgPSB7fTtcbiAgICAgICAgaWYgKGJbaV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGlmIChhW2ldID09IG51bGwpIHtcbiAgICAgICAgICAgIGRpZmZbaV0gPSBiW2ldO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWFuZ3VsYXIuZXF1YWxzKGJbaV0sIGFbaV0pKSB7XG4gICAgICAgICAgICBhcnJheSA9IFtdO1xuICAgICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaiA8IGJbaV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChqIDwgYVtpXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhcnJheV9kaWZmID0ganNvbl9kaWZmKGFbaV1bal0sIGJbaV1bal0pO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJyYXlfZGlmZiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhhcnJheV9kaWZmKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goYXJyYXlfZGlmZik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhcnJheV9kaWZmICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaChhcnJheV9kaWZmKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChiW2ldW2pdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWZmW2ldID0gYXJyYXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlubmVyRGlmZiA9IGpzb25fZGlmZihhW2ldLCBiW2ldKTtcbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoaW5uZXJEaWZmKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkaWZmW2ldID0gaW5uZXJEaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghYSkge1xuICAgICAgICAgIGRpZmZbaV0gPSBiW2ldO1xuICAgICAgICB9IGVsc2UgaWYgKCFhLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgZGlmZltpXSA9IGJbaV07XG4gICAgICAgIH0gZWxzZSBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgIGRpZmZbaV0gPSBiW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIGRpZmYgPSB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpZmYgPSBiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbiAgfTtcblxuICBPYmplY3QuZGlmZiA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gW2pzb25fZGlmZihiLCBhKSwganNvbl9kaWZmKGEsIGIpXTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCBcImRlbGF5XCIsIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24odGltZSkge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQodGhpcywgdGltZSk7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCBcInBlcmlvZGljYWxcIiwge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbihpbnRlcnZhbCkge1xuICAgICAgdmFyIGFjdGlvbiwgcGVyaW9kaWNhbDtcbiAgICAgIGFjdGlvbiA9IHRoaXM7XG4gICAgICBwZXJpb2RpY2FsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGFjdGlvbigpO1xuICAgICAgICByZXR1cm4gcGVyaW9kaWNhbC5kZWxheShpbnRlcnZhbCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHBlcmlvZGljYWwoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCBcImJpbmRcIiwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5hcHBseShzY29wZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuZG93bmxvYWRfZmlsZSA9IGZ1bmN0aW9uKGNvbnRlbnQsIG5hbWUpIHtcbiAgICB2YXIgZmFrZV9mb3JtLCB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShjb250ZW50LCBudWxsLCAyKTtcbiAgICB9XG4gICAgZmFrZV9mb3JtID0gYW5ndWxhci5lbGVtZW50KCc8Zm9ybSBhY3Rpb249XCIvZG93bmxvYWRcIiBtZXRob2Q9XCJwb3N0XCIvPicpO1xuICAgIGZha2VfZm9ybS5hcHBlbmQoYW5ndWxhci5lbGVtZW50KCc8dGV4dGFyZWEgbmFtZT1cImZpbGVuYW1lXCIvPicpLnZhbChuYW1lKSk7XG4gICAgdGV4dCA9IGFuZ3VsYXIuZWxlbWVudCgnPHRleHRhcmVhIG5hbWU9XCJkYXRhXCIvPicpO1xuICAgIHRleHQudmFsKGNvbnRlbnQpO1xuICAgIGZha2VfZm9ybS5hcHBlbmQodGV4dCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmYWtlX2Zvcm1bMF0pO1xuICAgIGZha2VfZm9ybVswXS5zdWJtaXQoKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZha2VfZm9ybVswXSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwicmVwZWF0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24odGltZXMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICByZXN1bHQgPSAnJztcbiAgICAgIHdoaWxlICh0aW1lcyA+IDApIHtcbiAgICAgICAgcmVzdWx0ICs9IHRoaXM7XG4gICAgICAgIHRpbWVzLS07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwicmVwbGFjZV9hdFwiLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKGluZGV4LCBjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1YnN0cigwLCBpbmRleCkgKyBjaGFyYWN0ZXIgKyB0aGlzLnN1YnN0cihpbmRleCArIGNoYXJhY3Rlci5sZW5ndGgpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwiaGFzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24od2hhdCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZih3aGF0KSA+PSAwO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwiYmVmb3JlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24od2hhdCkge1xuICAgICAgdmFyIGluZGV4O1xuICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2Yod2hhdCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcImFmdGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24od2hhdCkge1xuICAgICAgdmFyIGluZGV4O1xuICAgICAgaW5kZXggPSB0aGlzLmluZGV4T2Yod2hhdCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnN1YnN0cmluZyhpbmRleCArIDEpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5maW5kX2VsZW1lbnRfYnlfcGF0aCA9IGZ1bmN0aW9uKHBhdGgsIHJlbGF0aXZlX3RvKSB7XG4gICAgdmFyIG1hdGNoLCByZXN1bHQ7XG4gICAgbWF0Y2ggPSBwYXRoLm1hdGNoKC9wYXJlbnRcXCgoLiopK1xcKSg/OiApPyg/OiguKikrKT8vKTtcbiAgICByZWxhdGl2ZV90byA9IGpRdWVyeShyZWxhdGl2ZV90byk7XG4gICAgcmVzdWx0ID0gcmVsYXRpdmVfdG87XG4gICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICByZXN1bHQgPSBqUXVlcnkocmVsYXRpdmVfdG8ucGFyZW50cyhtYXRjaFsxXSlbMF0pO1xuICAgIH1cbiAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5maW5kKG1hdGNoWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB0aGlzLndhaXQgPSBmdW5jdGlvbihkZWxheSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KTtcbiAgICB9KS5jYW5jZWxsYWJsZSgpO1xuICB9O1xuXG4gIHRoaXMucmVwbGFjZV93aXRoID0gZnVuY3Rpb24odG8sIGZyb20pIHtcbiAgICB2YXIga2V5LCByZXN1bHRzLCB2YWx1ZTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChrZXkgaW4gZnJvbSkge1xuICAgICAgdmFsdWUgPSBmcm9tW2tleV07XG4gICAgICByZXN1bHRzLnB1c2godG9ba2V5XSA9IGZyb21ba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHRoaXMuY3VzdG9tX2Vycm9yID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBDdXN0b21fZXJyb3I7XG4gICAgQ3VzdG9tX2Vycm9yID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICAgIGV4dGVuZChDdXN0b21fZXJyb3IsIHN1cGVyQ2xhc3MpO1xuXG4gICAgICBmdW5jdGlvbiBDdXN0b21fZXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoZXJyb3IuY29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBlcnJvci5jb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEN1c3RvbV9lcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEN1c3RvbV9lcnJvcjtcblxuICAgIH0pKEVycm9yKTtcbiAgICBDdXN0b21fZXJyb3IuaXNfY3VzdG9tX2Vycm9yID0gdHJ1ZTtcbiAgICByZXR1cm4gQ3VzdG9tX2Vycm9yO1xuICB9O1xuXG4gIHRoaXMuc2Nyb2xsX3RvX2VsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGJvZHksIHRvcF9vZmZzZXQ7XG4gICAgdG9wX29mZnNldCA9IGpRdWVyeShlbGVtZW50KS5vZmZzZXQoKS50b3A7XG4gICAgdG9wX29mZnNldCAtPSBwYXJzZUludChqUXVlcnkoJy5sYXlvdXQnKS5jc3MoJ21hcmdpbi10b3AnKSk7XG4gICAgdG9wX29mZnNldCArPSAyMDtcbiAgICBib2R5ID0galF1ZXJ5KFwiaHRtbCwgYm9keVwiKTtcbiAgICByZXR1cm4gYm9keS5hbmltYXRlKHtcbiAgICAgIHNjcm9sbFRvcDogdG9wX29mZnNldCArICdweCdcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLmR1bW15X3Byb21pc2UgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkuY2FuY2VsbGFibGUoKTtcbiAgfTtcblxuICBQcm9taXNlX2NhbmNlbGxhdGlvbl9lcnJvciA9IGN1c3RvbV9lcnJvcignVXNlciBuYXZpZ2F0ZWQgYXdheSBmcm9tIHRoZSBwYWdlJyk7XG5cbiAgdGhpcy5Qcm9taXNlX2NhbmNlbGxhdGlvbl9lcnJvciA9IFByb21pc2VfY2FuY2VsbGF0aW9uX2Vycm9yO1xuXG4gIGlzX2NhbmNlbGxhdGlvbl9lcnJvciA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgUHJvbWlzZV9jYW5jZWxsYXRpb25fZXJyb3I7XG4gIH07XG5cbiAgbm90X2FfY2FuY2VsbGF0aW9uX2Vycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gIWlzX2NhbmNlbGxhdGlvbl9lcnJvcihlcnJvcik7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuJGFwcGx5ID0gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkc2NvcGUuc2FmZUFwcGx5KCk7XG4gICAgfSlbXCJjYXRjaFwiXShub3RfYV9jYW5jZWxsYXRpb25fZXJyb3IsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAkc2NvcGUuc2FmZUFwcGx5KCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYXBwXG5cbi8vINCf0L7RgdGC0YDQsNC90LjRh9C90LDRjyDQvdCw0LLQuNCz0LDRhtC40Y9cbi5kaXJlY3RpdmUoXCJzZ1BhZ2VuYXZcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiRUFcIixcbiAgICBzY29wZToge1xuICAgICAgdG90YWxwYWdlczogXCI9XCIsXG4gICAgICBjdXJyZW50cGFnZTogXCI9XCIsXG4gICAgICBvbnBhZ2U6IFwiPVwiLFxuICAgICAgY2FsbGJhY2s6IFwiJlwiXG4gICAgfSxcbiAgICAvL25nLXNob3c9J3RvdGFsUGFnZXMgJmd0OyAxJ1xuICAgIHRlbXBsYXRlOiBcIjxuYXYgY2xhc3M9J3BhZ2VuYXZpZ2F0aW9uJz48dWw+IFxcXG4gICAgICAgICAgICA8bGkgbmctc2hvdz0ndG90YWxwYWdlcyAmZ3Q7IDEnIG5nLWNsYXNzPVxcXCJ7J2Rpc2FibGVkJzogY3VycmVudHBhZ2U8Mn1cXFwiPjxhIG5nLWNsaWNrPSdzZXRQYWdlKGN1cnJlbnRwYWdlLTEpJz7ihpAg0J3QsNC30LDQtDwvYT48L2xpPiBcXFxuICAgICAgICAgICAgPGxpIG5nLXNob3c9J3RvdGFscGFnZXMgJmd0OyAxJyBuZy1yZXBlYXQ9XFxcImkgaW4gcGFnaW5hdGlvbkFycmF5XFxcIiAgY2xhc3M9XFxcInt7aS5jbGFzc319XFxcIj4gXFxcbiAgICAgICAgICAgICAgPGEgbmctY2xpY2s9XFxcInNldFBhZ2UoaS5ocmVmKVxcXCI+e3tpLnRleHR9fTwvYT4gXFxcbiAgICAgICAgICAgIDwvbGk+IFxcXG4gICAgICAgICAgICA8bGkgbmctc2hvdz0ndG90YWxwYWdlcyAmZ3Q7IDEnIG5nLWNsYXNzPVxcXCJ7J2Rpc2FibGVkJzogY3VycmVudHBhZ2U9PXRvdGFscGFnZXN9XFxcIj48YSBuZy1jbGljaz0nc2V0UGFnZShjdXJyZW50cGFnZSsxKSc+0JLQv9C10YDRkdC0IOKGkjwvYT48L2xpPiBcXFxuICAgICAgICAgICAgPGxpIHN0eWxlPSdwYWRkaW5nOjAgMCAwIDMwcHgnIG5nLXNob3c9XFxcInRvdGFscGFnZXMgJmd0OyAxXFxcIj7Qn9C+0LrQsNC30YvQstCw0YLRjCDQv9C+OiA8c2VsZWN0IG5nLWNoYW5nZT0nY3VycmVudHBhZ2U9MScgbmctbW9kZWw9J29ucGFnZSc+PG9wdGlvbiB2YWx1ZT0xMD4xMDwvb3B0aW9uPjxvcHRpb24gdmFsdWU9MjA+MjA8L29wdGlvbj48b3B0aW9uIHZhbHVlPTUwPjUwPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0xMDA+MTAwPC9vcHRpb24+PC9zZWxlY3Q+PC9saT4gXFxcbiAgICAgICAgICA8L3VsPjwvbmF2PlwiLFxuICAgIHJlcGxhY2U6IGZhbHNlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgZnVuY3Rpb24gX2ZpbGxwYWdnaW5hdGlvbkFycmF5KGZyb20sdG8pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkrKykge1xuICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb25BcnJheS5wdXNoKHtcImhyZWZcIjppLFwidGV4dFwiOmksXCJjbGFzc1wiOiAoaT09c2NvcGUuY3VycmVudHBhZ2UpID8gXCJhY3RpdmVcIiA6IFwiXCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZHJhd1BhZ2luYXRpb24gKCkge1xuICAgICAgICAvLyDQmtC+0LvQuNGH0LXRgdGC0LLQviDRgdGC0YDQsNC90LjRhiA8PTcgOjogMSAyIDMgNCA1IDYgNyAtLT5cbiAgICAgICAgLy9hbGVydChzY29wZS5jdXJyZW50UGFnZSk7XG5cbiAgICAgICAgaWYgKHNjb3BlLnRvdGFscGFnZXMgPD0gNylfZmlsbHBhZ2dpbmF0aW9uQXJyYXkoMSxzY29wZS50b3RhbHBhZ2VzKTtcbiAgICAgICAgLy8g0JrQvtC70LjRh9C10YHRgtCy0L4g0YHRgtGA0LDQvdC40YYgPjdcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8g0KLQtdC60YPRidCw0Y8g0YHRgtGA0LDQvdC40YbQsCA8PTQgOjogMSAyIDMgNCA1IC4uLiA4XG4gICAgICAgICAgaWYgKHNjb3BlLmN1cnJlbnRwYWdlIDw9IDQpIF9maWxscGFnZ2luYXRpb25BcnJheSgxLDUpOyBlbHNlIHtcbiAgICAgICAgICAgIC8vINCi0LXQutGD0YnQsNGPINGB0YLRgNCw0L3QuNGG0LAgPjQg0Lgg0L3QsNGF0L7QtNC40YLRgdGPINCyINGG0LXQvdGC0YDQtSA6OiAxIC4uLiA0IDUgNiAuLi4gMTFcbiAgICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb25BcnJheS5wdXNoKHtcImhyZWZcIjoxLFwidGV4dFwiOjF9KTtcbiAgICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb25BcnJheS5wdXNoKHtcImhyZWZcIjooTWF0aC5mbG9vcihzY29wZS5jdXJyZW50cGFnZS8yKSksXCJ0ZXh0XCI6XCIuLi5cIn0pO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUuY3VycmVudHBhZ2UgPD0gc2NvcGUudG90YWxwYWdlcy0zKSB7X2ZpbGxwYWdnaW5hdGlvbkFycmF5KHNjb3BlLmN1cnJlbnRwYWdlLTEsc2NvcGUuY3VycmVudHBhZ2UrMSk7fVxuICAgICAgICAgICAgLy8g0KLQtdC60YPRidCw0Y8g0YHRgtGA0LDQvdC40YbQsCA+NCDQuCDQv9GA0LjQutC70LXQtdC90LAg0Log0LrQvtC90YbRgyA6OiAxIC4uLiA1IDYgNyA4IDkgLS0+XG4gICAgICAgICAgICBlbHNlIF9maWxscGFnZ2luYXRpb25BcnJheShzY29wZS50b3RhbHBhZ2VzLTMsc2NvcGUudG90YWxwYWdlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNjb3BlLmN1cnJlbnRwYWdlIDw9IHNjb3BlLnRvdGFscGFnZXMtMyB8fCBzY29wZS5jdXJyZW50cGFnZSA8PSA0KSB7XG4gICAgICAgICAgICBzY29wZS5wYWdpbmF0aW9uQXJyYXkucHVzaCh7XCJocmVmXCI6KHNjb3BlLmN1cnJlbnRwYWdlK01hdGguY2VpbCgoc2NvcGUudG90YWxwYWdlcy1zY29wZS5jdXJyZW50cGFnZSkvMikpLFwidGV4dFwiOlwiLi4uXCJ9KTtcbiAgICAgICAgICAgIHNjb3BlLnBhZ2luYXRpb25BcnJheS5wdXNoKHtcImhyZWZcIjpzY29wZS50b3RhbHBhZ2VzLFwidGV4dFwiOnNjb3BlLnRvdGFscGFnZXN9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNjb3BlLiR3YXRjaChcInRvdGFscGFnZXMgKyBjdXJyZW50cGFnZSArIG9ucGFnZVwiLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBzY29wZS5wYWdpbmF0aW9uQXJyYXkgPSBbXTtcbiAgICAgICAgZHJhd1BhZ2luYXRpb24oKTtcbiAgICAgIH0pO1xuICAgICAgc2NvcGUuJHdhdGNoKFwiY3VycmVudHBhZ2UgKyBvbnBhZ2VcIiwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgaWYgKG5ld1ZhbCE9b2xkVmFsKSBzY29wZS5jYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgICBzY29wZS5zZXRQYWdlID0gZnVuY3Rpb24gKHYpIHsgaWYgKHY+MCAmJiB2PHNjb3BlLnRvdGFscGFnZXMrMSkgc2NvcGUuY3VycmVudHBhZ2U9djsgfVxuICAgIH1cbiAgfVxufSlcbi8vINCQ0LLRgtC+0LrQvtC80L/Qu9C40YJcbi5kaXJlY3RpdmUoXCJzZ0F1dG9jb21wbGV0ZVwiLCBmdW5jdGlvbigkZG9jdW1lbnQpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBzY29wZToge1xuICAgICAgc2dBdXRvY29tcGxldGU6IFwiPVwiLFxuICAgICAgbmdNb2RlbDogXCI9XCJcbiAgICB9LFxuICAgIHRlbXBsYXRlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiYXV0b2NvbXBsZXRlXCI+XFxcbiAgICAgIDxpbnB1dCBjbGFzcz1cIicgKyBhdHRycy5jbGFzcyArICdcIiB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmdNb2RlbFwiIC8+IFxcXG4gICAgICA8dWwgbmctc2hvdz1cInNob3cgJiYgc2dBdXRvY29tcGxldGUubGVuZ3RoID4gMFwiPlxcXG4gICAgICAgIDxsaSAgbmctcmVwZWF0PVwiaSBpbiBzZ0F1dG9jb21wbGV0ZVwiIG5nLWNsYXNzPVwie1xcJ2FjdGl2ZVxcJzokaW5kZXggPT0gYWN0aXZlfVwiIG5nLWNsaWNrPVwic2V0KGkpXCI+e3tpfX08L2xpPlxcXG4gICAgICA8L3VsPlxcXG4gICAgPC9kaXY+J30sXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpe1xuICAgICAgc2NvcGUuYWN0aXZlID0gMDtcbiAgICAgIHNjb3BlLnNob3cgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnQuYmluZCgna2V5ZG93bicsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcbiAgICAgICAgc3dpdGNoIChrZXkpe1xuICAgICAgICAgIGNhc2UgNDA6IC8v0YHRgtGA0LXQu9C60LAg0LLQvdC40LdcbiAgICAgICAgICAgIHNjb3BlLmFjdGl2ZSA9IChzY29wZS5hY3RpdmUgPT0gc2NvcGUuc2dBdXRvY29tcGxldGUubGVuZ3RoLTEpID8gMCA6IHNjb3BlLmFjdGl2ZSsxO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzODovL9GB0YLRgNC10LvQutCwINCy0LLQtdGA0YVcbiAgICAgICAgICAgIHNjb3BlLmFjdGl2ZSA9IChzY29wZS5hY3RpdmUgPT0gMCkgPyBzY29wZS5zZ0F1dG9jb21wbGV0ZS5sZW5ndGgtMSA6IHNjb3BlLmFjdGl2ZS0xO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMzovL2VudGVyXG4gICAgICAgICAgICB2YXIgcmV0ID0gIXNjb3BlLnNob3c7IC8v0J/RgNC4INC+0YLQutGA0YvRgtC+0Lkg0YTQvtGA0LzQtSwg0L3QtSDQvtCx0YDQsNCx0LDRgtGL0LLQsNGC0YwgZW50ZXIg0LTQsNC70LXQtSAo0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0YTQvtGA0LzRiylcbiAgICAgICAgICAgIHNjb3BlLnNldChzY29wZS5zZ0F1dG9jb21wbGV0ZVtzY29wZS5hY3RpdmVdKVxuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBzY29wZS5zZXQgPSBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgc2NvcGUubmdNb2RlbCA9IGl0ZW1cbiAgICAgICAgc2NvcGUuYWN0aXZlID0gMDtcbiAgICAgICAgc2NvcGUuc2hvdyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGRpc21pc3NDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIGlmIChlbGVtZW50WzBdICE9PSBldnQudGFyZ2V0KSB7XG4gICAgICAgICAgc2NvcGUuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgICRkb2N1bWVudC5iaW5kKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xuICAgICAgc2NvcGUuJHdhdGNoKFwic2dBdXRvY29tcGxldGUgXCIsIGZ1bmN0aW9uKG4sbyl7XG4gICAgICAgIHNjb3BlLmFjdGl2ZSA9IDA7XG4gICAgICAgIGlmIChzY29wZS5uZ01vZGVsLmxlbmd0aCA+IDIgJiYgc2NvcGUuc2dBdXRvY29tcGxldGUuaW5kZXhPZihzY29wZS5uZ01vZGVsKSA9PSAtMSlcbiAgICAgICAgICAgIHNjb3BlLnNob3cgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcbi8vXG4uZGlyZWN0aXZlKFwic2dBdXRvcmVzaXplXCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICBzY29wZToge1xuICAgICAgbmdNb2RlbDogXCI9XCJcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIGF1dG9yZXNpemUgPSB0cnVlLCBvbGRoZWlnaHQgPSBmYWxzZTtcblxuICAgICAgZnVuY3Rpb24gdG9vX2JpZyhzKSB7XG4gICAgICAgIHZhciBuZXdsaW5ld3MgPSBzLm1hdGNoKC9cXG4vKTtcbiAgICAgICAgbmV3bGluZXdzID0gKG5ld2xpbmV3cykgPyBuZXdsaW5ld3MubGVuZ3RoIDogMDtcbiAgICAgICAgcmV0dXJuIChzLmxlbmd0aCA+IGVsZW1lbnQud2lkdGgoKS85IHx8IG5ld2xpbmV3cyk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYmluZCh7XCJtb3VzZXVwXCI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuaGVpZ2h0KCkgIT09IG9sZGhlaWdodCAmJiBvbGRoZWlnaHQpIGF1dG9yZXNpemUgPSBmYWxzZTtcbiAgICAgICAgb2xkaGVpZ2h0ID0gZWxlbWVudC5oZWlnaHQoKTtcbiAgICAgIH19KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKFwibmdNb2RlbFwiLCBmdW5jdGlvbihuLG8pIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhlbGVtZW50LCBzY29wZS5uZ01vZGVsLCBhdXRvcmVzaXplKTtcbiAgICAgICAgaWYgKGF1dG9yZXNpemUpIHtcbiAgICAgICAgICBpZiAobiE9PW8gJiYgdG9vX2JpZyhuKSkgZWxlbWVudC5jc3MoJ2hlaWdodCcsJzk4cHgnKTsgZWxzZSBlbGVtZW50LmNzcygnaGVpZ2h0JywnNDhweCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyDQndCw0LLQuNCz0LDRhtC40Y8g0L/QviDQstGA0LXQvNC10L3QuCDQtNC70Y8g0LPRgNCw0YTQuNC60L7QsiDQsiDQvNC+0L3QuNGC0L7RgNC40L3Qs9C1XG4uZGlyZWN0aXZlKFwic2dUaW1lbmF2XCIsIGZ1bmN0aW9uKCRmaWx0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJFXCIsXG4gICAgc2NvcGU6IHtcbiAgICAgIHN0YXJ0RGF0ZTogXCI9XCIsXG4gICAgICBlbmREYXRlOiBcIj1cIixcbiAgICAgIGZpcnN0RGF0ZTogXCI9XCIsXG4gICAgICBsYXN0RGF0ZTogXCI9XCIsXG4gICAgICBwZXJpb2Q6IFwiPVwiLFxuICAgICAgY2FsbGJhY2s6IFwiJlwiXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJzxzcGFuPiBcXFxuICAgICAgICA8bmF2IGNsYXNzPVwicmFkaW9cIj4gXFxcbiAgICAgICAgICA8YnV0dG9uIG5nLXJlcGVhdD1cInQgaW4gcGVyaW9kVHlwZXNcIiBuZy1jbGFzcz1cInt0cnVlOlxcJ2FjdGl2ZVxcJ31bcGVyaW9kPT1cXCd7e3Qua2V5fX1cXCddXCIgbmctY2xpY2s9XCJzZXRQZXJpb2QodC5rZXkpXCI+e3t0LnRpdGxlfX08L2J1dHRvbj4gXFxcbiAgICAgICAgPC9uYXY+IFxcXG4gICAgICAgIDxuYXYgY2xhc3M9XCJidXR0b25zXCI+IFxcXG4gICAgICAgICAgPGJ1dHRvbiBuZy1oaWRlPVwiaGlkZUZpcnN0XCIgbmctY2xpY2s9XCJzZXRUaW1lUmFuZ2UoLTEpXCI+4oaQIHt7Zm9ybWF0RGF0ZSgtMSl9fTwvYnV0dG9uPiBcXFxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdWNjZXNzXCIgbmctYmluZD1cImZvcm1hdERhdGUoMCwgXFwnZCBNTU0geXl5eVxcJylcIiAvPiBcXFxuICAgICAgICAgIDxidXR0b24gbmctaGlkZT1cImhpZGVMYXN0XCIgbmctY2xpY2s9XCJzZXRUaW1lUmFuZ2UoMSlcIj57e2Zvcm1hdERhdGUoMSl9fSDihpI8L2J1dHRvbj4gXFxcbiAgICAgICAgPC9uYXY+IFxcXG4gICAgICA8L3NwYW4+JyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgc2NvcGUucGVyaW9kVHlwZXMgPSBbXG4gICAgICAgIHtcImtleVwiOiBcImhvdXJseVwiLCAgIFwidGl0bGVcIjogXCLQn9C+INGH0LDRgdCw0LxcIiwgICAgXCJkaWZmXCI6IDF9LFxuICAgICAgICB7XCJrZXlcIjogXCJkYWlseVwiLCAgICBcInRpdGxlXCI6IFwi0J/QviDQtNC90Y/QvFwiLCAgICAgXCJkaWZmXCI6IDF9LFxuICAgICAgICB7XCJrZXlcIjogXCJ3ZWVrbHlcIiwgICBcInRpdGxlXCI6IFwi0J/QviDQvdC10LTQtdC70Y/QvFwiLCAgXCJkaWZmXCI6IDd9LFxuICAgICAgICB7XCJrZXlcIjogXCJtb250aGx5XCIsICBcInRpdGxlXCI6IFwi0J/QviDQvNC10YHRj9GG0LDQvFwiLCAgXCJkaWZmXCI6IDMwfVxuICAgICAgXVxuICAgICAgc2NvcGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChvZmZzZXQsIGZvcm1hdCkge1xuICAgICAgICB2YXIgdiA9IG5ldyBEYXRlKHNjb3BlLmVuZERhdGUpO1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgXCJkIE1NTVwiO1xuXG4gICAgICAgIHYuc2V0RGF0ZSh2LmdldERhdGUoKSArIG9mZnNldCAqICRmaWx0ZXIoJ2ZpbmRrZXknKShzY29wZS5wZXJpb2RUeXBlcywna2V5JyxzY29wZS5wZXJpb2QsJ2RpZmYnKSk7XG5cbiAgICAgICAgLy8g0L7Qv9GA0LXQtNC10LvQtdC90LjQtSDQs9GA0LDQvdC40YbRiyDQvdCw0LvQuNGH0LjRjyDQtNCw0L3QvdGL0YUg0LTQu9GPINC/0L7QutCw0LfQsC/RgdC60YDRi9GC0LjRjyDQutC90L7Qv9C+0Loge3ByZXZ9L3tuZXh0fSDQsiBzZ1RpbWVuYXZcbiAgICAgICAgdi5zZXRIb3VycygwLDAsMCwwKTtcbiAgICAgICAgc2NvcGUuaGlkZUxhc3QgID0gKHYgPiAobmV3IERhdGUoc2NvcGUubGFzdERhdGUpICkuc2V0SG91cnMoMCwwLDAsMCkgKSA/IHRydWU6IGZhbHNlO1xuICAgICAgICBzY29wZS5oaWRlRmlyc3QgPSAodiA8IChuZXcgRGF0ZShzY29wZS5maXJzdERhdGUpKS5zZXRIb3VycygwLDAsMCwwKSApID8gdHJ1ZTogZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoXCJkYXRlXCIpKHYsIGZvcm1hdCk7XG5cbiAgICAgIH1cbiAgICAgIHNjb3BlLnNldFRpbWVSYW5nZSA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgdmFyIHYgPSBuZXcgRGF0ZShzY29wZS5lbmREYXRlKSxcbiAgICAgICAgICAgIGRpZmYgPSAkZmlsdGVyKCdmaW5ka2V5Jykoc2NvcGUucGVyaW9kVHlwZXMsJ2tleScsc2NvcGUucGVyaW9kLCdkaWZmJyksXG4gICAgICAgICAgICBtYXNrID0gJ3l5eXkvTU0vZGQnO1xuXG4gICAgICAgIHYuc2V0RGF0ZSh2LmdldERhdGUoKSArIG9mZnNldCAqIGRpZmYpO1xuICAgICAgICBzY29wZS5lbmREYXRlID0gJGZpbHRlcihcImRhdGVcIikodiwgbWFzayArIChzY29wZS5wZXJpb2QgPT09ICdob3VybHknID8gJyAyMzo1OScgOiAnJykgKTtcblxuICAgICAgICBpZiAoc2NvcGUucGVyaW9kICE9PSAnaG91cmx5Jykgdi5zZXREYXRlKHYuZ2V0RGF0ZSgpIC0gNiAqIGRpZmYpO1xuICAgICAgICBzY29wZS5zdGFydERhdGUgPSAkZmlsdGVyKFwiZGF0ZVwiKSh2LCBtYXNrICsgKHNjb3BlLnBlcmlvZCA9PT0gJ2hvdXJseScgPyAnIDAwOjAwJyA6ICcnKSApO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdHcmFwaCBkYXRldGltZSByYW5nZSBoYXMgY2hhbmdlZCBieScsIG9mZnNldCwgJywgbmV3IHJhbmdlOicsIHNjb3BlLnN0YXJ0RGF0ZSwgJy0nLCBzY29wZS5lbmREYXRlKTtcbiAgICAgIH1cbiAgICAgIHNjb3BlLnNldFBlcmlvZCA9IGZ1bmN0aW9uIChwZXJpb2QpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0dyYXBoIHBlcmlvZCBoYXMgY2hhbmdlZCBmcm9tJywgc2NvcGUucGVyaW9kLCAndG8nLCBwZXJpb2QpO1xuICAgICAgICBzY29wZS5wZXJpb2QgPSBwZXJpb2Q7XG4gICAgICAgIHNjb3BlLnNldFRpbWVSYW5nZSgwKTtcbiAgICAgIH1cbiAgICAgIC8vIENhbm5vdCB1c2luZyB3YXRjaENvbGxlY3Rpb24gYmVjYXVzZSBvZiBidWcgd2l0aCBvbGRDb2xsZWN0aW9uIHByb3BlcnR5XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8yNjIxXG4gICAgICBzY29wZS4kd2F0Y2goXCJzdGFydERhdGUrZW5kRGF0ZVwiLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBjb25zb2xlLmxvZygnRGF0ZXMgaW4gc2hvd2VkIHBlcmlvZCBoYXMgY2hhbmdlZCBmcm9tJywgb2xkVmFsLCAndG8nLCBuZXdWYWwpO1xuICAgICAgICBpZiAobmV3VmFsIT1vbGRWYWwpIHNjb3BlLmNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pXG5cbi5kaXJlY3RpdmUoXCJzZ01vZGFsXCIsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICBlbGVtZW50XG4gICAgICAvLyDRgdC+0LfQtNCw0LXQvCDRgtGA0LjQs9Cz0LXRgNGLINC90LAg0L/QvtC60LDQtyDQuCDRgdC60YDRi9GC0LjQtSDQvNC+0LTQsNC70YzQvdC+0LPQviDQvtC60L3QsFxuICAgICAgLm9uKCdtb2RhbF9zaG93JywgZnVuY3Rpb24oZSl7IGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpOyAkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKCdtb2RhbC1vcGVuJykgfSlcbiAgICAgIC5vbignbW9kYWxfaGlkZScsIGZ1bmN0aW9uKGUpeyBlbGVtZW50LmFkZENsYXNzKCdoaWRkZW4nKTsgJChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpIH0pXG5cbiAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHsgaWYgKGVsZW1lbnQuaXMoZS5zcmNFbGVtZW50KSkgZWxlbWVudC50cmlnZ2VySGFuZGxlcignbW9kYWxfaGlkZScpIH0pICAvLyDRgtGA0LjQs9Cz0LXRgCDQvdCwINC60LvQuNC6INC/0L4g0LfQsNGC0LXQvdC10L3QvdC+0LzRgyDRhNC+0L3Rg1xuICAgICAgLmZpbmQoJy5jbG9zZScpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7IGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ21vZGFsX2hpZGUnKSB9KTsgIC8vINGC0YDQuNCz0LPQtdGAINC90LAg0LrQu9C40Log0L/QviDQt9Cw0LrRgNGL0LLQsNGO0YnQtdC5INGB0YHRi9C70LrQtVxuXG4gICAgJCQoZG9jdW1lbnQuYm9keSkub24oXCJrZXl1cFwiLCBmdW5jdGlvbihlKSB7IGlmIChlLndoaWNoID09IDI3KSBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdtb2RhbF9oaWRlJykgfSk7IC8vINGC0YDQuNCz0LPQtdGAINC90LAg0L3QsNC20LDRgtC40LUgRVNDXG4gIH1cbn0pXG4vL1xuLmRpcmVjdGl2ZShcInNnTW9kYWxPcGVuXCIsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAkJChlbGVtZW50KS5vbignY2xpY2snLCBmdW5jdGlvbihlKXsgJCQoJyMnK2F0dHJzLnNnTW9kYWxPcGVuKycsW3NnLW1vZGFsPScrYXR0cnMuc2dNb2RhbE9wZW4rJ10nKS50cmlnZ2VySGFuZGxlcignbW9kYWxfc2hvdycpIH0pXG4gICAgfVxuICB9XG59KVxuXG4vL1xuLmRpcmVjdGl2ZShcInNnSW5wdXRcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgcmVzdHJpY3Q6IFwiRUFcIixcbiAgICBzY29wZToge25nTW9kZWw6ICc9Jywgc2dTaG93OiAnPScsIHNnUmVxdWlyZWQ6ICc9J30sXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHZhciBpc0NoZWNrYm94ID0gYXR0cnMudHlwZT09XCJjaGVja2JveFwiO1xuICAgICAgdmFyIGNsYXNzQ2hlY2tib3ggPSAoaXNDaGVja2JveCkgPyBcImNoZWNrYm94XCIgOiBcIlwiO1xuICAgICAgdmFyIGF0dHJTdHIgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSBpbiBhdHRycy4kYXR0cikgaWYgKGkhPT1cIm5nTW9kZWxcIiAmJiBpIT09XCJlcnJtc2dcIiAmJiBpIT09XCJuZ1JlcXVpcmVkXCIgJiYgaSE9PVwibmdTaG93XCIgJiYgaSE9PVwic2dTaG93XCIgJiYgaSE9PVwic2dSZXF1aXJlZFwiKSBhdHRyU3RyICs9IFwiIFwiICsgaSArIFwiPVxcXCJcIiArIGF0dHJzW2ldICsgXCJcXFwiXCI7XG4gICAgICB2YXIgaGVhZGVyID0gKHR5cGVvZihhdHRycy5zZ1Nob3cpIT09XCJ1bmRlZmluZWRcIikgPyBcIjxkaXYgY2xhc3M9XFxcImZpZWxkIFwiICsgY2xhc3NDaGVja2JveCArIFwiXFxcIiBuZy1zaG93PVxcXCJzZ1Nob3dcXFwiPlwiIDogXCI8ZGl2IGNsYXNzPVxcXCJmaWVsZCBcIiArIGNsYXNzQ2hlY2tib3ggKyBcIlxcXCI+XCI7XG4gICAgICB2YXIgaW5wdXQgPSBcIjxpbnB1dCBuZy1tb2RlbD1cXFwibmdNb2RlbFxcXCIgbmctcmVxdWlyZWQ9XFxcInNnUmVxdWlyZWRcXFwiIFwiICsgYXR0clN0ciArIFwiIC8+XCI7XG4gICAgICB2YXIgbGFiZWwgPSAoYXR0cnMubGFiZWwpID8gXCI8bGFiZWw+XCIgKyBhdHRycy5sYWJlbCArIFwiPC9sYWJlbD5cIiA6IFwiXCI7XG4gICAgICB2YXIgZm9vdGVyX2ZpcnN0ID0gKGlzQ2hlY2tib3gpID8gKGlucHV0ICsgbGFiZWwpIDogKGxhYmVsICsgaW5wdXQpO1xuICAgICAgdmFyIGZvb3RlciA9IGZvb3Rlcl9maXJzdCArIFwiIFxcXG4gICAgICAgICAgICAgIDxkaXYgbmctaGlkZT1cXFwiZXJyb3JcXFwiIGNsYXNzPVxcXCJlcnJNc2dcXFwiPiBcXFxuICAgICAgICAgICAgICAgIDxoMT5cIiArIGF0dHJzLmVycm1zZyArIFwiPC9oMT4gXFxcbiAgICAgICAgICAgICAgPC9kaXY+IFxcXG4gICAgICAgICAgICA8L2Rpdj5cIjtcbiAgICAgIHJldHVybiBoZWFkZXIgKyBmb290ZXI7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIpIHtcbiAgICAgIC8vINCj0LHRgNCw0YLRjCDQsNGC0YDQuNCx0YPRgtGLINC4INC60L7QvNC/0LjQu9GP0YbQuNGPINGN0YLQvtCz0L4g0LPQvtCy0L3QsFxuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgZm9yICh2YXIgaT0wLCBhdHRycz1lbGVtZW50WzBdLmF0dHJpYnV0ZXMsIGw9YXR0cnMubGVuZ3RoOyBpPGw7IGkrKyl7aWYgKGF0dHJzLml0ZW0oaSkubm9kZU5hbWUhPT1cImNsYXNzXCIpIGFyci5wdXNoKGF0dHJzLml0ZW0oaSkubm9kZU5hbWUpfVxuICAgICAgZm9yICh2YXIgaSBpbiBhcnIpIGVsZW1lbnQucmVtb3ZlQXR0cihhcnJbaV0pO1xuXG4gICAgICBzY29wZS5lcnJvciA9IHRydWU7XG4gICAgICB2YXIgZWwgPSBlbGVtZW50LmZpbmQoXCJpbnB1dFwiKTtcbiAgICAgIHZhciBlID0gZWxbMF0uYXR0cmlidXRlcy5uYW1lLm5vZGVWYWx1ZTtcblxuICAgICAgLy92YXIgZSA9IGF0dHJzLm5hbWU7XG4gICAgICBzY29wZS4kd2F0Y2goJ25nTW9kZWwnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlcyA9IHRydWU7XG4gICAgICAgIHZhciBpcFJlZ2V4ID0gL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLztcbiAgICAgICAgaWYgKChlPT1cImNvbnRyb2xQb3J0XCIpfHwoZT09XCJkYXRhUG9ydFwiKSkge3ZhbHVlPSt2YWx1ZTsgaWYgKCEoKHR5cGVvZih2YWx1ZSk9PVwibnVtYmVyXCIpJiYodmFsdWUlMT09MCkmJih2YWx1ZT4wKSkpIHJlcz1mYWxzZX1cbiAgICAgICAgZWxzZSBpZiAoZT09XCJwb3J0XCIpIHt2YWx1ZT0rdmFsdWU7IGlmICghKCh0eXBlb2YodmFsdWUpPT1cIm51bWJlclwiKSAmJiB2YWx1ZSUxPT0wICYmIHZhbHVlPjAgJiYgdmFsdWU8NjU1MzYpKSByZXM9ZmFsc2V9XG4gICAgICAgIGVsc2UgaWYgKGU9PVwiaXBBZGRyZXNzXCIpIHtpZiAoISh2YWx1ZS5tYXRjaChpcFJlZ2V4KSkpIHJlcz1mYWxzZX1cbiAgICAgICAgZWxzZSBpZiAoZT09XCJuYW1lXCIpIHJlcyA9IHRydWU7Ly97Zm9yICh2YXIgaSBpbiBzY29wZS5pdGVtcykgaWYgKHNjb3BlLml0ZW1zW2ldW1widXNlck5hbWVcIl09PXZhbHVlKSByZXMgPSBmYWxzZX1cbiAgICAgICAgZWxzZSBpZiAoZT09XCJncm91cE5hbWVcIikgcmVzID0gdHJ1ZTsvLyBpZiAoc2NvcGUubW9kZWwuZ3JvdXBJZD09LTEpIHtcbiAgICAgICAgICAvL2ZvciAodmFyIGkgaW4gc2NvcGUuZ3JvdXBzKSBpZiAoc2NvcGUuZ3JvdXBzW2ldW1wiZ3JvdXBOYW1lXCJdPT12YWx1ZSkgdmFyIGV4aXN0cz10cnVlO1xuICAgICAgICAgIC8vaWYgKCgkLnRyaW0odmFsdWUpPT1cIlwiKXx8KGV4aXN0cykpIHJlcyA9IGZhbHNlO1xuICAgICAgICAvL31cbiAgICAgICAgY29udHJvbGxlci4kc2V0VmFsaWRpdHkoXCJzZ0lucHV0XCIsIHJlcyk7XG4gICAgICAgIHNjb3BlLmVycm9yID0gcmVzO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pXG5cbi8vXG4uZGlyZWN0aXZlKFwic2dDaGVja2JveFwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICByZXN0cmljdDogXCJFQVwiLFxuICAgIHNjb3BlOiB7bmdNb2RlbDogJz0nfSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIGF0dHJTdHIgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSBpbiBhdHRycy4kYXR0cikgaWYgKGkhPT1cIm5nTW9kZWxcIiAmJiBpIT09XCJuZ1Nob3dcIiAmJiBpIT09XCJzZ1Nob3dcIikgYXR0clN0ciArPSBcIiBcIiArIGkgKyBcIj1cXFwiXCIgKyBhdHRyc1tpXSArIFwiXFxcIlwiO1xuICAgICAgdmFyIGlucHV0ID0gXCI8aW5wdXQgbmctbW9kZWw9XFxcIm5nTW9kZWxcXFwiIG5nLWNoZWNrZWQ9XFxcIm5nTW9kZWwgfHwgY2hlY2tlZFxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIFwiICsgYXR0clN0ciArIFwiIC8+XCI7XG4gICAgICB2YXIgbGFiZWwgPSAoYXR0cnMubGFiZWwpID8gXCI8bGFiZWwgbmctY2xpY2s9XFxcImNoZWNrZWQ9IWNoZWNrZWRcXFwiPlwiICsgYXR0cnMubGFiZWwgKyBcIjwvbGFiZWw+XCIgOiBcIlwiO1xuICAgICAgdmFyIHRwbCA9IFwiPGZpZWxkIGNsYXNzPVxcXCJpbmxpbmVcXFwiID5cIiArIGlucHV0ICsgXCIgXCIgKyBsYWJlbCArIFwiPC9maWVsZD5cIjtcbiAgICAgIHJldHVybiB0cGw7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIpIHtcbiAgICAgIC8vINCj0LHRgNCw0YLRjCDQsNGC0YDQuNCx0YPRgtGLINC4INC60L7QvNC/0LjQu9GP0YbQuNGPINGN0YLQvtCz0L4g0LPQvtCy0L3QsFxuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgZm9yICh2YXIgaT0wLCBhdHRycz1lbGVtZW50WzBdLmF0dHJpYnV0ZXMsIGw9YXR0cnMubGVuZ3RoOyBpPGw7IGkrKyl7aWYgKGF0dHJzLml0ZW0oaSkubm9kZU5hbWUhPT1cImNsYXNzXCIpIGFyci5wdXNoKGF0dHJzLml0ZW0oaSkubm9kZU5hbWUpfVxuICAgICAgZm9yICh2YXIgaSBpbiBhcnIpIGVsZW1lbnQucmVtb3ZlQXR0cihhcnJbaV0pO1xuICAgIH1cbiAgfVxufSlcblxuLy9cbi5kaXJlY3RpdmUoXCJzZ1NlbGVjdFwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICByZXN0cmljdDogXCJFXCIsXG4gICAgc2NvcGU6IHtuZ01vZGVsOiAnPScsIHNnT3B0aW9uczogJz0nfSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgdmFyIGF0dHJTdHIgPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaSBpbiBhdHRycy4kYXR0cikgaWYgKGkhPT1cIm5nTW9kZWxcIiAmJiBpIT09XCJzZ09wdGlvbnNcIiAmJiBpIT09XCJuZ1Nob3dcIiAmJiBpIT09XCJzZ1Nob3dcIikgYXR0clN0ciArPSBcIiBcIiArIGkgKyBcIj1cXFwiXCIgKyBhdHRyc1tpXSArIFwiXFxcIlwiO1xuICAgICAgdmFyIGxhYmVsID0gKGF0dHJzLmxhYmVsKSA/IFwiPGxhYmVsPlwiICsgYXR0cnMubGFiZWwgKyBcIjwvbGFiZWw+XCIgOiBcIlwiO1xuICAgICAgdmFyIGlucHV0ID0gXCI8c2VsZWN0IG5nLW1vZGVsPVxcXCJuZ01vZGVsXFxcIiBuZy1vcHRpb25zPVxcXCJpLmlkIGFzIGkubmFtZSBmb3IgaSBpbiBzZ09wdGlvbnNcXFwiIFwiICsgYXR0clN0ciArIFwiIC8+XCI7XG4gICAgICB2YXIgdHBsID0gXCI8ZGl2IGNsYXNzPVxcXCJmaWVsZFxcXCI+XCIgKyBsYWJlbCArIGlucHV0ICsgXCI8L2Rpdj5cIjtcbiAgICAgIHJldHVybiB0cGw7XG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIpIHtcbiAgICAgIC8vINCj0LHRgNCw0YLRjCDQsNGC0YDQuNCx0YPRgtGLINC40LcgZGl2XG4gICAgICB2YXIgYXJyID0gW107XG4gICAgICBmb3IgKHZhciBpPTAsIGF0dHJzPWVsZW1lbnRbMF0uYXR0cmlidXRlcywgbD1hdHRycy5sZW5ndGg7IGk8bDsgaSsrKXtpZiAoYXR0cnMuaXRlbShpKS5ub2RlTmFtZSE9PVwiY2xhc3NcIikgYXJyLnB1c2goYXR0cnMuaXRlbShpKS5ub2RlTmFtZSl9XG4gICAgICBmb3IgKHZhciBpIGluIGFycikgZWxlbWVudC5yZW1vdmVBdHRyKGFycltpXSk7XG4gICAgfVxuICB9XG59KVxuXG4vL1xuLmRpcmVjdGl2ZShcInNnRmlsZVJlYWRlclwiLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIHJlcXVpcmU6IFwibmdNb2RlbFwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcikge1xuXG4gICAgICBlbGVtZW50LmJpbmQoJ2Ryb3AnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdkcmFnZ2VkLW92ZXInKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgZjsgZiA9IGUuZGF0YVRyYW5zZmVyLmZpbGVzW2ldOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWYudHlwZS5tYXRjaChcInRleHQuKlwiKSkgY29udGludWU7XG4gICAgICAgICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICBmci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnZhbChlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkoY29udHJvbGxlci4kc2V0Vmlld1ZhbHVlKGUudGFyZ2V0LnJlc3VsdCkpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBmci5yZWFkQXNUZXh0KGYpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudC5iaW5kKFwiZHJhZ292ZXJcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdkcmFnZ2VkLW92ZXInKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJjb3B5XCJcbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50LmJpbmQoJ2RyYWdsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZHJhZ2dlZC1vdmVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pXG5cbi8vXG4uZGlyZWN0aXZlKFwic2dOb0Ryb3BcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQUNcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHZhciBoaWdobGlnaHRlZCA9IGZhbHNlO1xuICAgICAgZWxlbWVudC5iaW5kKHtcbiAgICAgICAgXCJkcmFnc3RhcnQgZHJhZ2VudGVyIGRyYWdvdmVyXCI6IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGlmICgkLmluQXJyYXkoXCJGaWxlc1wiLCBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLnR5cGVzKSA+IC0xKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAoIWhpZ2hsaWdodGVkKSB7JChcIi5kcm9wem9uZVwiKS5oZWlnaHQoXCIxMDBweFwiKS5jc3Moe1wiYm9yZGVyXCI6IFwiM3B4IGRhc2hlZCAjN0ZhOEJhXCJ9KTsgaGlnaGxpZ2h0ZWQgPSB0cnVlOyB9XG4gICAgICAgICAgICBlLm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibm9uZVwiO1xuXG4gICAgICAgICAgICBpZigkKGUudGFyZ2V0KS5oYXNDbGFzcyhcImRyb3B6b25lXCIpKSB7XG4gICAgICAgICAgICAgIGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwiY29weU1vdmVcIjtcbiAgICAgICAgICAgICAgZS5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJtb3ZlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRyb3AgZHJhZ2VuZCBkcmFnbGVhdmVcIjogZnVuY3Rpb24oZSl7ICQoXCIuZHJvcHpvbmVcIikuY3NzKHtcImJvcmRlclwiOiBcInNvbGlkIDFweCAjY2NjXCJ9KTsgaGlnaGxpZ2h0ZWQgPSBmYWxzZTsgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59KVxuXG4vLyDQktGL0LLQvtC00LjRgiDQt9Cw0LPQvtC70L7QstC+0Log0YLQsNCx0LvQuNGG0Ysg0YEg0LLQvtC30LzQvtC20L3QvtGB0YLRjNGOINGB0L7RgNGC0LjRgNC+0LLQutC4XG4vLyDQlNC70Y8g0LrQvtGA0YDQtdC60YLQvdC+0LPQviDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC60L3QvtC/0LrQuCDQvdCw0YHRgtGA0L7QtdC6ICjQsNGC0YDQuNCx0YPRgiBzZXR0aW5ncykg0YLQsNCx0LvQuNGG0LUt0LrQvtC90YLQtdC50L3QtdGA0YMg0L3QtdC+0LHRhdC+0LTQuNC80L4g0YPQutCw0LfQsNGC0Ywg0LrQu9Cw0YHRgSBzZXR0aW5nc1xuLmRpcmVjdGl2ZShcInNnU29ydGFibGVcIiwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiRUFcIixcbiAgICBzY29wZToge1xuICAgICAgY29sdW1uczogXCI9XCIsXG4gICAgICBzb3J0OiBcIj1cIixcbiAgICAgIGNhbGxiYWNrOiBcIiZcIlxuICAgIH0sXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiZHJvcGRvd24td3JhcHBlclwiIG5nLXNob3c9XCJzZXR0aW5nc1wiPlxcXG4gICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd25cIj5cXFxuICAgICAgICA8aSBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZS1hbHQgaWNvbi1jb2dcIj48L2k+XFxcbiAgICAgICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudSBwdWxsLXJpZ2h0XCI+XFxcbiAgICAgICAgICA8aSBjbGFzcz1cImljb24tcmVtb3ZlLXNpZ24gY2xvc2UgZHJvcGRvd24tdG9nZ2xlLWFsdFwiPjwvaT5cXFxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjIGluIGNvbHVtbnNcIiBuZy1zaG93PVwiYy50aXRsZVwiPlxcXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLWNsaWNrPVwiY2hhbmdlKGMpXCIgbmctY2hlY2tlZD1cIiFjLmhpZGVcIiAvPnt7Yy50aXRsZX19PC9sYWJlbD5cXFxuICAgICAgICAgIDwvbGk+XFxcbiAgICAgICAgPC91bD5cXFxuICAgICAgPC9kaXY+PC9kaXY+XFxcbiAgICAgIDx0cj5cXFxuICAgICAgICA8dGggbmctcmVwZWF0PVwiYyBpbiBjb2x1bW5zIHwgbmVnYXRpdmU6XFwnaGlkZVxcJ1wiIGNsYXNzPVwie3tjLmNsYXNzfX1cIiBuZy1jbGFzcz1cInt0cnVlOlxcJ2xhc3RcXCd9WyRsYXN0XVwiPlxcXG4gICAgICAgICAgPHNwYW4gbmctY2xpY2s9XCJ0b2dnbGVfc29ydChjKVwiPnt7Yy50aXRsZX19PC9zcGFuPlxcXG4gICAgICAgICAgPGkgbmctY2xhc3M9XCJ7XFwnaWNvbi1zb3J0LWJ5LWF0dHJpYnV0ZXNcXCc6c29ydC5vcmRlciwgXFwnaWNvbi1zb3J0LWJ5LWF0dHJpYnV0ZXMtYWx0XFwnOiFzb3J0Lm9yZGVyfVwiIG5nLXNob3c9XCJjLm5hbWU9PXNvcnQuY29sdW1uICYmIGMudGl0bGUgJiYgIWMuZGlzYWJsZV9zb3J0XCI+PC9pPlxcXG4gICAgICAgIDwvdGg+XFxcbiAgICAgIDwvdHI+JyxcbiAgICByZXBsYWNlOiBmYWxzZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHNjb3BlLnNldHRpbmdzID0gKGlzc2V0KGF0dHJzLnNldHRpbmdzKSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICBzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgaXRlbS5oaWRlID0gIWl0ZW0uaGlkZTtcbiAgICAgIH1cbiAgICAgIHNjb3BlLnRvZ2dsZV9zb3J0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIGNvbHVtbiA9IGl0ZW0ubmFtZTtcbiAgICAgICAgaWYgKGl0ZW0uZGlzYWJsZV9zb3J0KSByZXR1cm47XG4gICAgICAgIGlmICghaXNzZXQoc2NvcGUuc29ydCkpIHNjb3BlLnNvcnQgPSB7Y29sdW1uOiAnJywgb3JkZXI6IGZhbHNlfTtcbiAgICAgICAgaWYgKHNjb3BlLnNvcnQuY29sdW1uID09IGNvbHVtbikgc2NvcGUuc29ydC5vcmRlciA9ICFzY29wZS5zb3J0Lm9yZGVyO1xuICAgICAgICBlbHNlIHNjb3BlLnNvcnQub3JkZXIgPSB0cnVlO1xuICAgICAgICBzY29wZS5zb3J0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgaWYgKHR5cGVvZiBzY29wZS5jYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBzY29wZS5jYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuLmRpcmVjdGl2ZSgnZHJvcGRvd25Db25maXJtJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIG1lc3NhZ2U6ICc9bWVzc2FnZScsXG4gICAgICBkYXRhOiAnPWRhdGEnLFxuICAgICAgc2hvdzogJz1zaG93JyxcbiAgICAgIGNhbmNlbDogJz1jYW5jZWwnLFxuICAgICAgb2s6ICc9b2snXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3BhZ2VzL2luY2x1ZGUvY29uZmlybS5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgc2NvcGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS5zaG93ID0gZmFsc2U7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ2Ryb3Bkb3duQ2xvc2UnLCBmdW5jdGlvbigkZG9jdW1lbnQsICRsb2NhdGlvbiwgJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0NBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHZhciBkcm9wZG93biA9IGpRdWVyeShqUXVlcnkoZWxlbWVudFswXSkucGFyZW50cygnLmRyb3Bkb3duJylbMF0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tdG9nZ2xlLWFsdCcpLmNsaWNrKCk7XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSlcblxuLy8gQWx0ZXJuYXRlIHZlcnNpb24gb2YgQW5ndWxhci1VSSBCb290c3RyYXAgRHJvcGRvd24tVG9nZ2xlIGRpcmVjdGl2ZVxuLy8gRG9lc24ndCBjbG9zZSBkcm9wZG93biB3aGVuIGNsaWNraW5nIG9uIGl0cyBjb250ZW50XG4uZGlyZWN0aXZlKCdkcm9wZG93blRvZ2dsZUFsdCcsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlKSB7XG4gIHZhciBvcGVuRWxlbWVudCA9IG51bGwsXG4gICAgICBjbG9zZU1lbnUgICA9IGFuZ3VsYXIubm9vcDtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0NBJyxcbiAgICBzY29wZToge1xuICAgICAgaXNfb3BlbiA6ICc9ZHJvcGRvd25Jc09wZW4nLFxuICAgICAgY2xvc2UgICA6ICc9ZHJvcGRvd25DbG9zZVdoZW4nXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcblxuICAgICAgc2NvcGUuJHdhdGNoKCckbG9jYXRpb24ucGF0aCcsIGZ1bmN0aW9uKCkgeyBjbG9zZU1lbnUoKTsgfSk7XG5cbiAgICAgIGlmIChhdHRycy5kcm9wZG93bkNsb3NlV2hlbikge1xuICAgICAgICBzY29wZS4kd2F0Y2goJ2Nsb3NlJywgZnVuY3Rpb24obmV3X3ZhbHVlKSB7XG4gICAgICAgICAgaWYgKG5ld192YWx1ZSkge1xuICAgICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRyb3Bkb3duID0gZWxlbWVudC5wYXJlbnQoKTtcblxuICAgICAgaWYgKGF0dHJzLmRyb3Bkb3duVG9nZ2xlQWx0KSB7XG4gICAgICAgIC8vINC90LUg0YDQsNCx0L7RgtCw0LXRgiDQv9C+0YLQvtC8IC5vbiDRh9C10YDQtdC3IGFuZ3VsYXIuZWxlbWVudFxuICAgICAgICBkcm9wZG93biA9IGZpbmRfZWxlbWVudF9ieV9wYXRoKGF0dHJzLmRyb3Bkb3duVG9nZ2xlQWx0LCBkcm9wZG93blswXSlcbiAgICAgIH1cblxuICAgICAgaWYgKCFkcm9wZG93bi5oYXNDbGFzcygnZHJvcGRvd24nKSkge1xuICAgICAgICBkcm9wZG93biA9IGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xvc2VhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsb3NlTWVudSgpO1xuICAgICAgfVxuXG4gICAgICBkcm9wZG93bi5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC50YXJnZXQuaGFzQXR0cmlidXRlKCdkcm9wZG93bi1jbG9zZScpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZWxlbWVudFdhc09wZW4gPSAoZWxlbWVudCA9PT0gb3BlbkVsZW1lbnQpO1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmICghIW9wZW5FbGVtZW50KSB7XG4gICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWVsZW1lbnRXYXNPcGVuKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXR0cnMuZHJvcGRvd25Jc09wZW4pIHtcbiAgICAgICAgICAgICAgc2NvcGUuaXNfb3BlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBkcm9wZG93bi5hZGRDbGFzcygnb3BlbicpO1xuXG4gICAgICAgICAgb3BlbkVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgICAgaWYgKCF3aW5kb3cuY2xvc2VhYmxlX2J5X2VzY2FwZSkge1xuICAgICAgICAgICAgd2luZG93LmNsb3NlYWJsZV9ieV9lc2NhcGUgPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aW5kb3cuY2xvc2VhYmxlX2J5X2VzY2FwZS5wdXNoKGNsb3NlYWJsZSk7XG5cbiAgICAgICAgICBjbG9zZU1lbnUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS51bmJpbmQoJ2NsaWNrJywgY2xvc2VNZW51KTtcblxuICAgICAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChhdHRycy5kcm9wZG93bklzT3Blbikge1xuICAgICAgICAgICAgICAgIHNjb3BlLmlzX29wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG5cbiAgICAgICAgICAgIGNsb3NlTWVudSA9IGFuZ3VsYXIubm9vcDtcbiAgICAgICAgICAgIG9wZW5FbGVtZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgd2luZG93LmNsb3NlYWJsZV9ieV9lc2NhcGUucmVtb3ZlKGNsb3NlYWJsZSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vICRkb2N1bWVudCDQvdC1INGA0LDQsdC+0YLQsNC10YIg0YEgdHJpZ2dlclxuICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub24oJ2NsaWNrJywgY2xvc2VNZW51KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLy8g0YTQvtGA0LzQsCDRgSDQvtGC0LvQvtC20LXQvdC90L7QuSDQstCw0LvQuNC00LDRhtC40LXQuSByZXF1aXJlZC3QvtCyXG4uZGlyZWN0aXZlKCdzZ0Zvcm0nLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIHNjb3BlLiRvbignZm9ybV9zdWJtaXNzaW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudFswXSk7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ3RyaWVkX3RvX3N1Ym1pdCcpO1xuICAgICAgICBlbGVtZW50LmZpbmQoJ1tzbWFydC1yZXF1aXJlZF0nKS5yZW1vdmVBdHRyKCdzbWFydC1yZXF1aXJlZCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLy8g0L7RgtC/0YDQsNCy0LrQsCDRhNC+0YDQvNGLXG4uZGlyZWN0aXZlKCdzZ0Zvcm1TdWJtaXQnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNjb3BlLiRlbWl0KCdmb3JtX3N1Ym1pc3Npb24nKTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuc2dGb3JtU3VibWl0KSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGF0dHJpYnV0ZXMuc2dGb3JtU3VibWl0KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3Njcm9sbFRvJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0cmlidXRlcy5zY3JvbGxUbywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgc2Nyb2xsX3RvX2VsZW1lbnQodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSlcblxuLmRpcmVjdGl2ZSgnc2Nyb2xsVG9UaGlzRWxlbWVudCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHJpYnV0ZXMuc2Nyb2xsVG8sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHNjcm9sbF90b19lbGVtZW50KGVsZW1lbnRbMF0pXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSlcblxuLmRpcmVjdGl2ZSgnc2Nyb2xsVG9wJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICBmaXJzdF90aW1lID0gdHJ1ZVxuICAgICAgc2NvcGUuJHdhdGNoKGF0dHJpYnV0ZXMuc2Nyb2xsVG9wLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoZmlyc3RfdGltZSkge1xuICAgICAgICAgIGZpcnN0X3RpbWUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgalF1ZXJ5KFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiB2YWx1ZSArICdweCcgfSwgNDAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSlcblxuLmRpcmVjdGl2ZSgnc2Nyb2xsQnknLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGZpcnN0X3RpbWUgPSB0cnVlXG4gICAgICBzY29wZS4kd2F0Y2goYXR0cmlidXRlcy5zY3JvbGxCeSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGZpcnN0X3RpbWUpIHtcbiAgICAgICAgICBmaXJzdF90aW1lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgalF1ZXJ5KFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyB2YWx1ZSArICdweCcgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pXG5cbi5kaXJlY3RpdmUoJ3NnT25TaG93JywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgdmFyIHByZXZpb3VzX3ZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgJGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudFswXSk7XG4gICAgICB2YXIgb25fc2hvdyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgc2NvcGUuJGV2YWwoYXR0cmlidXRlcy5zZ09uU2hvdywgZGF0YSlcbiAgICAgIH07XG5cbiAgICAgIC8vINC/0YDQuCDQutCw0LbQtNC+0Lwg0YbQuNC60LvQtSBkaWdlc3RcbiAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tfaWZfaXNfdmlzaWJsZSgpIHtcbiAgICAgICAgICB2YXIgaXNfdmlzaWJsZSA9ICRlbGVtZW50LmlzKCc6dmlzaWJsZScpO1xuICAgICAgICAgIGlmIChpc192aXNpYmxlICE9IHByZXZpb3VzX3ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXNfdmlzaWJsZSkge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvbl9zaG93KHsgZXh0cmE6IHsgaGVpZ2h0OiBmdW5jdGlvbigpIHsgcmV0dXJuICRlbGVtZW50Lm91dGVySGVpZ2h0KHRydWUpIH0gfSB9KVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2aW91c192YWx1ZSA9IGlzX3Zpc2libGU7XG4gICAgICAgIH1cblxuICAgICAgICBjaGVja19pZl9pc192aXNpYmxlLmRlbGF5KDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSlcblxuLy8g0JLRi9Cy0L7QtNC40YIg0YLQtdC70L4g0YLQsNCx0LvQuNGG0Ysg0LIg0YHQsNC80L7QvCDQv9GA0L7RgdGC0LXQudGI0LXQvCDRgdC70YPRh9Cw0LUsINC10YHQu9C4INC90YPQttC90L4g0LHQtdC30L4g0LLQt9GP0LrQvtC5INC+0LHRgNCw0LHQvtGC0LrQuCDQvtGC0L7QsdGA0LDQt9C40YLRjCDQutC+0LvQvtC90LrQuCBjb2x1bW5zXG4uZGlyZWN0aXZlKFwic2dTaW1wbGV0YWJsZVwiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJFQVwiLFxuICAgIHNjb3BlOiB7XG4gICAgICBjb2x1bW5zOiBcIj1cIixcbiAgICAgIGl0ZW1zOiBcIj1cIixcbiAgICAgIHNvcnQ6IFwiPVwiXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogJzx0ciBuZy1yZXBlYXQ9XCJpIGluIGl0ZW1zIHwgb3JkZXJCeTpzb3J0LmNvbHVtbjohc29ydC5vcmRlclwiPjx0ZCBuZy1yZXBlYXQ9XCJjIGluIGNvbHVtbnNcIj57e2lbYy5uYW1lXX19PC90ZD48L3RyPicsXG4gICAgcmVwbGFjZTogZmFsc2VcbiAgfVxufSlcblxuLy9cbi5kaXJlY3RpdmUoXCJzZ0Vyck1zZ1wiLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICAvL3Jlc3RyaWN0OiBcIkFcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnQuJGVycm9yKTtcbiAgICAgIGF0dHJzLiRvYnNlcnZlKCdmaWVsZFZhbGlkYXRlJywgZnVuY3Rpb24odmFsdWUpIHtjb25zb2xlLmxvZygnbmdNb2RlbCBoYXMgY2hhbmdlZCB2YWx1ZSB0byAnICsgdmFsdWUpO30pO1xuICAgICAgaWYgKHR5cGVvZigkZXJyb3IpIT09XCJ1bmRlZmluZWRcIikgY29uc29sZS5sb2coJGVycm9yKTtcbiAgICAgICQoZWxlbWVudCkuYWZ0ZXIoXCI8ZGl2IGNsYXNzPVxcXCJlcnJNc2dcXFwiPiBcXFxuICAgICAgICAgIDxoMT5cIiArIGF0dHJzLnNnRXJyTXNnICsgXCI8L2gxPiBcXFxuICAgICAgICA8L2Rpdj5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn0pXG5cbi8vINCf0YDQuCDQvdCw0LbQsNGC0LjQuCBFbnRlciDQsiDQv9C+0LvQtVxuLmRpcmVjdGl2ZSgnc2dFbnRlcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgIGVsZW1lbnQuYmluZChcImtleWRvd24ga2V5cHJlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZihldmVudC53aGljaCA9PT0gMTMpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpe1xuICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLnNnRW50ZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSlcblxuLy8g0J/RgNC4INCy0YvRhdC+0LTQtSDQutGD0YDRgdC+0YDQsCDQuNC3INC/0L7Qu9GPXG4uZGlyZWN0aXZlKCdzZ0JsdXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICBlbGVtZW50LmJpbmQoXCJibHVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpe1xuICAgICAgICBzY29wZS4kZXZhbChhdHRycy5zZ0VudGVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgnc2dGb2N1cycsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkgeyBlbGVtZW50WzBdLmZvY3VzKCk7IH0sIDApO1xuICAgIH1cblxuICAgIGlmICghYXR0cnMuc2dGb2N1cykge1xuICAgICAgcmV0dXJuIGZvY3VzKCk7XG4gICAgfVxuXG4gICAgc2NvcGUuJHdhdGNoKGF0dHJzLnNnRm9jdXMsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRydWUpO1xuICB9O1xufSlcblxuLy8gXCLRg9C80L3QsNGPXCIg0LLQsNC70LjQtNCw0YbQuNGPINC/0L7Qu9C10Lkg0YTQvtGA0LzRiy5cbi8vINCy0LXRiNCw0LXRgtGB0Y8g0L3QsCBcItC/0L7Qu9C1XCIg0YTQvtGA0LzRizogaW5wdXQsIHNlbGVjdCwgLi4uXG4uZGlyZWN0aXZlKCdzZ0Zvcm1GaWVsZCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAvLyBcItC/0L7Qu9C1XCIg0YTQvtGA0LzRi1xuICAgIGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudFswXSk7XG5cbiAgICB2YXIgZm9ybV9lbGVtZW50O1xuICAgIHZhciBmb3JtX25hbWU7XG5cbiAgICAvLyDRhNC+0YDQvNCwICg8Zm9ybT4pXG4gICAgdmFyIHB1cmVfZm9ybV9lbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKCdmb3JtJyk7XG5cbiAgICAvLyA8bmctZm9ybT5cbiAgICB2YXIgbmdfZm9ybV9lbGVtZW50ID0gZWxlbWVudC5wYXJlbnRzKCduZy1mb3JtJyk7XG4gICAgaWYgKCFuZ19mb3JtX2VsZW1lbnRbMF0pIHtcbiAgICAgIG5nX2Zvcm1fZWxlbWVudCA9IGVsZW1lbnQucGFyZW50cygnW25nLWZvcm1dJyk7XG4gICAgfVxuXG4gICAgLy8g0LrQsNC60L7QuS3RgtC+INCz0YDRj9C30L3QvtCy0LDRgtGL0Lkg0LrQvtC0INC00LvRjyDQvtC/0YDQtdC00LXQu9C10L3QuNGPINGN0LvQtdC80LXQvdGC0LAgKNC4INC90LDQt9Cy0LDQvdC40Y8pINGE0L7RgNC80YssINC00LDQstC90L4g0L/QuNGB0LDQu1xuXG4gICAgLy8g0L7Qv9GA0LXQtNC10LvQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINGE0L7RgNC80YtcbiAgICBpZiAocHVyZV9mb3JtX2VsZW1lbnRbMF0gJiYgbmdfZm9ybV9lbGVtZW50WzBdKSB7XG4gICAgICBpZiAoalF1ZXJ5LmNvbnRhaW5zKHB1cmVfZm9ybV9lbGVtZW50WzBdLCBuZ19mb3JtX2VsZW1lbnRbMF0pKSB7XG4gICAgICAgIGZvcm1fZWxlbWVudCA9IG5nX2Zvcm1fZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmb3JtX2VsZW1lbnQgPSBwdXJlX2Zvcm1fZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocHVyZV9mb3JtX2VsZW1lbnRbMF0pIHtcbiAgICAgIGZvcm1fZWxlbWVudCA9IHB1cmVfZm9ybV9lbGVtZW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZvcm1fZWxlbWVudCA9IG5nX2Zvcm1fZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyDQvtC/0YDQtdC00LXQu9C10L3QuNC1INC90LDQt9Cy0LDQvdC40Y8g0YTQvtGA0LzRi1xuICAgIGZvcm1fbmFtZSA9IGZvcm1fZWxlbWVudC5hdHRyKCduYW1lJykgfHwgZm9ybV9lbGVtZW50LmF0dHIoJ25nLWZvcm0nKTtcblxuICAgIC8vINGE0L7RgNC80LAgQW5ndWxhci5qc1xuICAgIHZhciBmb3JtID0gc2NvcGVbZm9ybV9uYW1lXTtcblxuICAgIC8vINC90LDQt9Cy0LDQvdC40LUg0L/QvtC70Y9cbiAgICB2YXIgZmllbGRfbmFtZSA9IGVsZW1lbnQuYXR0cignbmFtZScpO1xuXG4gICAgLy8g0L/QvtC70YPRh9Cw0LXRgiDQvtCx0YrQtdC60YIg0L/QvtC70Y8g0YTQvtGA0LzRi1xuICAgIGZ1bmN0aW9uIGZpZWxkKCkge1xuICAgICAgaWYgKGZvcm1bZmllbGRfbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1bZmllbGRfbmFtZV1cbiAgICAgIH1cbiAgICAgIC8vINCy0LjQtNC40LzQviwg0L/RgNC4INC60LDQutC40YUt0YLQviDRg9GB0LvQvtCy0LjRj9GFINC80L7QttC10YIg0L/RgNC+0L/QsNGB0YLRjCDQv9C+0LvQtSDQuNC3INC+0LHRitC10LrRgtCwINGE0L7RgNC80YsgKNCx0YvQu9CwINGC0LDQutCw0Y8g0L7RiNC40LHQutCwKVxuICAgICAgY29uc29sZS5sb2coJyoqKiBFcnJvcjogZmllbGQgXCInICsgZmllbGRfbmFtZSArICdcIiBub3QgZm91bmQgaW4gQW5ndWxhci5qcyBmb3JtJywgZm9ybSlcbiAgICAgIHJldHVybiB7fVxuICAgIH1cblxuICAgIC8vINC6INGN0YLQvtC80YMg0Y3Qu9C10LzQtdC90YLRgyDRhNC+0YDQvNGLINC10YnRkSDQvdC1INC/0YDQuNC60LDRgdCw0LvQuNGB0YxcbiAgICBlbGVtZW50LmFkZENsYXNzKCd1bnRvdWNoZWQnKTtcblxuICAgIC8vINC/0YDQuCDRg9GF0L7QtNC1INGBINGN0YLQvtCz0L4g0L/QvtC70Y8g0YTQvtC80YtcbiAgICBlbGVtZW50Lm9uKFwiYmx1clwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vINC/0YDQvtGB0YLQsNCy0LjRgtGMINC60LvQsNGB0YEgXCLQv9GA0LjQutCw0YHQsNC70LjRgdGMXCIgKNC10YHQu9C4INC/0L7Qu9C1INC90LUgcmVxdWlyZWQpXG4gICAgICBpZiAoIWF0dHJpYnV0ZXMucmVxdWlyZWQpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygndW50b3VjaGVkJyk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8g0LHRi9C70Lgg0L3QsCDRjdGC0L7QvCDQv9C+0LvQtVxuICAgICAgICBmaWVsZCgpLnZpc2l0ZWQgPSB0cnVlO1xuICAgICAgICAvLyDQv9GA0L7RhtC10YHRgSDQstCy0L7QtNCwINCyINGN0YLQviDQv9C+0LvQtSDQt9Cw0LLQtdGA0YjRkdC9XG4gICAgICAgIGZpZWxkKCkuaW5fcHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g0L/QvtC60LDQt9GL0LLQsNC10YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOLCDRh9GC0L4g0LIg0L/QvtC70LUg0LLQstC10LTQtdC90L4g0L3QtdCy0LXRgNC90L7QtSDQt9C90LDRh9C10L3QuNC1XG4gICAgZm9ybS5pbmRpY2F0ZV9pbnZhbGlkID0gZnVuY3Rpb24oZmllbGRfbmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBmb3JtX2VsZW1lbnQuZmluZCgnW25hbWU9XCInICsgZmllbGRfbmFtZSArICdcIl0nKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2luZGljYXRlX2ludmFsaWQnKTtcbiAgICAgIC8vINC10YHQu9C4INC/0L7RgdGC0LDQstC40YLRjCDQt9Cw0LTQtdGA0LbQutGDIDAsINGC0L4gZmlyZWZveCDQvNC+0LbQtdGCINC40L3QvtCz0LTQsCDQvdC1INC/0L7QutCw0LfRi9Cy0LDRgtGMINCw0L3QuNC80LDRhtC40Y5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luZGljYXRlX2ludmFsaWQnKTtcbiAgICAgIH0sIDEwKTtcbiAgICB9XG5cbiAgICAvLyDQv9GA0Lgg0LLQstC+0LTQtSDQt9C90LDRh9C10L3QuNGPINCyINC/0L7Qu9C1XG4gICAgZWxlbWVudC5vbihcImtleWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vINGB0L3Rj9GC0Ywg0LzQtdGC0LrRgyDQvdC10LLQtdGA0L3QvtGB0YLQuCDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9GPXG4gICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdpbmRpY2F0ZV9pbnZhbGlkJyk7XG5cbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8g0LIg0L/RgNC+0YbQtdGB0YHQtSDQstCy0L7QtNCwINC30L3QsNGH0LXQvdC40Y8g0LIg0Y3RgtC+INC/0L7Qu9C1ICjQvdC10LbRkdGB0YLQutCw0Y8g0LLQsNC70LjQtNCw0YbQuNGPKVxuICAgICAgICBmaWVsZCgpLmluX3Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8g0L/RgNC4INCy0YHRgtCw0LLQsNC90LjQuCDQsiDRjdGC0L4g0L/QvtC70LVcbiAgICBlbGVtZW50Lm9uKFwiZm9jdXNcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vINC/0YDQvtGB0YLQsNCy0LjRgtGMINC60LvQsNGB0YEgXCLQv9GA0LjQutCw0YHQsNC70LjRgdGMXCJcbiAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3VudG91Y2hlZCcpO1xuICAgICAgLy8g0YHQvdGP0YLRjCDQvNC10YLQutGDINC90LXQstC10YDQvdC+0YHRgtC4INC30L3QsNGH0LXQvdC40Y8g0L/QvtC70Y9cbiAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2luZGljYXRlX2ludmFsaWQnKTtcblxuICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyDQsiDQv9GA0L7RhtC10YHRgdC1INCy0LLQvtC00LAg0LfQvdCw0YfQtdC90LjRjyDQsiDRjdGC0L4g0L/QvtC70LUgKNC90LXQttGR0YHRgtC60LDRjyDQstCw0LvQuNC00LDRhtC40Y8pXG4gICAgICAgIGZpZWxkKCkuaW5fcHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyDQv9GA0Lgg0LjQt9C80LXQvdC10L3QuNC4INC80L7QtNC10LvQuCDRhNC+0YDQvNGLLCDRg9Cx0LjRgNCw0YLRjCDQvtGI0LjQsdC60LhcbiAgICBzY29wZS4kd2F0Y2goYXR0cmlidXRlcy5uZ01vZGVsLCBmdW5jdGlvbihuZXdfdmFsdWUpIHtcbiAgICAgIGZvcm0uZXJyb3JzID0ge307XG4gICAgfSlcblxuICAgIC8vINC10YHQu9C4INGE0L7RgNC80LAg0LHRi9C70LAg0L7RgtC/0YDQsNCy0LvQtdC90LAsINGC0L4g0YPQsdGA0LDRgtGMINGDINC10ZEg0L/QvtC70LXQuSDQvNC10YLQutGDIFwi0L3QtSDQv9GA0LjQutCw0YHQsNC70LjRgdGMXCJcbiAgICBzY29wZS4kd2F0Y2goZm9ybV9uYW1lICsgJy5zdWJtaXR0ZWQnLCBmdW5jdGlvbihuZXdfdmFsdWUpIHtcbiAgICAgIGlmIChuZXdfdmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygndW50b3VjaGVkJyk7XG4gICAgICB9XG4gICAgfSlcbiAgfTtcbn0pXG5cbi8vSW5maW5pdGUgc2Nyb2xsaW5nXG4uZGlyZWN0aXZlKCd3aGVuU2Nyb2xsZWQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICB2YXIgcmF3ID0gZWxtWzBdO1xuXG4gICAgICAgIGVsbS5iaW5kKCdzY3JvbGwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyYXcuc2Nyb2xsVG9wICsgcmF3Lm9mZnNldEhlaWdodCA+PSByYXcuc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGF0dHIud2hlblNjcm9sbGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn0pXG5cbi8vINGA0LXRiNCw0LXRgiDQt9Cw0LTQsNGH0YMg0YEg0LDQstGC0L7Qt9Cw0L/QvtC70L3QtdC90LjQtdC8INC/0L7Qu9C10Lkg0YTQvtGA0Lwg0L7QsdC+0LfRgNC10LLQsNGC0LXQu9C10LwgKNGC0LjQv9CwINC70L7Qs9C40L0v0L/QsNGA0L7Qu9GMKVxuLy8gaHR0cDovL3ZpY3RvcmJsb2cuY29tLzIwMTQvMDEvMTIvZml4aW5nLWF1dG9jb21wbGV0ZS1hdXRvZmlsbC1vbi1hbmd1bGFyanMtZm9ybS1zdWJtaXQvXG4uZGlyZWN0aXZlKCdmb3JtQXV0b2ZpbGxGaXgnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgIC8vIEZpeGVzIENocm9tZSBidWc6IGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyF0b3BpYy9hbmd1bGFyLzZObHVjU3NrUWpZXG4gICAgZWxlbS5wcm9wKCdtZXRob2QnLCAnUE9TVCcpO1xuXG4gICAgLy8gRml4IGF1dG9maWxsIGlzc3VlcyB3aGVyZSBBbmd1bGFyIGRvZXNuJ3Qga25vdyBhYm91dCBhdXRvZmlsbGVkIGlucHV0c1xuICAgIGlmKGF0dHJzLm5nU3VibWl0KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtLnVuYmluZCgnc3VibWl0JykuYmluZCgnc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlbGVtLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0JykudHJpZ2dlcignaW5wdXQnKS50cmlnZ2VyKCdjaGFuZ2UnKS50cmlnZ2VyKCdrZXlkb3duJyk7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGF0dHJzLm5nU3VibWl0KTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyDQn9C+0LvQtSBcItGB0YLQsNGC0YPRgdCwXCIg0L/RgNC40LvQvtC20LXQvdC40Y8sINC60YPQtNCwINC80L7QttC90L4g0LLRi9Cy0L7QtNC40YLRjCDRgdC+0L7QsdGJ0LXQvdC40Y9cbi5kaXJlY3RpdmUoJ3NnU3RhdHVzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBTdGF0dXMpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSAkJChlbGVtZW50KTtcbiAgICAgIHZhciBsYWJlbCA9ICQkKGNvbnRhaW5lci5maW5kKCdsYWJlbCcpKTtcbiAgICAgIHZhciBjbG9zZSA9ICQkKGNvbnRhaW5lci5maW5kKCcuY2xvc2UnKSk7XG5cbiAgICAgIHZhciBzaG93biA9IHRydWU7XG5cbiAgICAgIHZhciBtZXNzYWdlX3RpbWVfYmFzZSA9IDEwO1xuICAgICAgdmFyIG1lc3NhZ2VfdGltZV9mYWN0b3IgPSAwLjE7XG5cbiAgICAgIHZhciBmYWRlX291dF90aW1lID0gMC4zO1xuICAgICAgdmFyIGZhZGVfaW5fdGltZSAgPSAwLjI7XG5cbiAgICAgIHZhciBmYWRlX291dF90aW1lb3V0O1xuXG4gICAgICBmdW5jdGlvbiBkaXNtaXNzX3N0YXR1cyhjYWxsYmFjaykge1xuXG4gICAgICAgIGlmICghc2hvd24pIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmYWRlX291dF90aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGZhZGVfb3V0X3RpbWVvdXQpO1xuICAgICAgICAgIGZhZGVfb3V0X3RpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8galF1ZXJ5LnN0b3AoIFtjbGVhclF1ZXVlIF0gWywganVtcFRvRW5kIF0gKVxuICAgICAgICAvL1xuICAgICAgICAvLyBjbGVhclF1ZXVlXG4gICAgICAgIC8vIEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcmVtb3ZlIHF1ZXVlZCBhbmltYXRpb24gYXMgd2VsbC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGp1bXBUb0VuZFxuICAgICAgICAvLyBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpbW1lZGlhdGVseS4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgIGNvbnRhaW5lci5zdG9wKHRydWUsIGZhbHNlKS5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCBjb250YWluZXIuY3NzKCdvcGFjaXR5JykgKiBmYWRlX291dF90aW1lICogMTAwMCwgY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBzY29wZS4kd2F0Y2goYXR0cnMuc2dTdGF0dXMsIGZ1bmN0aW9uKHN0YXR1cywgb2xkVmFsdWUpIHtcblxuICAgICAgICBpZiAoIXN0YXR1cykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByZXNlbnRfbmV3X3ZhbHVlKHN0YXR1cykge1xuXG4gICAgICAgICAgc2hvd24gPSB0cnVlO1xuXG4gICAgICAgICAgLy8gc2V0IHN0YXR1cyB0ZXh0XG4gICAgICAgICAgbGFiZWwudGV4dChzdGF0dXMubWVzc2FnZSk7XG5cbiAgICAgICAgICBpZiAoIXN0YXR1cy5tZXNzYWdlKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoJ2JsYW5rJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKCdibGFuaycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbW92ZSBhbGwgc3RhdHVzIGNsYXNzZXNcbiAgICAgICAgICBhdHRycy5zZ1N0YXR1c0NvZGVzLnNwbGl0KC9bXFxzXSosW1xcc10qLykuZm9yRWFjaChmdW5jdGlvbihzdGF0dXNfY29kZSkge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKHN0YXR1c19jb2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBzZXQgdGhpcyBzdGF0dXMgY2xhc3NcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKHN0YXR1cy5jb2RlKTtcblxuICAgICAgICAgIC8vIGZhZGUgaW5cbiAgICAgICAgICAvLyBjb250YWluZXIuZmFkZUluKFxuICAgICAgICAgIGNvbnRhaW5lci5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAoMSAtIGNvbnRhaW5lci5jc3MoJ29wYWNpdHknKSkgKiBmYWRlX2luX3RpbWUgKiAxMDAwLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLy8gaWYgJ3N0aWNreScgLSBkb24ndCBmYWRlIG91dFxuICAgICAgICAgICAgaWYgKHN0YXR1cy5zdGlja3kpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhdHVzX2R1cmF0aW9uID0gKG1lc3NhZ2VfdGltZV9iYXNlICsgc3RhdHVzLm1lc3NhZ2UubGVuZ3RoICogbWVzc2FnZV90aW1lX2ZhY3RvcikgKiAxMDAwO1xuXG4gICAgICAgICAgICAvLyBmYWRlIG91dCBhZnRlciB0aW1lb3V0XG4gICAgICAgICAgICBmYWRlX291dF90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZmFkZV9vdXRfdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgIGNvbnRhaW5lci5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCBjb250YWluZXIuY3NzKCdvcGFjaXR5JykgKiBmYWRlX291dF90aW1lICogMTAwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwudGV4dCgnJyk7XG4gICAgICAgICAgICAgICAgc2hvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sIHN0YXR1c19kdXJhdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNtaXNzX3N0YXR1cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBwcmVzZW50X25ld192YWx1ZShzdGF0dXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB0cnVlKTtcblxuICAgICAgY2xvc2Uub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGRpc21pc3Nfc3RhdHVzKCk7XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0pXG5cbi8vINCS0LDQu9C40LTQsNGG0LjRjyDQv9C+0LvQtdC5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBJUC1hZGRyZXNzIHZhbGlkYXRpb25cbi5kaXJlY3RpdmUoJ3NnVmFsaWRJcEFkZHJlc3NlcycsIGZ1bmN0aW9uKERldmljZV9yb3V0aW5nKSB7XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24odmFsdWUsIG1heF9jb3VudCkge1xuICAgIHZhciByZWdleHBJcCA9IC9eKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkoXFwvKFswLTldfFsxMl1bMC05XXwzWzAtMl0pPyk/JC87XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgdmFsaWQgPSB2YWx1ZS5zcGxpdChEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaXBfc3BsaXRfcnVsZSlcbiAgICAgIC5ldmVyeShmdW5jdGlvbihpcCkge1xuICAgICAgICBpcCA9IGlwLnRyaW0oKTtcblxuICAgICAgICBpZihpcC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY291bnQrKztcbiAgICAgICAgcmV0dXJuIHJlZ2V4cElwLnRlc3QoaXApO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiB2YWxpZCxcbiAgICAgIGNvdW50OiAhbWF4X2NvdW50IHx8IG1heF9jb3VudCA+PSBjb3VudFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZToge1xuICAgICAgbWF4Q291bnQ6ICc9PydcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBtb2RlbF9jb250cm9sbGVyKSB7XG4gICAgICB2YXIgdmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0ZSh2YWx1ZSwgc2NvcGUubWF4Q291bnQpO1xuXG4gICAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdmb3JtYXQnLCByZXN1bHQuZm9ybWF0KTtcbiAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ2NvdW50JywgcmVzdWx0LmNvdW50KTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdG9yKTtcbiAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJGZvcm1hdHRlcnMudW5zaGlmdCh2YWxpZGF0b3IpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3ZhbGlkSXBBZGRyZXNzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIG1vZGVsX2NvbnRyb2xsZXIpIHtcbiAgICAgIHZhciByZWdleHBJcCA9IC9eKChbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKVxcLil7M30oWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSkkLztcblxuICAgICAgdmFyIHZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ2Zvcm1hdCcsIHJlZ2V4cElwLnRlc3QodmFsdWUpKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgbW9kZWxfY29udHJvbGxlci4kcGFyc2Vycy51bnNoaWZ0KHZhbGlkYXRvcik7XG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRmb3JtYXR0ZXJzLnVuc2hpZnQodmFsaWRhdG9yKTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBJUC1hZGRyZXNzIG1hc2sgdmFsaWRhdGlvblxuLmRpcmVjdGl2ZSgndmFsaWRJcE1hc2snLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgbW9kZWxfY29udHJvbGxlcikge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MzYwNzY4L3JlZ3VsYXItZXhwcmVzc2lvbi1mb3Itc3VibmV0LW1hc2tpbmdcbiAgICAgIC8vIHN1Ym5ldCBtYXNrXG4gICAgICAvLyB2YXIgcmVnZXhwID0gL14oKCgyNTVcXC4pezN9KDI1NXwyNTR8MjUyfDI0OHwyNDB8MjI0fDE5MnwxMjh8MCspKXwoKDI1NVxcLil7Mn0oMjU1fDI1NHwyNTJ8MjQ4fDI0MHwyMjR8MTkyfDEyOHwwKylcXC4wKXwoKDI1NVxcLikoMjU1fDI1NHwyNTJ8MjQ4fDI0MHwyMjR8MTkyfDEyOHwwKykoXFwuMCspezJ9KXwoKDI1NXwyNTR8MjUyfDI0OHwyNDB8MjI0fDE5MnwxMjh8MCspKFxcLjArKXszfSkpJC87XG5cbiAgICAgIHZhciByZWdleHAgPSAvXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJC87XG5cbiAgICAgIC8vIGZvciBBbmd1bGFySlMgMS4zXG4gICAgICAvLyBtb2RlbF9jb250cm9sbGVyLiR2YWxpZGF0b3JzLmlwX21hc2sgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgLy8gICByZXR1cm4gcmVnZXhwLnRlc3QodmFsdWUpO1xuICAgICAgLy8gfVxuXG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnaXBNYXNrJywgcmVnZXhwLnRlc3QodmFsdWUpKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdpcE1hc2snLCByZWdleHAudGVzdCh2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBNQUMgYWRkcmVzcyB2YWxpZGF0aW9uXG4uZGlyZWN0aXZlKCd2YWxpZE1hY0FkZHJlc3MnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgbW9kZWxfY29udHJvbGxlcikge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MjYwNDY3L3doYXQtaXMtYS1yZWd1bGFyLWV4cHJlc3Npb24tZm9yLWEtbWFjLWFkZHJlc3NcbiAgICAgIHZhciByZWdleHAgPSAvXihbMC05QS1GXXsyfTopezV9KFswLTlBLUZdezJ9KSQvO1xuXG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnbWFjQWRkcmVzcycsIHJlZ2V4cC50ZXN0KHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRmb3JtYXR0ZXJzLnVuc2hpZnQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnbWFjQWRkcmVzcycsIHJlZ2V4cC50ZXN0KHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFRDUCBwb3J0IHZhbGlkYXRpb25cbi5kaXJlY3RpdmUoJ3ZhbGlkVGNwUG9ydCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFwibmdNb2RlbFwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBtb2RlbF9jb250cm9sbGVyKSB7XG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBzdHJpbmdfdmFsdWUgPSB2YWx1ZVxuICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgICAgaWYgKHZhbHVlICE9IHN0cmluZ192YWx1ZSkge1xuICAgICAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ3RjcFBvcnQnLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCd0Y3BQb3J0JywgdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2NTUzNSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2RlbF9jb250cm9sbGVyLiRmb3JtYXR0ZXJzLnVuc2hpZnQoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWYWxpZGl0eSgndGNwUG9ydCcsIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNjU1MzUpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBIRVggbWFzayB2YWxpZGF0aW9uXG4vLyB0aGUgYXJndW1lbnQgaXMgdGhlIGxlbmd0aCBvZiB0aGUgbWFza1xuLmRpcmVjdGl2ZSgndmFsaWRIZXhNYXNrJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIG1vZGVsX2NvbnRyb2xsZXIpIHtcbiAgICAgIGlmICghYXR0cmlidXRlcy52YWxpZEhleE1hc2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCByZXF1aXJlZCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWFza19kZWZpbml0aW9uID0gYXR0cmlidXRlcy52YWxpZEhleE1hc2s7XG4gICAgICB2YXIgdmFyaWFibGVfbGVuZ3RoID0gZmFsc2U7XG5cbiAgICAgIGlmIChtYXNrX2RlZmluaXRpb24uc3RhcnRzX3dpdGgoJzw9ICcpKSB7XG4gICAgICAgIHZhcmlhYmxlX2xlbmd0aCA9IHRydWU7XG4gICAgICAgIG1hc2tfZGVmaW5pdGlvbiA9IG1hc2tfZGVmaW5pdGlvbi5zdWJzdHJpbmcoJzw9ICcubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN5bWJvbHNfY291bnQgPSBwYXJzZUludChtYXNrX2RlZmluaXRpb24pIC8gNDtcbiAgICAgIGlmICh2YXJpYWJsZV9sZW5ndGgpIHtcbiAgICAgICAgc3ltYm9sc19jb3VudCA9IDAgKyAnLCcgKyBzeW1ib2xzX2NvdW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnXigoWzAtOUEtRl17JyArIHN5bWJvbHNfY291bnQgKyAnfSl8KDApKSQnKTtcblxuICAgICAgbW9kZWxfY29udHJvbGxlci4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQt9Cw0LrQsNC/0YHQu9C+0YfQuNGC0Ywg0LLQstC10LTRkdC90L3QvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgbW9kZWxfY29udHJvbGxlci4kcmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWYWxpZGl0eSgnaGV4TWFzaycsIHJlZ2V4cC50ZXN0KHZhbHVlKSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0LfQsNC60LDQv9GB0LvQvtGH0LjRgtGMINCy0LLQtdC00ZHQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdmFsdWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICBtb2RlbF9jb250cm9sbGVyLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xuICAgICAgICAgIG1vZGVsX2NvbnRyb2xsZXIuJHJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ2hleE1hc2snLCByZWdleHAudGVzdCh2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBNQUMgYWRkcmVzcyBtYXNrIHZhbGlkYXRpb25cbi5kaXJlY3RpdmUoJ3ZhbGlkTWFjTWFzaycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFwibmdNb2RlbFwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBtb2RlbF9jb250cm9sbGVyKSB7XG4gICAgICB2YXIgcmVnZXhwID0gL14oWzAtOUEtRl17Mn06KXs1fShbMC05QS1GXXsyfSkkLztcblxuICAgICAgbW9kZWxfY29udHJvbGxlci4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ21hY01hc2snLCByZWdleHAudGVzdCh2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgbW9kZWxfY29udHJvbGxlci4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbW9kZWxfY29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ21hY01hc2snLCByZWdleHAudGVzdCh2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBJUC1hZGRyZXNzIHZhbGlkYXRpb25cbi5kaXJlY3RpdmUoJ3ZhbGlkSXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiBcIm5nTW9kZWxcIixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIHJlZ2V4ID0gL15cXGIoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXGIoOihbMC05XXsxLDR9fFsxLTVdWzAtOV17NH18NlswLTRdWzAtOV17M318NjVbMC00XVswLTldezJ9fDY1NVswLTJdWzAtOV18NjU1M1swLTVdKSk/JC87XG5cbiAgICAgIC8qdmFyIHZhbGlkYXRvciA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSl7XG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCd2YWxpZElwJywgcmVnZXgudGVzdCh2aWV3VmFsdWUpKTtcbiAgICAgICAgcmV0dXJuIHZpZXdWYWx1ZTtcbiAgICAgIH07Ki9cblxuICAgICAgLy9pZiAoYXR0cnMudHlwZSA9PSAncmFkaW8nIHx8IGF0dHJzLnR5cGUgPT0gJ2NoZWNrYm94JykgcmV0dXJuO1xuICAgICAgZWxtLnVuYmluZCgnaW5wdXQnKS51bmJpbmQoJ2tleWRvd24nKS51bmJpbmQoJ2NoYW5nZScpO1xuICAgICAgZWxtLmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbG0udmFsKCkpO1xuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCd2YWxpZElwJywgcmVnZXgudGVzdChlbG0udmFsKCkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy9jdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdG9yKTsgICAgLy8g0L3QsNCx0L7RgCDRhNGD0L3QutGG0LjQuSwg0L/RgNC40LzQtdC90Y/QtdC80YvRhSDQuiDQt9C90LDRh9C10L3QuNGOINC80L7QtNC10LvQuCwg0L/QvtC70YPRh9C10L3QvdC+0LzRgyDQuNC3INCy0YzRjtGF0LhcbiAgICAgIC8vY3RybC4kZm9ybWF0dGVycy51bnNoaWZ0KHZhbGlkYXRvcik7ICAvLyDQvdCw0LHQvtGAINGE0YPQvdC60YbQuNC5LCDQv9GA0LjQvNC10L3Rj9C10LzRi9GFINC6INC30L3QsNGH0LXQvdC40Y4g0LzQvtC00LXQu9C4INC/0LXRgNC10LQg0L7RgtC+0LHRgNCw0LbQtdC90LjQtdC8INCy0L4g0LLRjNGO0YXQtVxuICAgIH1cbiAgfTtcbn0pXG5cbi8vIElNU0kgdmFsaWRhdGlvblxuLmRpcmVjdGl2ZSgndmFsaWRJbXNpJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIHZhciByZWdleCA9IC9eWzAtOV17MTR9WzAtOV0/JC8sXG4gICAgICAgIHZhbGlkYXRvcjtcblxuICAgICAgZWxtLnVuYmluZCgnaW5wdXQnKS51bmJpbmQoJ2tleWRvd24nKS51bmJpbmQoJ2NoYW5nZScpO1xuICAgICAgZWxtLmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbG0udmFsKCkpO1xuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCd2YWxpZEltc2knLCByZWdleC50ZXN0KGVsbS52YWwoKSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vXG4uZGlyZWN0aXZlKFwic2dNb2RhbGVcIiwgZnVuY3Rpb24oJG1vZGFsKSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBlbGVtZW50LmJpbmQoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coYXR0cnMuc2dNb2RhbGUpO1xuICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogYXR0cnMuc2dNb2RhbGVcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSlcblxuLy8gVGltZSB2YWxpZGF0aW9uLlxuLmRpcmVjdGl2ZSgndmFsaWRUaW1lJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgc2NvcGU6IHtcbiAgICAgIHRpbWVUeXBlOiBcIkBcIlxuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG4gICAgICBlbGVtZW50Lm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgICAgPSBjdHJsLiR2aWV3VmFsdWUsXG4gICAgICAgICAgICBtYXhWYWwgPSBzY29wZS50aW1lVHlwZSA9PT0gJ2hvdXJzJyA/IDIzIDogNTk7XG4gICAgICAgIGlmICgoK3ZhbCkudG9TdHJpbmcoKSA9PT0gJ05hTicpIHZhbCA9IDA7XG4gICAgICAgIHZhbCA9IE1hdGgubWluKCB2YWwsIG1heFZhbCApO1xuICAgICAgICB2YWwgPSAodmFsPDEwPycwJzonJykgKyB2YWwudG9TdHJpbmcoKTtcbiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKCB2YWwgKTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG4gICAgICB9KTtcbiAgICAgIC8vINC00L7QsdCw0LLQuNGC0YwgMCDQv9C10YDQtdC0INC+0LTQvdC+0YbQuNGE0LXRgNC90YvQvNC4INC30L3QsNGH0LXQvdC40Y/QvNC4ICjQv9GA0Lgg0LLRi9GB0YLQsNCy0LvQtdC90LjQuCDQt9C90LDRh9C10L3QuNGPINC/0YDQvtCz0YDQsNC80LzQvdGL0Lwg0L/Rg9GC0ZHQvClcbiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPCAxMCA/ICcwJyArIHZhbHVlIDogdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyBGaWx0ZXIgbnVtYmVyIGlucHV0XG4uZGlyZWN0aXZlKCdmaWx0ZXJOdW1iZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaCggZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkpIHJldHVybiAnJztcblxuICAgICAgICAvL2NvbnNvbGUubG9nKCdbRmlsdGVyTnVtYmVyXScsIHR5cGVvZiB2aWV3VmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHZpZXdWYWx1ZS5yZXBsYWNlKC9cXEQrL2csICcnKSsnJztcbiAgICAgICAgaWYgKHZpZXdWYWx1ZSAhPT0gcGFyc2VkVmFsdWUpIHtcbiAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUocGFyc2VkVmFsdWUpO1xuICAgICAgICAgIGN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVGVsZXBob25lIG51bWJlcnMgdmFsaWRhdGlvblxuLmRpcmVjdGl2ZSgnbnVtYmVyc0xpc3QnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIHZhciB2YWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcZFxcKixcXHNdKy9nLCAnJykucmVwbGFjZSgvKCx8XFxzKXsyLH18WyxcXHNdKD89XFxkKS9nLCAnLCAnKS5yZXBsYWNlKC9cXCorL2csICcqJyk7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1tudW1iZXJzTGlzdF0gY29udmVydGluZycsIHZhbHVlLCc9PicscGFyc2VkVmFsdWUpO1xuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSggJ251bWJlcnNMaXN0JyxcbiAgICAgICAgICB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICB2YWx1ZSA9PT0gJycgfHxcbiAgICAgICAgICAvXihcXCo/XFxkKlxcKj8sP1xccz8pKyQvZy50ZXN0KHBhcnNlZFZhbHVlKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gcGFyc2VkVmFsdWUpIHtcbiAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUocGFyc2VkVmFsdWUpO1xuICAgICAgICAgIGN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgICAgfTtcblxuICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHZhbGlkYXRvcik7XG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2godmFsaWRhdG9yKTtcbiAgICB9XG4gIH07XG59KVxuXG4vL1xuLmRpcmVjdGl2ZSgnc2dJbnRlZ2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG4gICAgICB2YXIgcmVnZXggPSAvXlxcLT9cXGQrJC87XG4gICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIGlmICh2aWV3VmFsdWUgPT09IFwiXCIgfHwgcmVnZXgudGVzdCh2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgLy8gaXQgaXMgdmFsaWRcbiAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnaW50ZWdlcicsIHRydWUpO1xuICAgICAgICAgIHJldHVybiB2aWV3VmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaXQgaXMgaW52YWxpZCwgcmV0dXJuIHVuZGVmaW5lZCAobm8gbW9kZWwgdXBkYXRlKVxuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdpbnRlZ2VyJywgZmFsc2UpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vXG4uZGlyZWN0aXZlKCdzZ1NpZ25hdHVyZScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFwibmdNb2RlbFwiLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XG4gICAgICB2YXIgcmVnZXggPSAvXihbXFxkYWJjZGVmeEFCQ0RFRlhdezJ9KSskLztcblxuICAgICAgZWxtLnVuYmluZCgnaW5wdXQnKS51bmJpbmQoJ2tleWRvd24nKS51bmJpbmQoJ2NoYW5nZScpO1xuICAgICAgZWxtLmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbG0udmFsKCkpO1xuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdzZ1NpZ25hdHVyZScsIHJlZ2V4LnRlc3QoZWxtLnZhbCgpKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuXG4vKioqKiogVGVzdGluZyBkaXJlY3RpdmUgKioqKiovXG4vKlxuLmRpcmVjdGl2ZSgnc3Ryb25nUGFzc1JlcXVpcmVkJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBpc1ZhbGlkID0gZnVuY3Rpb24ocykge1xuICAgICAgICByZXR1cm4gcyAmJiBzLmxlbmd0aCA+IDUgJiYgL1xcRC8udGVzdChzKSAmJiAvXFxkLy50ZXN0KHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlOiduZ01vZGVsJyxcbiAgICAgICAgbGluazpmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0cnMsIG5nTW9kZWxDdHJsKSB7XG5cbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24gKHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnc3Ryb25nUGFzcycsIGlzVmFsaWQodmlld1ZhbHVlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uIChtb2RlbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdzdHJvbmdQYXNzJywgaXNWYWxpZChtb2RlbFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcbiovXG5cblxuLmRpcmVjdGl2ZSgnc2dIaWdobGlnaHQnLCBmdW5jdGlvbigpIHtcbiAgIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgIHNjb3BlOiB7XG4gICAgICBzZ0hpZ2hsaWdodDogJz0nXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwpIHtcbiAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50Lmh0bWwoKTtcblxuICAgICAgc2NvcGUuJHdhdGNoKFwic2dIaWdobGlnaHRcIiwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgdmFyIGZpbmQgPSBzY29wZS5zZ0hpZ2hsaWdodDtcbiAgICAgICAgdmFyIHRtcCA9IHRleHQ7XG5cbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRtcC5tYXRjaChmaW5kKSwgZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHVybCwgJzxhIHRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCIgaHJlZj0nKyB1cmwgKyAnPicgKyB1cmwgKyAnPC9hPicpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZygnSGlnaGxpZ2h0JywgZmluZCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlcGxhY2U6IGZhbHNlXG4gIH1cbn0pXG5cbi8vINCU0LjRgNC10LrRgtC40LLQsCDQtNC70Y8g0LHQvtC70LXQtSDQutC+0YDRgNC10LrRgtC90L7QuSDQvtCx0YDQsNCx0L7RgtC60Lgg0LTQsNGCINCyIEJvb3RzdHJhcC1VSSBEYXRlcGlja2VyXG4uZGlyZWN0aXZlKCdzZ0NvcnJlY3REcFZpZXcnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAgICAgIC8vINC/0YDQuCDQv9C+0YLQtdGA0LUg0YTQvtC60YPRgdCwINGN0LvQtdC80LXQvdGC0L7QvCDQv9GA0L7QstC10YDRj9C10YIg0YHQvtC00LXRgNC20LjQvNC+0LUg0LgsINC/0L4g0LLQvtC30LzQvtC20L3QvtGB0YLQuCwg0L/QtdGA0LXQstC+0LTQuNGCINCyINGE0L7RgNC80LDRgtC1IERhdGVcbiAgICAgIGVsbS5vZmYoJ2tleWRvd24nKS5vZmYoJ2tleXVwJykub2ZmKCdjaGFuZ2UnKS5vZmYoJ3N1Ym1pdCcpLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWwgPSBjdHJsLiR2aWV3VmFsdWU7ICAvL2NvbnNvbGUubG9nKCdbc2dDb3JyZWN0RHBWaWV3XScsIHR5cGVvZiB2YWwsIHZhbCk7XG4gICAgICAgIGlmICghdmFsIHx8IHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSByZXR1cm47XG4gICAgICAgIC8vINC/0YDQvtCy0LXRgNC60LAg0L/QviDQvNCw0YHQutC1IEREWy4tL11NTVsuLS9dWVlZWSDQuCDQv9C10YDQtdCy0L7QtCDQsiBNTVsuLS9dRERbLi0vXVlZWVlcbiAgICAgICAgLy9jb25zb2xlLmxvZygnW3NnQ29ycmVjdERwVmlld10gUmVnRXggdGVzdGluZy4uLicsIC9eKD86KFxcZHsxLDJ9KVtcXC4vLV0pezJ9KFxcZHsxLDR9KSQvLnRlc3QodmFsKSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ1tzZ0NvcnJlY3REcFZpZXddIE5ldyB2YWx1ZTonLCB2YWwpO1xuICAgICAgICBpZiAoL14oPzooXFxkezEsMn0pW1xcLi8tXSl7Mn0oXFxkezEsNH0pJC8udGVzdCh2YWwpKSB2YWwgPSB2YWwucmVwbGFjZSgvXihcXGR7MSwyfSlbXFwuL10oXFxkezEsMn0pW1xcLi8tXShcXGR7MSw0fSkkLywgJyQyLyQxLyQzJyk7XG4gICAgICAgIHZhbCA9IG5ldyBEYXRlICh2YWwpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdbc2dDb3JyZWN0RHBWaWV3XSBGb3JtYXQgdG8gZGF0ZTonLCB2YWwpO1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHZhbCAmJiB2YWwudG9TdHJpbmcoKSAhPT0gJ0ludmFsaWQgRGF0ZScpIHtcbiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWwpO1xuICAgICAgICAgICAgY3RybC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vINC00LXQudGB0YLQstC40LUg0L/QviBlbnRlci3Rg1xuLmRpcmVjdGl2ZSgnc2dFbnRlcicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5iaW5kKFwia2V5ZG93biBrZXlwcmVzc1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nRW50ZXIsIHsnZXZlbnQnOiBldmVudH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3NnRmlsZUNob29zZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuXG4gICAgICB2YXIgZWwgPSBqUXVlcnkoZWxlbWVudClcbiAgICAgIHZhciBidXR0b247XG4gICAgICB2YXIgaW5wdXQgPSBqUXVlcnkoZWwuZmluZCgnaW5wdXQnKVswXSk7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzLnNnRmlsZUNob29zZXJCdXR0b24pIHtcbiAgICAgICAgYnV0dG9uID0gZmluZF9lbGVtZW50X2J5X3BhdGgoYXR0cmlidXRlcy5zZ0ZpbGVDaG9vc2VyQnV0dG9uLCBlbFswXSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBidXR0b24gPSBqUXVlcnkoZWwuY2hpbGRyZW4oKVswXSlcbiAgICAgIH1cblxuICAgICAgYnV0dG9uLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgICB9KVxuXG4gICAgICBpbnB1dC5vbignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuXG4uZGlyZWN0aXZlKCduZ0VudGVyJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgIGVsZW1lbnQuYmluZCgna2V5ZG93biBrZXlwcmVzcycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nRW50ZXIsIHskZXZlbnQ6ZXZlbnR9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ2hleFByZXR0eVByaW50JywgZnVuY3Rpb24oVXRpbGl0aWVzLCBEZXZpY2Vfc2V0dGluZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG5cbiAgICAgIC8vINC60L7QtCDQtNC70Y8g0YDQsNCx0L7RgtGLINGBINC60YPRgNGB0L7RgNC+0LwgdGV4dGFyZWEg0LLQt9GP0YIg0L7RgtGB0Y7QtNCwOlxuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTQwMTA0Mi9hbmd1bGFyanMtZGlyZWN0aXZlLXRvLWluc2VydC10ZXh0LWF0LXRleHRhcmVhLWNhcmV0XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF1cblxuICAgICAgLy8gbWF4bGVuZ3RoIGF0dHJpYnV0ZSBpcyB1c2VsZXNzIHNpbmNlIGl0IGNvdW50cyBcXHJcXG4gKHNvbWV0aW1lcylcblxuICAgICAgdmFyIG1heGxlbmd0aCA9IDBcbiAgICAgIGlmIChhdHRycy5oZXhQcmV0dHlQcmludCkge1xuICAgICAgICB2YXIgYnl0ZXMgPSBhdHRycy5oZXhQcmV0dHlQcmludFxuICAgICAgICB2YXIgZm91cnNfaW5fcm93ID0gYXR0cnMuaGV4UHJldHR5UHJpbnRGb3Vyc0luUm93IHx8IDQgLy8g0L/QviDRh9C10YLRi9GA0LUgXCLRh9C10YLRi9GA0LUg0LHQsNC50YLQsFwiINCyINGB0YLRgNC+0LrQtVxuXG4gICAgICAgIG1heGxlbmd0aCA9IGJ5dGVzICogMiAvKiDQutCw0LbQtNGL0Lkg0LHQsNC50YIgLSDQtNCy0LAg0YHQuNC80LLQvtC70LAgKi9cbiAgICAgICAgICArIChEZXZpY2Vfc2V0dGluZ3MubGV2ZWxfNF9kYXRhX21heF9ieXRlcyAtIDEpIC8qINC/0L4g0L/RgNC+0LHQtdC70YMg0LzQtdC20LTRgyDQutCw0LbQtNGL0LzQuCDQsdCw0LnRgtCw0LzQuCAqL1xuICAgICAgICAgICsgTWF0aC5mbG9vcigoRGV2aWNlX3NldHRpbmdzLmxldmVsXzRfZGF0YV9tYXhfYnl0ZXMgLSAxKSAvIDQpIC8qINC/0L4g0LLRgtC+0YDQvtC80YMg0L/RgNC+0LHQtdC70YMg0LzQtdC20LTRgyDQutCw0LbQtNGL0LzQuCDRh9C10YLRi9GA0YzQvNGPINCx0LDQudGC0LDQvNC4ICovXG4gICAgICAgICAgLSBNYXRoLmZsb29yKChEZXZpY2Vfc2V0dGluZ3MubGV2ZWxfNF9kYXRhX21heF9ieXRlcyAtIDEpIC8gKDQgKiBmb3Vyc19pbl9yb3cpKSAvKiDQvdCwINC60LDQttC00L7QvCDQutC+0L3RhtC1INGB0YLRgNC+0LrQuCAtINC00LLQsCDQv9GA0L7QsdC10LvQsCDQt9Cw0LzQtdC90Y/RjtGC0YHRjyDQvdCwIFxcbiAqL1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWFkKCkge1xuXG4gICAgICAgIHZhciBzdGFydFBvcztcbiAgICAgICAgdmFyIGVuZFBvcztcbiAgICAgICAgdmFyIHNjcm9sbFRvcDtcblxuICAgICAgICB2YXIgcmVzdG9yZV9jdXJzb3IgPSBub2RlLnNlbGVjdGlvblN0YXJ0IHx8IG5vZGUuc2VsZWN0aW9uU3RhcnQgPT09IDA7XG5cbiAgICAgICAgaWYgKHJlc3RvcmVfY3Vyc29yKSB7XG4gICAgICAgICAgc3RhcnRQb3MgID0gbm9kZS5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICBlbmRQb3MgICAgPSBub2RlLnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICBzY3JvbGxUb3AgPSBub2RlLnNjcm9sbFRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcmlnaW5hbF92YWx1ZSA9IGVsZW1lbnQudmFsKClcbiAgICAgICAgdmFyIHZhbHVlID0gb3JpZ2luYWxfdmFsdWVcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvW14wLTlBLUZYIFxcblxccl0vZywgJ1gnKVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBVdGlsaXRpZXMuaGV4X3ByZXR0eV9wcmludCh2YWx1ZSwgc3RhcnRQb3MpO1xuXG4gICAgICAgIHZhciBwcmludGVkID0gcmVzdWx0WzBdO1xuICAgICAgICB2YXIgc2hpZnQgICA9IHJlc3VsdFsxXTtcblxuICAgICAgICB2YXIgY3V0ID0gZmFsc2U7XG4gICAgICAgIHByaW50ZWRfbGVuZ3RoID0gcHJpbnRlZC5yZXBsYWNlKC9cXG5cXHIvZywgJ1xcbicpLmxlbmd0aFxuICAgICAgICBpZiAobWF4bGVuZ3RoICYmIHByaW50ZWRfbGVuZ3RoID4gbWF4bGVuZ3RoKSB7XG4gICAgICAgICAgcHJpbnRlZCA9IHByaW50ZWQuc3Vic3RyaW5nKDAsIG1heGxlbmd0aClcbiAgICAgICAgICBjdXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByaW50ZWQgIT0gb3JpZ2luYWxfdmFsdWUgfHwgY3V0KSB7XG5cbiAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUocHJpbnRlZCk7XG4gICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XG5cbiAgICAgICAgICBpZiAocmVzdG9yZV9jdXJzb3IpIHtcbiAgICAgICAgICAgIC8vIG5vZGUuZm9jdXMoKTtcblxuICAgICAgICAgICAgbm9kZS5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0UG9zICsgc2hpZnQ7XG4gICAgICAgICAgICBub2RlLnNlbGVjdGlvbkVuZCAgID0gc3RhcnRQb3MgKyBzaGlmdDtcbiAgICAgICAgICAgIG5vZGUuc2Nyb2xsVG9wICAgICAgPSBzY3JvbGxUb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnZhbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgXCJcIik7XG4gICAgICB9O1xuXG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg3OTUyODMvanF1ZXJ5LWdldC1pbnB1dC12YWx1ZS1hZnRlci1rZXlwcmVzc1xuICAgICAgZWxlbWVudC5vbihcImlucHV0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7XG4gICAgICB9KTtcblxuICAgICAgZWxlbWVudC5vbihcImJsdXIgY2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmVhZCgpO1xuXG4gICAgICAgICAgLy8g0LXRgdC70Lgg0LrQvtC70LjRh9C10YHRgtCy0L4g0YHQuNC80LLQvtC70L7QsiDQsiDRgdGC0YDQvtC60LUg0L3QtdGH0ZHRgtC90L4gLSDQtNC+0L/QvtC70L3QuNGC0Ywg0LjQutGB0L7QvCDRgdC/0YDQsNCy0LBcbiAgICAgICAgICBpZiAoZWxlbWVudC52YWwoKS5yZXBsYWNlKC9cXHMvZywgJycpLmxlbmd0aCAlIDIpIHtcblxuICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkgKyAnWCcpO1xuICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSlcblxuLmRpcmVjdGl2ZSgnZHBpVG9vbHRpcCcsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQUUnLFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhZ2VzL2luY2x1ZGUvZHBpIHRvb2x0aXAuaHRtbCcsIC8vIG1hcmt1cCBmb3IgdGVtcGxhdGVcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGhleDogJz1kcGlUb29sdGlwJyAvLyBhbGxvd3MgZGF0YSB0byBiZSBwYXNzZWQgaW50byBkaXJlY3RpdmUgZnJvbSBjb250cm9sbGVyIHNjb3BlXG4gICAgICAgIH1cbiAgICB9O1xufSlcblxuLy8g0JTQuNGA0LXQutGC0LjQstCwINC00LvRjyDRgdGA0LDQstC90LXQvdC40Y8g0LTQstGD0YUg0LzQvtC00LXQu9C10Llcbi5kaXJlY3RpdmUoJ2NvbXBhcmVUbycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBzY29wZToge1xuICAgICAgb3RoZXJNb2RlbFZhbHVlOiAnPWNvbXBhcmVUbydcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBuZ01vZGVsKSB7XG4gICAgICAvLyDQstCw0LvQuNC00LDRgtC+0YAg0YHRgNCw0LLQvdC40LLQsNC10YIg0LfQvdCw0YfQtdC90LjQtSDRgtC10LrRg9GJ0LXQs9C+INGN0LvQtdC80LXQvdGC0LBcbiAgICAgIC8vINGBINGC0LXQvCwg0YfRgtC+INC/0LXRgNC10LTQsNC9INCyINGB0LrQvtGD0L9cbiAgICAgIG5nTW9kZWwuJHZhbGlkYXRvcnMuY29tcGFyZVRvID0gZnVuY3Rpb24obW9kZWxWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZSA9PT0gc2NvcGUub3RoZXJNb2RlbFZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8g0L7RgtGB0LvQtdC20LjQstCw0LXQvCDQuNC30LzQtdC90LXQvdC40Y8g0L7QsdC10LjRhSDQvNC+0LTQtdC70LXQuVxuICAgICAgc2NvcGUuJHdhdGNoKCdvdGhlck1vZGVsVmFsdWUgKyBlbGVtZW50LnZhbHVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIG5nTW9kZWwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4vLyAo0YLRgNC10LHRg9C10YLRgdGPIHN0aWNreWVhaC5qcylcbi8vXG4vLyDQn9C+0LzQtdGH0LXQvdC90YvQuSDRjdGC0L7QuSDQtNC40YDQtdC60YLQuNCy0L7QuSDRjdC70LXQvNC10L3RgiDQsdGD0LTQtdGCICdzdGlja3knOlxuLy8g0LHRg9C00LXRgiBcItC30LDQu9C40L/QsNGC0YxcIiDQvdCw0LLQtdGA0YXRgyDRjdC60YDQsNC90LAg0L/RgNC4INC/0YDQvtC60YDRg9GC0LrQtSDQstC90LjQty5cbi8vXG4vLyDQn9GA0Lgg0L/QvtC80LXRh9Cw0L3QuNC4INGN0YLQvtC5INC00LjRgNC10LrRgtC40LLQvtC5INGC0LDQsdC70LjRhtGLLCBcbi8vICdzdGlja3knINGB0YLQsNC90YPRgiDRjdC70LXQvNC10L3RgtGLIHRoLlxuLy8g0KLQsNC60LbQtSDQsiDRgdC70YPRh9Cw0LUg0YLQsNCx0LvQuNGG0Ysg0Y3Qu9C10LzQtdC90YLRgyB0YWJsZSBcbi8vINGB0LvQtdC00YPQtdGCINC90LDQt9C90LDRh9Cw0YLRjCDQsNGC0YDQuNCx0YPRgiAnZGF0YS1zdGlja3ktY2xhc3MnOlxuLy8g0Y3RgtC+0YIg0LrQu9Cw0YHRgSDQsdGD0LTQtdGCINC90LDQt9C90LDRh9C10L0gJ3N0aWNreScg0Y3Qu9C10LzQtdC90YLRgyDQsiDRgdC+0YHRgtC+0Y/QvdC40LggJ3N0aWNreSdcbi8vICjQvNC+0LbQvdC+INC00L7QsdCw0LLQu9GP0YLRjCDQv9GA0L7Qt9GA0LDRh9C90L7RgdGC0YwsIGJvcmRlci1ib3R0b20sINC4INGCLtC/Lilcbi5kaXJlY3RpdmUoJ3NnU3RpY2t5JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIG5nTW9kZWwpIHtcblxuICAgICAgZnVuY3Rpb24gc3RpY2t5KGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnc3RpY2t5ZWFoJylcbiAgICAgICAgZWxlbWVudC5hdHRyKCdkYXRhLXN0aWNreWVhaC1vZmZzZXQnLCBhdHRyaWJ1dGVzLnNnU3RpY2t5IHx8IDUwKVxuICAgICAgfVxuXG4gICAgICB2YXIgJGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudClcblxuICAgICAgLy8g0LrQvtCz0LTQsCDQstGB0ZEg0L7RgtGA0LXQvdC00LXRgNC40YLRgdGPXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8g0LIg0YHQu9GD0YfQsNC1INGC0LDQsdC70LjRhtGLXG4gICAgICAgIGlmICgkZWxlbWVudC5pcygndGFibGUnKSkge1xuICAgICAgICAgIC8vINCy0YvRgdC+0YLQsCB0aFxuICAgICAgICAgIHZhciBoZWlnaHRcblxuICAgICAgICAgIC8vIHN0aWNreSBjc3MgY2xhc3NcbiAgICAgICAgICB2YXIgc3RpY2t5X2NsYXNzID0gJGVsZW1lbnQuYXR0cignZGF0YS1zdGlja3ktY2xhc3MnKVxuICAgICAgICAgIGlmIChzdGlja3lfY2xhc3MpIHtcbiAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZUF0dHIoJ2RhdGEtc3RpY2t5LWNsYXNzJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkZWxlbWVudC5maW5kKCd0aCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGggPSBqUXVlcnkodGhpcylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0YPQt9C90LDRgtGMINCy0YvRgdC+0YLRgyB0aFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBoZWlnaHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGhlaWdodCA9IHRoLmhlaWdodCgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHBhZGRpbmcg0YMgdGhcbiAgICAgICAgICAgIHZhciBwYWRkaW5nID0ge1xuICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogICB0aC5jc3MoJ3BhZGRpbmdMZWZ0JyksXG4gICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogIHRoLmNzcygncGFkZGluZ1JpZ2h0JyksXG4gICAgICAgICAgICAgIHBhZGRpbmdUb3A6ICAgIHRoLmNzcygncGFkZGluZ1RvcCcpLFxuICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiB0aC5jc3MoJ3BhZGRpbmdCb3R0b20nKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDRg9Cx0YDQsNGC0YwgcGFkZGluZyDRgyB0aFxuICAgICAgICAgICAgdGguY3NzKCdwYWRkaW5nJywgMClcblxuICAgICAgICAgICAgLy8g0YHQvtC30LTQsNGC0Ywg0LLQu9C+0LbQtdC90L3Ri9C5IGRpdlxuICAgICAgICAgICAgdGgud3JhcElubmVyKCc8ZGl2Lz4nKVxuXG4gICAgICAgICAgICAvLyDQstC70L7QttC10L3QvdGL0LkgZGl2XG4gICAgICAgICAgICB2YXIgZGl2ID0gJCh0aC5jaGlsZHJlbigpWzBdKVxuXG4gICAgICAgICAgICAvLyDQv9C10YDQtdC90LXRgdGC0Lggc3RpY2t5IGNzcyBjbGFzcywg0YPQutCw0LfQsNC90L3Ri9C5INC00LvRjyDRgtCw0LHQu9C40YbRi1xuICAgICAgICAgICAgaWYgKHN0aWNreV9jbGFzcykge1xuICAgICAgICAgICAgICBkaXYuYXR0cignZGF0YS1zdGlja3llYWgtY2xhc3MnLCBzdGlja3lfY2xhc3MpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINC/0LXRgNC10L3QtdGB0YLQuCBwYWRkaW5nINGBIHRoINC90LAg0LLQu9C+0LbQtdC90L3Ri9C5IGRpdlxuICAgICAgICAgICAgZGl2LmNzcyhwYWRkaW5nKVxuXG4gICAgICAgICAgICAvLyDQstGL0YHRgtCw0LLQuNGC0Ywg0LLRi9GB0L7RgtGDINGC0LDQutGD0Y4g0LbQtSwg0LrQsNC6INGDIHRoXG4gICAgICAgICAgICBkaXYuY3NzKHtcbiAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAncHgnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyDQv9C+0LzQtdGC0LjRgtGMINC60LDQuiBzdGlja3lcbiAgICAgICAgICAgIHN0aWNreShkaXYpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICAvLyDQuNC90LDRh9C1IC0g0L3QtSDRgtCw0LHQu9C40YbQsFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyDQv9C+0LzQtdGC0LjRgtGMINC60LDQuiBzdGlja3lcbiAgICAgICAgICBzdGlja3koZWxlbWVudClcbiAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpXG4gICAgICAgIH1cblxuICAgICAgICAvLyDQsNC60YLQuNCy0LjRgNC+0LLQsNGC0Ywgc3RpY2t5XG4gICAgICAgICQuc3RpY2t5ZWFoKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuXG4vLyDQv9C40YjQtdGCINCy0YvRgdC+0YLRgyDRjdC70LXQvNC10L3RgtCwINCyINGD0LrQsNC30LDQvdC90YPRjiDQv9C10YDQtdC80LXQvdC90YPRjiBcbi8vICjQuCDQvtCx0L3QvtCy0LvRj9C10YIg0LXRkSDQv9C+INGB0L7QsdGL0YLQuNGOIHJlZnJlc2ggaGVpZ2h0KVxuLmRpcmVjdGl2ZSgnc2dPdXRwdXRIZWlnaHRUbycsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6IHtcbiAgICAgIHNnT3V0cHV0SGVpZ2h0VG86ICc9c2dPdXRwdXRIZWlnaHRUbydcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBuZ01vZGVsKSB7XG5cbiAgICAgIHZhciAkZWxlbWVudCA9IGpRdWVyeShlbGVtZW50KVxuXG4gICAgICBmdW5jdGlvbiB3cml0ZSgpIHtcbiAgICAgICAgc2NvcGUuc2dPdXRwdXRIZWlnaHRUbyA9ICRlbGVtZW50Lm91dGVySGVpZ2h0KClcbiAgICAgIH1cblxuICAgICAgd3JpdGUoKVxuXG4gICAgICBzY29wZS4kb24oJ3JlZnJlc2ggaGVpZ2h0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gc2NvcGUuJGRpZ2VzdCgpXG4gICAgICAgIHdyaXRlKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KTsiLCJhcHAuY29udHJvbGxlciBcIkFkbWluQ3RybFwiLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCBhcGksIFN0YXR1cywgR1VJKSAtPlxuXG4gICAgIyB0byBkbzog0YfRgtC+0LHRiyDQstGB0LUg0L3QsNC30LLQsNC90LjRjyDQv9C+0LvQtdC5INGB0L7QstC/0LDQtNCw0LvQuCwg0Lgg0LjRhSDRgtC40L/RiyAtINGC0L7QttC1ICjQstC60LvRjtGH0LDRjyDQvNCw0YHRgdC40LLRiyDQstC90YPRgtGA0LgpXG4gICAgJHNjb3BlLnZhbGlkYXRlID0gKGRhdGEpIC0+XG4gICAgICAgIHJldHVybiBkYXRhXG5cbiAgICAkc2NvcGUuc2F2ZSA9IC0+XG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSAkc2NvcGUudmFsaWRhdGUoJHNjb3BlLmNvbmZpZ3VyYXRpb25fZWRpdG9yLmdldCgpKVxuXG4gICAgICAgIGlmICRzY29wZS5idXN5XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLmluZm8oJ9Ce0L/QtdGA0LDRhtC40Y8g0YPQttC1INCy0YvQv9C+0LvQvdGP0LXRgtGB0Y8nKVxuXG4gICAgICAgICRzY29wZS5idXN5ID0geWVzXG5cbiAgICAgICAgYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uc2V0JywgeyBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICAgICMg0YLQsNC60L7Qs9C+INC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMXG4gICAgICAgICAgICBTdGF0dXMuZXJyb3IoJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L/QtdGA0LXQt9Cw0L/Rg9GB0YLQuNGC0Ywg0L/RgNC40LvQvtC20LXQvdC40LUnKVxuXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICBHVUkud2FpdF9mb3JfY29ubmVjdGlvbig0LCAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINGB0L7RhdGA0LDQvdC10L3QsC4g0J/RgNC40LvQvtC20LXQvdC40LUg0L/QtdGA0LXQt9Cw0L/Rg9GB0LrQsNC10YLRgdGPJywgeyB0bzogJ2d1aScgfSlcblxuICAgICMgSW5pdGlhbGl6YXRpb24gXG4gICAgJHNjb3BlLmluaXRpYWxpemVfcGFnZV93aXRoIC0+XG5cbiAgICAgICAgYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uZ2V0JykudGhlbiAoY29uZmlndXJhdGlvbikgLT5cblxuICAgICAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fZWRpdG9yID0gbmV3IEpTT05FZGl0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb25maWd1cmF0aW9uX2VkaXRvclwiKSwgeyBtb2RlOiAndHJlZScgfSlcbiAgICAgICAgICAgICMgJHNjb3BlLmNvbmZpZ3VyYXRpb25fZWRpdG9yLmVkaXRvci5zZXRPcHRpb25zKGZvbnRTaXplOiBcIjE0cHRcIilcblxuICAgICAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fZWRpdG9yLnNldChjb25maWd1cmF0aW9uKSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmNvbnRyb2xsZXIoXCJBZG1pbkN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCBhcGksIFN0YXR1cywgR1VJKSB7XG4gICAgJHNjb3BlLnZhbGlkYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcbiAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbmZpZ3VyYXRpb247XG4gICAgICBjb25maWd1cmF0aW9uID0gJHNjb3BlLnZhbGlkYXRlKCRzY29wZS5jb25maWd1cmF0aW9uX2VkaXRvci5nZXQoKSk7XG4gICAgICBpZiAoJHNjb3BlLmJ1c3kpIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5pbmZvKCfQntC/0LXRgNCw0YbQuNGPINGD0LbQtSDQstGL0L/QvtC70L3Rj9C10YLRgdGPJyk7XG4gICAgICB9XG4gICAgICAkc2NvcGUuYnVzeSA9IHRydWU7XG4gICAgICByZXR1cm4gYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uc2V0Jywge1xuICAgICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKCfQndC1INGD0LTQsNC70L7RgdGMINC/0LXRgNC10LfQsNC/0YPRgdGC0LjRgtGMINC/0YDQuNC70L7QttC10L3QuNC1Jyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBHVUkud2FpdF9mb3JfY29ubmVjdGlvbig0LCAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINGB0L7RhdGA0LDQvdC10L3QsC4g0J/RgNC40LvQvtC20LXQvdC40LUg0L/QtdGA0LXQt9Cw0L/Rg9GB0LrQsNC10YLRgdGPJywge1xuICAgICAgICAgIHRvOiAnZ3VpJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuICRzY29wZS5pbml0aWFsaXplX3BhZ2Vfd2l0aChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcGkuY2FsbCgnY29uZmlndXJhdGlvbi5nZXQnKS50aGVuKGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fZWRpdG9yID0gbmV3IEpTT05FZGl0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb25maWd1cmF0aW9uX2VkaXRvclwiKSwge1xuICAgICAgICAgIG1vZGU6ICd0cmVlJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICRzY29wZS5jb25maWd1cmF0aW9uX2VkaXRvci5zZXQoY29uZmlndXJhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTAgQnJhbmRvbiBBYXJvbiAoaHR0cDovL2JyYW5kb25hYXJvbi5uZXQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKExJQ0VOU0UudHh0KS5cbiAqXG4gKiBUaGFua3MgdG86IGh0dHA6Ly9hZG9tYXMub3JnL2phdmFzY3JpcHQtbW91c2Utd2hlZWwvIGZvciBzb21lIHBvaW50ZXJzLlxuICogVGhhbmtzIHRvOiBNYXRoaWFzIEJhbmsoaHR0cDovL3d3dy5tYXRoaWFzLWJhbmsuZGUpIGZvciBhIHNjb3BlIGJ1ZyBmaXguXG4gKiBUaGFua3MgdG86IFNlYW11cyBMZWFoeSBmb3IgYWRkaW5nIGRlbHRhWCBhbmQgZGVsdGFZXG4gKlxuICogVmVyc2lvbjogMy4wLjRcbiAqXG4gKiBSZXF1aXJlczogMS4yLjIrXG4gKi9cbihmdW5jdGlvbihjKXt2YXIgYT1bXCJET01Nb3VzZVNjcm9sbFwiLFwibW91c2V3aGVlbFwiXTtjLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbD17c2V0dXA6ZnVuY3Rpb24oKXtpZih0aGlzLmFkZEV2ZW50TGlzdGVuZXIpe2Zvcih2YXIgZD1hLmxlbmd0aDtkOyl7dGhpcy5hZGRFdmVudExpc3RlbmVyKGFbLS1kXSxiLGZhbHNlKX19ZWxzZXt0aGlzLm9ubW91c2V3aGVlbD1ifX0sdGVhcmRvd246ZnVuY3Rpb24oKXtpZih0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIpe2Zvcih2YXIgZD1hLmxlbmd0aDtkOyl7dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGFbLS1kXSxiLGZhbHNlKX19ZWxzZXt0aGlzLm9ubW91c2V3aGVlbD1udWxsfX19O2MuZm4uZXh0ZW5kKHttb3VzZXdoZWVsOmZ1bmN0aW9uKGQpe3JldHVybiBkP3RoaXMuYmluZChcIm1vdXNld2hlZWxcIixkKTp0aGlzLnRyaWdnZXIoXCJtb3VzZXdoZWVsXCIpfSx1bm1vdXNld2hlZWw6ZnVuY3Rpb24oZCl7cmV0dXJuIHRoaXMudW5iaW5kKFwibW91c2V3aGVlbFwiLGQpfX0pO2Z1bmN0aW9uIGIoaSl7dmFyIGc9aXx8d2luZG93LmV2ZW50LGY9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksaj0wLGg9dHJ1ZSxlPTAsZD0wO2k9Yy5ldmVudC5maXgoZyk7aS50eXBlPVwibW91c2V3aGVlbFwiO2lmKGkud2hlZWxEZWx0YSl7aj1pLndoZWVsRGVsdGEvMTIwfWlmKGkuZGV0YWlsKXtqPS1pLmRldGFpbC8zfWQ9ajtpZihnLmF4aXMhPT11bmRlZmluZWQmJmcuYXhpcz09PWcuSE9SSVpPTlRBTF9BWElTKXtkPTA7ZT0tMSpqfWlmKGcud2hlZWxEZWx0YVkhPT11bmRlZmluZWQpe2Q9Zy53aGVlbERlbHRhWS8xMjB9aWYoZy53aGVlbERlbHRhWCE9PXVuZGVmaW5lZCl7ZT0tMSpnLndoZWVsRGVsdGFYLzEyMH1mLnVuc2hpZnQoaSxqLGUsZCk7cmV0dXJuIGMuZXZlbnQuaGFuZGxlLmFwcGx5KHRoaXMsZil9fSkoalF1ZXJ5KTtcblxuXG4vKiBzdGlja3llYWggMC4xLCB2MDAxXG4gKiDCqSBBcnRlbSBQb2xpa2FycG92IHwgYXJ0cG9saWthcnBvdi5ydSB8IGFydHBvbGlrYXJwb3ZAZ21haWwuY29tXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKi9cblxuKGZ1bmN0aW9uKCQpe1xuXHQvKmlmICh0eXBlb2YoY29uc29sZSkgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRjb25zb2xlID0ge2xvZzogJC5ub29wfTtcblx0fSovXG5cblx0dmFyIHN0b3BGTEFHID0gKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5jb21wYXRNb2RlICE9ICdDU1MxQ29tcGF0JyB8fCB0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZS5tYXhIZWlnaHQgPT0gJ3VuZGVmaW5lZCc7XG5cbiAgdmFyICRkb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuICB2YXIgJHdpbmRvdyA9ICQod2luZG93KTtcblx0dmFyIHN0aWNreSA9ICQoKTtcblx0dmFyIHB1c2hlcnMgPSB7fTtcblx0dmFyIGdyb3VwcyA9IHt9O1xuXG5cdHZhciBzdGlja3llYWggPSBmdW5jdGlvbigkc3RpY2t5LCBpLCBvKSB7XG5cdFx0dmFyICRzdGlja3lDbG9uZSA9ICRzdGlja3kuY2xvbmUoKS5hZGRDbGFzcygnc3RpY2t5ZWFoX2Nsb25lJykuZGF0YSh7aW5pdGlhbGl6ZWQ6IHRydWV9KS5yZW1vdmVBdHRyKCdpZCcpLmluc2VydEFmdGVyKCRzdGlja3kpLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbid9KS5oaWRlKCk7XG5cdFx0JHN0aWNreS5kYXRhKHtjbG9uZTogJHN0aWNreUNsb25lfSk7XG5cdFx0dmFyIG9yaWdpbmFsU3RpY2t5UG9zaXRpb24gPSAkc3RpY2t5LmNzcygncG9zaXRpb24nKTtcblxuXHRcdHZhciBzdGlja3lUb3AsIHN0aWNreUhlaWdodCwgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0LCB3aW5kb3dIZWlnaHQsIHN0aWNreVRvcE5ldywgaGVpZ2h0RGlmZjtcblx0XHR2YXIgY2xvbmVBY3RpdmF0ZWRGTEFHID0gZmFsc2U7XG5cdFx0dmFyIG1vdXNld2hlZWxBY3RpdmF0ZWRGTEFHID0gZmFsc2U7XG5cdFx0dmFyIG1vdXNld2hlZWxlZEZMQUcgPSBmYWxzZTtcblx0XHR2YXIgc2V0TW91c2V3aGVlbGVkRkxBRztcblxuXHRcdHZhciAkc3RpY2t5UHVzaGVyLCBwdXNoZXJUb3A7XG5cdFx0aWYgKCRzdGlja3kuZGF0YSgnc3RpY2t5ZWFoLXB1c2gnKSkge1xuXHRcdFx0JHN0aWNreVB1c2hlciA9IHB1c2hlcnNbJHN0aWNreS5kYXRhKCdzdGlja3llYWgtcHVzaCcpXS5zbGljZShwdXNoZXJzWyRzdGlja3kuZGF0YSgnc3RpY2t5ZWFoLXB1c2gnKV0uaW5kZXgoJHN0aWNreSkrMSk7XG5cdFx0XHQvLy8vY29uc29sZS5sb2coJHN0aWNreVB1c2hlciwgaSk7XG5cdFx0fVxuICAgIC8vY29uc29sZS5sb2coJHN0aWNreVB1c2hlcik7XG4gICAgaWYgKCEkc3RpY2t5UHVzaGVyIHx8ICEkc3RpY2t5UHVzaGVyLmxlbmd0aCkge1xuICAgICAgJHN0aWNreVB1c2hlciA9ICQoJzxkaXY+PC9kaXY+JykuY3NzKHtoZWlnaHQ6IDAsIGZvbnRTaXplOiAwLCBtYXJnaW46IDAsIGNsZWFyOiAnYm90aCcsIGZsb2F0OiAnbm9uZSd9KS5hcHBlbmRUbygnYm9keScpO1xuLypcblx0XHRcdGNvbnNvbGUubG9nKCckc3RpY2t5UHVzaGVyJywgJHN0aWNreVB1c2hlcik7Ki9cbiAgICB9XG5cblx0XHR2YXIgJHN0aWNreVN0b3BwZXIsIHN0b3BwZXJIZWlnaHQ7XG5cdFx0aWYgKCRzdGlja3kuZGF0YSgnc3RpY2t5ZWFoLWdyb3VwJykpIHtcblx0XHRcdHZhciB0aGlzSW5kZXggPSBncm91cHNbJHN0aWNreS5kYXRhKCdzdGlja3llYWgtZ3JvdXAnKV0uaW5kZXgoJHN0aWNreSk7XG5cdFx0XHRpZiAodGhpc0luZGV4ICE9IDApIHtcblx0XHRcdFx0JHN0aWNreVN0b3BwZXIgPSBncm91cHNbJHN0aWNreS5kYXRhKCdzdGlja3llYWgtZ3JvdXAnKV0uc2xpY2UoMCx0aGlzSW5kZXgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8vL2NvbnNvbGUubG9nKCRzdGlja3lTdG9wcGVyLCBpKTtcblx0XHR9XG5cblx0XHR2YXIgZ2V0UHVzaGVyVG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdnZXRQdXNoZXJUb3AnLCBpKTtcblx0XHRcdHB1c2hlclRvcCA9IDA7XG5cdFx0XHRpZiAoJHN0aWNreVB1c2hlciAmJiAkc3RpY2t5UHVzaGVyLmxlbmd0aCkge1xuXHRcdFx0XHRwdXNoZXJUb3AgPSAkc3RpY2t5UHVzaGVyLm5vdCgnLnN0aWNreWVhaF9kaXNhYmxlZCcpLmVxKDApLm9mZnNldCgpLnRvcFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBnZXRTdG9wcGVySGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdnZXRTdG9wcGVySGVpZ2h0JywgaSk7XG5cdFx0XHRzdG9wcGVySGVpZ2h0ID0gMDtcblx0XHRcdGlmICgkc3RpY2t5U3RvcHBlciAmJiAkc3RpY2t5U3RvcHBlci5sZW5ndGgpIHtcblx0XHRcdFx0JHN0aWNreVN0b3BwZXIubm90KCcuc3RpY2t5ZWFoX2Rpc2FibGVkJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyk7XG5cdFx0XHRcdFx0c3RvcHBlckhlaWdodCArPSAkdGhpcy5kYXRhKCdzdGlja3llYWgtb2Zmc2V0JykgKyAoJHRoaXMuZGF0YSgnY2xvbmUnKS5oZWlnaHQoKSB8fCAwKTtcblx0XHRcdFx0XHQvLy8vY29uc29sZS5sb2coJHRoaXMuZGF0YSgnc3RpY2t5ZWFoLW9mZnNldCcpLCAkdGhpcy5uZXh0KCkuaGVpZ2h0KCkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgc3RpY2t5VG9wTmV3TGFzdCwgc3RpY2t5TGVmdExhc3QsIHN0aWNreVdpZHRoTGFzdDtcblxuXHRcdHZhciBzdGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8vL2NvbnNvbGUubG9nKCdzdGljaycsIGkpO1xuXHRcdFx0dmFyIHN0aWNreUxlZnQgPSAkc3RpY2t5Q2xvbmUub2Zmc2V0KCkubGVmdCAtIHNjcm9sbExlZnQ7XG5cdFx0XHRzdGlja3lUb3BOZXcgPSAkc3RpY2t5LmRhdGEoJ3N0aWNreWVhaC1vZmZzZXQnKTtcblx0XHRcdHZhciBzdGlja3lXaWR0aCA9ICRzdGlja3lDbG9uZS53aWR0aCgpO1xuXG5cdFx0XHRpZiAoJHN0aWNreVB1c2hlciAmJiAkc3RpY2t5UHVzaGVyLmxlbmd0aCkge1xuXHRcdFx0XHRnZXRQdXNoZXJUb3AoKTtcblx0XHRcdFx0dmFyIHN0aWNreUhlaWdodCA9ICRzdGlja3lDbG9uZS5oZWlnaHQoKSArIHN0aWNreVRvcE5ldyoyO1xuXHRcdFx0XHR2YXIgcHVzaGluZERpZmYgPSBzY3JvbGxUb3AgLSAocHVzaGVyVG9wIC0gc3RpY2t5SGVpZ2h0IC8qLSBOdW1iZXIoJHN0aWNreVB1c2hlci5hdHRyKCdkYXRhLXN0aWNreWVhaC1vZmZzZXQnKSB8fCAwKSovKTtcblx0XHRcdFx0cHVzaGluZERpZmYgPSBNYXRoLm1heChwdXNoaW5kRGlmZiwgJHN0aWNreS5kYXRhKCdzdGlja3llYWgtb2Zmc2V0JykpO1xuXHRcdFx0XHRzdGlja3lUb3BOZXcgPSBzdGlja3lUb3BOZXcqMiAtIHB1c2hpbmREaWZmO1xuICAgICAgICAvKmlmICgkc3RpY2t5UHVzaGVyLmRhdGEoJ3N0aWNreWVhaC1vbicpICYmIHN0aWNreVRvcE5ldyA+IDApIHtcbiAgICAgICAgICBzdGlja3lUb3BOZXcgPSAtIHN0aWNreUhlaWdodDtcbiAgICAgICAgfSovXG5cdFx0XHR9XG5cblx0XHRcdC8vaWYgKCRzdGlja3lTdG9wcGVyICYmICRzdGlja3lTdG9wcGVyLmxlbmd0aCkge1xuXHRcdFx0XHQvL3ZhciBzdG9wcGVySGVpZ2h0ID0gZ2V0U3RvcHBlckhlaWdodCgpO1xuXHRcdFx0XHRzdGlja3lUb3BOZXcgPSBzdGlja3lUb3BOZXcgKyBzdG9wcGVySGVpZ2h0O1xuXHRcdFx0Ly99XG5cdFx0XHQvLy8vLy9jb25zb2xlLmxvZyh0b3AsIC1zdGlja3lIZWlnaHQsIGkpO1xuXG5cdFx0XHR2YXIgdGltZSA9IDA7XG5cblx0XHRcdCRzdGlja3kuc3RvcCgpO1xuXG5cdFx0XHRpZiAobW91c2V3aGVlbGVkRkxBRykge1xuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSBNYXRoLmFicyhwYXJzZUludCgkc3RpY2t5LmNzcygndG9wJykpIC0gc3RpY2t5VG9wTmV3KTtcblx0XHRcdFx0aWYgKGRpc3RhbmNlID4gMTApIHRpbWUgPSBkaXN0YW5jZSAvIDI7XG5cdFx0XHRcdGNsZWFyVGltZW91dChzZXRNb3VzZXdoZWVsZWRGTEFHKTtcblx0XHRcdFx0c2V0TW91c2V3aGVlbGVkRkxBRyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRtb3VzZXdoZWVsZWRGTEFHID0gZmFsc2U7XG5cdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzdGlja3lUb3BOZXdMYXN0ICE9PSBzdGlja3lUb3BOZXcgfHwgc3RpY2t5TGVmdExhc3QgIT0gc3RpY2t5TGVmdCB8fCBzdGlja3lXaWR0aExhc3QgIT0gc3RpY2t5V2lkdGggfHwgbW91c2V3aGVlbGVkRkxBRykge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzdGljayBjc3MgcmVkcmF3JywgaSk7XG5cdFx0XHRcdHZhciBvdmVyZmxvdyA9ICRzdGlja3kuY3NzKCdvdmVyZmxvdycpO1xuXHRcdFx0XHQkc3RpY2t5LmFuaW1hdGUoe1xuXHRcdFx0XHRcdHRvcDogc3RpY2t5VG9wTmV3LFxuXHRcdFx0XHRcdGxlZnQ6IHN0aWNreUxlZnQsXG5cdFx0XHRcdFx0d2lkdGg6IHN0aWNreVdpZHRoLFxuXHRcdFx0XHRcdG1hcmdpblRvcDogMCxcblx0XHRcdFx0XHRtYXJnaW5MZWZ0OiAwXG5cdFx0XHRcdH0sIHRpbWUsICdsaW5lYXInLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzdGlja3kuY3NzKHtvdmVyZmxvdzogb3ZlcmZsb3d9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHN0aWNreVRvcE5ld0xhc3QgPSBzdGlja3lUb3BOZXc7XG5cdFx0XHRcdHN0aWNreUxlZnRMYXN0ID0gc3RpY2t5TGVmdDtcblx0XHRcdFx0c3RpY2t5V2lkdGhMYXN0ID0gc3RpY2t5V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGFjdGl2YXRlQ2xvbmUgPSBmdW5jdGlvbihGTEFHKSB7XG5cdFx0XHRpZiAoRkxBRyAhPSBjbG9uZUFjdGl2YXRlZEZMQUcpIHtcblx0XHRcdFx0JHN0aWNreS5zdG9wKCkuY3NzKHtwb3NpdGlvbjogRkxBRyA/ICdmaXhlZCcgOiBvcmlnaW5hbFN0aWNreVBvc2l0aW9uLCB0b3A6ICcnLCBsZWZ0OiAnJywgbWFyZ2luVG9wOiAnJywgbWFyZ2luTGVmdDogJycsIHdpZHRoOiAnJ30pW0ZMQUcgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJHN0aWNreS5kYXRhKCdzdGlja3llYWgtY2xhc3MnKSkuZGF0YSh7J3N0aWNreWVhaC1vbic6IEZMQUd9KTtcblx0XHRcdFx0c3RpY2t5VG9wTmV3TGFzdCA9ICcnO1xuXHRcdFx0XHQkc3RpY2t5Q2xvbmVbRkxBRyA/ICdzaG93JyA6ICdoaWRlJ10oKTtcblx0XHRcdFx0Y2xvbmVBY3RpdmF0ZWRGTEFHID0gRkxBRztcblx0XHRcdFx0bGlzdGVuSGVpZ2h0KCk7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2FjdGl2YXRlQ2xvbmU6ICcgKyBGTEFHLCBpKTtcblx0XHRcdH1cblx0XHRcdGlmIChjbG9uZUFjdGl2YXRlZEZMQUcpIHtcblx0XHRcdFx0c3RpY2soKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgb25Nb3VzZXdoZWVsID0gZnVuY3Rpb24oZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHN0aWNreVRvcE5ldyA9IHN0aWNreVRvcE5ldyArIE1hdGgucm91bmQoZGVsdGFZKjI1KTtcblx0XHRcdHZhciB0b3BMaW1pdCA9IHN0aWNreUhlaWdodCAtIHdpbmRvd0hlaWdodCAtICRzdGlja3kuZGF0YSgnc3RpY2t5ZWFoLW9mZnNldCcpO1xuXHRcdFx0dmFyIGJvdHRvbUxpbWl0ID0gJHN0aWNreS5kYXRhKCdzdGlja3llYWgtb2Zmc2V0JykqMiAtICRzdGlja3kuZGF0YSgnc3RpY2t5ZWFoLW9mZnNldCcpO1xuXHRcdFx0aWYgKHN0aWNreVRvcE5ldyA8IC10b3BMaW1pdCkge1xuXHRcdFx0XHRzdGlja3lUb3BOZXcgPSAtdG9wTGltaXQ7XG5cdFx0XHR9IGVsc2UgaWYgKHN0aWNreVRvcE5ldyA+IGJvdHRvbUxpbWl0KSB7XG5cdFx0XHRcdHN0aWNreVRvcE5ldyA9IGJvdHRvbUxpbWl0O1xuXHRcdFx0fVxuXHRcdFx0JHN0aWNreS5zdG9wKCkuY3NzKHtcblx0XHRcdFx0dG9wOiBzdGlja3lUb3BOZXdcblx0XHRcdH0pO1xuXHRcdFx0bW91c2V3aGVlbGVkRkxBRyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0dmFyIGFjdGl2YXRlTW91c2V3aGVlbCA9IGZ1bmN0aW9uKEZMQUcpIHtcblx0XHRcdC8vLy9jb25zb2xlLmxvZygnYWN0aXZhdGVNb3VzZXdoZWVsJywgRkxBRyk7XG5cdFx0XHRpZiAoby5zY3JvbGwgJiYgRkxBRyAhPSBtb3VzZXdoZWVsQWN0aXZhdGVkRkxBRykge1xuXHRcdFx0XHQkc3RpY2t5W0ZMQUcgPyAnYmluZCcgOiAndW5iaW5kJ10oJ21vdXNld2hlZWwnLCBvbk1vdXNld2hlZWwpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdtb3VzZXdoZWVsQWN0aXZhdGVkRkxBRzogJyArIEZMQUcpO1xuXHRcdFx0XHRtb3VzZXdoZWVsQWN0aXZhdGVkRkxBRyA9IEZMQUc7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGxpc3RlblRvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCEkc3RpY2t5LmRhdGEoJ2Rpc2FibGVkJykpIHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnbGlzdGVuVG9wJyk7XG5cdFx0XHRcdHN0aWNreVRvcCA9IChjbG9uZUFjdGl2YXRlZEZMQUcgPyAkc3RpY2t5Q2xvbmUgOiAkc3RpY2t5KS5vZmZzZXQoKS50b3A7XG5cdFx0XHRcdC8vc2Nyb2xsVG9wID0gJHdpbmRvdy5zY3JvbGxUb3AoKTtcbiAgICAgICAgc2Nyb2xsVG9wID0gTWF0aC5tYXgoTWF0aC5taW4oJHdpbmRvdy5zY3JvbGxUb3AoKSwgJGRvY3VtZW50LmhlaWdodCgpIC0gJHdpbmRvdy5oZWlnaHQoKSksIDApO1xuXHRcdFx0XHRzY3JvbGxMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4oJHdpbmRvdy5zY3JvbGxMZWZ0KCksICRkb2N1bWVudC53aWR0aCgpIC0gJHdpbmRvdy53aWR0aCgpKSwgMCk7XG5cdFx0XHRcdC8vLy8vL2NvbnNvbGUubG9nKCdzdGlja3lUb3A6ICcrc3RpY2t5VG9wLCdzY3JvbGxUb3A6ICcrc2Nyb2xsVG9wKTtcblx0XHRcdFx0YWN0aXZhdGVDbG9uZShzdGlja3lUb3AgLSAkc3RpY2t5LmRhdGEoJ3N0aWNreWVhaC1vZmZzZXQnKSAtIHN0b3BwZXJIZWlnaHQgPD0gc2Nyb2xsVG9wKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgbGlzdGVuSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvLy8vY29uc29sZS5sb2coJ2xpc3RlbkhlaWdodCcsIGNsb25lQWN0aXZhdGVkRkxBRyk7XG5cdFx0XHRpZiAoISRzdGlja3kuZGF0YSgnZGlzYWJsZWQnKSkge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdsaXN0ZW5IZWlnaHQnKTtcblx0XHRcdFx0c3RpY2t5SGVpZ2h0ID0gJHN0aWNreUNsb25lLmhlaWdodCgpICsgJHN0aWNreS5kYXRhKCdzdGlja3llYWgtb2Zmc2V0JykgKiAyO1xuXHRcdFx0XHR3aW5kb3dIZWlnaHQgPSAkd2luZG93LmhlaWdodCgpO1xuXHRcdFx0XHRoZWlnaHREaWZmID0gc3RpY2t5SGVpZ2h0IC0gd2luZG93SGVpZ2h0O1xuXHRcdFx0XHRpZiAoY2xvbmVBY3RpdmF0ZWRGTEFHKSB7XG5cdFx0XHRcdFx0YWN0aXZhdGVNb3VzZXdoZWVsKGhlaWdodERpZmYgPj0gMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YWN0aXZhdGVNb3VzZXdoZWVsKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdCRzdGlja3lcblx0XHRcdFx0LmJpbmQoJ3N0aWNreWVhaDpkaXNhYmxlJywgZnVuY3Rpb24oKXtcblx0XHRcdFx0XHQkc3RpY2t5LmRhdGEoeydkaXNhYmxlZCc6IHRydWV9KS5hZGRDbGFzcygnc3RpY2t5ZWFoX2Rpc2FibGVkJyk7XG5cdFx0XHRcdFx0Ly8vL2NvbnNvbGUubG9nKCdpbnNpZGUnLCAkc3RpY2t5LmRhdGEoJ2Rpc2FibGVkJykpO1xuXHRcdFx0XHRcdGFjdGl2YXRlQ2xvbmUoZmFsc2UpO1xuXHRcdFx0XHRcdGFjdGl2YXRlTW91c2V3aGVlbChmYWxzZSk7XG5cdFx0XHRcdFx0c3RpY2t5LnRyaWdnZXIoJ3N0aWNreWVhaDpyZWZsb3cnKTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmJpbmQoJ3N0aWNreWVhaDplbmFibGUnLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdCRzdGlja3kuZGF0YSh7J2Rpc2FibGVkJzogZmFsc2V9KS5yZW1vdmVDbGFzcygnc3RpY2t5ZWFoX2Rpc2FibGVkJyk7XG5cdFx0XHRcdFx0Ly8vL2NvbnNvbGUubG9nKCdpbnNpZGUnLCAkc3RpY2t5LmRhdGEoJ2Rpc2FibGVkJykpO1xuXHRcdFx0XHRcdHN0aWNreS50cmlnZ2VyKCdzdGlja3llYWg6cmVmbG93Jyk7XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5iaW5kKCdzdGlja3llYWg6cmVmbG93JywgZnVuY3Rpb24oZSwgb3JpZ2luYWxFdmVudCl7XG5cdFx0XHRcdFx0aWYgKCFvcmlnaW5hbEV2ZW50KSB7XG5cdFx0XHRcdFx0XHRnZXRTdG9wcGVySGVpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxpc3RlblRvcCgpO1xuXHRcdFx0XHRcdGlmICghb3JpZ2luYWxFdmVudCB8fCBvcmlnaW5hbEV2ZW50LnR5cGUgPT0gJ3Jlc2l6ZScpIHtcblx0XHRcdFx0XHRcdGxpc3RlbkhlaWdodCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLy8vY29uc29sZS5sb2cob3JpZ2luYWxFdmVudCk7XG5cdFx0XHRcdH0pO1xuXG5cblxuXHR9XG5cblx0JC5zdGlja3llYWggPSBmdW5jdGlvbihvKSB7XG5cdFx0byA9ICQuZXh0ZW5kKHtcblx0XHRcdHNjcm9sbDogdHJ1ZVxuXHRcdH0sIG8pO1xuXG5cdFx0aWYgKCFzdG9wRkxBRykge1xuXHRcdFx0c3RpY2t5ID0gJCgnLnN0aWNreWVhaCcpO1xuXG4gICAgICBzdGlja3lcblx0XHRcdFx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICEkKHRoaXMpLmRhdGEoJ2luaXRpYWxpemVkJyk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQuZGF0YSh7aW5pdGlhbGl6ZWQ6IHRydWV9KVxuXHRcdFx0XHRcdC5lYWNoKGZ1bmN0aW9uKGkpe1xuXHRcdFx0XHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKTtcblx0XHRcdFx0XHRcdHZhciBwdXNoID0gJHRoaXMuYXR0cignZGF0YS1zdGlja3llYWgtcHVzaCcpO1xuXHRcdFx0XHRcdFx0Ly8vL2NvbnNvbGUubG9nKHB1c2gpO1xuXHRcdFx0XHRcdFx0aWYgKHB1c2gpIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFwdXNoZXJzW3B1c2hdKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaGVyc1twdXNoXSA9ICQoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwdXNoZXJzW3B1c2hdLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0XHRcdCR0aGlzLmRhdGEoeydzdGlja3llYWgtcHVzaCc6IHB1c2h9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBncm91cCA9ICR0aGlzLmF0dHIoJ2RhdGEtc3RpY2t5ZWFoLWdyb3VwJyk7XG5cdFx0XHRcdFx0XHRpZiAoZ3JvdXApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCFncm91cHNbZ3JvdXBdKSB7XG5cdFx0XHRcdFx0XHRcdFx0Z3JvdXBzW2dyb3VwXSA9ICQoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRncm91cHNbZ3JvdXBdLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0XHRcdCR0aGlzLmRhdGEoeydzdGlja3llYWgtZ3JvdXAnOiBncm91cH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0JHRoaXMuZGF0YSh7XG5cdFx0XHRcdFx0XHRcdCdzdGlja3llYWgtb2Zmc2V0JzogTnVtYmVyKCR0aGlzLmF0dHIoJ2RhdGEtc3RpY2t5ZWFoLW9mZnNldCcpIHx8IDApLFxuXHRcdFx0XHRcdFx0XHQnc3RpY2t5ZWFoLWNsYXNzJzogJHRoaXMuYXR0cignZGF0YS1zdGlja3llYWgtY2xhc3MnKSB8fCAnJ1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHQvLy8vY29uc29sZS5sb2coaSwgJHRoaXMuZGF0YSgnc3RpY2t5ZWFoLW9mZnNldCcpKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5lYWNoKGZ1bmN0aW9uKGkpIHtcblx0XHRcdFx0XHRcdHN0aWNreWVhaCgkKHRoaXMpLCBpLCBvKTtcblx0XHRcdFx0XHR9KTtcblxuICAgICAgc3RpY2t5LnRyaWdnZXIoJ3N0aWNreWVhaDpyZWZsb3cnKTtcblx0XHR9XG5cdH1cblxuXHQkKGZ1bmN0aW9uKCl7XG5cdFx0JC5zdGlja3llYWgoKTtcblx0fSk7XG5cblxuXHQkd2luZG93LmJpbmQoJ3Jlc2l6ZSBzY3JvbGwnLCBmdW5jdGlvbihlKXtcblx0XHQvLy8vLy9jb25zb2xlLmxvZygncmVzaXplIG9yIHNjcm9sbCcpO1xuICAgIHN0aWNreS50cmlnZ2VyKCdzdGlja3llYWg6cmVmbG93JywgZSk7XG5cdH0pO1xufSkoalF1ZXJ5KTsiLCJhcHAuY29udHJvbGxlciBcIkRlYnVnQ3RybFwiLCAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgYXBpLCBsb2csIEVudW1zLCBEZXZpY2UsIFJvdXRpbmdfbW9kZWxfYXBwbGllciwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIHRyYW5zbGF0ZSwgR1VJLCBTdGF0dXMpIC0+XG5cbiAgICAjINC/0YDQtdC+0LHRgNCw0LfQvtCy0LDRgtGMINC+0YLQstC10YIgSnNvbiBScGMg0LIg0YfQtdC70L7QstC10LrQvi3Rh9C40YLQsNC10LzRg9GOINGE0L7RgNC80YNcbiAgICAkc2NvcGUubWluaWZ5X3Jlc3BvbnNlID0gKHJlc3BvbnNlKSAtPlxuICAgICAgICByZXNwb25zZSA9IGFuZ3VsYXIuY29weShyZXNwb25zZSlcblxuICAgICAgICAjINGD0LHRgNCw0YLRjCDQvdC1INC90YPQttC90YvQtSDQv9C+0LvRj1xuICAgICAgICBkZWxldGUgcmVzcG9uc2UuanNvbnJwY1xuICAgICAgICBkZWxldGUgcmVzcG9uc2UuaWRcbiMg0J7RgtC60LDQt9GL0LLQsNC10LzRgdGPINC+0YIg0YHQv9C10YbQuNGE0LjQutCw0YbQuNC4IGpzb24gcnBjINC40Lct0LfQsCDQtdGRINC90LXRgdC+0LHQu9GO0LTQtdC90LjRjyA6KFxuIyAgICAgICAgaWYgcmVzcG9uc2UucmVzdWx0ICYmIHJlc3BvbnNlLmVycm9yXG4jICAgICAgICAgICAgINC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINGC0LDQutC+0LPQvlxuIyAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKc29uIFJwYyByZXNwb25zZScpXG4gICAgICAgIGlmIHJlc3BvbnNlLnJlc3VsdFxuICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZS5yZXN1bHRcbiAgICAgICAgZWxzZSBpZiByZXNwb25zZS5lcnJvclxuICAgICAgICAgICAgcmVzcG9uc2UgPSB7IGVycm9yOiByZXNwb25zZS5lcnJvciB9XG4jICAgICAgICBlbHNlXG4jICAgICAgICAgICAgINC90LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINGC0LDQutC+0LPQvlxuIyAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKc29uIFJwYyByZXNwb25zZScpXG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG5cbiAgICAjINC/0L7QutCw0LfQsNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOINC+0YjQuNCx0LrRg1xuICAgICRzY29wZS5wcm9jZXNzX2Vycm9yID0gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSAtPlxuICAgICAgICBtZXNzYWdlID0gdHJhbnNsYXRlICdwYWdlLmRlYnVnLmVycm9yLmdlbmVyaWMnLCB7XG4gICAgICAgICAgICBzdGF0dXMgOiBzdGF0dXMgfHwgJ1tubyBzdGF0dXNdJ1xuICAgICAgICAgICAgZGF0YSAgIDogZGF0YSB8fCAnW25vIGRlc2NyaXB0aW9uXSdcbiAgICAgICAgfVxuXG4gICAgICAgIGFsZXJ0KG1lc3NhZ2UpXG5cbiAgICAjINC+0YLQv9GA0LDQstC40YLRjCBKc29uIFJwYyDQutC+0LzQsNC90LTRg1xuICAgICRzY29wZS5zdWJtaXQgPSAtPlxuICAgICAgICAjINCy0YvQudGC0LgsINC10YHQu9C4INC10YHRgtGMINC+0YjQuNCx0LrQuCDQsiDRhNC+0YDQvNC1XG4gICAgICAgIHJldHVybiBpZiAkc2NvcGUuZm9ybS4kaW52YWxpZFxuXG4gICAgICAgICMg0L7Rh9C40YHRgtC40YLRjCDQv9GA0LXQtNGL0LTRg9GJ0LjQuSDQstGL0LLQvtC0INC60L7QvNCw0L3QtNGLIGpzb24gcnBjXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0TmFtZSgpXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0TW9kZSgndmlldycpXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0KClcblxuICAgICAgICAjINGB0L7Qt9C00LDRkdGCIEpzb24gUnBjINC30LDQv9GA0L7RgSDQuNC3INC60L7QvNCw0L3QtNGLINC4INC10ZEg0L/QsNGA0LDQvNC10YDRgtC+0LJcbiAgICAgICAgdHJ5XG4gICAgICAgICAgICByZXF1ZXN0ID1cbiAgICAgICAgICAgICAgICBqc29ucnBjIDogXCIyLjBcIlxuICAgICAgICAgICAgICAgIG1ldGhvZCAgOiAkc2NvcGUuY29tbWFuZFxuICAgICAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCBKU09OINC+0LHRitC10LrRgiDQuNC3INGC0LXQutGB0YLQvtCy0L7Qs9C+INGA0LXQtNCw0LrRgtC+0YDQsFxuICAgICAgICAgICAgICAgIHBhcmFtcyAgOiAkc2NvcGUuY29tbWFuZF9pbnB1dF9lZGl0b3IuZ2V0KClcbiAgICAgICAgICAgICAgICBpZCAgICAgIDogMVxuICAgICAgICBjYXRjaCBlcnJvclxuICAgICAgICAgICAgaWYgZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvclxuICAgICAgICAgICAgICAgIGFsZXJ0KHRyYW5zbGF0ZSgncGFnZS5kZWJ1Zy5jb21tYW5kLmVycm9yLmpzb24nLCB7IGVycm9yOiBlcnJvci5zdGFjayB9KSlcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yIGVycm9yLnN0YWNrXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JcblxuICAgICAgICAkc2NvcGUuYnVzeSA9IHllc1xuICAgICAgICAkc2NvcGUuYnVzeV9jb21tYW5kID0geWVzXG5cbiAgICAgICAgIyDQv9C+0YHQu9Cw0YLRjCBKc29uIFJwYyDQutC+0LzQsNC90LTRgyDQvdCwIGJhY2tlbmRcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaScsIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKS5zdWNjZXNzIChyZXNwb25zZSkgLT5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwi4oaQXCIsIHJlc3BvbnNlKVxuICAgICAgICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0ID0gcmVzcG9uc2VcblxuICAgICAgICAgICAgIyDQv9C+0LrQsNC30LDRgtGMINGA0LXQt9GD0LvRjNGC0LDRgiDQstGL0L/QvtC70L3QtdC90LjRjyDQutC+0LzQsNC90LTRiyDQsiDRgdC+0YHQtdC00L3QtdC8INC/0L7Qu9C1INCy0YvQstC+0LTQsFxuICAgICAgICAgICAgJHNjb3BlLnZpZXdfY29tbWFuZF9vdXRwdXQoKVxuICAgICAgICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvci5leHBhbmRBbGwoKVxuXG4gICAgICAgIC5lcnJvcigkc2NvcGUucHJvY2Vzc19lcnJvcilcblxuICAgICAgICAuZmluYWxseSAtPlxuICAgICAgICAgICAgJHNjb3BlLmJ1c3kgPSBub1xuICAgICAgICAgICAgJHNjb3BlLmJ1c3lfY29tbWFuZCA9IG5vXG5cbiAgICAjINC/0L7QutCw0LfQsNGC0Ywg0YDQtdC30YPQu9GM0YLQsNGCINCy0YvQv9C+0LvQvdC10L3QuNGPIEpzb24gUnBjINC60L7QvNCw0L3QtNGLINCyINGB0L7RgdC10LTQvdC10Lwg0L/QvtC70LUg0LLRi9Cy0L7QtNCwXG4gICAgJHNjb3BlLnZpZXdfY29tbWFuZF9vdXRwdXQgPSAtPlxuICAgICAgICByZXNwb25zZSA9ICRzY29wZS5taW5pZnlfcmVzcG9uc2UoJHNjb3BlLmNvbW1hbmRfb3V0cHV0KVxuXG4gICAgICAgICMgaWYgcmVzcG9uc2UuZXJyb3IgJiYgcmVzcG9uc2UucmVzdWx0XG4gICAgICAgICMgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0TmFtZSgncmVzcG9uc2UnKVxuICAgICAgICAjIGVsc2UgaWYgcmVzcG9uc2UuZXJyb3IgJiYgbm90IHJlc3BvbnNlLnJlc3VsdFxuICAgICAgICAjICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldE5hbWUoJ2Vycm9yJylcbiAgICAgICAgIyAgICAgcmVzcG9uc2UgPSByZXNwb25zZS5lcnJvclxuICAgICAgICAjIGVsc2VcbiAgICAgICAgIyAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvci5zZXROYW1lKCdyZXN1bHQnKVxuXG4gICAgICAgICMg0YPQv9GA0L7RidC10L3QuNC1INCy0YvQstC+0LTQsCDQvtGI0LjQsdC60LhcbiAgICAgICAgaWYgcmVzcG9uc2UuZXJyb3JcbiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2UuZXJyb3JcblxuICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldChyZXNwb25zZSlcblxuICAgICMg0L7RgtC/0YDQsNCy0LjRgtGMIGJhdGNoIEpzb24gUnBjINC60L7QvNCw0L3QtFxuICAgICRzY29wZS5zdWJtaXRfYmF0Y2ggPSAtPlxuICAgICAgICAjINC10YHQu9C4INC10YHRgtGMINC60LDQutC40LUt0YLQviDQvtGI0LjQsdC60Lgg0LIg0YTQvtGA0LzQtSAtINCy0YvQudGC0LhcbiAgICAgICAgcmV0dXJuIGlmICRzY29wZS5iYXRjaF9mb3JtLiRpbnZhbGlkXG5cbiAgICAgICAgIyDQvtGH0LjRgdGC0LjRgtGMINC/0YDQtdC00YvQtNGD0YnQuNC5INCy0YvQstC+0LQganNvbiBycGMgYmF0Y2gn0LBcbiAgICAgICAgJHNjb3BlLmJhdGNoX291dHB1dF9lZGl0b3Iuc2V0TW9kZSgndmlldycpXG4gICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldCgpXG5cbiAgICAgICAgIyDRgdGH0ZHRgtGH0LjQuiBKc29uIFJwYyDQutC+0LzQsNC90LRcbiAgICAgICAgaWQgPSAxXG5cbiAgICAgICAgIyDRgdC+0LfQtNCw0ZHRgiBKc29uIFJwYyDQt9Cw0L/RgNC+0YEg0LjQtyDQutC+0LzQsNC90LTRiyDQuCDQtdGRINC/0LDRgNCw0LzQtdGA0YLQvtCyXG4gICAgICAgIHJlcXVlc3QgPSAoY29tbWFuZCwgY29tbWFuZF9pbnB1dCkgLT5cbiAgICAgICAgICAgIGRhdGEgPVxuICAgICAgICAgICAgICAgIGpzb25ycGMgOiBcIjIuMFwiXG4gICAgICAgICAgICAgICAgbWV0aG9kICA6IGNvbW1hbmRcbiAgICAgICAgICAgICAgICBwYXJhbXMgIDogY29tbWFuZF9pbnB1dFxuICAgICAgICAgICAgICAgIGlkICAgICAgOiBpZCsrXG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhXG5cbiAgICAgICAgIyDQvNCw0YHRgdC40LIg0LfQsNC/0YDQvtGB0L7QsiBKc29uIFJwY1xuICAgICAgICBiYXRjaCA9IG51bGxcblxuICAgICAgICB0cnlcbiAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCBKU09OINC+0LHRitC10LrRgiDQuNC3INGC0LXQutGB0YLQvtCy0L7Qs9C+INGA0LXQtNCw0LrRgtC+0YDQsFxuICAgICAgICAgICAgYmF0Y2hfanNvbiA9ICRzY29wZS5iYXRjaF9pbnB1dF9lZGl0b3IuZ2V0KClcblxuICAgICAgICAgICAgIyDQtdGB0LvQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0LLQstGR0Lsg0L3QtSDQvNCw0YHRgdC40LIgSlNPTifQvtCyLCDQsCDQv9GA0L7RgdGC0L7QuSBKU09OXG4gICAgICAgICAgICBpZiBub3QgYmF0Y2hfanNvbiBpbnN0YW5jZW9mIEFycmF5XG4gICAgICAgICAgICAgICAgIyDQv9C+0L/RgNC+0LHQvtCy0LDRgtGMINC+0LHQtdGA0L3Rg9GC0Ywg0LXQs9C+INCyINC80LDRgdGB0LjQsiwg0LXRgdC70Lgg0Y3RgtC+INC+0LTQvdCwIEpTT04gUlBDINC60L7QvNCw0L3QtNCwXG4gICAgICAgICAgICAgICAgaWYgYmF0Y2hfanNvbi5tZXRob2Q/XG4gICAgICAgICAgICAgICAgICAgIGJhdGNoX2pzb24gPSBbYmF0Y2hfanNvbl1cbiAgICAgICAgICAgICAgICAjINC40L3QsNGH0LUgLSDQv9C+0LrQsNC30LDRgtGMINC+0YjQuNCx0LrRg1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQodHJhbnNsYXRlKCdwYWdlLmRlYnVnLmNvbW1hbmRzLmVycm9yLmJhdGNoX2Zvcm1hdCcpKVxuXG4gICAgICAgICAgICAjINGB0L7Qt9C00LDRgtGMIEpzb24gUnBjINC60L7QvNCw0L3QtNGLINC40Lcg0L3QsNCx0L7RgNCwINC60L7QvNCw0L3QtCDQuCDQuNGFINC/0LDRgNCw0LzQtdGC0YDQvtCyXG4gICAgICAgICAgICBiYXRjaCA9IGJhdGNoX2pzb24ubWFwKChjb21tYW5kKSAtPiByZXF1ZXN0KGNvbW1hbmQubWV0aG9kLCBjb21tYW5kLnBhcmFtcykpXG5cbiAgICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgICAgICMg0LXRgdC70Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0LLRkdC7INC90LUg0LzQsNGB0YHQuNCyIEpTT04n0L7Qsiwg0LAsINC90LDQv9GA0LjQvNC10YAsIEpTT04t0Ysg0YfQtdGA0LXQtyDQt9Cw0L/Rj9GC0YPRjlxuICAgICAgICAgICAgaWYgZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvclxuICAgICAgICAgICAgICAgIGFsZXJ0KHRyYW5zbGF0ZSgncGFnZS5kZWJ1Zy5jb21tYW5kcy5lcnJvci5iYXRjaF9qc29uJywgeyBlcnJvcjogZXJyb3Iuc3RhY2sgfSkpXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciBlcnJvci5zdGFja1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yXG5cbiAgICAgICAgJHNjb3BlLmJ1c3kgPSB5ZXNcbiAgICAgICAgJHNjb3BlLmJ1c3lfYmF0Y2ggPSB5ZXNcblxuICAgICAgICAjINC/0L7RgdC70LDRgtGMIEpzb24gUnBjINC60L7QvNCw0L3QtNGLINC90LAgYmFja2VuZFxuICAgICAgICAkaHR0cC5wb3N0KCcvYXBpJywgSlNPTi5zdHJpbmdpZnkoYmF0Y2gpKS5zdWNjZXNzIChyZXNwb25zZSkgLT5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwi4oaQXCIsIHJlc3BvbnNlKVxuICAgICAgICAgICAgJHNjb3BlLmJhdGNoX291dHB1dCA9IHJlc3BvbnNlXG5cbiAgICAgICAgICAgICMg0L/QvtC60LDQt9Cw0YLRjCDRgNC10LfRg9C70YzRgtCw0YIg0LLRi9C/0L7Qu9C90LXQvdC40Y8gYmF0Y2gn0LAg0LIg0YHQvtGB0LXQtNC90LXQvCDQv9C+0LvQtSDQstGL0LLQvtC00LBcbiAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldCgkc2NvcGUuYmF0Y2hfb3V0cHV0Lm1hcCgkc2NvcGUubWluaWZ5X3Jlc3BvbnNlKSlcbiAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLmV4cGFuZEFsbCgpXG5cbiAgICAgICAgLmVycm9yKCRzY29wZS5wcm9jZXNzX2Vycm9yKVxuXG4gICAgICAgIC5maW5hbGx5IC0+XG4gICAgICAgICAgICAkc2NvcGUuYnVzeSA9IG5vXG4gICAgICAgICAgICAkc2NvcGUuYnVzeV9iYXRjaCA9IG5vXG5cbiAgICAjINGA0LXQt9GD0LvRjNGC0LDRgiDQstGL0L/QvtC70L3QtdC90LjRjyBKc29uIFJwYyDQutC+0LzQsNC90LTRiyDQvNC+0LbQvdC+INC/0L7QutCw0LfRi9Cy0LDRgtGMINCyINGA0LDQt9C90YvRhSDRgNC10LbQuNC80LDRhTog0LrQvtC00LAg0Lgg0LTRgNC10LLQsFxuICAgICRzY29wZS5zd2l0Y2hfY29tbWFuZF9vdXRwdXRfbW9kZSA9IC0+XG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9tb2RlID0gc3dpdGNoICRzY29wZS5jb21tYW5kX291dHB1dF9tb2RlXG4gICAgICAgICAgICB3aGVuICdjb2RlJ1xuICAgICAgICAgICAgICAgICRzY29wZS52aWV3X2NvbW1hbmRfb3V0cHV0KClcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ3ZpZXcnKVxuICAgICAgICAgICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3IuZXhwYW5kQWxsKClcbiAgICAgICAgICAgICAgICAndHJlZSdcbiAgICAgICAgICAgIHdoZW4gJ3RyZWUnXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvci5zZXRNb2RlKCdjb2RlJylcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldChhbmd1bGFyLmNvcHkoJHNjb3BlLmNvbW1hbmRfb3V0cHV0KSlcbiAgICAgICAgICAgICAgICAnY29kZSdcblxuICAgICMg0YDQtdC30YPQu9GM0YLQsNGCINCy0YvQv9C+0LvQvdC10L3QuNGPIEpzb24gUnBjIGJhdGNoJ9CwINC80L7QttC90L4g0L/QvtC60LDQt9GL0LLQsNGC0Ywg0LIg0YDQsNC30L3Ri9GFINGA0LXQttC40LzQsNGFOiDQutC+0LTQsCDQuCDQtNGA0LXQstCwXG4gICAgJHNjb3BlLnN3aXRjaF9iYXRjaF9vdXRwdXRfbW9kZSA9IC0+XG4gICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfbW9kZSA9IHN3aXRjaCAkc2NvcGUuYmF0Y2hfb3V0cHV0X21vZGVcbiAgICAgICAgICAgIHdoZW4gJ2NvZGUnXG4gICAgICAgICAgICAgICAgJHNjb3BlLmJhdGNoX291dHB1dF9lZGl0b3Iuc2V0KCRzY29wZS5iYXRjaF9vdXRwdXQubWFwKCRzY29wZS5taW5pZnlfcmVzcG9uc2UpKVxuICAgICAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ3ZpZXcnKVxuICAgICAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLmV4cGFuZEFsbCgpXG4gICAgICAgICAgICAgICAgJ3RyZWUnXG4gICAgICAgICAgICB3aGVuICd0cmVlJ1xuICAgICAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ2NvZGUnKVxuICAgICAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldChhbmd1bGFyLmNvcHkoJHNjb3BlLmJhdGNoX291dHB1dCkpXG4gICAgICAgICAgICAgICAgJ2NvZGUnXG5cbiAgICAjINC+0LHQvdC+0LLQuNGC0YwgSnNvbiBScGMgYmF0Y2gg0L/QvtC70L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDQttC10LvQtdC30LrQuFxuICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9jb25maWd1cmF0aW9uX2JhdGNoID0gLT5cbiAgICAgICAgRGV2aWNlLnJlZnJlc2hfcG9ydHMoKVxuXG4gICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICBSb3V0aW5nX21vZGVsLmZyb21fZGV2aWNlKClcblxuICAgICAgICAudGhlbiAocm91dGluZ19tb2RlbCkgLT5cbiAgICAgICAgICAgIFJvdXRpbmdfbW9kZWxfYXBwbGllci5nZW5lcmF0ZV9jb25maWd1cmF0aW9uX2JhdGNoKHJvdXRpbmdfbW9kZWwpXG5cbiAgICAjINC+0LHQvdC+0LLQuNGC0Ywg0LLRi9Cy0L7QtCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0LbQtdC70LXQt9C60LhcbiAgICAkc2NvcGUucmVmcmVzaF9kZXZpY2VfY29uZmlndXJhdGlvbiA9IC0+XG4gICAgICAgIGlmICRzY29wZS5yZWZyZXNoaW5nX2RldmljZV9jb25maWd1cmF0aW9uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FscmVhZHkgcmVmcmVzaGluZyBjb25maWd1cmF0aW9uJylcblxuICAgICAgICAkc2NvcGUucmVmcmVzaGluZ19kZXZpY2VfY29uZmlndXJhdGlvbiA9IHllc1xuXG4gICAgICAgICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9qc29uID0ge31cblxuICAgICAgICBtb2RlbCA9IHt9XG5cbiAgICAgICAga2V5X2ZvciA9IChzZWN0aW9uKSAtPiB0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuY29uZmlndXJhdGlvbi4nICsgc2VjdGlvbilcblxuICAgICAgICBtb2RlbFtrZXlfZm9yKCdwb3J0cycpXSAgICAgICAgID0ge31cbiAgICAgICAgbW9kZWxba2V5X2ZvcignaGFzaF9wcm9maWxlJyldICA9IG51bGxcbiAgICAgICAgbW9kZWxba2V5X2ZvcignbGJnJyldICAgICAgICAgICA9IHt9XG4gICAgICAgIG1vZGVsW2tleV9mb3IoJ21pcnJvcl9ncm91cHMnKV0gPSB7fVxuICAgICAgICBtb2RlbFtrZXlfZm9yKCdtYXBwZXJzJyldICAgICAgID0ge31cbiAgICAgICAgbW9kZWxba2V5X2ZvcigncG9ydHNldCcpXSAgICAgICA9IHt9XG4gICAgICAgIG1vZGVsW2tleV9mb3IoJ2FjbCcpXSAgICAgICAgICAgPSB7fVxuICAgICAgICBtb2RlbFtrZXlfZm9yKCduZXR3b3JrJyldICAgICAgID0gbnVsbFxuICAgICAgICBtb2RlbFtrZXlfZm9yKCdyb3V0aW5nJyldICAgICAgID0gbnVsbFxuICAgICAgICBtb2RlbFtrZXlfZm9yKCd0YV9ydWxlcycpXSAgICAgID0gbnVsbFxuICAgICAgICBtb2RlbFtrZXlfZm9yKCd1c2VycycpXSAgICAgICAgID0gbnVsbFxuXG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZG9fd2l0aF9wb3J0X2xvY2sgLT5cbiAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCDQstGB0LUgTEJHXG5cbiAgICAgICAgICAgIGFwaS5jYWxsKCdnZXRMQkdMaXN0JykudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgIGFwaS5iZWdpbigpXG5cbiAgICAgICAgICAgICAgICBmb3IgbGJnX2lkIGluIHJlc3VsdC5sYmdfaWRzXG4gICAgICAgICAgICAgICAgICAgIGRvIChsYmdfaWQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuY2FsbCgnZ2V0TEJHJywgeyBsYmdfaWQ6IGxiZ19pZCB9KS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5sYmdfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFtrZXlfZm9yKCdsYmcnKV1bbGJnX2lkXSA9IHJlc3VsdFxuXG4gICAgICAgICAgICAgICAgYXBpLmVuZCgpXG5cbiAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCDQstGB0LUgTWlycm9yaW5nIEdyb3VwXG5cbiAgICAgICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICAgICAgYXBpLmNhbGwoJ2dldE1pcnJvckxpc3QnKVxuXG4gICAgICAgICAgICAudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgIGFwaS5iZWdpbigpXG5cbiAgICAgICAgICAgICAgICBmb3IgbWlycm9yX2lkIGluIHJlc3VsdC5taXJyb3JfaWRzXG4gICAgICAgICAgICAgICAgICAgIGRvIChtaXJyb3JfaWQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuY2FsbCgnZ2V0TWlycm9yJywgeyBtaXJyb3JfaWQ6IG1pcnJvcl9pZCB9KS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5taXJyb3JfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFtrZXlfZm9yKCdtaXJyb3JfZ3JvdXBzJyldW21pcnJvcl9pZF0gPSByZXN1bHRcblxuICAgICAgICAgICAgICAgIGFwaS5lbmQoKVxuXG4gICAgICAgICAgICAjcG9ydHNldCBsaXN0XG4gICAgICAgICAgICAudGhlbiAtPlxuICAgICAgICAgICAgICAgIGFwaS5iZWdpbigpXG4gICAgICAgICAgICAgICAgYXBpLmNhbGwoJ2dldEFDTFBvcnRTZXRMaXN0JykudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgICAgICBtb2RlbFtrZXlfZm9yKCdwb3J0c2V0JyldID0gcmVzdWx0XG5cbiAgICAgICAgICAgICAgICBhcGkuZW5kKClcblxuICAgICAgICAgICAgIyDQv9C+0LvRg9GH0LjRgtGMINCy0YHQtSBNYXBwZXIn0YtcbiAgICAgICAgICAgIC50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgYXBpLmJlZ2luKClcblxuICAgICAgICAgICAgICAgIGZvciB0aXRsZSwgbWFwcGVyIG9mIEVudW1zLk1hcHBlclxuICAgICAgICAgICAgICAgICAgICBkbyAodGl0bGUsIG1hcHBlcikgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5jYWxsKCdnZXRNYXBwZXInLCB7IG1hcHBlcl9pZDogbWFwcGVyLmlkIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFtrZXlfZm9yKCdtYXBwZXJzJyldW21hcHBlci5pZCArICcgJyArIHRpdGxlXSA9IHJlc3VsdC5tYXBwZXJfYXJyYXlcblxuICAgICAgICAgICAgICAgIGFwaS5lbmQoKVxuXG4gICAgICAgICAgICAudGhlbiAtPlxuICAgICAgICAgICAgICAgIGFwaS5jYWxsKCdnZXRSdWxlc0xpc3QnKS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsW2tleV9mb3IoJ3RhX3J1bGVzJyldID0gcmVzdWx0XG5cbiAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCDQstGB0LUgQUNMJ9C4XG5cbiAgICAgICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICAgICAgYXBpLmNhbGwoJ2dldEFDTExpc3QnKVxuXG4gICAgICAgICAgICAudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgIGFwaS5iZWdpbigpXG5cbiAgICAgICAgICAgICAgICBmb3IgYWNsX2lkIGluIHJlc3VsdC5hY2xfaWRzXG4gICAgICAgICAgICAgICAgICAgIGRvIChhY2xfaWQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuY2FsbCgnZ2V0QUNMJywgeyBhY2xfaWQ6IGFjbF9pZCB9KS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5hY2xfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFtrZXlfZm9yKCdhY2wnKV1bYWNsX2lkXSA9IHJlc3VsdFxuXG4gICAgICAgICAgICAgICAgIyDQv9C+0LvRg9GH0LjRgtGMINC90LDRgdGC0YDQvtC50LrQuCDQv9C+0YDRgtC+0LJcblxuICAgICAgICAgICAgICAgIGFwaS5jYWxsKCdnZXRTd2l0Y2hJbmZvJykudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgICAgICBmb3IgcG9ydCBpbiByZXN1bHQuUG9ydHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gcG9ydC5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBvcnQuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsW2tleV9mb3IoJ3BvcnRzJyldW2lkXSA9IHBvcnRcblxuICAgICAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCDRgdC10YLQtdCy0YvQtSDQvdCw0YHRgtGA0L7QudC60LhcblxuICAgICAgICAgICAgICAgIGFwaS5jYWxsKCdnZXROZXRDb25maWcnKS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsW2tleV9mb3IoJ25ldHdvcmsnKV0gPSByZXN1bHRcblxuICAgICAgICAgICAgICAgICMg0L/QvtC70YPRh9C40YLRjCBoYXNoIHByb2ZpbGUgKExCRylcblxuICAgICAgICAgICAgICAgIGFwaS5jYWxsKCdnZXREZWZhdWx0SGFzaFByb2ZpbGUnKS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsW2tleV9mb3IoJ2hhc2hfcHJvZmlsZScpXSA9IHJlc3VsdFxuXG4gICAgICAgICAgICAgICAgIyDQv9C+0LvRg9GH0LjRgtGMINC/0YDQsNCy0LjQu9CwIEd1aVxuXG4gICAgICAgICAgICAgICAgYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywgeyBkYXRhYmFzZTogJ3N5c3RlbScsIGZpbGU6ICdyb3V0aW5nLmpzb24nIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWxba2V5X2Zvcigncm91dGluZycpXSA9IHJlc3VsdFxuXG4gICAgICAgICAgICAgICAgIyDQv9C+0LvRg9GH0LjRgtGMINC90LDRgdGC0YDQvtC50LrQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuVxuXG4gICAgICAgICAgICAgICAgYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywgeyBkYXRhYmFzZTogJ3N5c3RlbScsIGZpbGU6ICd1c2Vycy5qc29uJyB9KS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsW2tleV9mb3IoJ3VzZXJzJyldID0gcmVzdWx0XG5cbiAgICAgICAgICAgICAgICBhcGkuZW5kKClcblxuICAgICAgICAgICAgLnRoZW4gLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuZGV2aWNlX2NvbmZpZ3VyYXRpb25fanNvbiA9IG1vZGVsXG5cbiAgICAgICAgICAgICAgICAjINC+0LHQvdC+0LLQuNGC0YwgSnNvbiBScGMgYmF0Y2gg0L/QvtC70L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDQttC10LvQtdC30LrQuFxuIyAgICAgICAgICAgICAgICAkc2NvcGUucmVmcmVzaF9kZXZpY2VfY29uZmlndXJhdGlvbl9iYXRjaCgpXG5cbiAgICAgICAgICAgIC50aGVuIChiYXRjaCkgLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuZGV2aWNlX2NvbmZpZ3VyYXRpb25fYmF0Y2ggPSBiYXRjaFxuXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICBTdGF0dXMuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKVxuXG4gICAgICAgIC5maW5hbGx5IC0+XG4gICAgICAgICAgICAkc2NvcGUucmVmcmVzaGluZ19kZXZpY2VfY29uZmlndXJhdGlvbiA9IG5vXG5cbiAgICAjINC/0L7Qt9Cy0L7Qu9GP0LXRgiDRgdC60LDRh9Cw0YLRjCDQv9C+0LvQvdGD0Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICAgJHNjb3BlLmRvd25sb2FkX2RldmljZV9jb25maWd1cmF0aW9uID0gLT5cbiAgICAgICAgJHNjb3BlLnJlZnJlc2hfZGV2aWNlX2NvbmZpZ3VyYXRpb24oKS50aGVuIC0+XG4gICAgICAgICAgICBkb3dubG9hZF9maWxlKCRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9qc29uLCAnY29uZmlndXJhdGlvbi50eHQnKVxuXG4gICAgIyDQv9C+0LfQstC+0LvRj9C10YIg0YHQutCw0YfQsNGC0YwgSnNvbiBScGMg0L/QvtC70L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDRg9GB0YLRgNC+0LnRgdGC0LLQsFxuICAgICRzY29wZS5kb3dubG9hZF9kZXZpY2VfY29uZmlndXJhdGlvbl9iYXRjaCA9IC0+XG4gICAgICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9jb25maWd1cmF0aW9uKCkudGhlbiAtPlxuICAgICAgICAgICAgZG93bmxvYWRfZmlsZSgkc2NvcGUuZGV2aWNlX2NvbmZpZ3VyYXRpb25fYmF0Y2gsICdjb25maWd1cmF0aW9uX2JhdGNoLnR4dCcpXG5cbiAgICAkc2NvcGUudmFsaWRhdGVfY29uZmlndXJhdGlvbl9qc29uID0gKGRhdGEpIC0+XG4gICAgICAgICMgbWF5IGFkZCB2YWxpZGF0aW9uIGhlcmVcblxuICAgICMg0YHQvtGF0YDQsNC90Y/QtdGCINC90L7QstGL0LkgY29uZmlnLmpzb25cbiAgICAkc2NvcGUuc2F2ZV9jb25maWd1cmF0aW9uID0gKGNvbmZpZ3VyYXRpb24pIC0+XG5cbiAgICAgICAgYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uc2V0JywgeyBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICAgIGlmIHJlc3VsdCA9PSAnYXBwbGljYXRpb24gcmVzdGFydCByZXF1aXJlZCdcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQodHJhbnNsYXRlKCdwYWdlLmRlYnVnLm5vdGlmaWNhdGlvbi5yZXN0YXJ0X2d1bHAnKSlcblxuICAgICAgICAgICAgIyDRgtCw0LrQvtCz0L4g0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0YxcbiAgICAgICAgICAgIGFsZXJ0KCfQndC1INGD0LTQsNC70L7RgdGMINC/0LXRgNC10LfQsNC/0YPRgdGC0LjRgtGMINC/0YDQuNC70L7QttC10L3QuNC1JylcblxuICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgICAgR1VJLndhaXRfZm9yX2Nvbm5lY3Rpb24oNCwgJ9Ca0L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDRgdC+0YXRgNCw0L3QtdC90LAuINCf0YDQuNC70L7QttC10L3QuNC1INC/0LXRgNC10LfQsNC/0YPRgdC60LDQtdGC0YHRjycsIHsgdG86ICdndWknIH0pXG5cbiAgICAjINC/0L7Qt9Cy0L7Qu9GP0LXRgiDQstC90L7RgdC40YLRjCDQuNC30LzQtdC90LXQvdC40Y8g0LIgY29uZmlnLmpzb25cbiAgICAkc2NvcGUuc2F2ZV9jb25maWd1cmF0aW9uX2pzb24gPSAtPlxuXG4gICAgICAgICMgcmV0dXJuIGlmICRzY29wZS5jb25maWd1cmF0aW9uX2pzb25fZm9ybS4kaW52YWxpZFxuXG4gICAgICAgICMg0LLQsNC70LjQtNCw0YbQuNGPINGE0L7RgNC80LDRgtCwIEpTT04g0LLQstC10LTRkdC90L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuFxuICAgICAgICB0cnlcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSAkc2NvcGUuY29uZmlndXJhdGlvbl9qc29uX2VkaXRvci5nZXQoKVxuXG4gICAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgICAgICBpZiBlcnJvciBpbnN0YW5jZW9mIFN5bnRheEVycm9yXG4gICAgICAgICAgICAgICAgYWxlcnQodHJhbnNsYXRlKCdwYWdlLmRlYnVnLmFkbWluaXN0cmF0aW9uLmVycm9yLmNvbmZpZ3VyYXRpb25fanNvbicsIHsgZXJyb3I6IGVycm9yLnN0YWNrIH0pKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JcblxuICAgICAgICAjINC60LDQutCw0Y8t0L3QuNCx0YPQtNGMINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdCw0Y8g0LLQsNC70LjQtNCw0YbQuNGPIEpTT07QsCDQstCy0LXQtNGR0L3QvdC+0Lkg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4XG4gICAgICAgIHRyeVxuICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRlX2NvbmZpZ3VyYXRpb25fanNvbihjb25maWd1cmF0aW9uKVxuICAgICAgICBjYXRjaCBlcnJvclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcilcbiAgICAgICAgICAgIFN0YXR1cy5lcnJvcihlcnJvcilcbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgICRzY29wZS5idXN5ID0geWVzXG5cbiAgICAgICAgIyDRgdC+0YXRgNCw0L3QtdC90LjQtSDQvdC+0LLQvtCz0L4gY29uZmlnLmpzb25cbiAgICAgICAgJHNjb3BlLnNhdmVfY29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKVxuXG4gICAgICAgIC5maW5hbGx5IC0+XG4gICAgICAgICAgICAkc2NvcGUuYnVzeSA9IG5vXG5cbiAgICAjINC/0L7Qt9Cy0L7Qu9GP0LXRgiDQvNC10L3Rj9GC0Ywg0Y/Qt9GL0LogR3VpXG4gICAgJHNjb3BlLmNoYW5nZV9sYW5ndWFnZSA9IC0+XG5cbiAgICAgICAgJHNjb3BlLmJ1c3kgPSB5ZXNcblxuICAgICAgICBhcGkuY2FsbCgnY29uZmlndXJhdGlvbi5nZXQnKS50aGVuIChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5sYW5ndWFnZSA9ICRzY29wZS5sYW5ndWFnZVxuXG4gICAgICAgICAgICAjINGB0L7RhdGA0LDQvdC10L3QuNC1INC90L7QstC+0LPQviBjb25maWcuanNvblxuICAgICAgICAgICAgJHNjb3BlLnNhdmVfY29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKVxuXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgICBTdGF0dXMuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKVxuXG4gICAgICAgIC5maW5hbGx5IC0+XG4gICAgICAgICAgICAkc2NvcGUuYnVzeSA9IG5vXG5cbiAgICAjIEluaXRpYWxpemVcbiAgICAkc2NvcGUuaW5pdGlhbGl6ZV9wYWdlX3dpdGggLT5cbiAgICAgICAgJHNjb3BlLmNvbW1hbmQgPSAnZ2V0U3dpdGNoSW5mbydcblxuICAgICAgICAjINC/0L7Qu9GPINCy0LLQvtC00LAg0Lgg0LLRi9Cy0L7QtNCwIEpTT04gUnBjINC60L7QvNCw0L3QtNGLXG5cbiAgICAgICAgJHNjb3BlLmNvbW1hbmRfaW5wdXRfZWRpdG9yID0gbmV3IEpTT05FZGl0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb21tYW5kX2lucHV0XCIpLCB7IG1vZGU6ICdjb2RlJyB9KVxuICAgICAgICAkc2NvcGUuY29tbWFuZF9pbnB1dF9lZGl0b3IuZWRpdG9yLnNldE9wdGlvbnMoZm9udFNpemU6IFwiMTRwdFwiKVxuXG4gICAgICAgIGR1bW15X2NvbW1hbmRfaW5wdXQgPVxuICAgICAgICAgICAga2V5OiAxMjNcblxuICAgICAgICAkc2NvcGUuY29tbWFuZF9pbnB1dF9lZGl0b3Iuc2V0KGR1bW15X2NvbW1hbmRfaW5wdXQpXG5cbiAgICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvciA9IG5ldyBKU09ORWRpdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29tbWFuZF9vdXRwdXRcIiksIHsgbW9kZTogJ3ZpZXcnIH0pXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0TmFtZSgncmVzcG9uc2UnKVxuXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9tb2RlID0gJ3RyZWUnXG4gICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dCA9IHt9XG5cbiAgICAgICAgIyDQv9C+0LvRjyDQstCy0L7QtNCwINC4INCy0YvQstC+0LTQsCBKU09OIFJwYyBiYXRjaCfQsFxuXG4gICAgICAgICRzY29wZS5iYXRjaF9pbnB1dF9lZGl0b3IgPSBuZXcgSlNPTkVkaXRvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJhdGNoX2lucHV0XCIpLCB7IG1vZGU6ICdjb2RlJyB9KVxuICAgICAgICAkc2NvcGUuYmF0Y2hfaW5wdXRfZWRpdG9yLmVkaXRvci5zZXRPcHRpb25zKGZvbnRTaXplOiBcIjE0cHRcIilcblxuICAgICAgICBkdW1teV9iYXRjaF9pbnB1dCA9IFt7XG4gICAgICAgICAgICBtZXRob2Q6ICdnZXRTd2l0Y2hJbmZvJ1xuICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgIGtleTogMTIzXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldFN3aXRjaEluZm8nXG4gICAgICAgICAgICBwYXJhbXM6XG4gICAgICAgICAgICAgICAga2V5OiAxMjNcbiAgICAgICAgfV1cblxuICAgICAgICAkc2NvcGUuYmF0Y2hfaW5wdXRfZWRpdG9yLnNldChkdW1teV9iYXRjaF9pbnB1dClcblxuICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvciA9IG5ldyBKU09ORWRpdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYmF0Y2hfb3V0cHV0XCIpLCB7IG1vZGU6ICd2aWV3JyB9KVxuICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5zZXROYW1lKCdiYXRjaCcpXG5cbiAgICAgICAgJHNjb3BlLmJhdGNoX291dHB1dF9tb2RlID0gJ3RyZWUnXG4gICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXQgPSBbXVxuXG4gICAgICAgICMg0L/QvtC70LUg0L/QvtC70L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDQttC10LvQtdC30LrQuFxuXG4gICAgICAgICRzY29wZS5zaG93X2RldmljZV9jb25maWd1cmF0aW9uX3RleHQgPSBub1xuXG4gICAgICAgICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9qc29uID0ge31cblxuICAgICAgICAkc2NvcGUuJHdhdGNoICdkZXZpY2VfY29uZmlndXJhdGlvbl9qc29uJywgKHZhbHVlKSAtPlxuICAgICAgICAgICAgJHNjb3BlLmRldmljZV9jb25maWd1cmF0aW9uX2VkaXRvci5zZXQodmFsdWUpXG5cbiAgICAgICAgJHNjb3BlLmRldmljZV9jb25maWd1cmF0aW9uX2VkaXRvciA9IG5ldyBKU09ORWRpdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGV2aWNlX2NvbmZpZ3VyYXRpb25cIiksIHsgbW9kZTogJ3ZpZXcnIH0pXG4gICAgICAgICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9lZGl0b3Iuc2V0TmFtZSh0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuY29uZmlndXJhdGlvbi5vdXRwdXRfdGl0bGUnKSlcblxuICAgICAgICAjINC/0L7Qu9C1INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8gY29uZmlnLmpzb25cblxuICAgICAgICAjINC/0L7Qu9GD0YfQuNGC0Ywg0Lgg0LLRi9Cy0LXRgdGC0LggY29uZmlnLmpzb25cbiAgICAgICAgYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uZ2V0JykudGhlbiAoY29uZmlndXJhdGlvbikgLT5cblxuICAgICAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fanNvbl9lZGl0b3IgPSBuZXcgSlNPTkVkaXRvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbmZpZ3VyYXRpb25fanNvblwiKSwgeyBtb2RlOiAnY29kZScgfSlcbiAgICAgICAgICAgICRzY29wZS5jb25maWd1cmF0aW9uX2pzb25fZWRpdG9yLmVkaXRvci5zZXRPcHRpb25zKGZvbnRTaXplOiBcIjE0cHRcIilcblxuICAgICAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fanNvbl9lZGl0b3Iuc2V0KGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgICAgIyDQv9C+0LvQtSDRgdC80LXQvdGLINGP0LfRi9C60LBcblxuICAgICAgICAkc2NvcGUubGFuZ3VhZ2UgPSAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24ubGFuZ3VhZ2VcblxuICAgICAgICAkc2NvcGUubGFuZ3VhZ2VzID0gW11cbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgaTE4blxuICAgICAgICAgICRzY29wZS5sYW5ndWFnZXMucHVzaChrZXk6IGtleSwgbGFiZWw6IHZhbHVlLmxhbmd1YWdlX25hbWUpXG5cbiAgICAgICAgIyBvdGhlclxuXG4gICAgICAgICMg0L/QvtC70YPRh9C40YLRjCDQuCDQstGL0LLQtdGB0YLQuCDQv9C+0LvQvdGD0Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC20LXQu9C10LfQutC4XG4gICAgICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9jb25maWd1cmF0aW9uKClcbiIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmNvbnRyb2xsZXIoXCJEZWJ1Z0N0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgYXBpLCBsb2csIEVudW1zLCBEZXZpY2UsIFJvdXRpbmdfbW9kZWxfYXBwbGllciwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIHRyYW5zbGF0ZSwgR1VJLCBTdGF0dXMpIHtcbiAgICAkc2NvcGUubWluaWZ5X3Jlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIHJlc3BvbnNlID0gYW5ndWxhci5jb3B5KHJlc3BvbnNlKTtcbiAgICAgIGRlbGV0ZSByZXNwb25zZS5qc29ucnBjO1xuICAgICAgZGVsZXRlIHJlc3BvbnNlLmlkO1xuICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmVycm9yXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbiAgICAkc2NvcGUucHJvY2Vzc19lcnJvciA9IGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XG4gICAgICB2YXIgbWVzc2FnZTtcbiAgICAgIG1lc3NhZ2UgPSB0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuZXJyb3IuZ2VuZXJpYycsIHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXMgfHwgJ1tubyBzdGF0dXNdJyxcbiAgICAgICAgZGF0YTogZGF0YSB8fCAnW25vIGRlc2NyaXB0aW9uXSdcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFsZXJ0KG1lc3NhZ2UpO1xuICAgIH07XG4gICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVycm9yLCBlcnJvcjEsIHJlcXVlc3Q7XG4gICAgICBpZiAoJHNjb3BlLmZvcm0uJGludmFsaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvci5zZXROYW1lKCk7XG4gICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ3ZpZXcnKTtcbiAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0KCk7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgICAgbWV0aG9kOiAkc2NvcGUuY29tbWFuZCxcbiAgICAgICAgICBwYXJhbXM6ICRzY29wZS5jb21tYW5kX2lucHV0X2VkaXRvci5nZXQoKSxcbiAgICAgICAgICBpZDogMVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xuICAgICAgICAgIGFsZXJ0KHRyYW5zbGF0ZSgncGFnZS5kZWJ1Zy5jb21tYW5kLmVycm9yLmpzb24nLCB7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3Iuc3RhY2tcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkc2NvcGUuYnVzeSA9IHRydWU7XG4gICAgICAkc2NvcGUuYnVzeV9jb21tYW5kID0gdHJ1ZTtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpJywgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgbG9nLmluZm8oXCLihpBcIiwgcmVzcG9uc2UpO1xuICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXQgPSByZXNwb25zZTtcbiAgICAgICAgJHNjb3BlLnZpZXdfY29tbWFuZF9vdXRwdXQoKTtcbiAgICAgICAgcmV0dXJuICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3IuZXhwYW5kQWxsKCk7XG4gICAgICB9KS5lcnJvcigkc2NvcGUucHJvY2Vzc19lcnJvcilbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuYnVzeSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJ1c3lfY29tbWFuZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUudmlld19jb21tYW5kX291dHB1dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgcmVzcG9uc2UgPSAkc2NvcGUubWluaWZ5X3Jlc3BvbnNlKCRzY29wZS5jb21tYW5kX291dHB1dCk7XG4gICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZS5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldChyZXNwb25zZSk7XG4gICAgfTtcbiAgICAkc2NvcGUuc3VibWl0X2JhdGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmF0Y2gsIGJhdGNoX2pzb24sIGVycm9yLCBlcnJvcjEsIGlkLCByZXF1ZXN0O1xuICAgICAgaWYgKCRzY29wZS5iYXRjaF9mb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ3ZpZXcnKTtcbiAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldCgpO1xuICAgICAgaWQgPSAxO1xuICAgICAgcmVxdWVzdCA9IGZ1bmN0aW9uKGNvbW1hbmQsIGNvbW1hbmRfaW5wdXQpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgICBtZXRob2Q6IGNvbW1hbmQsXG4gICAgICAgICAgcGFyYW1zOiBjb21tYW5kX2lucHV0LFxuICAgICAgICAgIGlkOiBpZCsrXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfTtcbiAgICAgIGJhdGNoID0gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGJhdGNoX2pzb24gPSAkc2NvcGUuYmF0Y2hfaW5wdXRfZWRpdG9yLmdldCgpO1xuICAgICAgICBpZiAoIWJhdGNoX2pzb24gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGlmIChiYXRjaF9qc29uLm1ldGhvZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBiYXRjaF9qc29uID0gW2JhdGNoX2pzb25dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGVydCh0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuY29tbWFuZHMuZXJyb3IuYmF0Y2hfZm9ybWF0JykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBiYXRjaCA9IGJhdGNoX2pzb24ubWFwKGZ1bmN0aW9uKGNvbW1hbmQpIHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdChjb21tYW5kLm1ldGhvZCwgY29tbWFuZC5wYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpIHtcbiAgICAgICAgICBhbGVydCh0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuY29tbWFuZHMuZXJyb3IuYmF0Y2hfanNvbicsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci5zdGFja1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICRzY29wZS5idXN5ID0gdHJ1ZTtcbiAgICAgICRzY29wZS5idXN5X2JhdGNoID0gdHJ1ZTtcbiAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpJywgSlNPTi5zdHJpbmdpZnkoYmF0Y2gpKS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGxvZy5pbmZvKFwi4oaQXCIsIHJlc3BvbnNlKTtcbiAgICAgICAgJHNjb3BlLmJhdGNoX291dHB1dCA9IHJlc3BvbnNlO1xuICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5zZXQoJHNjb3BlLmJhdGNoX291dHB1dC5tYXAoJHNjb3BlLm1pbmlmeV9yZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJhdGNoX291dHB1dF9lZGl0b3IuZXhwYW5kQWxsKCk7XG4gICAgICB9KS5lcnJvcigkc2NvcGUucHJvY2Vzc19lcnJvcilbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuYnVzeSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJ1c3lfYmF0Y2ggPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnN3aXRjaF9jb21tYW5kX291dHB1dF9tb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJHNjb3BlLmNvbW1hbmRfb3V0cHV0X21vZGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHN3aXRjaCAoJHNjb3BlLmNvbW1hbmRfb3V0cHV0X21vZGUpIHtcbiAgICAgICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgICAgICRzY29wZS52aWV3X2NvbW1hbmRfb3V0cHV0KCk7XG4gICAgICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldE1vZGUoJ3ZpZXcnKTtcbiAgICAgICAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3IuZXhwYW5kQWxsKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3RyZWUnO1xuICAgICAgICAgIGNhc2UgJ3RyZWUnOlxuICAgICAgICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvci5zZXRNb2RlKCdjb2RlJyk7XG4gICAgICAgICAgICAkc2NvcGUuY29tbWFuZF9vdXRwdXRfZWRpdG9yLnNldChhbmd1bGFyLmNvcHkoJHNjb3BlLmNvbW1hbmRfb3V0cHV0KSk7XG4gICAgICAgICAgICByZXR1cm4gJ2NvZGUnO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH07XG4gICAgJHNjb3BlLnN3aXRjaF9iYXRjaF9vdXRwdXRfbW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRzY29wZS5iYXRjaF9vdXRwdXRfbW9kZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgc3dpdGNoICgkc2NvcGUuYmF0Y2hfb3V0cHV0X21vZGUpIHtcbiAgICAgICAgICBjYXNlICdjb2RlJzpcbiAgICAgICAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfZWRpdG9yLnNldCgkc2NvcGUuYmF0Y2hfb3V0cHV0Lm1hcCgkc2NvcGUubWluaWZ5X3Jlc3BvbnNlKSk7XG4gICAgICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5zZXRNb2RlKCd2aWV3Jyk7XG4gICAgICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5leHBhbmRBbGwoKTtcbiAgICAgICAgICAgIHJldHVybiAndHJlZSc7XG4gICAgICAgICAgY2FzZSAndHJlZSc6XG4gICAgICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5zZXRNb2RlKCdjb2RlJyk7XG4gICAgICAgICAgICAkc2NvcGUuYmF0Y2hfb3V0cHV0X2VkaXRvci5zZXQoYW5ndWxhci5jb3B5KCRzY29wZS5iYXRjaF9vdXRwdXQpKTtcbiAgICAgICAgICAgIHJldHVybiAnY29kZSc7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfTtcbiAgICAkc2NvcGUucmVmcmVzaF9kZXZpY2VfY29uZmlndXJhdGlvbl9iYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERldmljZS5yZWZyZXNoX3BvcnRzKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRpbmdfbW9kZWwuZnJvbV9kZXZpY2UoKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocm91dGluZ19tb2RlbCkge1xuICAgICAgICByZXR1cm4gUm91dGluZ19tb2RlbF9hcHBsaWVyLmdlbmVyYXRlX2NvbmZpZ3VyYXRpb25fYmF0Y2gocm91dGluZ19tb2RlbCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9jb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5X2ZvciwgbW9kZWw7XG4gICAgICBpZiAoJHNjb3BlLnJlZnJlc2hpbmdfZGV2aWNlX2NvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IHJlZnJlc2hpbmcgY29uZmlndXJhdGlvbicpO1xuICAgICAgfVxuICAgICAgJHNjb3BlLnJlZnJlc2hpbmdfZGV2aWNlX2NvbmZpZ3VyYXRpb24gPSB0cnVlO1xuICAgICAgJHNjb3BlLmRldmljZV9jb25maWd1cmF0aW9uX2pzb24gPSB7fTtcbiAgICAgIG1vZGVsID0ge307XG4gICAgICBrZXlfZm9yID0gZnVuY3Rpb24oc2VjdGlvbikge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlKCdwYWdlLmRlYnVnLmNvbmZpZ3VyYXRpb24uJyArIHNlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIG1vZGVsW2tleV9mb3IoJ3BvcnRzJyldID0ge307XG4gICAgICBtb2RlbFtrZXlfZm9yKCdoYXNoX3Byb2ZpbGUnKV0gPSBudWxsO1xuICAgICAgbW9kZWxba2V5X2ZvcignbGJnJyldID0ge307XG4gICAgICBtb2RlbFtrZXlfZm9yKCdtaXJyb3JfZ3JvdXBzJyldID0ge307XG4gICAgICBtb2RlbFtrZXlfZm9yKCdtYXBwZXJzJyldID0ge307XG4gICAgICBtb2RlbFtrZXlfZm9yKCdwb3J0c2V0JyldID0ge307XG4gICAgICBtb2RlbFtrZXlfZm9yKCdhY2wnKV0gPSB7fTtcbiAgICAgIG1vZGVsW2tleV9mb3IoJ25ldHdvcmsnKV0gPSBudWxsO1xuICAgICAgbW9kZWxba2V5X2Zvcigncm91dGluZycpXSA9IG51bGw7XG4gICAgICBtb2RlbFtrZXlfZm9yKCd0YV9ydWxlcycpXSA9IG51bGw7XG4gICAgICBtb2RlbFtrZXlfZm9yKCd1c2VycycpXSA9IG51bGw7XG4gICAgICByZXR1cm4gTW9kZWxfc2VydmljZS5kb193aXRoX3BvcnRfbG9jayhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdnZXRMQkdMaXN0JykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB2YXIgZm4sIGksIGxiZ19pZCwgbGVuLCByZWY7XG4gICAgICAgICAgYXBpLmJlZ2luKCk7XG4gICAgICAgICAgcmVmID0gcmVzdWx0LmxiZ19pZHM7XG4gICAgICAgICAgZm4gPSBmdW5jdGlvbihsYmdfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnZ2V0TEJHJywge1xuICAgICAgICAgICAgICBsYmdfaWQ6IGxiZ19pZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdC5sYmdfaWQ7XG4gICAgICAgICAgICAgIHJldHVybiBtb2RlbFtrZXlfZm9yKCdsYmcnKV1bbGJnX2lkXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBsYmdfaWQgPSByZWZbaV07XG4gICAgICAgICAgICBmbihsYmdfaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnZ2V0TWlycm9yTGlzdCcpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHZhciBmbiwgaSwgbGVuLCBtaXJyb3JfaWQsIHJlZjtcbiAgICAgICAgICBhcGkuYmVnaW4oKTtcbiAgICAgICAgICByZWYgPSByZXN1bHQubWlycm9yX2lkcztcbiAgICAgICAgICBmbiA9IGZ1bmN0aW9uKG1pcnJvcl9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdnZXRNaXJyb3InLCB7XG4gICAgICAgICAgICAgIG1pcnJvcl9pZDogbWlycm9yX2lkXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0Lm1pcnJvcl9pZDtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsW2tleV9mb3IoJ21pcnJvcl9ncm91cHMnKV1bbWlycm9yX2lkXSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBtaXJyb3JfaWQgPSByZWZbaV07XG4gICAgICAgICAgICBmbihtaXJyb3JfaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFwaS5iZWdpbigpO1xuICAgICAgICAgIGFwaS5jYWxsKCdnZXRBQ0xQb3J0U2V0TGlzdCcpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWxba2V5X2ZvcigncG9ydHNldCcpXSA9IHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHZhciBmbiwgbWFwcGVyLCByZWYsIHRpdGxlO1xuICAgICAgICAgIGFwaS5iZWdpbigpO1xuICAgICAgICAgIHJlZiA9IEVudW1zLk1hcHBlcjtcbiAgICAgICAgICBmbiA9IGZ1bmN0aW9uKHRpdGxlLCBtYXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnZ2V0TWFwcGVyJywge1xuICAgICAgICAgICAgICBtYXBwZXJfaWQ6IG1hcHBlci5pZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsW2tleV9mb3IoJ21hcHBlcnMnKV1bbWFwcGVyLmlkICsgJyAnICsgdGl0bGVdID0gcmVzdWx0Lm1hcHBlcl9hcnJheTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yICh0aXRsZSBpbiByZWYpIHtcbiAgICAgICAgICAgIG1hcHBlciA9IHJlZlt0aXRsZV07XG4gICAgICAgICAgICBmbih0aXRsZSwgbWFwcGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFwaS5lbmQoKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2dldFJ1bGVzTGlzdCcpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWxba2V5X2ZvcigndGFfcnVsZXMnKV0gPSByZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdnZXRBQ0xMaXN0Jyk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgdmFyIGFjbF9pZCwgZm4sIGksIGxlbiwgcmVmO1xuICAgICAgICAgIGFwaS5iZWdpbigpO1xuICAgICAgICAgIHJlZiA9IHJlc3VsdC5hY2xfaWRzO1xuICAgICAgICAgIGZuID0gZnVuY3Rpb24oYWNsX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2dldEFDTCcsIHtcbiAgICAgICAgICAgICAgYWNsX2lkOiBhY2xfaWRcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHQuYWNsX2lkO1xuICAgICAgICAgICAgICByZXR1cm4gbW9kZWxba2V5X2ZvcignYWNsJyldW2FjbF9pZF0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgYWNsX2lkID0gcmVmW2ldO1xuICAgICAgICAgICAgZm4oYWNsX2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXBpLmNhbGwoJ2dldFN3aXRjaEluZm8nKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIGlkLCBqLCBsZW4xLCBwb3J0LCByZWYxLCByZXN1bHRzO1xuICAgICAgICAgICAgcmVmMSA9IHJlc3VsdC5Qb3J0cztcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICBwb3J0ID0gcmVmMVtqXTtcbiAgICAgICAgICAgICAgaWQgPSBwb3J0LmlkO1xuICAgICAgICAgICAgICBkZWxldGUgcG9ydC5pZDtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG1vZGVsW2tleV9mb3IoJ3BvcnRzJyldW2lkXSA9IHBvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYXBpLmNhbGwoJ2dldE5ldENvbmZpZycpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWxba2V5X2ZvcignbmV0d29yaycpXSA9IHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhcGkuY2FsbCgnZ2V0RGVmYXVsdEhhc2hQcm9maWxlJykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFtrZXlfZm9yKCdoYXNoX3Byb2ZpbGUnKV0gPSByZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywge1xuICAgICAgICAgICAgZGF0YWJhc2U6ICdzeXN0ZW0nLFxuICAgICAgICAgICAgZmlsZTogJ3JvdXRpbmcuanNvbidcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIG1vZGVsW2tleV9mb3IoJ3JvdXRpbmcnKV0gPSByZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywge1xuICAgICAgICAgICAgZGF0YWJhc2U6ICdzeXN0ZW0nLFxuICAgICAgICAgICAgZmlsZTogJ3VzZXJzLmpzb24nXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbFtrZXlfZm9yKCd1c2VycycpXSA9IHJlc3VsdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUuZGV2aWNlX2NvbmZpZ3VyYXRpb25fanNvbiA9IG1vZGVsO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGJhdGNoKSB7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9iYXRjaCA9IGJhdGNoO1xuICAgICAgICB9KTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgU3RhdHVzLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnJlZnJlc2hpbmdfZGV2aWNlX2NvbmZpZ3VyYXRpb24gPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmRvd25sb2FkX2RldmljZV9jb25maWd1cmF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJHNjb3BlLnJlZnJlc2hfZGV2aWNlX2NvbmZpZ3VyYXRpb24oKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZG93bmxvYWRfZmlsZSgkc2NvcGUuZGV2aWNlX2NvbmZpZ3VyYXRpb25fanNvbiwgJ2NvbmZpZ3VyYXRpb24udHh0Jyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5kb3dubG9hZF9kZXZpY2VfY29uZmlndXJhdGlvbl9iYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRzY29wZS5yZWZyZXNoX2RldmljZV9jb25maWd1cmF0aW9uKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkX2ZpbGUoJHNjb3BlLmRldmljZV9jb25maWd1cmF0aW9uX2JhdGNoLCAnY29uZmlndXJhdGlvbl9iYXRjaC50eHQnKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnZhbGlkYXRlX2NvbmZpZ3VyYXRpb25fanNvbiA9IGZ1bmN0aW9uKGRhdGEpIHt9O1xuICAgICRzY29wZS5zYXZlX2NvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG4gICAgICByZXR1cm4gYXBpLmNhbGwoJ2NvbmZpZ3VyYXRpb24uc2V0Jywge1xuICAgICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0ID09PSAnYXBwbGljYXRpb24gcmVzdGFydCByZXF1aXJlZCcpIHtcbiAgICAgICAgICByZXR1cm4gYWxlcnQodHJhbnNsYXRlKCdwYWdlLmRlYnVnLm5vdGlmaWNhdGlvbi5yZXN0YXJ0X2d1bHAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsZXJ0KCfQndC1INGD0LTQsNC70L7RgdGMINC/0LXRgNC10LfQsNC/0YPRgdGC0LjRgtGMINC/0YDQuNC70L7QttC10L3QuNC1Jyk7XG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBHVUkud2FpdF9mb3JfY29ubmVjdGlvbig0LCAn0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINGB0L7RhdGA0LDQvdC10L3QsC4g0J/RgNC40LvQvtC20LXQvdC40LUg0L/QtdGA0LXQt9Cw0L/Rg9GB0LrQsNC10YLRgdGPJywge1xuICAgICAgICAgIHRvOiAnZ3VpJ1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnNhdmVfY29uZmlndXJhdGlvbl9qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29uZmlndXJhdGlvbiwgZXJyb3IsIGVycm9yMSwgZXJyb3IyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uZmlndXJhdGlvbiA9ICRzY29wZS5jb25maWd1cmF0aW9uX2pzb25fZWRpdG9yLmdldCgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xuICAgICAgICAgIGFsZXJ0KHRyYW5zbGF0ZSgncGFnZS5kZWJ1Zy5hZG1pbmlzdHJhdGlvbi5lcnJvci5jb25maWd1cmF0aW9uX2pzb24nLCB7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3Iuc3RhY2tcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAkc2NvcGUudmFsaWRhdGVfY29uZmlndXJhdGlvbl9qc29uKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IyO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrIHx8IGVycm9yKTtcbiAgICAgICAgU3RhdHVzLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmJ1c3kgPSB0cnVlO1xuICAgICAgcmV0dXJuICRzY29wZS5zYXZlX2NvbmZpZ3VyYXRpb24oY29uZmlndXJhdGlvbilbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJ1c3kgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmNoYW5nZV9sYW5ndWFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmJ1c3kgPSB0cnVlO1xuICAgICAgcmV0dXJuIGFwaS5jYWxsKCdjb25maWd1cmF0aW9uLmdldCcpLnRoZW4oZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICBjb25maWd1cmF0aW9uLmxhbmd1YWdlID0gJHNjb3BlLmxhbmd1YWdlO1xuICAgICAgICByZXR1cm4gJHNjb3BlLnNhdmVfY29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgU3RhdHVzLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJ1c3kgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuICRzY29wZS5pbml0aWFsaXplX3BhZ2Vfd2l0aChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkdW1teV9iYXRjaF9pbnB1dCwgZHVtbXlfY29tbWFuZF9pbnB1dCwga2V5LCB2YWx1ZTtcbiAgICAgICRzY29wZS5jb21tYW5kID0gJ2dldFN3aXRjaEluZm8nO1xuICAgICAgJHNjb3BlLmNvbW1hbmRfaW5wdXRfZWRpdG9yID0gbmV3IEpTT05FZGl0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb21tYW5kX2lucHV0XCIpLCB7XG4gICAgICAgIG1vZGU6ICdjb2RlJ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuY29tbWFuZF9pbnB1dF9lZGl0b3IuZWRpdG9yLnNldE9wdGlvbnMoe1xuICAgICAgICBmb250U2l6ZTogXCIxNHB0XCJcbiAgICAgIH0pO1xuICAgICAgZHVtbXlfY29tbWFuZF9pbnB1dCA9IHtcbiAgICAgICAga2V5OiAxMjNcbiAgICAgIH07XG4gICAgICAkc2NvcGUuY29tbWFuZF9pbnB1dF9lZGl0b3Iuc2V0KGR1bW15X2NvbW1hbmRfaW5wdXQpO1xuICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0X2VkaXRvciA9IG5ldyBKU09ORWRpdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29tbWFuZF9vdXRwdXRcIiksIHtcbiAgICAgICAgbW9kZTogJ3ZpZXcnXG4gICAgICB9KTtcbiAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9lZGl0b3Iuc2V0TmFtZSgncmVzcG9uc2UnKTtcbiAgICAgICRzY29wZS5jb21tYW5kX291dHB1dF9tb2RlID0gJ3RyZWUnO1xuICAgICAgJHNjb3BlLmNvbW1hbmRfb3V0cHV0ID0ge307XG4gICAgICAkc2NvcGUuYmF0Y2hfaW5wdXRfZWRpdG9yID0gbmV3IEpTT05FZGl0b3IoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5iYXRjaF9pbnB1dFwiKSwge1xuICAgICAgICBtb2RlOiAnY29kZSdcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmJhdGNoX2lucHV0X2VkaXRvci5lZGl0b3Iuc2V0T3B0aW9ucyh7XG4gICAgICAgIGZvbnRTaXplOiBcIjE0cHRcIlxuICAgICAgfSk7XG4gICAgICBkdW1teV9iYXRjaF9pbnB1dCA9IFtcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogJ2dldFN3aXRjaEluZm8nLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAga2V5OiAxMjNcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBtZXRob2Q6ICdnZXRTd2l0Y2hJbmZvJyxcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIGtleTogMTIzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgJHNjb3BlLmJhdGNoX2lucHV0X2VkaXRvci5zZXQoZHVtbXlfYmF0Y2hfaW5wdXQpO1xuICAgICAgJHNjb3BlLmJhdGNoX291dHB1dF9lZGl0b3IgPSBuZXcgSlNPTkVkaXRvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJhdGNoX291dHB1dFwiKSwge1xuICAgICAgICBtb2RlOiAndmlldydcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmJhdGNoX291dHB1dF9lZGl0b3Iuc2V0TmFtZSgnYmF0Y2gnKTtcbiAgICAgICRzY29wZS5iYXRjaF9vdXRwdXRfbW9kZSA9ICd0cmVlJztcbiAgICAgICRzY29wZS5iYXRjaF9vdXRwdXQgPSBbXTtcbiAgICAgICRzY29wZS5zaG93X2RldmljZV9jb25maWd1cmF0aW9uX3RleHQgPSBmYWxzZTtcbiAgICAgICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9qc29uID0ge307XG4gICAgICAkc2NvcGUuJHdhdGNoKCdkZXZpY2VfY29uZmlndXJhdGlvbl9qc29uJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9lZGl0b3Iuc2V0KHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmRldmljZV9jb25maWd1cmF0aW9uX2VkaXRvciA9IG5ldyBKU09ORWRpdG9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGV2aWNlX2NvbmZpZ3VyYXRpb25cIiksIHtcbiAgICAgICAgbW9kZTogJ3ZpZXcnXG4gICAgICB9KTtcbiAgICAgICRzY29wZS5kZXZpY2VfY29uZmlndXJhdGlvbl9lZGl0b3Iuc2V0TmFtZSh0cmFuc2xhdGUoJ3BhZ2UuZGVidWcuY29uZmlndXJhdGlvbi5vdXRwdXRfdGl0bGUnKSk7XG4gICAgICBhcGkuY2FsbCgnY29uZmlndXJhdGlvbi5nZXQnKS50aGVuKGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fanNvbl9lZGl0b3IgPSBuZXcgSlNPTkVkaXRvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbmZpZ3VyYXRpb25fanNvblwiKSwge1xuICAgICAgICAgIG1vZGU6ICdjb2RlJ1xuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLmNvbmZpZ3VyYXRpb25fanNvbl9lZGl0b3IuZWRpdG9yLnNldE9wdGlvbnMoe1xuICAgICAgICAgIGZvbnRTaXplOiBcIjE0cHRcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICRzY29wZS5jb25maWd1cmF0aW9uX2pzb25fZWRpdG9yLnNldChjb25maWd1cmF0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmxhbmd1YWdlID0gJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLmxhbmd1YWdlO1xuICAgICAgJHNjb3BlLmxhbmd1YWdlcyA9IFtdO1xuICAgICAgZm9yIChrZXkgaW4gaTE4bikge1xuICAgICAgICB2YWx1ZSA9IGkxOG5ba2V5XTtcbiAgICAgICAgJHNjb3BlLmxhbmd1YWdlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBsYWJlbDogdmFsdWUubGFuZ3VhZ2VfbmFtZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc2NvcGUucmVmcmVzaF9kZXZpY2VfY29uZmlndXJhdGlvbigpO1xuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIi8qIVxuICogbW9kZXJuaXpyIHYzLjAuMC1hbHBoYS4zXG4gKiBCdWlsZCBodHRwOi8vdjMubW9kZXJuaXpyLmNvbS9kb3dubG9hZC8jLWNzc2FuaW1hdGlvbnMtZGlzcGxheXRhYmxlLWRyYWdhbmRkcm9wLWZsZXhib3gtZmxleGJveGxlZ2FjeS1oYXNldmVudC1kb250bWluXG4gKlxuICogQ29weXJpZ2h0IChjKVxuICogIEZhcnVrIEF0ZXNcbiAqICBQYXVsIElyaXNoXG4gKiAgQWxleCBTZXh0b25cbiAqICBSeWFuIFNlZGRvblxuICogIEFsZXhhbmRlciBGYXJrYXNcbiAqICBQYXRyaWNrIEtldHRuZXJcbiAqICBTdHUgQ294XG4gKiAgUmljaGFyZCBIZXJyZXJhXG5cbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLypcbiAqIE1vZGVybml6ciB0ZXN0cyB3aGljaCBuYXRpdmUgQ1NTMyBhbmQgSFRNTDUgZmVhdHVyZXMgYXJlIGF2YWlsYWJsZSBpbiB0aGVcbiAqIGN1cnJlbnQgVUEgYW5kIG1ha2VzIHRoZSByZXN1bHRzIGF2YWlsYWJsZSB0byB5b3UgaW4gdHdvIHdheXM6IGFzIHByb3BlcnRpZXMgb25cbiAqIGEgZ2xvYmFsIGBNb2Rlcm5penJgIG9iamVjdCwgYW5kIGFzIGNsYXNzZXMgb24gdGhlIGA8aHRtbD5gIGVsZW1lbnQuIFRoaXNcbiAqIGluZm9ybWF0aW9uIGFsbG93cyB5b3UgdG8gcHJvZ3Jlc3NpdmVseSBlbmhhbmNlIHlvdXIgcGFnZXMgd2l0aCBhIGdyYW51bGFyIGxldmVsXG4gKiBvZiBjb250cm9sIG92ZXIgdGhlIGV4cGVyaWVuY2UuXG4qL1xuXG47KGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCl7XG4gIHZhciB0ZXN0cyA9IFtdO1xuICBcblxuICB2YXIgTW9kZXJuaXpyUHJvdG8gPSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiwgZHVtbXlcbiAgICBfdmVyc2lvbjogJzMuMC4wLWFscGhhLjMnLFxuXG4gICAgLy8gQW55IHNldHRpbmdzIHRoYXQgZG9uJ3Qgd29yayBhcyBzZXBhcmF0ZSBtb2R1bGVzXG4gICAgLy8gY2FuIGdvIGluIGhlcmUgYXMgY29uZmlndXJhdGlvbi5cbiAgICBfY29uZmlnOiB7XG4gICAgICAnY2xhc3NQcmVmaXgnIDogJycsXG4gICAgICAnZW5hYmxlQ2xhc3NlcycgOiB0cnVlLFxuICAgICAgJ2VuYWJsZUpTQ2xhc3MnIDogdHJ1ZSxcbiAgICAgICd1c2VQcmVmaXhlcycgOiB0cnVlXG4gICAgfSxcblxuICAgIC8vIFF1ZXVlIG9mIHRlc3RzXG4gICAgX3E6IFtdLFxuXG4gICAgLy8gU3R1YiB0aGVzZSBmb3IgcGVvcGxlIHdobyBhcmUgbGlzdGVuaW5nXG4gICAgb246IGZ1bmN0aW9uKCB0ZXN0LCBjYiApIHtcbiAgICAgIC8vIEkgZG9uJ3QgcmVhbGx5IHRoaW5rIHBlb3BsZSBzaG91bGQgZG8gdGhpcywgYnV0IHdlIGNhblxuICAgICAgLy8gc2FmZSBndWFyZCBpdCBhIGJpdC5cbiAgICAgIC8vIC0tIE5PVEU6OiB0aGlzIGdldHMgV0FZIG92ZXJyaWRkZW4gaW4gc3JjL2FkZFRlc3QgZm9yXG4gICAgICAvLyBhY3R1YWwgYXN5bmMgdGVzdHMuIFRoaXMgaXMgaW4gY2FzZSBwZW9wbGUgbGlzdGVuIHRvXG4gICAgICAvLyBzeW5jaHJvbm91cyB0ZXN0cy4gSSB3b3VsZCBsZWF2ZSBpdCBvdXQsIGJ1dCB0aGUgY29kZVxuICAgICAgLy8gdG8gKmRpc2FsbG93KiBzeW5jIHRlc3RzIGluIHRoZSByZWFsIHZlcnNpb24gb2YgdGhpc1xuICAgICAgLy8gZnVuY3Rpb24gaXMgYWN0dWFsbHkgbGFyZ2VyIHRoYW4gdGhpcy5cbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNiKHNlbGZbdGVzdF0pO1xuICAgICAgfSwgMCk7XG4gICAgfSxcblxuICAgIGFkZFRlc3Q6IGZ1bmN0aW9uKCBuYW1lLCBmbiwgb3B0aW9ucyApIHtcbiAgICAgIHRlc3RzLnB1c2goe25hbWUgOiBuYW1lLCBmbiA6IGZuLCBvcHRpb25zIDogb3B0aW9ucyB9KTtcbiAgICB9LFxuXG4gICAgYWRkQXN5bmNUZXN0OiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHRlc3RzLnB1c2goe25hbWUgOiBudWxsLCBmbiA6IGZufSk7XG4gICAgfVxuICB9O1xuXG4gIFxuXG4gIC8vIEZha2Ugc29tZSBvZiBPYmplY3QuY3JlYXRlXG4gIC8vIHNvIHdlIGNhbiBmb3JjZSBub24gdGVzdCByZXN1bHRzXG4gIC8vIHRvIGJlIG5vbiBcIm93blwiIHByb3BlcnRpZXMuXG4gIHZhciBNb2Rlcm5penIgPSBmdW5jdGlvbigpe307XG4gIE1vZGVybml6ci5wcm90b3R5cGUgPSBNb2Rlcm5penJQcm90bztcblxuICAvLyBMZWFrIG1vZGVybml6ciBnbG9iYWxseSB3aGVuIHlvdSBgcmVxdWlyZWAgaXRcbiAgLy8gcmF0aGVyIHRoYW4gZm9yY2UgaXQgaGVyZS5cbiAgLy8gT3ZlcndyaXRlIG5hbWUgc28gY29uc3RydWN0b3IgbmFtZSBpcyBuaWNlciA6RFxuICBNb2Rlcm5penIgPSBuZXcgTW9kZXJuaXpyKCk7XG5cbiAgXG5cbiAgdmFyIGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2UgaW4gSUU3LCB3aGVyZSB0aGUgdHlwZSBvZiBjcmVhdGVFbGVtZW50IGlzIFwib2JqZWN0XCIuXG4gICAgICAvLyBGb3IgdGhpcyByZWFzb24sIHdlIGNhbm5vdCBjYWxsIGFwcGx5KCkgYXMgT2JqZWN0IGlzIG5vdCBhIEZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYXJndW1lbnRzWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkoZG9jdW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuICBcbi8qIVxue1xuICBcIm5hbWVcIjogXCJEcmFnICYgRHJvcFwiLFxuICBcInByb3BlcnR5XCI6IFwiZHJhZ2FuZGRyb3BcIixcbiAgXCJjYW5pdXNlXCI6IFwiZHJhZ25kcm9wXCIsXG4gIFwia25vd25CdWdzXCI6IFtcIk1vYmlsZSBicm93c2VycyBsaWtlIEFuZHJvaWQsIGlPUyA8IDYsIGFuZCBGaXJlZm94IE9TIHRlY2huaWNhbGx5IHN1cHBvcnQgdGhlIEFQSXMsIGJ1dCBkb24ndCBleHBvc2UgaXQgdG8gdGhlIGVuZCB1c2VyLCByZXN1bHRpbmcgaW4gYSBmYWxzZSBwb3NpdGl2ZS5cIl0sXG4gIFwibm90ZXNcIjogW3tcbiAgICBcIm5hbWVcIjogXCJXM0Mgc3BlY1wiLFxuICAgIFwiaHJlZlwiOiBcImh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTAvV0QtaHRtbDUtMjAxMDEwMTkvZG5kLmh0bWxcIlxuICB9XSxcbiAgXCJwb2x5ZmlsbHNcIjogW1wiZHJvcGZpbGVcIiwgXCJtb3hpZVwiLCBcImZpbGVhcGlcIl1cbn1cbiEqL1xuLyogRE9DXG5EZXRlY3RzIHN1cHBvcnQgZm9yIG5hdGl2ZSBkcmFnICYgZHJvcCBvZiBlbGVtZW50cy5cbiovXG5cbiAgTW9kZXJuaXpyLmFkZFRlc3QoJ2RyYWdhbmRkcm9wJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpdiA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJldHVybiAoJ2RyYWdnYWJsZScgaW4gZGl2KSB8fCAoJ29uZHJhZ3N0YXJ0JyBpbiBkaXYgJiYgJ29uZHJvcCcgaW4gZGl2KTtcbiAgfSk7XG5cblxuICAvLyBpc0V2ZW50U3VwcG9ydGVkIGRldGVybWluZXMgaWYgdGhlIGdpdmVuIGVsZW1lbnQgc3VwcG9ydHMgdGhlIGdpdmVuIGV2ZW50XG4gIC8vIGthbmdheC5naXRodWIuY29tL2lzZXZlbnRzdXBwb3J0ZWQvXG4gIC8vIGdpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9wdWxsLzYzNlxuICAvL1xuICAvLyBLbm93biBpbmNvcnJlY3RzOlxuICAvLyAgIE1vZGVybml6ci5oYXNFdmVudChcIndlYmtpdFRyYW5zaXRpb25FbmRcIiwgZWxlbSkgLy8gZmFsc2UgbmVnYXRpdmVcbiAgLy8gICBNb2Rlcm5penIuaGFzRXZlbnQoXCJ0ZXh0SW5wdXRcIikgLy8gaW4gV2Via2l0LiBnaXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvaXNzdWVzLzMzM1xuICB2YXIgaXNFdmVudFN1cHBvcnRlZCA9IChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cbiAgICAvLyBEZXRlY3Qgd2hldGhlciBldmVudCBzdXBwb3J0IGNhbiBiZSBkZXRlY3RlZCB2aWEgYGluYC4gVGVzdCBvbiBhIERPTSBlbGVtZW50XG4gICAgLy8gdXNpbmcgdGhlIFwiYmx1clwiIGV2ZW50IGIvYyBpdCBzaG91bGQgYWx3YXlzIGV4aXN0LiBiaXQubHkvZXZlbnQtZGV0ZWN0aW9uXG4gICAgdmFyIG5lZWRzRmFsbGJhY2sgPSAhKCdvbmJsdXInIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd8Kn0gICAgICAgICAgIGV2ZW50TmFtZSAgaXMgdGhlIG5hbWUgb2YgYW4gZXZlbnQgdG8gdGVzdCBmb3IgKGUuZy4gXCJyZXNpemVcIilcbiAgICAgKiBAcGFyYW0gIHsoT2JqZWN0fHN0cmluZ3wqKT19IGVsZW1lbnQgICAgaXMgdGhlIGVsZW1lbnR8ZG9jdW1lbnR8d2luZG93fHRhZ05hbWUgdG8gdGVzdCBvblxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZElubmVyKCBldmVudE5hbWUsIGVsZW1lbnQgKSB7XG5cbiAgICAgIHZhciBpc1N1cHBvcnRlZDtcbiAgICAgIGlmICggIWV2ZW50TmFtZSApIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAoICFlbGVtZW50IHx8IHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJyApIHtcbiAgICAgICAgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQoZWxlbWVudCB8fCAnZGl2Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRlc3RpbmcgdmlhIHRoZSBgaW5gIG9wZXJhdG9yIGlzIHN1ZmZpY2llbnQgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUUuXG4gICAgICAvLyBXaGVuIHVzaW5nIGBzZXRBdHRyaWJ1dGVgLCBJRSBza2lwcyBcInVubG9hZFwiLCBXZWJLaXQgc2tpcHMgXCJ1bmxvYWRcIiBhbmRcbiAgICAgIC8vIFwicmVzaXplXCIsIHdoZXJlYXMgYGluYCBcImNhdGNoZXNcIiB0aG9zZS5cbiAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgICBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBlbGVtZW50O1xuXG4gICAgICAvLyBGYWxsYmFjayB0ZWNobmlxdWUgZm9yIG9sZCBGaXJlZm94IC0gYml0Lmx5L2V2ZW50LWRldGVjdGlvblxuICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgJiYgbmVlZHNGYWxsYmFjayApIHtcbiAgICAgICAgaWYgKCAhZWxlbWVudC5zZXRBdHRyaWJ1dGUgKSB7XG4gICAgICAgICAgLy8gU3dpdGNoIHRvIGdlbmVyaWMgZWxlbWVudCBpZiBpdCBsYWNrcyBgc2V0QXR0cmlidXRlYC5cbiAgICAgICAgICAvLyBJdCBjb3VsZCBiZSB0aGUgYGRvY3VtZW50YCwgYHdpbmRvd2AsIG9yIHNvbWV0aGluZyBlbHNlLlxuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJycpO1xuICAgICAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG5cbiAgICAgICAgaWYgKCBlbGVtZW50W2V2ZW50TmFtZV0gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAvLyBJZiBwcm9wZXJ0eSB3YXMgY3JlYXRlZCwgXCJyZW1vdmUgaXRcIiBieSBzZXR0aW5nIHZhbHVlIHRvIGB1bmRlZmluZWRgLlxuICAgICAgICAgIGVsZW1lbnRbZXZlbnROYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShldmVudE5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gICAgfVxuICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkSW5uZXI7XG4gIH0pKCk7XG5cbiAgXG5cbiAgLy8gTW9kZXJuaXpyLmhhc0V2ZW50KCkgZGV0ZWN0cyBzdXBwb3J0IGZvciBhIGdpdmVuIGV2ZW50LCB3aXRoIGFuIG9wdGlvbmFsIGVsZW1lbnQgdG8gdGVzdCBvblxuICAvLyBNb2Rlcm5penIuaGFzRXZlbnQoJ2dlc3R1cmVzdGFydCcsIGVsZW0pXG4gIHZhciBoYXNFdmVudCA9IE1vZGVybml6clByb3RvLmhhc0V2ZW50ID0gaXNFdmVudFN1cHBvcnRlZDtcbiAgXG5cbiAgLyoqXG4gICAqIGlzIHJldHVybnMgYSBib29sZWFuIGZvciBpZiB0eXBlb2Ygb2JqIGlzIGV4YWN0bHkgdHlwZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzKCBvYmosIHR5cGUgKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IHR5cGU7XG4gIH1cbiAgO1xuXG4gIHZhciBjbGFzc2VzID0gW107XG4gIFxuXG4gIC8vIFJ1biB0aHJvdWdoIGFsbCB0ZXN0cyBhbmQgZGV0ZWN0IHRoZWlyIHN1cHBvcnQgaW4gdGhlIGN1cnJlbnQgVUEuXG4gIGZ1bmN0aW9uIHRlc3RSdW5uZXIoKSB7XG4gICAgdmFyIGZlYXR1cmVOYW1lcztcbiAgICB2YXIgZmVhdHVyZTtcbiAgICB2YXIgYWxpYXNJZHg7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgbmFtZUlkeDtcbiAgICB2YXIgZmVhdHVyZU5hbWU7XG4gICAgdmFyIGZlYXR1cmVOYW1lU3BsaXQ7XG5cbiAgICBmb3IgKCB2YXIgZmVhdHVyZUlkeCBpbiB0ZXN0cyApIHtcbiAgICAgIGZlYXR1cmVOYW1lcyA9IFtdO1xuICAgICAgZmVhdHVyZSA9IHRlc3RzW2ZlYXR1cmVJZHhdO1xuICAgICAgLy8gcnVuIHRoZSB0ZXN0LCB0aHJvdyB0aGUgcmV0dXJuIHZhbHVlIGludG8gdGhlIE1vZGVybml6cixcbiAgICAgIC8vICAgdGhlbiBiYXNlZCBvbiB0aGF0IGJvb2xlYW4sIGRlZmluZSBhbiBhcHByb3ByaWF0ZSBjbGFzc05hbWVcbiAgICAgIC8vICAgYW5kIHB1c2ggaXQgaW50byBhbiBhcnJheSBvZiBjbGFzc2VzIHdlJ2xsIGpvaW4gbGF0ZXIuXG4gICAgICAvL1xuICAgICAgLy8gICBJZiB0aGVyZSBpcyBubyBuYW1lLCBpdCdzIGFuICdhc3luYycgdGVzdCB0aGF0IGlzIHJ1bixcbiAgICAgIC8vICAgYnV0IG5vdCBkaXJlY3RseSBhZGRlZCB0byB0aGUgb2JqZWN0LiBUaGF0IHNob3VsZFxuICAgICAgLy8gICBiZSBkb25lIHdpdGggYSBwb3N0LXJ1biBhZGRUZXN0IGNhbGwuXG4gICAgICBpZiAoIGZlYXR1cmUubmFtZSApIHtcbiAgICAgICAgZmVhdHVyZU5hbWVzLnB1c2goZmVhdHVyZS5uYW1lLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgIGlmIChmZWF0dXJlLm9wdGlvbnMgJiYgZmVhdHVyZS5vcHRpb25zLmFsaWFzZXMgJiYgZmVhdHVyZS5vcHRpb25zLmFsaWFzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gQWRkIGFsbCB0aGUgYWxpYXNlcyBpbnRvIHRoZSBuYW1lcyBsaXN0XG4gICAgICAgICAgZm9yIChhbGlhc0lkeCA9IDA7IGFsaWFzSWR4IDwgZmVhdHVyZS5vcHRpb25zLmFsaWFzZXMubGVuZ3RoOyBhbGlhc0lkeCsrKSB7XG4gICAgICAgICAgICBmZWF0dXJlTmFtZXMucHVzaChmZWF0dXJlLm9wdGlvbnMuYWxpYXNlc1thbGlhc0lkeF0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJ1biB0aGUgdGVzdCwgb3IgdXNlIHRoZSByYXcgdmFsdWUgaWYgaXQncyBub3QgYSBmdW5jdGlvblxuICAgICAgcmVzdWx0ID0gaXMoZmVhdHVyZS5mbiwgJ2Z1bmN0aW9uJykgPyBmZWF0dXJlLmZuKCkgOiBmZWF0dXJlLmZuO1xuXG5cbiAgICAgIC8vIFNldCBlYWNoIG9mIHRoZSBuYW1lcyBvbiB0aGUgTW9kZXJuaXpyIG9iamVjdFxuICAgICAgZm9yIChuYW1lSWR4ID0gMDsgbmFtZUlkeCA8IGZlYXR1cmVOYW1lcy5sZW5ndGg7IG5hbWVJZHgrKykge1xuICAgICAgICBmZWF0dXJlTmFtZSA9IGZlYXR1cmVOYW1lc1tuYW1lSWR4XTtcbiAgICAgICAgLy8gU3VwcG9ydCBkb3QgcHJvcGVydGllcyBhcyBzdWIgdGVzdHMuIFdlIGRvbid0IGRvIGNoZWNraW5nIHRvIG1ha2Ugc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBpbXBsaWVkIHBhcmVudCB0ZXN0cyBoYXZlIGJlZW4gYWRkZWQuIFlvdSBtdXN0IGNhbGwgdGhlbSBpblxuICAgICAgICAvLyBvcmRlciAoZWl0aGVyIGluIHRoZSB0ZXN0LCBvciBtYWtlIHRoZSBwYXJlbnQgdGVzdCBhIGRlcGVuZGVuY3kpLlxuICAgICAgICAvL1xuICAgICAgICAvLyBDYXAgaXQgdG8gVFdPIHRvIG1ha2UgdGhlIGxvZ2ljIHNpbXBsZSBhbmQgYmVjYXVzZSB3aG8gbmVlZHMgdGhhdCBraW5kIG9mIHN1YnRlc3RpbmdcbiAgICAgICAgLy8gaGFzaHRhZyBmYW1vdXMgbGFzdCB3b3Jkc1xuICAgICAgICBmZWF0dXJlTmFtZVNwbGl0ID0gZmVhdHVyZU5hbWUuc3BsaXQoJy4nKTtcblxuICAgICAgICBpZiAoZmVhdHVyZU5hbWVTcGxpdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBNb2Rlcm5penJbZmVhdHVyZU5hbWVTcGxpdFswXV0gPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2FzdCB0byBhIEJvb2xlYW4sIGlmIG5vdCBvbmUgYWxyZWFkeVxuICAgICAgICAgIC8qIGpzaGludCAtVzA1MyAqL1xuICAgICAgICAgIGlmIChNb2Rlcm5penJbZmVhdHVyZU5hbWVTcGxpdFswXV0gJiYgIShNb2Rlcm5penJbZmVhdHVyZU5hbWVTcGxpdFswXV0gaW5zdGFuY2VvZiBCb29sZWFuKSkge1xuICAgICAgICAgICAgTW9kZXJuaXpyW2ZlYXR1cmVOYW1lU3BsaXRbMF1dID0gbmV3IEJvb2xlYW4oTW9kZXJuaXpyW2ZlYXR1cmVOYW1lU3BsaXRbMF1dKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBNb2Rlcm5penJbZmVhdHVyZU5hbWVTcGxpdFswXV1bZmVhdHVyZU5hbWVTcGxpdFsxXV0gPSByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjbGFzc2VzLnB1c2goKHJlc3VsdCA/ICcnIDogJ25vLScpICsgZmVhdHVyZU5hbWVTcGxpdC5qb2luKCctJykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIDtcblxuICB2YXIgZG9jRWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgXG5cbiAgZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgICAvLyBBZnRlciBwYWdlIGxvYWQgaW5qZWN0aW5nIGEgZmFrZSBib2R5IGRvZXNuJ3Qgd29yayBzbyBjaGVjayBpZiBib2R5IGV4aXN0c1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIGlmKCFib2R5KSB7XG4gICAgICAvLyBDYW4ndCB1c2UgdGhlIHJlYWwgYm9keSBjcmVhdGUgYSBmYWtlIG9uZS5cbiAgICAgIGJvZHkgPSBjcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgICBib2R5LmZha2UgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBib2R5O1xuICB9XG5cbiAgO1xuXG4gIC8vIEluamVjdCBlbGVtZW50IHdpdGggc3R5bGUgZWxlbWVudCBhbmQgc29tZSBDU1MgcnVsZXNcbiAgZnVuY3Rpb24gaW5qZWN0RWxlbWVudFdpdGhTdHlsZXMoIHJ1bGUsIGNhbGxiYWNrLCBub2RlcywgdGVzdG5hbWVzICkge1xuICAgIHZhciBtb2QgPSAnbW9kZXJuaXpyJztcbiAgICB2YXIgc3R5bGU7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgbm9kZTtcbiAgICB2YXIgZG9jT3ZlcmZsb3c7XG4gICAgdmFyIGRpdiA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciBib2R5ID0gZ2V0Qm9keSgpO1xuXG4gICAgaWYgKCBwYXJzZUludChub2RlcywgMTApICkge1xuICAgICAgLy8gSW4gb3JkZXIgbm90IHRvIGdpdmUgZmFsc2UgcG9zaXRpdmVzIHdlIGNyZWF0ZSBhIG5vZGUgZm9yIGVhY2ggdGVzdFxuICAgICAgLy8gVGhpcyBhbHNvIGFsbG93cyB0aGUgbWV0aG9kIHRvIHNjYWxlIGZvciB1bnNwZWNpZmllZCB1c2VzXG4gICAgICB3aGlsZSAoIG5vZGVzLS0gKSB7XG4gICAgICAgIG5vZGUgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbm9kZS5pZCA9IHRlc3RuYW1lcyA/IHRlc3RuYW1lc1tub2Rlc10gOiBtb2QgKyAobm9kZXMgKyAxKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIDxzdHlsZT4gZWxlbWVudHMgaW4gSUU2LTkgYXJlIGNvbnNpZGVyZWQgJ05vU2NvcGUnIGVsZW1lbnRzIGFuZCB0aGVyZWZvcmUgd2lsbCBiZSByZW1vdmVkXG4gICAgLy8gd2hlbiBpbmplY3RlZCB3aXRoIGlubmVySFRNTC4gVG8gZ2V0IGFyb3VuZCB0aGlzIHlvdSBuZWVkIHRvIHByZXBlbmQgdGhlICdOb1Njb3BlJyBlbGVtZW50XG4gICAgLy8gd2l0aCBhICdzY29wZWQnIGVsZW1lbnQsIGluIG91ciBjYXNlIHRoZSBzb2Z0LWh5cGhlbiBlbnRpdHkgYXMgaXQgd29uJ3QgbWVzcyB3aXRoIG91ciBtZWFzdXJlbWVudHMuXG4gICAgLy8gbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzM4OTclMjhWUy44NSUyOS5hc3B4XG4gICAgLy8gRG9jdW1lbnRzIHNlcnZlZCBhcyB4bWwgd2lsbCB0aHJvdyBpZiB1c2luZyAmc2h5OyBzbyB1c2UgeG1sIGZyaWVuZGx5IGVuY29kZWQgdmVyc2lvbi4gU2VlIGlzc3VlICMyNzdcbiAgICBzdHlsZSA9IFsnJiMxNzM7JywnPHN0eWxlIGlkPVwicycsIG1vZCwgJ1wiPicsIHJ1bGUsICc8L3N0eWxlPiddLmpvaW4oJycpO1xuICAgIGRpdi5pZCA9IG1vZDtcbiAgICAvLyBJRTYgd2lsbCBmYWxzZSBwb3NpdGl2ZSBvbiBzb21lIHRlc3RzIGR1ZSB0byB0aGUgc3R5bGUgZWxlbWVudCBpbnNpZGUgdGhlIHRlc3QgZGl2IHNvbWVob3cgaW50ZXJmZXJpbmcgb2Zmc2V0SGVpZ2h0LCBzbyBpbnNlcnQgaXQgaW50byBib2R5IG9yIGZha2Vib2R5LlxuICAgIC8vIE9wZXJhIHdpbGwgYWN0IGFsbCBxdWlya3kgd2hlbiBpbmplY3RpbmcgZWxlbWVudHMgaW4gZG9jdW1lbnRFbGVtZW50IHdoZW4gcGFnZSBpcyBzZXJ2ZWQgYXMgeG1sLCBuZWVkcyBmYWtlYm9keSB0b28uICMyNzBcbiAgICAoIWJvZHkuZmFrZSA/IGRpdiA6IGJvZHkpLmlubmVySFRNTCArPSBzdHlsZTtcbiAgICBib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gICAgaWYgKCBib2R5LmZha2UgKSB7XG4gICAgICAvL2F2b2lkIGNyYXNoaW5nIElFOCwgaWYgYmFja2dyb3VuZCBpbWFnZSBpcyB1c2VkXG4gICAgICBib2R5LnN0eWxlLmJhY2tncm91bmQgPSAnJztcbiAgICAgIC8vU2FmYXJpIDUuMTMvNS4xLjQgT1NYIHN0b3BzIGxvYWRpbmcgaWYgOjotd2Via2l0LXNjcm9sbGJhciBpcyB1c2VkIGFuZCBzY3JvbGxiYXJzIGFyZSB2aXNpYmxlXG4gICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBkb2NPdmVyZmxvdyA9IGRvY0VsZW1lbnQuc3R5bGUub3ZlcmZsb3c7XG4gICAgICBkb2NFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBkb2NFbGVtZW50LmFwcGVuZENoaWxkKGJvZHkpO1xuICAgIH1cblxuICAgIHJldCA9IGNhbGxiYWNrKGRpdiwgcnVsZSk7XG4gICAgLy8gSWYgdGhpcyBpcyBkb25lIGFmdGVyIHBhZ2UgbG9hZCB3ZSBkb24ndCB3YW50IHRvIHJlbW92ZSB0aGUgYm9keSBzbyBjaGVjayBpZiBib2R5IGV4aXN0c1xuICAgIGlmICggYm9keS5mYWtlICkge1xuICAgICAgYm9keS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGJvZHkpO1xuICAgICAgZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IGRvY092ZXJmbG93O1xuICAgICAgLy8gVHJpZ2dlciBsYXlvdXQgc28ga2luZXRpYyBzY3JvbGxpbmcgaXNuJ3QgZGlzYWJsZWQgaW4gaU9TNitcbiAgICAgIGRvY0VsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xuICAgIH1cblxuICAgIHJldHVybiAhIXJldDtcblxuICB9XG5cbiAgO1xuXG4gIHZhciB0ZXN0U3R5bGVzID0gTW9kZXJuaXpyUHJvdG8udGVzdFN0eWxlcyA9IGluamVjdEVsZW1lbnRXaXRoU3R5bGVzO1xuICBcbi8qIVxue1xuICBcIm5hbWVcIjogXCJDU1MgRGlzcGxheSB0YWJsZVwiLFxuICBcInByb3BlcnR5XCI6IFwiZGlzcGxheXRhYmxlXCIsXG4gIFwiY2FuaXVzZVwiOiBcImNzcy10YWJsZVwiLFxuICBcImF1dGhvcnNcIjogW1wic2NvdHRqZWhsXCJdLFxuICBcInRhZ3NcIjogW1wiY3NzXCJdLFxuICBcImJ1aWxkZXJBbGlhc2VzXCI6IFtcImNzc19kaXNwbGF5dGFibGVcIl0sXG4gIFwibm90ZXNcIjogW3tcbiAgICBcIm5hbWVcIjogXCJEZXRlY3RzIGZvciBhbGwgYWRkaXRpb25hbCB0YWJsZSBkaXNwbGF5IHZhbHVlc1wiLFxuICAgIFwiaHJlZlwiOiBcImh0dHA6Ly9wYXN0ZWJpbi5jb20vR2s5UGVWYVFcIlxuICB9XVxufVxuISovXG4vKiBET0NcbmBkaXNwbGF5OiB0YWJsZWAgYW5kIGB0YWJsZS1jZWxsYCB0ZXN0LiAoYm90aCBhcmUgdGVzdGVkIHVuZGVyIG9uZSBuYW1lIGB0YWJsZS1jZWxsYCApXG4qL1xuXG4gIC8vIElmIGEgZG9jdW1lbnQgaXMgaW4gcnRsIG1vZGUgdGhpcyB0ZXN0IHdpbGwgZmFpbCBzbyB3ZSBmb3JjZSBsdHIgbW9kZSBvbiB0aGUgaW5qZWNlZFxuICAvLyBlbGVtZW50IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy83MTZcbiAgdGVzdFN0eWxlcygnI21vZGVybml6cntkaXNwbGF5OiB0YWJsZTsgZGlyZWN0aW9uOiBsdHJ9I21vZGVybml6ciBkaXZ7ZGlzcGxheTogdGFibGUtY2VsbDsgcGFkZGluZzogMTBweH0nLCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICB2YXIgcmV0O1xuICAgIHZhciBjaGlsZCA9IGVsZW0uY2hpbGRyZW47XG4gICAgcmV0ID0gY2hpbGRbMF0ub2Zmc2V0TGVmdCA8IGNoaWxkWzFdLm9mZnNldExlZnQ7XG4gICAgTW9kZXJuaXpyLmFkZFRlc3QoJ2Rpc3BsYXl0YWJsZScsIHJldCwgeyBhbGlhc2VzOiBbJ2Rpc3BsYXktdGFibGUnXSB9KTtcbiAgfSwyKTtcblxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgY29udmVydGluZyBrZWJhYi1jYXNlIHRvIGNhbWVsQ2FzZSxcbiAgLy8gZS5nLiBib3gtc2l6aW5nIC0+IGJveFNpemluZ1xuICBmdW5jdGlvbiBjc3NUb0RPTSggbmFtZSApIHtcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKC8oW2Etel0pLShbYS16XSkvZywgZnVuY3Rpb24oc3RyLCBtMSwgbTIpIHtcbiAgICAgIHJldHVybiBtMSArIG0yLnRvVXBwZXJDYXNlKCk7XG4gICAgfSkucmVwbGFjZSgvXi0vLCAnJyk7XG4gIH1cbiAgO1xuXG4gIC8qKlxuICAgKiBjb250YWlucyByZXR1cm5zIGEgYm9vbGVhbiBmb3IgaWYgc3Vic3RyIGlzIGZvdW5kIHdpdGhpbiBzdHIuXG4gICAqL1xuICBmdW5jdGlvbiBjb250YWlucyggc3RyLCBzdWJzdHIgKSB7XG4gICAgcmV0dXJuICEhfignJyArIHN0cikuaW5kZXhPZihzdWJzdHIpO1xuICB9XG5cbiAgO1xuXG4gIC8vIENoYW5nZSB0aGUgZnVuY3Rpb24ncyBzY29wZS5cbiAgZnVuY3Rpb24gZm5CaW5kKGZuLCB0aGF0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIDtcblxuICAvKipcbiAgICogdGVzdERPTVByb3BzIGlzIGEgZ2VuZXJpYyBET00gcHJvcGVydHkgdGVzdDsgaWYgYSBicm93c2VyIHN1cHBvcnRzXG4gICAqICAgYSBjZXJ0YWluIHByb3BlcnR5LCBpdCB3b24ndCByZXR1cm4gdW5kZWZpbmVkIGZvciBpdC5cbiAgICovXG4gIGZ1bmN0aW9uIHRlc3RET01Qcm9wcyggcHJvcHMsIG9iaiwgZWxlbSApIHtcbiAgICB2YXIgaXRlbTtcblxuICAgIGZvciAoIHZhciBpIGluIHByb3BzICkge1xuICAgICAgaWYgKCBwcm9wc1tpXSBpbiBvYmogKSB7XG5cbiAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9wZXJ0eSBuYW1lIGFzIGEgc3RyaW5nXG4gICAgICAgIGlmIChlbGVtID09PSBmYWxzZSkgcmV0dXJuIHByb3BzW2ldO1xuXG4gICAgICAgIGl0ZW0gPSBvYmpbcHJvcHNbaV1dO1xuXG4gICAgICAgIC8vIGxldCdzIGJpbmQgYSBmdW5jdGlvblxuICAgICAgICBpZiAoaXMoaXRlbSwgJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAvLyBiaW5kIHRvIG9iaiB1bmxlc3Mgb3ZlcnJpZGVuXG4gICAgICAgICAgcmV0dXJuIGZuQmluZChpdGVtLCBlbGVtIHx8IG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gdGhlIHVuYm91bmQgZnVuY3Rpb24gb3Igb2JqIG9yIHZhbHVlXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICA7XG5cbiAgLy8gRm9sbG93aW5nIHNwZWMgaXMgdG8gZXhwb3NlIHZlbmRvci1zcGVjaWZpYyBzdHlsZSBwcm9wZXJ0aWVzIGFzOlxuICAvLyAgIGVsZW0uc3R5bGUuV2Via2l0Qm9yZGVyUmFkaXVzXG4gIC8vIGFuZCB0aGUgZm9sbG93aW5nIHdvdWxkIGJlIGluY29ycmVjdDpcbiAgLy8gICBlbGVtLnN0eWxlLndlYmtpdEJvcmRlclJhZGl1c1xuXG4gIC8vIFdlYmtpdCBnaG9zdHMgdGhlaXIgcHJvcGVydGllcyBpbiBsb3dlcmNhc2UgYnV0IE9wZXJhICYgTW96IGRvIG5vdC5cbiAgLy8gTWljcm9zb2Z0IHVzZXMgYSBsb3dlcmNhc2UgYG1zYCBpbnN0ZWFkIG9mIHRoZSBjb3JyZWN0IGBNc2AgaW4gSUU4K1xuICAvLyAgIGVyaWsuZWFlLm5ldC9hcmNoaXZlcy8yMDA4LzAzLzEwLzIxLjQ4LjEwL1xuXG4gIC8vIE1vcmUgaGVyZTogZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2lzc3Vlcy9pc3N1ZS8yMVxuICB2YXIgb21QcmVmaXhlcyA9ICdNb3ogTyBtcyBXZWJraXQnO1xuICBcblxuICB2YXIgY3Nzb21QcmVmaXhlcyA9IChNb2Rlcm5penJQcm90by5fY29uZmlnLnVzZVByZWZpeGVzID8gb21QcmVmaXhlcy5zcGxpdCgnICcpIDogW10pO1xuICBNb2Rlcm5penJQcm90by5fY3Nzb21QcmVmaXhlcyA9IGNzc29tUHJlZml4ZXM7XG4gIFxuXG4gIHZhciBkb21QcmVmaXhlcyA9IChNb2Rlcm5penJQcm90by5fY29uZmlnLnVzZVByZWZpeGVzID8gb21QcmVmaXhlcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCcgJykgOiBbXSk7XG4gIE1vZGVybml6clByb3RvLl9kb21QcmVmaXhlcyA9IGRvbVByZWZpeGVzO1xuICBcblxuICAvKipcbiAgICogQ3JlYXRlIG91ciBcIm1vZGVybml6clwiIGVsZW1lbnQgdGhhdCB3ZSBkbyBtb3N0IGZlYXR1cmUgdGVzdHMgb24uXG4gICAqL1xuICB2YXIgbW9kRWxlbSA9IHtcbiAgICBlbGVtIDogY3JlYXRlRWxlbWVudCgnbW9kZXJuaXpyJylcbiAgfTtcblxuICAvLyBDbGVhbiB1cCB0aGlzIGVsZW1lbnRcbiAgTW9kZXJuaXpyLl9xLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIG1vZEVsZW0uZWxlbTtcbiAgfSk7XG5cbiAgXG5cbiAgdmFyIG1TdHlsZSA9IHtcbiAgICBzdHlsZSA6IG1vZEVsZW0uZWxlbS5zdHlsZVxuICB9O1xuXG4gIC8vIGtpbGwgcmVmIGZvciBnYywgbXVzdCBoYXBwZW4gYmVmb3JlXG4gIC8vIG1vZC5lbGVtIGlzIHJlbW92ZWQsIHNvIHdlIHVuc2hpZnQgb24gdG9cbiAgLy8gdGhlIGZyb250IG9mIHRoZSBxdWV1ZS5cbiAgTW9kZXJuaXpyLl9xLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIG1TdHlsZS5zdHlsZTtcbiAgfSk7XG5cbiAgXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIGNhbWVsQ2FzZSB0byBrZWJhYi1jYXNlLFxuICAvLyBlLmcuIGJveFNpemluZyAtPiBib3gtc2l6aW5nXG4gIGZ1bmN0aW9uIGRvbVRvQ1NTKCBuYW1lICkge1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24oc3RyLCBtMSkge1xuICAgICAgcmV0dXJuICctJyArIG0xLnRvTG93ZXJDYXNlKCk7XG4gICAgfSkucmVwbGFjZSgvXm1zLS8sICctbXMtJyk7XG4gIH1cbiAgO1xuXG4gIC8vIEZ1bmN0aW9uIHRvIGFsbG93IHVzIHRvIHVzZSBuYXRpdmUgZmVhdHVyZSBkZXRlY3Rpb24gZnVuY3Rpb25hbGl0eSBpZiBhdmFpbGFibGUuXG4gIC8vIEFjY2VwdHMgYSBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBhIHNpbmdsZSB2YWx1ZVxuICAvLyBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5hdGl2ZSBkZXRlY3Rpb24gbm90IGF2YWlsYWJsZVxuICBmdW5jdGlvbiBuYXRpdmVUZXN0UHJvcHMgKCBwcm9wcywgdmFsdWUgKSB7XG4gICAgdmFyIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgLy8gU3RhcnQgd2l0aCB0aGUgSlMgQVBJOiBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbmRpdGlvbmFsLyN0aGUtY3NzLWludGVyZmFjZVxuICAgIGlmICgnQ1NTJyBpbiB3aW5kb3cgJiYgJ3N1cHBvcnRzJyBpbiB3aW5kb3cuQ1NTKSB7XG4gICAgICAvLyBUcnkgZXZlcnkgcHJlZml4ZWQgdmFyaWFudCBvZiB0aGUgcHJvcGVydHlcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKHdpbmRvdy5DU1Muc3VwcG9ydHMoZG9tVG9DU1MocHJvcHNbaV0pLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIHRvIGF0LXJ1bGUgKGZvciBPcGVyYSAxMi54KVxuICAgIGVsc2UgaWYgKCdDU1NTdXBwb3J0c1J1bGUnIGluIHdpbmRvdykge1xuICAgICAgLy8gQnVpbGQgYSBjb25kaXRpb24gc3RyaW5nIGZvciBldmVyeSBwcmVmaXhlZCB2YXJpYW50XG4gICAgICB2YXIgY29uZGl0aW9uVGV4dCA9IFtdO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25kaXRpb25UZXh0LnB1c2goJygnICsgZG9tVG9DU1MocHJvcHNbaV0pICsgJzonICsgdmFsdWUgKyAnKScpO1xuICAgICAgfVxuICAgICAgY29uZGl0aW9uVGV4dCA9IGNvbmRpdGlvblRleHQuam9pbignIG9yICcpO1xuICAgICAgcmV0dXJuIGluamVjdEVsZW1lbnRXaXRoU3R5bGVzKCdAc3VwcG9ydHMgKCcgKyBjb25kaXRpb25UZXh0ICsgJykgeyAjbW9kZXJuaXpyIHsgcG9zaXRpb246IGFic29sdXRlOyB9IH0nLCBmdW5jdGlvbiggbm9kZSApIHtcbiAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkucG9zaXRpb24gPT0gJ2Fic29sdXRlJztcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIDtcblxuICAvLyB0ZXN0UHJvcHMgaXMgYSBnZW5lcmljIENTUyAvIERPTSBwcm9wZXJ0eSB0ZXN0LlxuXG4gIC8vIEluIHRlc3Rpbmcgc3VwcG9ydCBmb3IgYSBnaXZlbiBDU1MgcHJvcGVydHksIGl0J3MgbGVnaXQgdG8gdGVzdDpcbiAgLy8gICAgYGVsZW0uc3R5bGVbc3R5bGVOYW1lXSAhPT0gdW5kZWZpbmVkYFxuICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgc3VwcG9ydGVkIGl0IHdpbGwgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyxcbiAgLy8gaWYgdW5zdXBwb3J0ZWQgaXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkLlxuXG4gIC8vIFdlJ2xsIHRha2UgYWR2YW50YWdlIG9mIHRoaXMgcXVpY2sgdGVzdCBhbmQgc2tpcCBzZXR0aW5nIGEgc3R5bGVcbiAgLy8gb24gb3VyIG1vZGVybml6ciBlbGVtZW50LCBidXQgaW5zdGVhZCBqdXN0IHRlc3RpbmcgdW5kZWZpbmVkIHZzXG4gIC8vIGVtcHR5IHN0cmluZy5cblxuICAvLyBQcm9wZXJ0eSBuYW1lcyBjYW4gYmUgcHJvdmlkZWQgaW4gZWl0aGVyIGNhbWVsQ2FzZSBvciBrZWJhYi1jYXNlLlxuXG4gIGZ1bmN0aW9uIHRlc3RQcm9wcyggcHJvcHMsIHByZWZpeGVkLCB2YWx1ZSwgc2tpcFZhbHVlVGVzdCApIHtcbiAgICBza2lwVmFsdWVUZXN0ID0gaXMoc2tpcFZhbHVlVGVzdCwgJ3VuZGVmaW5lZCcpID8gZmFsc2UgOiBza2lwVmFsdWVUZXN0O1xuXG4gICAgLy8gVHJ5IG5hdGl2ZSBkZXRlY3QgZmlyc3RcbiAgICBpZiAoIWlzKHZhbHVlLCAndW5kZWZpbmVkJykpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVUZXN0UHJvcHMocHJvcHMsIHZhbHVlKTtcbiAgICAgIGlmKCFpcyhyZXN1bHQsICd1bmRlZmluZWQnKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSBkbyBpdCBwcm9wZXJseVxuICAgIHZhciBhZnRlckluaXQsIGksIHByb3BzTGVuZ3RoLCBwcm9wLCBiZWZvcmU7XG5cbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgc3R5bGUgZWxlbWVudCwgdGhhdCBtZWFuc1xuICAgIC8vIHdlJ3JlIHJ1bm5pbmcgYXN5bmMgb3IgYWZ0ZXIgdGhlIGNvcmUgdGVzdHMsXG4gICAgLy8gc28gd2UnbGwgbmVlZCB0byBjcmVhdGUgb3VyIG93biBlbGVtZW50cyB0byB1c2VcbiAgICBpZiAoICFtU3R5bGUuc3R5bGUgKSB7XG4gICAgICBhZnRlckluaXQgPSB0cnVlO1xuICAgICAgbVN0eWxlLm1vZEVsZW0gPSBjcmVhdGVFbGVtZW50KCdtb2Rlcm5penInKTtcbiAgICAgIG1TdHlsZS5zdHlsZSA9IG1TdHlsZS5tb2RFbGVtLnN0eWxlO1xuICAgIH1cblxuICAgIC8vIERlbGV0ZSB0aGUgb2JqZWN0cyBpZiB3ZVxuICAgIC8vIHdlIGNyZWF0ZWQgdGhlbS5cbiAgICBmdW5jdGlvbiBjbGVhbkVsZW1zKCkge1xuICAgICAgaWYgKGFmdGVySW5pdCkge1xuICAgICAgICBkZWxldGUgbVN0eWxlLnN0eWxlO1xuICAgICAgICBkZWxldGUgbVN0eWxlLm1vZEVsZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgZm9yICggaSA9IDA7IGkgPCBwcm9wc0xlbmd0aDsgaSsrICkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgYmVmb3JlID0gbVN0eWxlLnN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAoY29udGFpbnMocHJvcCwgJy0nKSkge1xuICAgICAgICBwcm9wID0gY3NzVG9ET00ocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmICggbVN0eWxlLnN0eWxlW3Byb3BdICE9PSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgLy8gSWYgdmFsdWUgdG8gdGVzdCBoYXMgYmVlbiBwYXNzZWQgaW4sIGRvIGEgc2V0LWFuZC1jaGVjayB0ZXN0LlxuICAgICAgICAvLyAwIChpbnRlZ2VyKSBpcyBhIHZhbGlkIHByb3BlcnR5IHZhbHVlLCBzbyBjaGVjayB0aGF0IGB2YWx1ZWAgaXNuJ3RcbiAgICAgICAgLy8gdW5kZWZpbmVkLCByYXRoZXIgdGhhbiBqdXN0IGNoZWNraW5nIGl0J3MgdHJ1dGh5LlxuICAgICAgICBpZiAoIXNraXBWYWx1ZVRlc3QgJiYgIWlzKHZhbHVlLCAndW5kZWZpbmVkJykpIHtcblxuICAgICAgICAgIC8vIE5lZWRzIGEgdHJ5IGNhdGNoIGJsb2NrIGJlY2F1c2Ugb2Ygb2xkIElFLiBUaGlzIGlzIHNsb3csIGJ1dCB3aWxsXG4gICAgICAgICAgLy8gYmUgYXZvaWRlZCBpbiBtb3N0IGNhc2VzIGJlY2F1c2UgYHNraXBWYWx1ZVRlc3RgIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbVN0eWxlLnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgICAgIC8vIElmIHRoZSBwcm9wZXJ0eSB2YWx1ZSBoYXMgY2hhbmdlZCwgd2UgYXNzdW1lIHRoZSB2YWx1ZSB1c2VkIGlzXG4gICAgICAgICAgLy8gc3VwcG9ydGVkLiBJZiBgdmFsdWVgIGlzIGVtcHR5IHN0cmluZywgaXQnbGwgZmFpbCBoZXJlIChiZWNhdXNlXG4gICAgICAgICAgLy8gaXQgaGFzbid0IGNoYW5nZWQpLCB3aGljaCBtYXRjaGVzIGhvdyBicm93c2VycyBoYXZlIGltcGxlbWVudGVkXG4gICAgICAgICAgLy8gQ1NTLnN1cHBvcnRzKClcbiAgICAgICAgICBpZiAobVN0eWxlLnN0eWxlW3Byb3BdICE9IGJlZm9yZSkge1xuICAgICAgICAgICAgY2xlYW5FbGVtcygpO1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeGVkID09ICdwZngnID8gcHJvcCA6IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHJldHVybiB0cnVlLCBvciB0aGUgcHJvcGVydHkgbmFtZSBpZiB0aGlzIGlzIGFcbiAgICAgICAgLy8gYHByZWZpeGVkKClgIGNhbGxcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY2xlYW5FbGVtcygpO1xuICAgICAgICAgIHJldHVybiBwcmVmaXhlZCA9PSAncGZ4JyA/IHByb3AgOiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNsZWFuRWxlbXMoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICA7XG5cbiAgLyoqXG4gICAqIHRlc3RQcm9wc0FsbCB0ZXN0cyBhIGxpc3Qgb2YgRE9NIHByb3BlcnRpZXMgd2Ugd2FudCB0byBjaGVjayBhZ2FpbnN0LlxuICAgKiAgICAgV2Ugc3BlY2lmeSBsaXRlcmFsbHkgQUxMIHBvc3NpYmxlIChrbm93biBhbmQvb3IgbGlrZWx5KSBwcm9wZXJ0aWVzIG9uXG4gICAqICAgICB0aGUgZWxlbWVudCBpbmNsdWRpbmcgdGhlIG5vbi12ZW5kb3IgcHJlZml4ZWQgb25lLCBmb3IgZm9yd2FyZC1cbiAgICogICAgIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBmdW5jdGlvbiB0ZXN0UHJvcHNBbGwoIHByb3AsIHByZWZpeGVkLCBlbGVtLCB2YWx1ZSwgc2tpcFZhbHVlVGVzdCApIHtcblxuICAgIHZhciB1Y1Byb3AgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKSxcbiAgICBwcm9wcyA9IChwcm9wICsgJyAnICsgY3Nzb21QcmVmaXhlcy5qb2luKHVjUHJvcCArICcgJykgKyB1Y1Byb3ApLnNwbGl0KCcgJyk7XG5cbiAgICAvLyBkaWQgdGhleSBjYWxsIC5wcmVmaXhlZCgnYm94U2l6aW5nJykgb3IgYXJlIHdlIGp1c3QgdGVzdGluZyBhIHByb3A/XG4gICAgaWYoaXMocHJlZml4ZWQsICdzdHJpbmcnKSB8fCBpcyhwcmVmaXhlZCwgJ3VuZGVmaW5lZCcpKSB7XG4gICAgICByZXR1cm4gdGVzdFByb3BzKHByb3BzLCBwcmVmaXhlZCwgdmFsdWUsIHNraXBWYWx1ZVRlc3QpO1xuXG4gICAgICAvLyBvdGhlcndpc2UsIHRoZXkgY2FsbGVkIC5wcmVmaXhlZCgncmVxdWVzdEFuaW1hdGlvbkZyYW1lJywgd2luZG93WywgZWxlbV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gKHByb3AgKyAnICcgKyAoZG9tUHJlZml4ZXMpLmpvaW4odWNQcm9wICsgJyAnKSArIHVjUHJvcCkuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiB0ZXN0RE9NUHJvcHMocHJvcHMsIHByZWZpeGVkLCBlbGVtKTtcbiAgICB9XG4gIH1cblxuICAvLyBNb2Rlcm5penIudGVzdEFsbFByb3BzKCkgaW52ZXN0aWdhdGVzIHdoZXRoZXIgYSBnaXZlbiBzdHlsZSBwcm9wZXJ0eSxcbiAgLy8gICAgIG9yIGFueSBvZiBpdHMgdmVuZG9yLXByZWZpeGVkIHZhcmlhbnRzLCBpcyByZWNvZ25pemVkXG4gIC8vIE5vdGUgdGhhdCB0aGUgcHJvcGVydHkgbmFtZXMgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGUgY2FtZWxDYXNlIHZhcmlhbnQuXG4gIC8vIE1vZGVybml6ci50ZXN0QWxsUHJvcHMoJ2JveFNpemluZycpXG4gIE1vZGVybml6clByb3RvLnRlc3RBbGxQcm9wcyA9IHRlc3RQcm9wc0FsbDtcblxuICBcblxuICAvKipcbiAgICogdGVzdEFsbFByb3BzIGRldGVybWluZXMgd2hldGhlciBhIGdpdmVuIENTUyBwcm9wZXJ0eSwgaW4gc29tZSBwcmVmaXhlZFxuICAgKiBmb3JtLCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuIEl0IGNhbiBvcHRpb25hbGx5IGJlIGdpdmVuIGEgdmFsdWU7IGluXG4gICAqIHdoaWNoIGNhc2UgdGVzdEFsbFByb3BzIHdpbGwgb25seSByZXR1cm4gdHJ1ZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGF0XG4gICAqIHZhbHVlIGZvciB0aGUgbmFtZWQgcHJvcGVydHk7IHRoaXMgbGF0dGVyIGNhc2Ugd2lsbCB1c2UgbmF0aXZlIGRldGVjdGlvblxuICAgKiAodmlhIHdpbmRvdy5DU1Muc3VwcG9ydHMpIGlmIGF2YWlsYWJsZS4gQSBib29sZWFuIGNhbiBiZSBwYXNzZWQgYXMgYSAzcmRcbiAgICogcGFyYW1ldGVyIHRvIHNraXAgdGhlIHZhbHVlIGNoZWNrIHdoZW4gbmF0aXZlIGRldGVjdGlvbiBpc24ndCBhdmFpbGFibGUsXG4gICAqIHRvIGltcHJvdmUgcGVyZm9ybWFuY2Ugd2hlbiBzaW1wbHkgdGVzdGluZyBmb3Igc3VwcG9ydCBvZiBhIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0gcHJvcCAtIFN0cmluZyBuYW1pbmcgdGhlIHByb3BlcnR5IHRvIHRlc3QgKGVpdGhlciBjYW1lbENhc2Ugb3JcbiAgICogICAgICAgICAgICAgICBrZWJhYi1jYXNlKVxuICAgKiBAcGFyYW0gdmFsdWUgLSBbb3B0aW9uYWxdIFN0cmluZyBvZiB0aGUgdmFsdWUgdG8gdGVzdFxuICAgKiBAcGFyYW0gc2tpcFZhbHVlVGVzdCAtIFtvcHRpb25hbF0gV2hldGhlciB0byBza2lwIHRlc3RpbmcgdGhhdCB0aGUgdmFsdWVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBpcyBzdXBwb3J0ZWQgd2hlbiB1c2luZyBub24tbmF0aXZlIGRldGVjdGlvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBmYWxzZSlcbiAgICovXG4gIGZ1bmN0aW9uIHRlc3RBbGxQcm9wcyAocHJvcCwgdmFsdWUsIHNraXBWYWx1ZVRlc3QpIHtcbiAgICByZXR1cm4gdGVzdFByb3BzQWxsKHByb3AsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB2YWx1ZSwgc2tpcFZhbHVlVGVzdCk7XG4gIH1cbiAgTW9kZXJuaXpyUHJvdG8udGVzdEFsbFByb3BzID0gdGVzdEFsbFByb3BzO1xuICBcbi8qIVxue1xuICBcIm5hbWVcIjogXCJDU1MgQW5pbWF0aW9uc1wiLFxuICBcInByb3BlcnR5XCI6IFwiY3NzYW5pbWF0aW9uc1wiLFxuICBcImNhbml1c2VcIjogXCJjc3MtYW5pbWF0aW9uXCIsXG4gIFwicG9seWZpbGxzXCI6IFtcInRyYW5zZm9ybWllXCIsIFwiY3Nzc2FuZHBhcGVyXCJdLFxuICBcInRhZ3NcIjogW1wiY3NzXCJdLFxuICBcIndhcm5pbmdzXCI6IFtcIkFuZHJvaWQgPCA0IHdpbGwgcGFzcyB0aGlzIHRlc3QsIGJ1dCBjYW4gb25seSBhbmltYXRlIGEgc2luZ2xlIHByb3BlcnR5IGF0IGEgdGltZVwiXSxcbiAgXCJub3Rlc1wiOiBbe1xuICAgIFwibmFtZVwiIDogXCJBcnRpY2xlOiAnRGlzcGVsbGluZyB0aGUgQW5kcm9pZCBDU1MgYW5pbWF0aW9uIG15dGhzJ1wiLFxuICAgIFwiaHJlZlwiOiBcImh0dHA6Ly9nb28uZ2wvT0d3NUdtXCJcbiAgfV1cbn1cbiEqL1xuLyogRE9DXG5EZXRlY3RzIHdoZXRoZXIgb3Igbm90IGVsZW1lbnRzIGNhbiBiZSBhbmltYXRlZCB1c2luZyBDU1NcbiovXG5cbiAgTW9kZXJuaXpyLmFkZFRlc3QoJ2Nzc2FuaW1hdGlvbnMnLCB0ZXN0QWxsUHJvcHMoJ2FuaW1hdGlvbk5hbWUnLCAnYScsIHRydWUpKTtcblxuLyohXG57XG4gIFwibmFtZVwiOiBcIkZsZXhib3ggKGxlZ2FjeSlcIixcbiAgXCJwcm9wZXJ0eVwiOiBcImZsZXhib3hsZWdhY3lcIixcbiAgXCJ0YWdzXCI6IFtcImNzc1wiXSxcbiAgXCJwb2x5ZmlsbHNcIjogW1wiZmxleGllXCJdLFxuICBcIm5vdGVzXCI6IFt7XG4gICAgXCJuYW1lXCI6IFwiVGhlIF9vbGRfIGZsZXhib3hcIixcbiAgICBcImhyZWZcIjogXCJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWNzczMtZmxleGJveC0yMDA5MDcyMy9cIlxuICB9XVxufVxuISovXG5cbiAgTW9kZXJuaXpyLmFkZFRlc3QoJ2ZsZXhib3hsZWdhY3knLCB0ZXN0QWxsUHJvcHMoJ2JveERpcmVjdGlvbicsICdyZXZlcnNlJywgdHJ1ZSkpO1xuXG4vKiFcbntcbiAgXCJuYW1lXCI6IFwiRmxleGJveFwiLFxuICBcInByb3BlcnR5XCI6IFwiZmxleGJveFwiLFxuICBcImNhbml1c2VcIjogXCJmbGV4Ym94XCIsXG4gIFwidGFnc1wiOiBbXCJjc3NcIl0sXG4gIFwibm90ZXNcIjogW3tcbiAgICBcIm5hbWVcIjogXCJUaGUgX25ld18gZmxleGJveFwiLFxuICAgIFwiaHJlZlwiOiBcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2NzczMtZmxleGJveFwiXG4gIH1dLFxuICBcIndhcm5pbmdzXCI6IFtcbiAgICBcIkEgYHRydWVgIHJlc3VsdCBmb3IgdGhpcyBkZXRlY3QgZG9lcyBub3QgaW1wbHkgdGhhdCB0aGUgYGZsZXgtd3JhcGAgcHJvcGVydHkgaXMgc3VwcG9ydGVkOyBzZWUgdGhlIGBmbGV4d3JhcGAgZGV0ZWN0LlwiXG4gIF1cbn1cbiEqL1xuLyogRE9DXG5EZXRlY3RzIHN1cHBvcnQgZm9yIHRoZSBGbGV4aWJsZSBCb3ggTGF5b3V0IG1vZGVsLCBhLmsuYS4gRmxleGJveCwgd2hpY2ggYWxsb3dzIGVhc3kgbWFuaXB1bGF0aW9uIG9mIGxheW91dCBvcmRlciBhbmQgc2l6aW5nIHdpdGhpbiBhIGNvbnRhaW5lci5cbiovXG5cbiAgTW9kZXJuaXpyLmFkZFRlc3QoJ2ZsZXhib3gnLCB0ZXN0QWxsUHJvcHMoJ2ZsZXhCYXNpcycsICcxcHgnLCB0cnVlKSk7XG5cblxuICAvLyBSdW4gZWFjaCB0ZXN0XG4gIHRlc3RSdW5uZXIoKTtcblxuICBkZWxldGUgTW9kZXJuaXpyUHJvdG8uYWRkVGVzdDtcbiAgZGVsZXRlIE1vZGVybml6clByb3RvLmFkZEFzeW5jVGVzdDtcblxuICAvLyBSdW4gdGhlIHRoaW5ncyB0aGF0IGFyZSBzdXBwb3NlZCB0byBydW4gYWZ0ZXIgdGhlIHRlc3RzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgTW9kZXJuaXpyLl9xLmxlbmd0aDsgaSsrKSB7XG4gICAgTW9kZXJuaXpyLl9xW2ldKCk7XG4gIH1cblxuICAvLyBMZWFrIE1vZGVybml6ciBuYW1lc3BhY2VcbiAgd2luZG93Lk1vZGVybml6ciA9IE1vZGVybml6cjtcblxuXG47XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQpOyIsIid1c2Ugc3RyaWN0J1xuXG5hcHAuY29udHJvbGxlciBcIlBvcnRzQ3RybFwiLCAoJHNjb3BlLCBDb25maWd1cmF0aW9uLCBEZXZpY2UsIEVudW1zLCBQb3J0LCBQcm9taXNlcywgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIGFwaSwgRGV2aWNlX0dVSSwgU3RhdHVzLCBHcmFwaCwgUG9ydF92aWV3LCBQb3J0X251bWVyYXRpb24sIHRyYW5zbGF0ZSkgLT5cbiAgI9Ce0LHRitC10LrRgiDRgSDQtNC40LDQv9Cw0LfQvtC90LDQvNC4INGB0LjQu9GLINGB0LjQs9C90LDQu9CwIHNmcC3QvNC+0LTRg9C70Y86IFtbbWluLCBtYXhdLCAuLi4gXVxuXHRzZnBfcG93ZXJfc3RhdHVzZXMgPVxuXHRcdGNyaXRpY2FsOlx0W1swLCBJbmZpbml0eV0sIFstSW5maW5pdHksIC0xN11dXG5cdFx0d2FybmluZzpcdFtbLTMsIDBdLCBbLTE3LCAtMTJdXVxuXHRcdG5vcm1hbDpcdFx0W1stMTIsIC0zXV1cblxuXHQjINC90LDQt9Cy0LDQvdC40LUg0LTQu9GPIHBhcnNlciBsZXZlbCfQsFxuXHQkc2NvcGUucGFyc2VyX2xldmVsX3RpdGxlID0gKHBhcnNlcl9sZXZlbCkgLT5cblx0XHRmb3Iga2V5LCB2YWx1ZSBvZiBFbnVtcy5wb3J0X3BhcnNlcl9sZXZlbHNcblx0XHRcdGlmIHZhbHVlID09IHBhcnNlcl9sZXZlbFxuXHRcdFx0XHRyZXR1cm4ga2V5XG5cblx0IyDQsdC70L7QutC40YDRg9C10YIg0L/QvtGA0YLRi1xuXHQkc2NvcGUuYnVzeSA9IChwb3J0cykgLT5cblx0XHRmb3IgcG9ydCBpbiBwb3J0c1xuXHRcdFx0JHNjb3BlLmJ1c3lfcG9ydHNbcG9ydF0gPSB5ZXNcblxuXHQjINGA0LDQt9Cx0LvQvtC60LjRgNGD0LXRgiDQv9C+0YDRgtGLXG5cdCRzY29wZS5ub3RfYnVzeSA9IChwb3J0cykgLT5cblx0XHRmb3IgcG9ydCBpbiBwb3J0c1xuXHRcdFx0JHNjb3BlLmJ1c3lfcG9ydHNbcG9ydF0gPSBub1xuXG5cdCMg0LfQsNCx0LvQvtC60LjRgNC+0LLQsNC9INC70Lgg0L/QvtGA0YJcblx0JHNjb3BlLmlzX2J1c3kgPSAocG9ydCkgLT4gJHNjb3BlLmJ1c3lfcG9ydHNbcG9ydF1cblxuXHQjINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDRgtC+0LPQviwg0Y/QstC70Y/QtdGC0YHRjyDQu9C4INC/0L7RgNGCINC+0LHRi9GH0L3Ri9C8LCBcblx0IyDQu9C40LHQviDRgdC+0YHRgtCw0LLQvdGL0LwgNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwLFxuXHQjINCy0YvQv9C+0LvQvdGP0LXRgiDQu9C40LHQviBhY3Rpb25fZm9yX2dlbmVyaWMsINC70LjQsdC+IGFjdGlvbl9mb3Jfam9pbmFibGVcblx0JHNjb3BlLmJhdGNoID0gKHBvcnQsIGFjdGlvbl9mb3JfZ2VuZXJpYywgYWN0aW9uX2Zvcl9qb2luYWJsZSkgLT5cblx0XHQjINGB0L/RgNCw0LLQvtGH0L3QuNC6INC/0L7RgNGC0L7QslxuXHRcdHBvcnRfaW5mbyA9ICRzY29wZS5wb3J0c19pbmZvW3BvcnQuaWQgLSAxXVxuXG5cdFx0IyDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0YLQuNC/0LAg0L/QvtGA0YLQsFxuXHRcdHN3aXRjaCBwb3J0X2luZm8udHlwZVxuXHRcdFx0IyDQtdGB0LvQuCDRjdGC0L7RgiDQv9C+0YDRgiDQvtCx0YvRh9C90YvQuSxcblx0XHRcdCMg0LLRi9C/0L7Qu9C90LjRgtGMIGFjdGlvbl9mb3JfZ2VuZXJpYyDQtNC70Y8g0Y3RgtC+0LPQviDQv9C+0YDRgtCwXG5cdFx0XHR3aGVuICdnZW5lcmljJ1xuXHRcdFx0XHRhY3Rpb25fZm9yX2dlbmVyaWMocG9ydClcblxuXHRcdFx0IyDQtdGB0LvQuCDRjdGC0L7RgiDQv9C+0YDRgiDQsiDRgdC+0YHRgtCw0LLQtSA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LAsXG5cdFx0XHQjINGC0L4g0LLRi9C/0L7Qu9C90LjRgtGMIGFjdGlvbl9mb3Jfam9pbmFibGUg0LTQu9GPINC60LDQttC00L7Qs9C+INC/0L7QtNC/0L7RgNGC0LBcblx0XHRcdHdoZW4gJ2pvaW5hYmxlJ1xuXHRcdFx0XHRhY3Rpb25zID0gW11cblx0XHRcdFx0Zm9yIHN1YnBvcnQgaW4gcG9ydF9pbmZvLmpvaW50X3BvcnQucG9ydHNcblx0XHRcdFx0XHRhY3Rpb25zLnB1c2goYWN0aW9uX2Zvcl9qb2luYWJsZShzdWJwb3J0KSlcblxuXHRcdFx0XHQtPiBcblx0XHRcdFx0XHRhcGkuYmVnaW4oKVxuXHRcdFx0XHRcdGFjdGlvbigpIGZvciBhY3Rpb24gaW4gYWN0aW9ucyB3aGVuIGFjdGlvbj9cblx0XHRcdFx0XHRhcGkuZW5kKClcblxuXHQjINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINGE0LvQsNCzIGJ1c3kg0LIgdHJ1ZSxcblx0IyDQsdC70L7QutC40YDRg9C10YIg0L7QsdC90L7QstC70LXQvdC40LUg0L/QvtGA0YLQvtCyINC80LXRgtC+0LTQvtC8IGdldFN3aXRjaEluZm8sXG5cdCMg0LTQtdC70LDQtdGCINGC0L4sINGH0YLQviDQvdGD0LbQvdC+LFxuXHQjINGB0L7RhdGA0LDQvdGP0LXRgiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0LIg0YPRgdGC0YDQvtC50YHRgtCy0LUsXG5cdCMg0YDQsNC30LHQu9C+0LrQuNGA0YPQtdGCINC+0LHQvdC+0LLQu9C10L3QuNC1INC/0L7RgNGC0L7QsiDQvNC10YLQvtC00L7QvCBnZXRTd2l0Y2hJbmZvLFxuXHQjINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINGE0LvQsNCzIGJ1c3kg0LIgZmFsc2Vcblx0JHNjb3BlLnBvcnRfdHJhbnNhY3Rpb24gPSAocHJlcGFyZV9hY3Rpb24pIC0+XG5cdFx0IyDQuNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0L/QvtGA0YLRi1xuXHRcdHBvcnRzID0gW11cblx0XHQjINC/0L7QvNC10YfQsNC10YIg0LjRgdC/0L7Qu9GM0LfRg9C10LzRi9C1INC/0L7RgNGC0Ytcblx0XHR1c2luZyA9IChwb3J0KSAtPiBwb3J0cy5wdXNoKHBvcnQuaWQpXG5cblx0XHQjINC/0L7QutCw0LfQsNGC0Ywg0LrRgNGD0YLQuNC70LrRgyBidXN5XG5cdFx0U3RhdHVzLmJ1c3koKVxuXHRcdCMgcHJvbWlzZSDQsdGD0LTQtdGCINC+0YLQvNC10L3RkdC9INCyINGB0LvRg9GH0LDQtSDRg9GF0L7QtNCwINGB0L4g0YHRgtGA0LDQvdC40YbRi1xuXHRcdFByb21pc2VzLnByb21pc2UgLT5cblx0XHRcdCMg0LHQu9C+0LrQuNGA0YPQtdGCINC+0LHQvdC+0LLQu9C10L3QuNC1INC/0L7RgNGC0L7QsiDQvNC10YLQvtC00L7QvCBnZXRTd2l0Y2hJbmZvXG5cdFx0XHRNb2RlbF9zZXJ2aWNlLmRvX3dpdGhfcG9ydF9sb2NrIC0+XG5cdFx0XHRcdCMg0L/QvtC80LXRgtC40YLRjCDQuNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0L/QvtGA0YLRi1xuXHRcdFx0XHRhY3Rpb24gPSBwcmVwYXJlX2FjdGlvbih1c2luZylcblxuXHRcdFx0XHQjINCx0LvQvtC60LjRgNGD0LXRgiDQuNGB0L/QvtC70YzQt9GD0LXQvNGL0LUg0L/QvtGA0YLRi1xuXHRcdFx0XHQkc2NvcGUuYnVzeShwb3J0cylcblxuXHRcdFx0XHQjINCy0YvQv9C+0LvQvdC40YLRjCDQtNC10LnRgdGC0LLQuNC1XG5cdFx0XHRcdGFjdGlvbigpLnRoZW4gLT5cblx0XHRcdFx0XHQjINGB0L7RhdGA0LDQvdGP0LXRgiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0LIg0YPRgdGC0YDQvtC50YHRgtCy0LVcblx0XHRcdFx0XHREZXZpY2Uuc2F2ZV9jb25maWd1cmF0aW9uKClcblx0XHRcdFx0LnRoZW4gLT5cblx0XHRcdFx0XHQkc2NvcGUuc2FmZUFwcGx5IC0+XG5cdFx0XHRcdFx0XHQjINGB0LrRgNGL0YLRjCDQutGA0YPRgtC40LvQutGDIGJ1c3lcblx0XHRcdFx0XHRcdFN0YXR1cy5ub3RfYnVzeSgpXG5cblx0XHRcdC5maW5hbGx5IC0+XG5cdFx0XHRcdCMg0YDQsNC30LHQu9C+0LrQuNGA0YPQtdGCINC40YHQv9C+0LvRjNC30L7QstCw0L3QvdGL0LUg0L/QvtGA0YLRi1xuXHRcdFx0XHQkc2NvcGUubm90X2J1c3kocG9ydHMpXG5cblx0XHRcdC4kYXBwbHkoJHNjb3BlKVxuXG5cdCMg0LLQutC70Y7Rh9Cw0LXRgiDQv9C+0YDRglxuXHQkc2NvcGUuZW5hYmxlX3BvcnQgPSAocG9ydCkgLT5cblx0XHQkc2NvcGUucG9ydF90cmFuc2FjdGlvbiAodXNpbmcpIC0+XG5cdFx0XHQjINC00LvRjyDQvtCx0YvRh9C90YvRhSDQuCDQtNC70Y8gNDAt0LPQuNCz0LDQsdC40YLQvdGL0YUg0L/QvtGA0YLQvtCyXG5cdFx0XHQkc2NvcGUuYmF0Y2gocG9ydFxuXHRcdFx0LFxuXHRcdFx0IyDQtNC70Y8g0L7QsdGL0YfQvdGL0YUg0L/QvtGA0YLQvtCyXG5cdFx0XHQtPiBcblx0XHRcdFx0dXNpbmcocG9ydClcblx0XHRcdFx0LT4gUG9ydC5lbmFibGUocG9ydClcblx0XHRcdCxcblx0XHRcdCMg0LTQu9GPIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINC/0L7RgNGC0L7QslxuXHRcdFx0KHN1YnBvcnQpIC0+XG5cdFx0XHRcdCMg0LXRgdC70Lgg0Y3RgtC+IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINCyINGA0LXQttC40LzQtSA0MEcsXG5cdFx0XHRcdCMg0LLQutC70Y7Rh9C40YLRjCDQstGB0LUg0LXQs9C+INC/0L7QtNC/0L7RgNGC0Ytcblx0XHRcdFx0aWYgJHNjb3BlLmpvaW50X3BvcnRfZm9yKHN1YnBvcnQpLm1vZGUgPT0gJzQwRydcblx0XHRcdFx0XHR1c2luZyhwb3J0KVxuXHRcdFx0XHRcdC0+IFBvcnQuZW5hYmxlKHN1YnBvcnQpXG5cdFx0XHRcdCMg0LXRgdC70Lgg0Y3RgtC+IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINCyINGA0LXQttC40LzQtSA0eDEwRyxcblx0XHRcdFx0IyDQstC60LvRjtGH0LjRgtGMINGC0L7Qu9GM0LrQviDRjdGC0L7RgiDQv9C+0LTQv9C+0YDRglxuXHRcdFx0XHRlbHNlIGlmIHN1YnBvcnQuaWQgPT0gcG9ydC5pZFxuXHRcdFx0XHRcdHVzaW5nKHN1YnBvcnQpXG5cdFx0XHRcdFx0LT4gUG9ydC5lbmFibGUoc3VicG9ydClcblx0XHRcdClcblxuXHQjINCy0YvQutC70Y7Rh9Cw0LXRgiDQv9C+0YDRglxuXHQkc2NvcGUuZGlzYWJsZV9wb3J0ID0gKHBvcnQpIC0+XG5cdFx0JHNjb3BlLnBvcnRfdHJhbnNhY3Rpb24gKHVzaW5nKSAtPlxuXHRcdFx0IyDQtNC70Y8g0L7QsdGL0YfQvdGL0YUg0Lgg0LTQu9GPIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINC/0L7RgNGC0L7QslxuXHRcdFx0JHNjb3BlLmJhdGNoKHBvcnRcblx0XHRcdCxcblx0XHRcdCMg0LTQu9GPINC+0LHRi9GH0L3Ri9GFINC/0L7RgNGC0L7QslxuXHRcdFx0LT4gXG5cdFx0XHRcdHVzaW5nKHBvcnQpXG5cdFx0XHRcdC0+IFBvcnQuZGlzYWJsZShwb3J0KVxuXHRcdFx0LFxuXHRcdFx0IyDQtNC70Y8gNDAt0LPQuNCz0LDQsdC40YLQvdGL0YUg0L/QvtGA0YLQvtCyXG5cdFx0XHQoc3VicG9ydCkgLT5cblx0XHRcdFx0IyDQtdGB0LvQuCDRjdGC0L4gNDAt0LPQuNCz0LDQsdC40YLQvdGL0Lkg0L/QvtGA0YIg0LIg0YDQtdC20LjQvNC1IDQwRyxcblx0XHRcdFx0IyDQstGL0LrQu9GO0YfQuNGC0Ywg0LLRgdC1INC10LPQviDQv9C+0LTQv9C+0YDRgtGLXG5cdFx0XHRcdGlmICRzY29wZS5qb2ludF9wb3J0X2ZvcihzdWJwb3J0KS5tb2RlID09ICc0MEcnXG5cdFx0XHRcdFx0dXNpbmcoc3VicG9ydClcblx0XHRcdFx0XHQtPiBQb3J0LmRpc2FibGUoc3VicG9ydClcblx0XHRcdFx0IyDQtdGB0LvQuCDRjdGC0L4gNDAt0LPQuNCz0LDQsdC40YLQvdGL0Lkg0L/QvtGA0YIg0LIg0YDQtdC20LjQvNC1IDR4MTBHLFxuXHRcdFx0XHQjINCy0YvQutC70Y7Rh9C40YLRjCDRgtC+0LvRjNC60L4g0Y3RgtC+0YIg0L/QvtC00L/QvtGA0YJcblx0XHRcdFx0ZWxzZSBpZiBzdWJwb3J0LmlkID09IHBvcnQuaWRcblx0XHRcdFx0XHR1c2luZyhzdWJwb3J0KVxuXHRcdFx0XHRcdC0+IFBvcnQuZGlzYWJsZShzdWJwb3J0KSBcblx0XHRcdClcblxuXHQjINCy0LrQu9GO0YfQsNC10YIv0LLRi9C60LvRjtGH0LDQtdGCINC/0L7RgNGCXG5cdCRzY29wZS50b2dnbGVfcG9ydCA9IChwb3J0KSAtPlxuXHRcdCMg0L7RgtGA0LjRhtCw0L3QuNC1INCyIGlmLCDQv9C+0YLQvtC80YMg0YfRgtC+IG5nLW1vZGVsXG5cdFx0aWYgbm90IHBvcnQuZW5hYmxlZCB0aGVuICRzY29wZS5kaXNhYmxlX3BvcnQocG9ydCkgZWxzZSAkc2NvcGUuZW5hYmxlX3BvcnQocG9ydClcblxuXHQjINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCIGV0aGVybmV0IG1vZGUg0L3QsCDQv9C+0YDRgtGDXG5cdCRzY29wZS5zZXRfcG9ydF9tb2RlID0gKHBvcnQpIC0+XG5cdFx0JHNjb3BlLnBvcnRfdHJhbnNhY3Rpb24gKHVzaW5nKSAtPlxuXHRcdFx0IyDQv9C+0LzQtdGC0LjRgtGMINC40YHQv9C+0LvRjNC30YPQtdC80YvQuSDQv9C+0YDRglxuXHRcdFx0dXNpbmcocG9ydClcblx0XHRcdCMg0L/RgNC+0YHRgtCw0LLQuNGC0YwgZXRoIG1vZGVcblx0XHRcdC0+IFBvcnQuc2V0X2V0aF9tb2RlKHBvcnQpXG5cblx0IyDRg9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDRgdCy0L7QudGB0YLQstC+IGZvcmNlX3VwINC30LDQtNCw0L3QvdC+0LPQviDQv9C+0YDRgtCwINCyINC30LDQtNCw0L3QvdC+0LUg0LfQvdCw0YfQtdC90LjQtVxuXHQkc2NvcGUuc2V0X3BvcnRfZm9yY2VfdXAgPSAocG9ydCwgZm9yY2VfdXApIC0+XG5cblx0XHQkc2NvcGUucG9ydF90cmFuc2FjdGlvbiAodXNpbmcpIC0+XG5cdFx0XHQjINC/0L7QvNC10YLQuNGC0Ywg0LjRgdC/0L7Qu9GM0LfRg9C10LzRi9C5INC/0L7RgNGCXG5cdFx0XHR1c2luZyhwb3J0KVxuXG5cdFx0XHQtPiBcblx0XHRcdFx0IyDQv9C+INGD0YHQu9C+0LLQuNGP0Lwg0LfQsNC00LDRh9C4INGA0LXQttC40LzRiyDQv9C+0YDRgtCwIFwibG9vcGJhY2tcIiDQuCBcImZvcmNlIHVwXCIg0LLQt9Cw0LjQvNC+0YHQutC70Y7Rh9Cw0LXQvNGLLFxuXHRcdFx0XHQjINC/0L7RjdGC0L7QvNGDLCDQtdGB0LvQuCDQstC60LvRjtGH0LDQtdGC0YHRjyBmb3JjZSB1cCwg0YLQviDQstGL0LrQu9GO0YfQsNC10YLRgdGPIGxvb3BiYWNrXG5cdFx0XHRcdHByZXBhcmUgPSBpZiBmb3JjZV91cFxuXHRcdFx0XHRcdCMg0LLRi9C60LvRjtGH0LjRgtGMIGxvb3BiYWNrINC90LAg0L/QvtGA0YLRg1xuXHRcdFx0XHRcdHBvcnQubG9vcGJhY2sgPSBub1xuXHRcdFx0XHRcdFBvcnQuc2V0X2xvb3BiYWNrKHBvcnQpXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHQjINC90LjRh9C10LPQviDQvdC1INC00LXQu9Cw0YLRjFxuXHRcdFx0XHRcdGR1bW15X3Byb21pc2UoKVxuXG5cdFx0XHRcdHByZXBhcmUudGhlbiAtPlxuXHRcdFx0XHRcdCMg0L/RgNC+0YHRgtCw0LLQuNGC0YwgZm9yY2UgdXAg0L3QsCDQv9C+0YDRgtGDXG5cdFx0XHRcdFx0cG9ydC5mb3JjZV91cCA9IGZvcmNlX3VwXG5cdFx0XHRcdFx0UG9ydC5zZXRfZm9yY2VfdXAocG9ydClcblxuXHQjINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINGB0LLQvtC50YHRgtCy0L4gbG9vcGJhY2sg0LfQsNC00LDQvdC90L7Qs9C+INC/0L7RgNGC0LAg0LIg0LfQsNC00LDQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1XG5cdCRzY29wZS5zZXRfcG9ydF9sb29wYmFjayA9IChwb3J0LCBsb29wYmFjaykgLT5cblx0XHQjINCy0LrQu9GO0YfQtdC90LjQtSBsb29wYmFjayfQsCAtINGN0YLQviDQv9C+0YLQtdC90YbQuNCw0LvRjNC90L4g0L7Qv9Cw0YHQvdCw0Y8g0L7Qv9C10YDQsNGG0LjRjyxcblx0XHQjINC/0L7RjdGC0L7QvNGDINC/0LXRgNC10YHQv9GA0L7RgdC40YLRjCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8sINGD0LLQtdGA0LXQvSDQu9C4INC+0L1cblx0XHRpZiBsb29wYmFja1xuXHRcdFx0cmV0dXJuIGlmIG5vdCBjb25maXJtIHRyYW5zbGF0ZSgncGFnZS5wb3J0cy5sb29wYmFja19jb25maXJtJylcblxuXHRcdCRzY29wZS5wb3J0X3RyYW5zYWN0aW9uICh1c2luZykgLT5cblx0XHRcdCMg0L/QvtC80LXRgtC40YLRjCDQuNGB0L/QvtC70YzQt9GD0LXQvNGL0Lkg0L/QvtGA0YJcblx0XHRcdHVzaW5nKHBvcnQpXG5cblx0XHRcdC0+IFxuXHRcdFx0XHQjINC/0L4g0YPRgdC70L7QstC40Y/QvCDQt9Cw0LTQsNGH0Lgg0YDQtdC20LjQvNGLINC/0L7RgNGC0LAgXCJsb29wYmFja1wiINC4IFwiZm9yY2UgdXBcIiDQstC30LDQuNC80L7RgdC60LvRjtGH0LDQtdC80YssXG5cdFx0XHRcdCMg0L/QvtGN0YLQvtC80YMsINC10YHQu9C4INCy0LrQu9GO0YfQsNC10YLRgdGPIGxvb3BiYWNrLCDRgtC+INCy0YvQutC70Y7Rh9Cw0LXRgtGB0Y8gZm9yY2UgdXBcblx0XHRcdFx0cHJlcGFyZSA9IGlmIGxvb3BiYWNrXG5cdFx0XHRcdFx0IyDQstGL0LrQu9GO0YfQuNGC0YwgZm9yY2UgdXAg0L3QsCDQv9C+0YDRgtGDXG5cdFx0XHRcdFx0cG9ydC5mb3JjZV91cCA9IG5vXG5cdFx0XHRcdFx0UG9ydC5zZXRfZm9yY2VfdXAocG9ydClcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdCMg0L3QuNGH0LXQs9C+INC90LUg0LTQtdC70LDRgtGMXG5cdFx0XHRcdFx0ZHVtbXlfcHJvbWlzZSgpXG5cblx0XHRcdFx0cHJlcGFyZS50aGVuIC0+XG5cdFx0XHRcdFx0IyDQv9GA0L7RgdGC0LDQstC40YLRjCBsb29wYmFjayDQvdCwINC/0L7RgNGC0YNcblx0XHRcdFx0XHRwb3J0Lmxvb3BiYWNrID0gbG9vcGJhY2tcblx0XHRcdFx0XHRQb3J0LnNldF9sb29wYmFjayhwb3J0KVxuXG5cdCMg0LLRi9GB0YLQsNCy0LvRj9C10YIg0L3Rg9C20L3Ri9C1INGA0LXQttC40LzRiyBldGhfbW9kZSDQv9C+0LTQv9C+0YDRgtC+0LIg0LTQsNC90L3QvtCz0L4gNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwXG5cdCMgKNCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDQstGL0LHRgNCw0L3QvdC+0LPQviDRgNC10LbQuNC80LAg0Y3RgtC+0LPQviA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LApXG5cdCRzY29wZS5zZXRfam9pbnRfcG9ydF9tb2RlID0gKGpvaW50X3BvcnQpIC0+XG5cdFx0JHNjb3BlLnBvcnRfdHJhbnNhY3Rpb24gKHVzaW5nKSAtPlxuXHRcdFx0IyDQv9C+0LzQtdGC0LjRgtGMINC40YHQv9C+0LvRjNC30YPQtdC80YvQtSDQv9C+0YDRgtGLXG5cdFx0XHRmb3IgcG9ydCBpbiBqb2ludF9wb3J0LnBvcnRzXG5cdFx0XHRcdHVzaW5nKHBvcnQpXG5cblx0XHRcdC0+IFxuXHRcdFx0XHQjINGD0YHRgtCw0L3QvtCy0LjRgtGMINC90YPQttC90YvQtSBldGhlcm5ldCBtb2RlINC00LvRjyDQv9C+0LTQv9C+0YDRgtC+0LJcblx0XHRcdFx0IyAo0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINC/0YDQvtGB0YLQsNCy0LvRj9C10LzQvtCz0L4g0YDQtdC20LjQvNCwIDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsClcblx0XHRcdFx0UG9ydC5zZXRfc3VicG9ydF9tb2Rlcyhqb2ludF9wb3J0KVxuXG5cdFx0XHRcdCMg0L/QtdGA0LXQstGL0YfQuNGB0LvQuNGC0Ywg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0L/QvtGA0YLQvtCyINCy0LLQtdGA0YXRgyDQvdCwINC20LXQu9C10LfQutC1LFxuXHRcdFx0XHQjINGCLtC6LiA0MC3Qs9C40LPQsNCx0LjRgtC90YvQuSDQv9C+0YDRgiDQvNC+0LbQtdGCINGB0YLQsNGC0Ywg0LvQuNCx0L4g0YbQtdC70YvQvCwg0LvQuNCx0L4g0YDQsNC30LTQtdC70ZHQvdC90YvQvCDQvdCwINGH0LXRgtCy0LXRgNC+XG5cdFx0XHRcdERldmljZV9HVUkucmVmcmVzaF9wb3J0X2Nvb3JkaW5hdGVzKClcblxuXHRcdFx0XHQjINC10YHQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINC/0LXRgNC10LLQvtC00LjRgtGB0Y8g0LIg0YDQtdC20LjQvCA0eDEwRyxcblx0XHRcdFx0IyDQstGL0LTQtdC70LjRgtGMINCy0YHQtSDQtdCz0L4g0L/QvtC00L/QvtGA0YLRiywg0LXRgdC70Lgg0YHQsNC8INC+0L0g0LHRi9C7INCy0YvQtNC10LvQtdC9XG5cdFx0XHRcdGlmIGpvaW50X3BvcnQubW9kZSA9PSAnNHgxMEcnXG5cdFx0XHRcdFx0aWYgUG9ydF92aWV3LmlzX3NlbGVjdGVkKGpvaW50X3BvcnQucG9ydHNbMF0pXG5cdFx0XHRcdFx0XHQjINCy0YvQtNC10LvQuNGC0Ywg0LLRgdC1INC/0L7RgNGC0Ysg0Y3RgtC+0LPQviA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LBcblx0XHRcdFx0XHRcdGZvciBwb3J0IGluIGpvaW50X3BvcnQucG9ydHNcblx0XHRcdFx0XHRcdFx0UG9ydF92aWV3LnNlbGVjdChwb3J0LCBubylcblx0XHRcdFx0IyDQtdGB0LvQuCA0MC3Qs9C40LPQsNCx0LjRgtC90YvQuSDQv9C+0YDRgiDQv9C10YDQtdCy0L7QtNC40YLRgdGPINCyINGA0LXQttC40LwgNDBHLFxuXHRcdFx0XHQjINGB0L3Rj9GC0Ywg0LLRi9C00LXQu9C10L3QuNC1INGBINC90LXQv9C10YDQstGL0YUg0L/QvtGA0YLQvtCyINCyIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINC/0L7RgNGC0LDRhVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0Zm9yIHBvcnQgaW4gam9pbnRfcG9ydC5wb3J0c1xuXHRcdFx0XHRcdFx0aWYgcG9ydCAhPSBqb2ludF9wb3J0LnBvcnRzWzBdXG5cdFx0XHRcdFx0XHRcdFBvcnRfdmlldy5kZXNlbGVjdChwb3J0LCBubylcblxuXHRcdFx0XHQjINGB0L3QsNGH0LDQu9CwINCy0YHQtSDQv9C+0YDRgtGLINC/0LXRgNC10LLQtdGB0YLQuCDQsiDRgNC10LbQuNC8IERJU0FCTEVELFxuXHRcdFx0XHQjINGH0YLQvtCx0Ysg0L3QtSDQsdGL0LvQviDQvtGI0LjQsdC60LggSW52YWxpZCBwb3J0IHN0YXRlXG5cdFx0XHRcdGFwaS5iZWdpbigpXG5cdFx0XHRcdFBvcnQuc2V0X2V0aF9tb2RlKHsgaWQ6IHBvcnQuaWQsIGV0aF9tb2RlOiBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzLkRJU0FCTEVEIH0pIGZvciBwb3J0IGluIGpvaW50X3BvcnQucG9ydHNcblx0XHRcdFx0YXBpLmVuZCgpXG5cblx0XHRcdFx0IyDQv9C+0YLQvtC8INCy0YHQtSDQv9C+0YDRgtGLINC/0LXRgNC10LLQtdGB0YLQuCDQsiDQvdGD0LbQvdGL0LUg0YDQtdC20LjQvNGLXG5cdFx0XHRcdC50aGVuIC0+XG5cdFx0XHRcdFx0YXBpLmJlZ2luKClcblx0XHRcdFx0XHRQb3J0LnNldF9ldGhfbW9kZShwb3J0KSBmb3IgcG9ydCBpbiBqb2ludF9wb3J0LnBvcnRzXG5cdFx0XHRcdFx0YXBpLmVuZCgpXG5cblx0IyDQvtCx0YvRh9C90YvQuSDQu9C4INC/0L7RgNGCXG5cdCRzY29wZS5pc19nZW5lcmljID0gKHBvcnQpIC0+IFBvcnQuaXNfZ2VuZXJpYyhwb3J0LmlkKVxuXG5cdCMg0LLQvtC30LLRgNCw0YnQsNC10YIgdHJ1ZSwg0LXRgdC70Lgg0Y3RgtC+INC/0LXRgNCy0YvQuSDQv9C+0LTQv9C+0YDRgiDQstC90YPRgtGA0LggNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwXG5cdCRzY29wZS5pc19maXJzdF9pbl9qb2ludF9wb3J0ID0gKHBvcnQpIC0+XG5cdFx0cG9ydF9pbmZvID0gJHNjb3BlLnBvcnRzX2luZm9bcG9ydC5pZCAtIDFdXG5cdFx0cmV0dXJuIChwb3J0X2luZm8udHlwZSA9PSAnam9pbmFibGUnICYmIHBvcnRfaW5mby5pc19maXJzdF9pbl9qb2ludClcblxuXHQjINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0LVcblx0JHNjb3BlLmpvaW50X3BvcnRfZm9yID0gKHBvcnQpIC0+XG5cdFx0JHNjb3BlLnBvcnRzX2luZm9bcG9ydC5pZCAtIDFdLmpvaW50X3BvcnRcblxuXHQjINC/0L7QutCw0LfRi9Cy0LDRgtGMINC70Lgg0Y3RgtC+0YIg0L/QvtGA0YIg0LIg0YHQv9C40YHQutC1INC/0L7RgNGC0L7QslxuXHQkc2NvcGUuaWZfc2hvd19wb3J0ID0gKHBvcnQpIC0+XG5cdFx0IyDQtdGB0LvQuCDRjdGC0L4g0L7QsdGL0YfQvdGL0Lkg0L/QvtGA0YIgLSDQv9C+0LrQsNC30YvQstCw0YLRjFxuXHRcdHJldHVybiB5ZXMgaWYgUG9ydC5pc19nZW5lcmljKHBvcnQuaWQpXG5cblx0XHQjINGN0YLQvtGCINC/0L7RgNGCINCy0YXQvtC00LjRgiDQsiDRgdC+0YHRgtCw0LIgNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwXG5cblx0XHQjINC10YHQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINCyINGA0LXQttC40LzQtSA0eDEwRyAtINC/0L7QutCw0LfRi9Cy0LDRgtGMINCy0YHQtSDQtdCz0L4g0L/QvtC00L/QvtGA0YLRi1xuXHRcdHJldHVybiB5ZXMgaWYgJHNjb3BlLmpvaW50X3BvcnRfZm9yKHBvcnQpLm1vZGUgPT0gJzR4MTBHJ1xuXG5cdFx0IyDQtdGB0LvQuCA0MC3Qs9C40LPQsNCx0LjRgtC90YvQuSDQv9C+0YDRgiDQsiDRgNC10LbQuNC80LUgNDBHIC0g0L/QvtC60LDQt9GL0LLQsNGC0Ywg0YLQvtC70YzQutC+INC/0LXRgNCy0YvQuSDQtdCz0L4g0L/QvtC00L/QvtGA0YJcblx0XHRyZXR1cm4gJHNjb3BlLmlzX2ZpcnN0X2luX2pvaW50X3BvcnQocG9ydClcblxuXHQjINC/0L7RgNGP0LTQutC+0LLRi9C5INC90L7QvNC10YAg0L/QvtC00L/QvtGA0YLQsCDQsiDRgNCw0LzQutCw0YUgNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwLCDQtNC70Y8g0LfQsNC00LDQvdC90L7Qs9C+INC/0L7RgNGC0LBcblx0JHNjb3BlLnN1YnBvcnRfaWQgPSAocG9ydCkgLT5cblx0XHRqb2ludF9wb3J0X2lkID0gMFxuXHRcdHBvcnRfaWQgPSAwXG5cdFx0W2pvaW50X3BvcnRfaWQsIHBvcnRfaWRdID0gUG9ydF9udW1lcmF0aW9uLmpvaW5lZF9wb3J0X2lkX2Zyb21fcG9ydF9pZChwb3J0LmlkKVxuXHRcdHJldHVybiBwb3J0X2lkXG5cblx0IyDRgdCx0YDQsNGB0YvQstCw0LXRgiDRgdGC0LDRgtC40YHRgtC40LrRgyDQvdCwINC/0L7RgNGC0LDRhVxuXHQkc2NvcGUucmVzZXRfcG9ydF9zdGF0cyA9IC0+XG5cdFx0IyDQtdGB0LvQuCDRgdGC0LDRgtC40YHRgtC40LrQsCDQvdCwINC/0L7RgNGC0LDRhSDRg9C20LUg0YHQsdGA0LDRgdGL0LLQsNC10YLRgdGPIC0g0L3QuNGH0LXQs9C+INC90LUg0LTQtdC70LDRgtGMXG5cdFx0cmV0dXJuIGlmICRzY29wZS5jYW5fcmVzZXRfcG9ydF9zdGF0cyA9PSBub1xuXG5cdFx0IyDRgdGC0LDRgtC40YHRgtC40LrQsCDQvdCwINC/0L7RgNGC0LDRhSDRgdCx0YDQsNGB0YvQstCw0LXRgtGB0Y9cblx0XHQkc2NvcGUuY2FuX3Jlc2V0X3BvcnRfc3RhdHMgPSBub1xuXG5cdFx0IyDRgdCx0YDQvtGB0LjRgtGMINGB0YLQsNGC0LjRgdGC0LjQutGDINC90LAg0L/QvtGA0YLQsNGFXG5cblx0XHQjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0Ytcblx0XHRQcm9taXNlcy5wcm9taXNlIC0+XG5cdFx0XHRQb3J0LnJlc2V0X3N0YXRzKCkudGhlbiAtPlxuXHRcdFx0XHQjINC+0LHQvdC+0LLQuNGC0Ywg0YHRgtCw0YLQuNGB0YLQuNC60YMg0L/QviDQv9C+0YDRgtCw0Lxcblx0XHRcdFx0JHNjb3BlLnVyZ2VfcG9ydF9yZWZyZXNoKClcblx0XHRcdC5maW5hbGx5IC0+XG5cdFx0XHRcdCMg0YHRgtCw0YLQuNGB0YLQuNC60LAg0L3QsCDQv9C+0YDRgtCw0YUg0YHQsdGA0L7RiNC10L3QsFxuXHRcdFx0XHQkc2NvcGUuY2FuX3Jlc2V0X3BvcnRfc3RhdHMgPSB5ZXNcblxuXHRcdFx0LiRhcHBseSgkc2NvcGUpXG5cblx0IyDQtdGB0YLRjCDQu9C4IGkxOG4g0LTQu9GPINGN0YLQvtCz0L4gZXRoZXJuZXQgcG9ydCBtb2RlXG5cdCRzY29wZS5pc19rbm93bl9ldGhlcm5ldF9wb3J0X21vZGUgPSAobW9kZV92YWx1ZSkgLT5cblx0XHRmb3IgbW9kZSBpbiAkc2NvcGUuZXRoZXJuZXRfcG9ydF9tb2Rlc1xuXHRcdFx0aWYgbW9kZS52YWx1ZSA9PSBtb2RlX3ZhbHVlXG5cdFx0XHRcdHJldHVybiB5ZXNcblxuXHQjINC90LDQt9Cy0LDQvdC40LUgaTE4biDQtNC70Y8g0LTQsNC90L3QvtCz0L4gZXRoZXJuZXQgcG9ydCBtb2RlXG5cdCRzY29wZS5ldGhlcm5ldF9wb3J0X21vZGVfbmFtZV9ieV9pZCA9IChtb2RlKSAtPlxuXHRcdGZvciBrZXksIHZhbHVlIG9mIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNcblx0XHRcdGlmIHZhbHVlID09IG1vZGVcblx0XHRcdFx0cmV0dXJuIGtleVxuXG5cdCMg0L/QvtC60LDQt9Cw0YLRjCDQu9C40LHQviDRgdC60YDRi9GC0Ywg0YTQvtGA0LzRgyDQutC+0LzQvNC10L3RgtCw0YDQuNGPINC90LAg0L/QvtGA0YLRg1xuXHQkc2NvcGUudG9nZ2xlX2NvbW1lbnRfZm9ybSA9IChwb3J0LCBjb21tZW50KSAtPlxuXHRcdCRzY29wZS5jb21tZW50X2Zvcm1zW3BvcnQuaWRdID0gaWYgbm90ICRzY29wZS5jb21tZW50X2Zvcm1zW3BvcnQuaWRdIHRoZW4geWVzIGVsc2Ugbm9cblxuXHRcdGlmIG5vdCAkc2NvcGUuY29tbWVudF9mb3Jtc1twb3J0LmlkXVxuXHRcdFx0IyDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC+0YLQvNC10L3RiyDRjdGC0L7QuSDRhtC10L/QvtGH0LrQuFByb21pc2Un0L7QsiDQv9GA0Lgg0YPRhdC+0LTQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YHQviDRgdGC0YDQsNC90LjRhtGLXG5cdFx0XHRQcm9taXNlcy5wcm9taXNlIC0+XG5cdFx0XHRcdENvbmZpZ3VyYXRpb24uUG9ydHMuc2V0X2NvbW1lbnQocG9ydCwgY29tbWVudClcblxuXHQjINCf0L7Qu9GD0YfQtdC90LjQtSDRgdGC0LDRgtGD0YHQsCBzZnAg0LjRgdGF0L7QtNGPINC40Lcg0LfQvdCw0YfQtdC90LjRjyByeF9wb3dlci5cblx0JHNjb3BlLmdldF9zZnBfcG93ZXJfc3RhdHVzID0gKHBvcnQpIC0+XG5cblx0XHRtYXRjaGVzID0gcG9ydC5zZnBfZGF0YS5yeF9wb3dlci5tYXRjaCgvKC0/W1xcZC5dKykuP2RCbS8pXG5cdFx0cmV0dXJuICcnIGlmICFtYXRjaGVzXG5cblx0XHRkYm0gPSBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pXG5cblx0XHRmb3Igc3RhdHVzLCB2YWx1ZXMgb2Ygc2ZwX3Bvd2VyX3N0YXR1c2VzXG5cblx0XHRcdGluX3JhbmdlID0gdmFsdWVzLmZpbHRlciAocmFuZ2UpLT5cblx0XHRcdFx0cmV0dXJuIGRibSA+PSByYW5nZVswXSAmJiBkYm0gPD0gcmFuZ2VbMV1cblxuXHRcdFx0cmV0dXJuIHN0YXR1cyBpZiBpbl9yYW5nZS5sZW5ndGhcblxuXHRcdHRocm93IG5ldyBFcnJvcignUmFuZ2UgZm9yIHJ4X3Bvd2VyfGRCbSB2YWx1ZSBkb2VzblxcJ3QgZXhpc3RzJylcblxuXHQjIEluaXRpYWxpemVcblx0JHNjb3BlLmluaXRpYWxpemVfcGFnZV93aXRoIC0+XG5cdFx0IyDQs9GA0LDRhNC40LrQuFxuXHRcdCRzY29wZS5HcmFwaCA9IEdyYXBoXG5cdFx0R3JhcGguZm9yX3BvcnRzKCcuZ3JhcGhpYycpXG5cblx0XHQjINC/0YPQvdC60YLRiyBzZWxlY3Qn0LAg0YDQtdC20LjQvNCwICjRgdC60L7RgNC+0YHRgtC4KSDQvtCx0YvRh9C90L7Qs9C+INC/0L7RgNGC0LBcblx0XHQkc2NvcGUuZXRoZXJuZXRfcG9ydF9tb2RlcyA9IFtcblx0XHRcdHsgdGl0bGU6ICcxRycsICB2YWx1ZTogRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlc1snMTAwMEJBU0VfWCddIH0sXG5cdFx0XHR7IHRpdGxlOiAnMTBHJywgdmFsdWU6IEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwR0JBU0VfQ1InXSB9XG5cdFx0XVxuXG5cdFx0IyDQv9GD0L3QutGC0Ysgc2VsZWN0J9CwINGA0LXQttC40LzQsCA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LBcblx0XHQkc2NvcGUuZXRoZXJuZXRfcG9ydF9tb2Rlc19mb3JfNDBnID0gW1xuXHRcdFx0eyB0aXRsZTogJzQwRycsICAgdmFsdWU6ICc0MEcnIH0sXG5cdFx0XHR7IHRpdGxlOiAnNHgxMEcnLCB2YWx1ZTogJzR4MTBHJyB9XG5cdFx0XVxuXG5cdFx0IyDQstGL0Y/RgdC90LjRgtGMLCDQutCw0LrQuNC1INC/0L7RgNGC0Ysg0L7QsdGL0YfQvdGL0LUsINC4INC60LDQutC40LUgLSDQsiDRgdC+0YHRgtCw0LLQtSA0MC3Qs9C40LPQsNCx0LjRgtC90YvRhSDQv9C+0YDRgtC+0LJcblx0XHQkc2NvcGUucG9ydHNfaW5mbyA9IChQb3J0X251bWVyYXRpb24uY2F0ZWdvcml6ZV9wb3J0KHBvcnQuaWQpIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzKVxuXHRcdCMg0LHQu9C+0LrQuNGA0L7QstC60LAg0L/QvtGA0YLQvtCyXG5cdFx0JHNjb3BlLmJ1c3lfcG9ydHMgPSB7fVxuXG5cdFx0JHNjb3BlLnNmcF9pbmZvX2lkID0gbnVsbFxuXG5cdFx0IyDRjdGC0L7RgiDQvNCw0YHRgdC40LIg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC00LvRjyDRhNC70LDQs9CwINC/0L7QutCw0LfQsCAvINC90LXQv9C+0LrQsNC30LAg0YTQvtGA0LzRiyDQutC+0LzQvNC10L3RgtCw0YDQuNGPINC/0L7RgNGC0LAgXG5cdFx0JHNjb3BlLmNvbW1lbnRfZm9ybXMgPSBbXVxuXHRcdGZvciBwb3J0IGluIE1vZGVsLnBvcnRzXG5cdFx0XHQkc2NvcGUuY29tbWVudF9mb3Jtc1twb3J0LmlkXSA9IG5vXG5cblx0XHQjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0Ytcblx0XHRQcm9taXNlcy5wcm9taXNlIC0+XG5cdFx0XHQjINC30LDQs9GA0YPQt9C40YLRjCDQutC+0LzQvNC10L3RgtCw0YDQuNC4INC/0L7RgNGC0L7QsiDRgSDRgdC10YDQstC10YDQsFxuXHRcdFx0Q29uZmlndXJhdGlvbi5Qb3J0cy5sb2FkX2NvbW1lbnRzKE1vZGVsKS50aGVuIC0+XG5cblx0XHRcdFx0IyDRgdGC0YDQsNC90LjRhtCwINC30LDQs9GA0YPQttC10L3QsCwg0L/QvtC60LDQt9Cw0YLRjCDQtdGRINGB0L7QtNC10YDQttC40LzQvtC1XG5cdFx0XHRcdCRzY29wZS5yZWFkeSA9IHllc1xuXG5cdFx0XHQuJGFwcGx5KCRzY29wZSlcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhcHAuY29udHJvbGxlcihcIlBvcnRzQ3RybFwiLCBmdW5jdGlvbigkc2NvcGUsIENvbmZpZ3VyYXRpb24sIERldmljZSwgRW51bXMsIFBvcnQsIFByb21pc2VzLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgYXBpLCBEZXZpY2VfR1VJLCBTdGF0dXMsIEdyYXBoLCBQb3J0X3ZpZXcsIFBvcnRfbnVtZXJhdGlvbiwgdHJhbnNsYXRlKSB7XG4gICAgdmFyIHNmcF9wb3dlcl9zdGF0dXNlcztcbiAgICBzZnBfcG93ZXJfc3RhdHVzZXMgPSB7XG4gICAgICBjcml0aWNhbDogW1swLCBJbmZpbml0eV0sIFstSW5maW5pdHksIC0xN11dLFxuICAgICAgd2FybmluZzogW1stMywgMF0sIFstMTcsIC0xMl1dLFxuICAgICAgbm9ybWFsOiBbWy0xMiwgLTNdXVxuICAgIH07XG4gICAgJHNjb3BlLnBhcnNlcl9sZXZlbF90aXRsZSA9IGZ1bmN0aW9uKHBhcnNlcl9sZXZlbCkge1xuICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgIHJlZiA9IEVudW1zLnBvcnRfcGFyc2VyX2xldmVscztcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHBhcnNlcl9sZXZlbCkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS5idXN5ID0gZnVuY3Rpb24ocG9ydHMpIHtcbiAgICAgIHZhciBpLCBsZW4sIHBvcnQsIHJlc3VsdHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBwb3J0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwb3J0ID0gcG9ydHNbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaCgkc2NvcGUuYnVzeV9wb3J0c1twb3J0XSA9IHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgICAkc2NvcGUubm90X2J1c3kgPSBmdW5jdGlvbihwb3J0cykge1xuICAgICAgdmFyIGksIGxlbiwgcG9ydCwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHBvcnQgPSBwb3J0c1tpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKCRzY29wZS5idXN5X3BvcnRzW3BvcnRdID0gZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcbiAgICAkc2NvcGUuaXNfYnVzeSA9IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgIHJldHVybiAkc2NvcGUuYnVzeV9wb3J0c1twb3J0XTtcbiAgICB9O1xuICAgICRzY29wZS5iYXRjaCA9IGZ1bmN0aW9uKHBvcnQsIGFjdGlvbl9mb3JfZ2VuZXJpYywgYWN0aW9uX2Zvcl9qb2luYWJsZSkge1xuICAgICAgdmFyIGFjdGlvbnMsIGksIGxlbiwgcG9ydF9pbmZvLCByZWYsIHN1YnBvcnQ7XG4gICAgICBwb3J0X2luZm8gPSAkc2NvcGUucG9ydHNfaW5mb1twb3J0LmlkIC0gMV07XG4gICAgICBzd2l0Y2ggKHBvcnRfaW5mby50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2dlbmVyaWMnOlxuICAgICAgICAgIHJldHVybiBhY3Rpb25fZm9yX2dlbmVyaWMocG9ydCk7XG4gICAgICAgIGNhc2UgJ2pvaW5hYmxlJzpcbiAgICAgICAgICBhY3Rpb25zID0gW107XG4gICAgICAgICAgcmVmID0gcG9ydF9pbmZvLmpvaW50X3BvcnQucG9ydHM7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzdWJwb3J0ID0gcmVmW2ldO1xuICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbl9mb3Jfam9pbmFibGUoc3VicG9ydCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uLCBqLCBsZW4xO1xuICAgICAgICAgICAgYXBpLmJlZ2luKCk7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gYWN0aW9ucy5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICAgICAgYWN0aW9uID0gYWN0aW9uc1tqXTtcbiAgICAgICAgICAgICAgaWYgKGFjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcGkuZW5kKCk7XG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS5wb3J0X3RyYW5zYWN0aW9uID0gZnVuY3Rpb24ocHJlcGFyZV9hY3Rpb24pIHtcbiAgICAgIHZhciBwb3J0cywgdXNpbmc7XG4gICAgICBwb3J0cyA9IFtdO1xuICAgICAgdXNpbmcgPSBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIHJldHVybiBwb3J0cy5wdXNoKHBvcnQuaWQpO1xuICAgICAgfTtcbiAgICAgIFN0YXR1cy5idXN5KCk7XG4gICAgICByZXR1cm4gUHJvbWlzZXMucHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1vZGVsX3NlcnZpY2UuZG9fd2l0aF9wb3J0X2xvY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFjdGlvbjtcbiAgICAgICAgICBhY3Rpb24gPSBwcmVwYXJlX2FjdGlvbih1c2luZyk7XG4gICAgICAgICAgJHNjb3BlLmJ1c3kocG9ydHMpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIERldmljZS5zYXZlX2NvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBTdGF0dXMubm90X2J1c3koKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImZpbmFsbHlcIl0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS5ub3RfYnVzeShwb3J0cyk7XG4gICAgICAgIH0pLiRhcHBseSgkc2NvcGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUuZW5hYmxlX3BvcnQgPSBmdW5jdGlvbihwb3J0KSB7XG4gICAgICByZXR1cm4gJHNjb3BlLnBvcnRfdHJhbnNhY3Rpb24oZnVuY3Rpb24odXNpbmcpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5iYXRjaChwb3J0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2luZyhwb3J0KTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gUG9ydC5lbmFibGUocG9ydCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgZnVuY3Rpb24oc3VicG9ydCkge1xuICAgICAgICAgIGlmICgkc2NvcGUuam9pbnRfcG9ydF9mb3Ioc3VicG9ydCkubW9kZSA9PT0gJzQwRycpIHtcbiAgICAgICAgICAgIHVzaW5nKHBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gUG9ydC5lbmFibGUoc3VicG9ydCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3VicG9ydC5pZCA9PT0gcG9ydC5pZCkge1xuICAgICAgICAgICAgdXNpbmcoc3VicG9ydCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBQb3J0LmVuYWJsZShzdWJwb3J0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmRpc2FibGVfcG9ydCA9IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgIHJldHVybiAkc2NvcGUucG9ydF90cmFuc2FjdGlvbihmdW5jdGlvbih1c2luZykge1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJhdGNoKHBvcnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzaW5nKHBvcnQpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBQb3J0LmRpc2FibGUocG9ydCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgZnVuY3Rpb24oc3VicG9ydCkge1xuICAgICAgICAgIGlmICgkc2NvcGUuam9pbnRfcG9ydF9mb3Ioc3VicG9ydCkubW9kZSA9PT0gJzQwRycpIHtcbiAgICAgICAgICAgIHVzaW5nKHN1YnBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gUG9ydC5kaXNhYmxlKHN1YnBvcnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1YnBvcnQuaWQgPT09IHBvcnQuaWQpIHtcbiAgICAgICAgICAgIHVzaW5nKHN1YnBvcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gUG9ydC5kaXNhYmxlKHN1YnBvcnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUudG9nZ2xlX3BvcnQgPSBmdW5jdGlvbihwb3J0KSB7XG4gICAgICBpZiAoIXBvcnQuZW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLmRpc2FibGVfcG9ydChwb3J0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUuZW5hYmxlX3BvcnQocG9ydCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAkc2NvcGUuc2V0X3BvcnRfbW9kZSA9IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgIHJldHVybiAkc2NvcGUucG9ydF90cmFuc2FjdGlvbihmdW5jdGlvbih1c2luZykge1xuICAgICAgICB1c2luZyhwb3J0KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBQb3J0LnNldF9ldGhfbW9kZShwb3J0KTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLnNldF9wb3J0X2ZvcmNlX3VwID0gZnVuY3Rpb24ocG9ydCwgZm9yY2VfdXApIHtcbiAgICAgIHJldHVybiAkc2NvcGUucG9ydF90cmFuc2FjdGlvbihmdW5jdGlvbih1c2luZykge1xuICAgICAgICB1c2luZyhwb3J0KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBwcmVwYXJlO1xuICAgICAgICAgIHByZXBhcmUgPSBmb3JjZV91cCA/IChwb3J0Lmxvb3BiYWNrID0gZmFsc2UsIFBvcnQuc2V0X2xvb3BiYWNrKHBvcnQpKSA6IGR1bW15X3Byb21pc2UoKTtcbiAgICAgICAgICByZXR1cm4gcHJlcGFyZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcG9ydC5mb3JjZV91cCA9IGZvcmNlX3VwO1xuICAgICAgICAgICAgcmV0dXJuIFBvcnQuc2V0X2ZvcmNlX3VwKHBvcnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUuc2V0X3BvcnRfbG9vcGJhY2sgPSBmdW5jdGlvbihwb3J0LCBsb29wYmFjaykge1xuICAgICAgaWYgKGxvb3BiYWNrKSB7XG4gICAgICAgIGlmICghY29uZmlybSh0cmFuc2xhdGUoJ3BhZ2UucG9ydHMubG9vcGJhY2tfY29uZmlybScpKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICRzY29wZS5wb3J0X3RyYW5zYWN0aW9uKGZ1bmN0aW9uKHVzaW5nKSB7XG4gICAgICAgIHVzaW5nKHBvcnQpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHByZXBhcmU7XG4gICAgICAgICAgcHJlcGFyZSA9IGxvb3BiYWNrID8gKHBvcnQuZm9yY2VfdXAgPSBmYWxzZSwgUG9ydC5zZXRfZm9yY2VfdXAocG9ydCkpIDogZHVtbXlfcHJvbWlzZSgpO1xuICAgICAgICAgIHJldHVybiBwcmVwYXJlLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwb3J0Lmxvb3BiYWNrID0gbG9vcGJhY2s7XG4gICAgICAgICAgICByZXR1cm4gUG9ydC5zZXRfbG9vcGJhY2socG9ydCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5zZXRfam9pbnRfcG9ydF9tb2RlID0gZnVuY3Rpb24oam9pbnRfcG9ydCkge1xuICAgICAgcmV0dXJuICRzY29wZS5wb3J0X3RyYW5zYWN0aW9uKGZ1bmN0aW9uKHVzaW5nKSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHBvcnQsIHJlZjtcbiAgICAgICAgcmVmID0gam9pbnRfcG9ydC5wb3J0cztcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICB1c2luZyhwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIGssIGwsIGxlbjEsIGxlbjIsIGxlbjMsIHJlZjEsIHJlZjIsIHJlZjM7XG4gICAgICAgICAgUG9ydC5zZXRfc3VicG9ydF9tb2Rlcyhqb2ludF9wb3J0KTtcbiAgICAgICAgICBEZXZpY2VfR1VJLnJlZnJlc2hfcG9ydF9jb29yZGluYXRlcygpO1xuICAgICAgICAgIGlmIChqb2ludF9wb3J0Lm1vZGUgPT09ICc0eDEwRycpIHtcbiAgICAgICAgICAgIGlmIChQb3J0X3ZpZXcuaXNfc2VsZWN0ZWQoam9pbnRfcG9ydC5wb3J0c1swXSkpIHtcbiAgICAgICAgICAgICAgcmVmMSA9IGpvaW50X3BvcnQucG9ydHM7XG4gICAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICAgIHBvcnQgPSByZWYxW2pdO1xuICAgICAgICAgICAgICAgIFBvcnRfdmlldy5zZWxlY3QocG9ydCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZjIgPSBqb2ludF9wb3J0LnBvcnRzO1xuICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMiA9IHJlZjIubGVuZ3RoOyBrIDwgbGVuMjsgaysrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWYyW2tdO1xuICAgICAgICAgICAgICBpZiAocG9ydCAhPT0gam9pbnRfcG9ydC5wb3J0c1swXSkge1xuICAgICAgICAgICAgICAgIFBvcnRfdmlldy5kZXNlbGVjdChwb3J0LCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXBpLmJlZ2luKCk7XG4gICAgICAgICAgcmVmMyA9IGpvaW50X3BvcnQucG9ydHM7XG4gICAgICAgICAgZm9yIChsID0gMCwgbGVuMyA9IHJlZjMubGVuZ3RoOyBsIDwgbGVuMzsgbCsrKSB7XG4gICAgICAgICAgICBwb3J0ID0gcmVmM1tsXTtcbiAgICAgICAgICAgIFBvcnQuc2V0X2V0aF9tb2RlKHtcbiAgICAgICAgICAgICAgaWQ6IHBvcnQuaWQsXG4gICAgICAgICAgICAgIGV0aF9tb2RlOiBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzLkRJU0FCTEVEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFwaS5lbmQoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGxlbjQsIG0sIHJlZjQ7XG4gICAgICAgICAgICBhcGkuYmVnaW4oKTtcbiAgICAgICAgICAgIHJlZjQgPSBqb2ludF9wb3J0LnBvcnRzO1xuICAgICAgICAgICAgZm9yIChtID0gMCwgbGVuNCA9IHJlZjQubGVuZ3RoOyBtIDwgbGVuNDsgbSsrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWY0W21dO1xuICAgICAgICAgICAgICBQb3J0LnNldF9ldGhfbW9kZShwb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcGkuZW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5pc19nZW5lcmljID0gZnVuY3Rpb24ocG9ydCkge1xuICAgICAgcmV0dXJuIFBvcnQuaXNfZ2VuZXJpYyhwb3J0LmlkKTtcbiAgICB9O1xuICAgICRzY29wZS5pc19maXJzdF9pbl9qb2ludF9wb3J0ID0gZnVuY3Rpb24ocG9ydCkge1xuICAgICAgdmFyIHBvcnRfaW5mbztcbiAgICAgIHBvcnRfaW5mbyA9ICRzY29wZS5wb3J0c19pbmZvW3BvcnQuaWQgLSAxXTtcbiAgICAgIHJldHVybiBwb3J0X2luZm8udHlwZSA9PT0gJ2pvaW5hYmxlJyAmJiBwb3J0X2luZm8uaXNfZmlyc3RfaW5fam9pbnQ7XG4gICAgfTtcbiAgICAkc2NvcGUuam9pbnRfcG9ydF9mb3IgPSBmdW5jdGlvbihwb3J0KSB7XG4gICAgICByZXR1cm4gJHNjb3BlLnBvcnRzX2luZm9bcG9ydC5pZCAtIDFdLmpvaW50X3BvcnQ7XG4gICAgfTtcbiAgICAkc2NvcGUuaWZfc2hvd19wb3J0ID0gZnVuY3Rpb24ocG9ydCkge1xuICAgICAgaWYgKFBvcnQuaXNfZ2VuZXJpYyhwb3J0LmlkKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICgkc2NvcGUuam9pbnRfcG9ydF9mb3IocG9ydCkubW9kZSA9PT0gJzR4MTBHJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc2NvcGUuaXNfZmlyc3RfaW5fam9pbnRfcG9ydChwb3J0KTtcbiAgICB9O1xuICAgICRzY29wZS5zdWJwb3J0X2lkID0gZnVuY3Rpb24ocG9ydCkge1xuICAgICAgdmFyIGpvaW50X3BvcnRfaWQsIHBvcnRfaWQsIHJlZjtcbiAgICAgIGpvaW50X3BvcnRfaWQgPSAwO1xuICAgICAgcG9ydF9pZCA9IDA7XG4gICAgICByZWYgPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfZnJvbV9wb3J0X2lkKHBvcnQuaWQpLCBqb2ludF9wb3J0X2lkID0gcmVmWzBdLCBwb3J0X2lkID0gcmVmWzFdO1xuICAgICAgcmV0dXJuIHBvcnRfaWQ7XG4gICAgfTtcbiAgICAkc2NvcGUucmVzZXRfcG9ydF9zdGF0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRzY29wZS5jYW5fcmVzZXRfcG9ydF9zdGF0cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmNhbl9yZXNldF9wb3J0X3N0YXRzID0gZmFsc2U7XG4gICAgICByZXR1cm4gUHJvbWlzZXMucHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBvcnQucmVzZXRfc3RhdHMoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUudXJnZV9wb3J0X3JlZnJlc2goKTtcbiAgICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUuY2FuX3Jlc2V0X3BvcnRfc3RhdHMgPSB0cnVlO1xuICAgICAgICB9KS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmlzX2tub3duX2V0aGVybmV0X3BvcnRfbW9kZSA9IGZ1bmN0aW9uKG1vZGVfdmFsdWUpIHtcbiAgICAgIHZhciBpLCBsZW4sIG1vZGUsIHJlZjtcbiAgICAgIHJlZiA9ICRzY29wZS5ldGhlcm5ldF9wb3J0X21vZGVzO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG1vZGUgPSByZWZbaV07XG4gICAgICAgIGlmIChtb2RlLnZhbHVlID09PSBtb2RlX3ZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS5ldGhlcm5ldF9wb3J0X21vZGVfbmFtZV9ieV9pZCA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgIHZhciBrZXksIHJlZiwgdmFsdWU7XG4gICAgICByZWYgPSBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzO1xuICAgICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICAgIHZhbHVlID0gcmVmW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbW9kZSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS50b2dnbGVfY29tbWVudF9mb3JtID0gZnVuY3Rpb24ocG9ydCwgY29tbWVudCkge1xuICAgICAgJHNjb3BlLmNvbW1lbnRfZm9ybXNbcG9ydC5pZF0gPSAhJHNjb3BlLmNvbW1lbnRfZm9ybXNbcG9ydC5pZF0gPyB0cnVlIDogZmFsc2U7XG4gICAgICBpZiAoISRzY29wZS5jb21tZW50X2Zvcm1zW3BvcnQuaWRdKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlcy5wcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLlBvcnRzLnNldF9jb21tZW50KHBvcnQsIGNvbW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS5nZXRfc2ZwX3Bvd2VyX3N0YXR1cyA9IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgIHZhciBkYm0sIGluX3JhbmdlLCBtYXRjaGVzLCBzdGF0dXMsIHZhbHVlcztcbiAgICAgIG1hdGNoZXMgPSBwb3J0LnNmcF9kYXRhLnJ4X3Bvd2VyLm1hdGNoKC8oLT9bXFxkLl0rKS4/ZEJtLyk7XG4gICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgZGJtID0gcGFyc2VGbG9hdChtYXRjaGVzWzFdKTtcbiAgICAgIGZvciAoc3RhdHVzIGluIHNmcF9wb3dlcl9zdGF0dXNlcykge1xuICAgICAgICB2YWx1ZXMgPSBzZnBfcG93ZXJfc3RhdHVzZXNbc3RhdHVzXTtcbiAgICAgICAgaW5fcmFuZ2UgPSB2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgcmV0dXJuIGRibSA+PSByYW5nZVswXSAmJiBkYm0gPD0gcmFuZ2VbMV07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5fcmFuZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5nZSBmb3IgcnhfcG93ZXJ8ZEJtIHZhbHVlIGRvZXNuXFwndCBleGlzdHMnKTtcbiAgICB9O1xuICAgIHJldHVybiAkc2NvcGUuaW5pdGlhbGl6ZV9wYWdlX3dpdGgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCBwb3J0LCByZWY7XG4gICAgICAkc2NvcGUuR3JhcGggPSBHcmFwaDtcbiAgICAgIEdyYXBoLmZvcl9wb3J0cygnLmdyYXBoaWMnKTtcbiAgICAgICRzY29wZS5ldGhlcm5ldF9wb3J0X21vZGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6ICcxRycsXG4gICAgICAgICAgdmFsdWU6IEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwMDBCQVNFX1gnXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgdGl0bGU6ICcxMEcnLFxuICAgICAgICAgIHZhbHVlOiBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWycxMEdCQVNFX0NSJ11cbiAgICAgICAgfVxuICAgICAgXTtcbiAgICAgICRzY29wZS5ldGhlcm5ldF9wb3J0X21vZGVzX2Zvcl80MGcgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogJzQwRycsXG4gICAgICAgICAgdmFsdWU6ICc0MEcnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0aXRsZTogJzR4MTBHJyxcbiAgICAgICAgICB2YWx1ZTogJzR4MTBHJ1xuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgJHNjb3BlLnBvcnRzX2luZm8gPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgcmVmID0gTW9kZWwucG9ydHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goUG9ydF9udW1lcmF0aW9uLmNhdGVnb3JpemVfcG9ydChwb3J0LmlkKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KSgpO1xuICAgICAgJHNjb3BlLmJ1c3lfcG9ydHMgPSB7fTtcbiAgICAgICRzY29wZS5zZnBfaW5mb19pZCA9IG51bGw7XG4gICAgICAkc2NvcGUuY29tbWVudF9mb3JtcyA9IFtdO1xuICAgICAgcmVmID0gTW9kZWwucG9ydHM7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgJHNjb3BlLmNvbW1lbnRfZm9ybXNbcG9ydC5pZF0gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlcy5wcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5Qb3J0cy5sb2FkX2NvbW1lbnRzKE1vZGVsKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUucmVhZHkgPSB0cnVlO1xuICAgICAgICB9KS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcFxuICAuZGlyZWN0aXZlKCdzZnBJbmZvJywgZnVuY3Rpb24oUG9ydCwgUG9ydF9udW1lcmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICBzY29wZToge1xuICAgICAgICBkYXRhOiAnPWRhdGEnLFxuICAgICAgICBwb3J0X2lkOiAnPXBvcnRJZCdcbiAgICAgIH0sXG4gICAgICB0ZW1wbGF0ZVVybDogJ3BhZ2VzL2luY2x1ZGUvc2ZwX2luZm8uaHRtbCdcbiAgICB9O1xuICB9KTtcbiIsIid1c2Ugc3RyaWN0J1xuXG4jINCd0LAg0Y3RgtC+0Lkg0YHRgtGA0LDQvdC40YbQtSDQutCw0LbQtNGL0Lkg0YDQsNC3INC/0YDQuCDRgdC+0LLQtdGA0YjQtdC90LjQuCDQvdC10LrQvtC10LPQviDQtNC10LnRgdGC0LLQuNGPLCDQv9C+0YLQtdC90YbQuNCw0LvRjNC90L4g0LzQtdC90Y/RjtGJ0LXQs9C+INC/0YDQsNCy0LjQu9CwLFxuIyDQstGL0LfRi9Cy0LDQtdGC0YHRjyDQvNC10YLQvtC0ICRzY29wZS5SVUxFLnJ1bGVzX2NoYW5nZWQoKSwg0LPQtNC1INC/0YDQvtC40YHRhdC+0LTQuNGCINGB0YDQsNCy0L3QtdC90LjQtSDRgtC10LrRg9GJ0LjRhSDQv9GA0LDQstC40Lsg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4jINC4INGC0LXQutGD0YnQuNGFINC/0YDQsNCy0LjQuyDQvdCwINGD0YHRgtGA0L7QudGB0YLQstC1LlxuI1xuIyDQotCw0LrQvtC1IFwi0LPQu9GD0LHQvtC60L7QtVwiINGB0YDQsNCy0L3QtdC90LjQtSDQtNCy0YPRhSBqYXZhc2NyaXB0J9C+0LLRi9GFINC80LDRgdGB0LjQstC+0LIgLSDQtNC+0YHRgtCw0YLQvtGH0L3QviDQtNC+0YDQvtCz0LDRjyDQvtC/0LXRgNCw0YbQuNGPLlxuI1xuIyDQldGB0LvQuCDQvtC90LAg0LrQvtCz0LTQsC3QvdC40LHRg9C00Ywg0YHRgtCw0L3QtdGCINGD0LfQutC40Lwg0LzQtdGB0YLQvtC8LCDRgtC+INC80L7QttC90L4g0LHRg9C00LXRgiDQstC80LXRgdGC0L4g0LzQtdGC0L7QtNCwIHJ1bGVzX2NoYW5nZWQoKSDQsiDQutCw0LbQtNC+0Lwg0YHQu9GD0YfQsNC1XG4jINCyINGH0LDRgdGC0L3QvtC8INC/0L7RgNGP0LTQutC1INC+0L/RgNC10LTQtdC70Y/RgtGMLCDQsdGL0LvQuCDQu9C4INCy0L3QtdGB0LXQvdGLINC40LfQvNC10L3QtdC90LjRjyDQsiDQutCw0LrQvtC1LdC70LjQsdC+INC/0YDQsNCy0LjQu9C+ICjRgtCw0LrQvtC1INC90LDQv9C40YHQsNGC0Ywg0LHRg9C00LXRgiDRgdC70L7QttC90L4pLlxuXG5hcHAuY29udHJvbGxlciBcIlJ1bGVzQ3RybFwiLCAoJHJvb3RTY29wZSwgJHNjb3BlLCAkZmlsdGVyLCAkbG9jYXRpb24sICR0aW1lb3V0LCAkcSwgdHJhbnNsYXRlLCBhcGksIGxvZywgUHJvbWlzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldmljZV9yb3V0aW5nLCBQb3J0LCBSdWxlLCBFbnVtcywgRGV2aWNlLCBTdGF0dXMsIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBDb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwaCwgUm91dGluZ19tb2RlbF9lcnJvcnMsIFBvcnRfdmlldywgUG9ydF9udW1lcmF0aW9uKSAtPlxuXG4gICAgJHNjb3BlLl9zaW5nbGVfY29tcGxleF9maWx0ZXIgPSAocnVsZSktPlxuICAgICAgICBjb21wbGV4X3R5cGVzID0gWydJUF9wcm90b2NvbF9zb3VyY2UnLCAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nLCAnSVBfcHJvdG9jb2wnXVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcnVsZS5maWx0ZXJzLmxlbmd0aCA9PSAyICYmIHJ1bGUuZmlsdGVycy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgKGYpLT4gY29tcGxleF90eXBlcy5pbmRleE9mKGYudHlwZSkgIT0gLTFcbiAgICAgICAgICAgICkubGVuZ3RoID09IDJcbiAgICAgICAgKVxuXG4gICAgJHNjb3BlLmhpZGVfYnJhY2tldCA9IChydWxlKS0+XG4gICAgICAgIHJldHVybiBydWxlLmZpbHRlcnMubGVuZ3RoIDwgMiB8fCAkc2NvcGUuX3NpbmdsZV9jb21wbGV4X2ZpbHRlcihydWxlKVxuXG4gICAgJHNjb3BlLnNpbmdsZV9maWx0ZXIgPSAocnVsZSktPlxuICAgICAgICByZXR1cm4gcnVsZS5maWx0ZXJzLmxlbmd0aCA9PSAxIHx8ICRzY29wZS5fc2luZ2xlX2NvbXBsZXhfZmlsdGVyKHJ1bGUpXG5cbiAgICAkc2NvcGUuc29ydF9ieV9pZCA9IChhcnJheSkgLT5cbiAgICAgICAgc29ydGVyID0gKG9uZSwgdHdvKSAtPlxuICAgICAgICAgICAgaWYgb25lLmlkID4gdHdvLmlkXG4gICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgIGVsc2UgaWYgb25lLmlkID09IHR3by5pZFxuICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgIGFycmF5LnNvcnQoc29ydGVyKVxuXG4gICAgIyDQktGL0LHQuNGA0LDQtdGCIGlkLCDQutC+0YLQvtGA0YvQuSDQsdC+0LvRjNGI0LUg0LvRjtCx0L7Qs9C+INGC0LXQutGD0YnQtdCz0L5cbiAgICAkc2NvcGUubmV4dF9pZCA9IChhcnJheSkgLT5cbiAgICAgICAgbWF4ID0gMFxuICAgICAgICBmb3IgaXRlbSBpbiBhcnJheVxuICAgICAgICAgICAgaWQgPSBpdGVtLmlkXG4gICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGlkKVxuICAgICAgICByZXR1cm4gbWF4ICsgMVxuXG4gICAgIyAo0LrQvtC/0LjQv9Cw0YHRgtCwKVxuICAgICMg0JLRi9Cx0LjRgNCw0LXRgiBwcmlvcml0eSwg0LrQvtGC0L7RgNGL0Lkg0LHQvtC70YzRiNC1INC70Y7QsdC+0LPQviDRgtC10LrRg9GJ0LXQs9C+XG4gICAgJHNjb3BlLm5leHRfcHJpb3JpdHkgPSAoYXJyYXkpIC0+XG4gICAgICAgIG1heCA9IDBcbiAgICAgICAgZm9yIGl0ZW0gaW4gYXJyYXlcbiAgICAgICAgICAgIHByaW9yaXR5ID0gaXRlbS5wcmlvcml0eVxuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBwcmlvcml0eSlcbiAgICAgICAgcmV0dXJuIG1heCArIDFcblxuICAgICRzY29wZS51bnNlbGVjdF9hbGwgPSAtPlxuICAgICAgICAjINCj0LHRgNCw0YLRjCDQv9C+0LTRgdCy0LXRgtC60YMg0YEg0L/QvtGA0YLQvtCyXG4gICAgICAgIFBvcnRfdmlldy5kZXNlbGVjdF9hbGwoKVxuXG4gICAgICAgICMg0KPQsdGA0LDRgtGMINC/0L7QtNGB0LLQtdGC0LrRgyDRgSBSdWxlc1xuICAgICAgICBmb3Iga2V5LCBydWxlIGluICRzY29wZS52aWV3LnJ1bGVzXG4gICAgICAgICAgICBydWxlLnNlbGVjdGVkID0gZmFsc2VcblxuICAgICAgICAjINCj0LHRgNCw0YLRjCDQv9C+0LTRgdCy0LXRgtC60YMg0L/QvtGA0YLQvtCyINCyINGD0YHRgtGA0L7QudGB0YLQstC1XG4gICAgICAgIGZvciBrZXksIHBvcnQgaW4gJHJvb3RTY29wZS52aWV3LnBvcnRzXG4gICAgICAgICAgICBwb3J0LnNlbGVjdGVkSW4gPSBmYWxzZVxuICAgICAgICAgICAgcG9ydC5zZWxlY3RlZE91dCA9IGZhbHNlXG5cbiAgICAkc2NvcGUuYnlfaWQgPSAoaWQsIHdoZXJlKSAtPlxuICAgICAgICB3aGVyZS5maWx0ZXIoKGl0ZW0pIC0+IGl0ZW0uaWQgPT0gaWQpWzBdXG5cbiAgICAkc2NvcGUuaW5pdF9zdGlja3llYWggPSAtPlxuICAgICAgICAkdGltZW91dCgtPiAkLnN0aWNreWVhaCgpKVxuXG4gICAgIyBhZGQgbmV3IHJ1bGUgYW5pbWF0aW9uXG4gICAgJHNjb3BlLm5ld19ydWxlID1cbiAgICAgICAgc2V0OiAocnVsZSwgbW9kZSkgLT5cbiAgICAgICAgICAgICRzY29wZS52aWV3Lm5ld19ydWxlX2lkID0gcnVsZS5pZFxuICAgICAgICAgICAgJHNjb3BlLnZpZXcubmV3X3J1bGVfbW9kZSA9IG1vZGVcblxuICAgICAgICAgICAgJHNjb3BlLm5ld19ydWxlLmNhbmNlbF9hZGRfdGltZW91dCgpXG5cbiAgICAgICAgICAgIGpRdWVyeShcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogJzBweCcgfSk7XG5cbiAgICAgICAgICAgICMg0LLQvtC30LLRgNCw0YnQsNGC0Ywg0LrQvdC+0L/QutGDIFwi0LTQvtCx0LDQstC40YLRjCDQv9GA0LDQstC40LvQvlwiINC90LAg0LzQtdGB0YLQviDQv9C+INC40YHRgtC10YfQtdC90LjRjiDQstGA0LXQvNC10L3QuFxuICAgICAgICAgICAgaWYgbW9kZSA9PSAnYWRkJ1xuICAgICAgICAgICAgICAgICRzY29wZS5uZXdfcnVsZS5zZXRfYWRkX3RpbWVvdXQoNSAqIDEwMDApXG5cbiAgICAgICAgcmVzZXQ6IC0+XG4gICAgICAgICAgICAkc2NvcGUudmlldy5uZXdfcnVsZV9pZCA9IG51bGxcbiAgICAgICAgICAgICRzY29wZS52aWV3Lm1vZGUgPSBudWxsXG5cbiAgICAgICAgICAgICRzY29wZS5uZXdfcnVsZS5jYW5jZWxfYWRkX3RpbWVvdXQoKVxuXG4gICAgICAgIGFkZGluZ19uZXdfcnVsZV9hbmRfbm90X3RpbWVkX291dDogLT5cbiAgICAgICAgICAgICRzY29wZS52aWV3Lm5ld19ydWxlX2lkICYmICRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0XG5cbiAgICAgICAgc2V0X2FkZF90aW1lb3V0OiAoZGVsYXkpIC0+XG4gICAgICAgICAgICAkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dCA9IHNldFRpbWVvdXQoLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dCA9IG51bGxcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGRlbGF5KVxuXG4gICAgICAgIGNhbmNlbF9hZGRfdGltZW91dDogLT5cbiAgICAgICAgICAgIGlmICRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0KVxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0ID0gbnVsbFxuXG4gICAgICAgIGlzOiAocnVsZSkgLT5cbiAgICAgICAgICAgICMgaWYgdHlwZW9mIHJ1bGUgPT0gJ3N0cmluZydcbiAgICAgICAgICAgICMgICAgIHJldHVybiAkc2NvcGUudmlldy5uZXdfcnVsZV9tb2RlID09IHJ1bGVcbiAgICAgICAgICAgICRzY29wZS52aWV3Lm5ld19ydWxlX2lkID09IHJ1bGUuaWRcblxuICAgICRzY29wZS53YXRjaF9ydWxlcyA9IC0+XG4gICAgICAgIHJldHVybiBpZiAkc2NvcGUud2F0Y2hpbmdfcnVsZXNcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdtb2RlbC5ydWxlcycsICRzY29wZS5SVUxFLnJ1bGVzX2NoYW5nZWQsIHllcylcbiAgICAgICAgIyAkc2NvcGUuJHdhdGNoKCdtb2RlbC5oYXNoaW5nX3Byb2ZpbGUnLCAkc2NvcGUuUlVMRS5oYXNoaW5nX3Byb2ZpbGVfY2hhbmdlZCwgeWVzKVxuXG4gICAgICAgICRzY29wZS53YXRjaGluZ19ydWxlcyA9IHllc1xuXG4gICAgIyBSVUxFUyBsb2dpYyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAkc2NvcGUuUlVMRSA9XG4gICAgICAgIGJ5X2lkOiAoaWQpIC0+XG4gICAgICAgICAgICBmb3IgcnVsZSBpbiBNb2RlbC5ydWxlc1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlIGlmIHJ1bGUuaWQgPT0gaWRcblxuICAgICAgICBhZGQ6IC0+XG4gICAgICAgICAgICBydWxlID0gYW5ndWxhci5jb3B5KCRzY29wZS50ZW1wbGF0ZXMucnVsZSlcblxuICAgICAgICAgICAgcnVsZS5pZCA9ICRzY29wZS5uZXh0X2lkKE1vZGVsLnJ1bGVzKVxuICAgICAgICAgICAgcnVsZS5uYW1lID0gJHNjb3BlLlJVTEUubmFtZShydWxlKVxuICAgICAgICAgICAgcnVsZS5wcmlvcml0eSA9ICRzY29wZS5uZXh0X3ByaW9yaXR5KE1vZGVsLnJ1bGVzKVxuXG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5kZXNjcmliZV9hY3Rpb24ocnVsZSlcblxuICAgICAgICAgICAgTW9kZWwucnVsZXMucHVzaChydWxlKVxuXG4gICAgICAgICAgICBpZiAkc2NvcGUuZWRpdF9wb3J0c1xuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLmlucHV0c190ZXh0ID0gJydcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5vdXRwdXRzX3RleHQgPSAnJ1xuXG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5zb3J0X2J5X3ByaW9yaXR5KClcbiAgICAgICAgICAgICRzY29wZS5SVUxFLnNlbGVjdChydWxlKVxuXG4gICAgICAgICAgICAjIEFuaW1hdGlvblxuICAgICAgICAgICAgJHNjb3BlLm5ld19ydWxlLnNldChydWxlLCAnYWRkJylcblxuICAgICAgICAgICAgIyAkc2NvcGUuUlVMRS5jaGFuZ2VkKHJ1bGUpXG5cbiAgICAgICAgcHJldmlvdXM6IChydWxlKSAtPlxuICAgICAgICAgICAgTW9kZWwucnVsZXMuZmlsdGVyKCh4KSAtPiB4LnByaW9yaXR5ID4gcnVsZS5wcmlvcml0eSlbMF1cblxuICAgICAgICBuYW1lOiAocnVsZSkgLT5cbiAgICAgICAgICAgIHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnJ1bGUubmFtZScsIHsgaWQ6IHJ1bGUuaWQgfSlcblxuICAgICAgICByZW1vdmU6IChydWxlKSAtPlxuICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSgtPlxuICAgICAgICAgICAgICAgIGlmICRzY29wZS5uZXdfcnVsZS5pcyhydWxlKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3X3J1bGUucmVzZXQoKVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0uaXNfYmVpbmdfcmVtb3ZlZCA9IHllc1xuXG4gICAgICAgICAgICAgICAgTW9kZWwucnVsZXMucmVtb3ZlKHJ1bGUpXG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdXG5cbiAgICAgICAgICAgICAgICBpZiBub3QgJHNjb3BlLlJVTEUuc2VsZWN0ZWQoKSAmJiBNb2RlbC5ydWxlc1swXVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5zZWxlY3QoTW9kZWwucnVsZXNbMF0pXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5kZXNlbGVjdF9hbGwoKVxuICAgICAgICAgICAgKVxuXG4gICAgICAgIHJlbW92ZV9hbGw6IC0+XG4gICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5KC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld19ydWxlLnJlc2V0KClcblxuICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLmRlc2VsZWN0X2FsbCgpXG5cbiAgICAgICAgICAgICAgICBNb2RlbC5ydWxlcyA9IFtdXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcucnVsZXMgPSB7fVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICMg0LXRgdC70Lgg0Y3RgtC+INC/0YDQsNCy0LjQu9C+INC90LAg0LHQsNC70LDQvdGB0LjRgNC+0LLQutGDLFxuICAgICAgICAjINGC0L4g0L/RgNC+0YHRgtCw0LLQuNGC0YwgaGFzaGluZ19wcm9maWxlLCDQtdGB0LvQuCDQvtC9INC90LUg0L/RgNC+0YHRgtCw0LLQu9C10L0uXG4gICAgICAgICMg0LjQvdCw0YfQtSwg0YPQsdGA0LDRgtGMIGhhc2hpbmdfcHJvZmlsZVxuICAgICAgICAjICjQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8sINC90LDQv9GA0LjQvNC10YAsINC/0YDQuCDQuNC30LzQtdC90LXQvdC40LggYWN0aW9uJ9CwINC/0YDQsNCy0LjQu9CwKVxuICAgICAgICBhZGRfb3JfcmVtb3ZlX2hhc2hpbmdfcHJvZmlsZTogKHJ1bGUpIC0+XG4gICAgICAgICAgICBpZiAocnVsZS5hY3Rpb24gPT0gJ2JhbGFuY2UnIHx8IHJ1bGUuYWN0aW9uID09ICdkdWJiaW5nJykgJiYgcnVsZS5vdXRwdXRzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICBpZiBub3QgcnVsZS5oYXNoaW5nX3Byb2ZpbGU/XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuaGFzaGluZ19wcm9maWxlID0gMFxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBydWxlLmhhc2hpbmdfcHJvZmlsZVxuXG4gICAgICAgIGhhc19kaXNhYmxlZDogLT5cbiAgICAgICAgICAgIGNvdW50ID0gMFxuICAgICAgICAgICAgaWYgTW9kZWwucnVsZXNcbiAgICAgICAgICAgICAgICBjb3VudCsrIGZvciBydWxlIGluIE1vZGVsLnJ1bGVzIHdoZW4gbm90IHJ1bGUuZW5hYmxlZFxuICAgICAgICAgICAgICAgIHJldHVybiAhIWNvdW50XG4gICAgICAgICAgICBlbHNlIHJldHVybiBmYWxzZVxuXG4gICAgICAgIHN3aXRjaF9hbGw6IChtb2RlKSAtPlxuICAgICAgICAgICAgcnVsZS5lbmFibGVkID0gbW9kZSBmb3IgcnVsZSBpbiBNb2RlbC5ydWxlc1xuXG4gICAgICAgIGZpbHRlcl9saXN0X3Nob3duOiAocnVsZSwgZXh0cmEpIC0+XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnNjcm9sbF9ieShleHRyYS5oZWlnaHQoKSlcblxuICAgICAgICB0b2dnbGVfYXZhaWxhYmxlX2ZpbHRlcnM6IChydWxlKSAtPlxuICAgICAgICAgICAgc2hvd24gPSBPYmplY3QuZ2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2hvd19hdmFpbGFibGVfZmlsdGVycycpXG4gICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2hvd19hdmFpbGFibGVfZmlsdGVycycsICFzaG93bilcblxuICAgICAgICBpZl9zaG93X2F2YWlsYWJsZV9maWx0ZXJzOiAocnVsZSkgLT5cbiAgICAgICAgICAgIE9iamVjdC5nZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzaG93X2F2YWlsYWJsZV9maWx0ZXJzJylcblxuICAgICAgICBpbml0aWFsaXplOiAtPlxuICAgICAgICAgICAgZm9yIHJ1bGUgaW4gTW9kZWwucnVsZXNcbiAgICAgICAgICAgICAgICAjIGFkZCBhY3Rpb24gZGVzY3JpcHRpb25zXG4gICAgICAgICAgICAgICAgJHNjb3BlLlJVTEUuZGVzY3JpYmVfYWN0aW9uKHJ1bGUpXG5cbiAgICAgICAgICAgICAgICAjINGA0LDRgdC60YDRi9GC0Ywg0YLQtSDQvNCw0YHQutC4LCDQutC+0YLQvtGA0YvQtSDQvdC1IFwi0LXQtNC40L3QuNGH0L3Ri9C1XCJcbiAgICAgICAgICAgICAgICBmb3IgZmlsdGVyIGluIHJ1bGUuZmlsdGVyc1xuICAgICAgICAgICAgICAgICAgICAjINGN0YLQviDRgdC00LXQu9Cw0L3QviDQtNC70Y8g0YLQvtCz0L4sINGH0YLQvtCx0Ysg0LzQsNGB0LrQsCDQvdCwIGw0IGRhdGEg0LLRgdC10LPQtNCwINC/0L7QutCw0LfRi9Cy0LDQu9Cw0YHRjCDQsiDQuNC90YLQtdGA0YTQtdC50YHQtVxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuJCRzaG93X21hc2sgPSBzd2l0Y2ggZmlsdGVyLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gJ0xldmVsNF9kYXRhJyB0aGVuIHllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB5ZXMgaWYgbm90ICRzY29wZS5GSUxURVIuaXNfZGVmYXVsdF9tYXNrKGZpbHRlcilcblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuJCRpbnRlcnZhbCA9IGZpbHRlci50b192YWx1ZT9cblxuICAgICAgICAgICAgJHNjb3BlLnJlZnJlc2hfZGV2aWNlX3BvcnRfc3RhdHVzZXMoKVxuXG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5zb3J0X2J5X3ByaW9yaXR5KClcblxuICAgICAgICAgICAgIyBzZWxlY3QgZmlyc3QgcnVsZVxuICAgICAgICAgICAgaWYgTW9kZWwucnVsZXNbMF1cbiAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5zZWxlY3QoTW9kZWwucnVsZXNbMF0pXG5cbiAgICAgICAgICAgICRzY29wZS5vbl9rZXkgKGtleSkgLT5cbiAgICAgICAgICAgICAgICBpZiBrZXkuaXMoJ0N0cmwnLCAnVXAnKVxuICAgICAgICAgICAgICAgICAgICBydWxlID0gJHNjb3BlLlJVTEUuc2VsZWN0ZWQoKVxuICAgICAgICAgICAgICAgICAgICBpZiBydWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJVTEUuY2hhbmdlX3ByaW9yaXR5KHJ1bGUsICsxKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgICAgIGlmIGtleS5pcygnQ3RybCcsICdEb3duJylcbiAgICAgICAgICAgICAgICAgICAgcnVsZSA9ICRzY29wZS5SVUxFLnNlbGVjdGVkKClcbiAgICAgICAgICAgICAgICAgICAgaWYgcnVsZVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLmNoYW5nZV9wcmlvcml0eShydWxlLCAtMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgICAgICAgICBpZiBrZXkuaXMoJ0N0cmwnLCAnRScpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGVfZWRpdF9wb3J0cygpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgICAgICByZXR1cm4gZHVtbXlfcHJvbWlzZSgpXG5cbiAgICAgICAgcmVuYW1lOiAocnVsZSwgb25fb2ZmKSAtPlxuICAgICAgICAgICAgaWYgbm90IG9uX29mZj9cbiAgICAgICAgICAgICAgICBvbl9vZmYgPSB5ZXNcblxuICAgICAgICAgICAgaWYgb25fb2ZmXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmIG5vdCBydWxlLmVuYWJsZWRcblxuICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ3JlbmFtZScsIG9uX29mZilcblxuICAgICAgICBjYW5faGF2ZV9zYW1lX2lucHV0c19hbmRfb3V0cHV0czogKHJ1bGUpIC0+IHN3aXRjaCBydWxlLmFjdGlvblxuICAgICAgICAgICAgIyAsICdyZWRpcmVjdCdcbiAgICAgICAgICAgIHdoZW4gJ21pcnJvcicgdGhlbiB5ZXNcbiAgICAgICAgICAgIGVsc2Ugbm9cblxuICAgICAgICAjINCU0L7QsdCw0LLQuNGC0Ywg0L/QtdGA0LXRgtCw0YnQtdC90L3Ri9C5INC/0L7RgNGCINCyINC60LDRh9C10YHRgtCy0LUg0LLRhdC+0LTQvdC+0LPQviDQv9C+0YDRgtCwIEFDTFxuICAgICAgICBhZGRfaW5wdXQ6IChydWxlKSAtPlxuICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSAtPlxuICAgICAgICAgICAgICAgIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzLmZpbHRlcigocG9ydCkgLT4gUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBydWxlLmlucHV0cy5oYXMocG9ydClcblxuICAgICAgICAgICAgICAgICAgICAjIGlmIHJ1bGUub3V0cHV0cy5oYXMocG9ydClcbiAgICAgICAgICAgICAgICAgICAgIyAgICAgaWYgbm90ICRzY29wZS5SVUxFLmNhbl9oYXZlX3NhbWVfaW5wdXRzX2FuZF9vdXRwdXRzKHJ1bGUpXG4gICAgICAgICAgICAgICAgICAgICMgICAgICAgICBydWxlLm91dHB1dHMucmVtb3ZlKHBvcnQpXG5cbiAgICAgICAgICAgICAgICAgICAgcnVsZS5pbnB1dHMucHVzaChwb3J0KVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydF9ieV9pZChydWxlLmlucHV0cylcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlZnJlc2hfZGV2aWNlX3BvcnRfc3RhdHVzZXMoKVxuXG4gICAgICAgICAgICAgICAgUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpXG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5jaGFuZ2VkKHJ1bGUpXG4gICAgICAgICAgICAgICAgIyAkc2NvcGUuUlVMRS5zZWxlY3QocnVsZSlcblxuICAgICAgICAgICAgICAgICMg0JLQvtC30LLRgNCw0YnQtdC90LjQtSDQvdCwINC80LXRgdGC0L4g0LrQvdC+0L/QutC4INC00L7QsdCw0LLQuNGC0YxcbiAgICAgICAgICAgICAgICBpZiAkc2NvcGUubmV3X3J1bGUuaXMocnVsZSlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld19ydWxlLnJlc2V0KClcbiAgICAgICAgICAgICAgICBpZiAkc2NvcGUuZWRpdF9wb3J0cyB0aGVuICRzY29wZS5SVUxFLnJlZnJlc2hfaW5wdXRfdGV4dChydWxlKVxuXG4gICAgICAgICMg0JTQvtCx0LDQstC40YLRjCDQv9C10YDQtdGC0LDRidC10L3QvdGL0Lkg0L/QvtGA0YIg0LIg0LrQsNGH0LXRgdGC0LLQtSDQstGL0YXQvtC00L3QvtCz0L4g0L/QvtGA0YLQsCBSdWxlXG4gICAgICAgIGFkZF9vdXRwdXQ6IChydWxlKSAtPlxuICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSAtPlxuICAgICAgICAgICAgICAgIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzLmZpbHRlcigocG9ydCkgLT4gUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBydWxlLm91dHB1dHMuaGFzKHBvcnQpXG5cbiAgICAgICAgICAgICAgICAgICAgIyBpZiBydWxlLmlucHV0cy5oYXMocG9ydClcbiAgICAgICAgICAgICAgICAgICAgIyAgICAgaWYgbm90ICRzY29wZS5SVUxFLmNhbl9oYXZlX3NhbWVfaW5wdXRzX2FuZF9vdXRwdXRzKHJ1bGUpXG4gICAgICAgICAgICAgICAgICAgICMgICAgICAgICBydWxlLmlucHV0cy5yZW1vdmUocG9ydClcblxuICAgICAgICAgICAgICAgICAgICBydWxlLm91dHB1dHMucHVzaChwb3J0KVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydF9ieV9pZChydWxlLm91dHB1dHMpXG4gICAgICAgICAgICAgICAgICAgIFBvcnRfdmlldy5kZXNlbGVjdChwb3J0KVxuICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlZnJlc2hfZGV2aWNlX3BvcnRfc3RhdHVzZXMoKVxuXG4gICAgICAgICAgICAgICAgaWYgcnVsZS5hY3Rpb24gPT0gJ3JlZGlyZWN0JyAmJiBydWxlLm91dHB1dHMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICBydWxlLmFjdGlvbiA9ICdiYWxhbmNlJ1xuXG4gICAgICAgICAgICAgICAgUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpXG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5hZGRfb3JfcmVtb3ZlX2hhc2hpbmdfcHJvZmlsZShydWxlKVxuICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLmNoYW5nZWQocnVsZSlcbiAgICAgICAgICAgICAgICAjICRzY29wZS5SVUxFLnNlbGVjdChydWxlKVxuXG4gICAgICAgICAgICAgICAgIyDQktC+0LfQstGA0LDRidC10L3QuNC1INC90LAg0LzQtdGB0YLQviDQutC90L7Qv9C60Lgg0LTQvtCx0LDQstC40YLRjFxuICAgICAgICAgICAgICAgIGlmICRzY29wZS5uZXdfcnVsZS5pcyhydWxlKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3X3J1bGUucmVzZXQoKVxuICAgICAgICAgICAgICAgIGlmICRzY29wZS5lZGl0X3BvcnRzIHRoZW4gJHNjb3BlLlJVTEUucmVmcmVzaF9vdXRwdXRfdGV4dChydWxlKVxuXG4gICAgICAgIHJlZnJlc2hfaW5wdXRfdGV4dDogKHJ1bGUpIC0+XG4gICAgICAgICAgICAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pbnB1dHNfdGV4dCA9IChQb3J0X251bWVyYXRpb24ubmFtZV9ieV9pZChpbnB1dC5pZCkgZm9yIGlucHV0IGluIHJ1bGUuaW5wdXRzKS5qb2luKCcgJylcblxuICAgICAgICByZWZyZXNoX291dHB1dF90ZXh0OiAocnVsZSkgLT5cbiAgICAgICAgICAgICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLm91dHB1dHNfdGV4dCA9IChQb3J0X251bWVyYXRpb24ubmFtZV9ieV9pZChvdXRwdXQuaWQpIGZvciBvdXRwdXQgaW4gcnVsZS5vdXRwdXRzKS5qb2luKCcgJylcblxuICAgICAgICBjaGFuZ2VkOiAocnVsZSkgLT5cbiAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvcicsIG5vKVxuXG4gICAgICAgIGlucHV0c190ZXh0X2NoYW5nZWQ6IChydWxlKSAtPlxuICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yLmludmFsaWRfaW5wdXRzX3RleHQnLCBubylcblxuICAgICAgICBvdXRwdXRzX3RleHRfY2hhbmdlZDogKHJ1bGUpIC0+XG4gICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnZXJyb3IuaW52YWxpZF9vdXRwdXRzX3RleHQnLCBubylcblxuICAgICAgICAjINGN0YLQvtGCINC80LXRgtC+0LQg0LLRi9C30YvQstCw0LXRgtGB0Y8g0LrQsNC20LTRi9C5INGA0LDQtywg0LrQvtCz0LTQsCDQtdGB0YLRjCDQv9C+0LTQvtC30YDQtdC90LjQtSDQvdCwINGC0L4sINGH0YLQviDQv9GA0LDQstC40LvQsCDQvNC+0LPQu9C4INC40LfQvNC10L3QuNGC0YzRgdGPLlxuICAgICAgICAjICjQsdC+0LvQtdC1INC/0L7QtNGA0L7QsdC90L4gLSDQsiDRiNCw0L/QutC1INGN0YLQvtCz0L4g0YTQsNC50LvQsClcbiAgICAgICAgI1xuICAgICAgICAjINC90LUg0L7QsdGP0LfQsNGC0LXQu9GM0L3Qviwg0YfRgtC+INC/0YDQsNCy0LjQu9CwINC40LfQvNC10L3QuNC70LjRgdGMIC0g0LzQvtCz0LvQuCDQuCDQvdC1INC40LfQvNC10L3QuNGC0YzRgdGPLlxuICAgICAgICAjIFwicnVsZXNfbWlnaHRfaGF2ZV9jaGFuZ2VkXCJcbiAgICAgICAgcnVsZXNfY2hhbmdlZDogLT5cbiAgICAgICAgICAgICMg0LXRgdC70Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC90LDQttCw0Lsg0LrQvdC+0L/QutGDIFwi0J/RgNC40LzQtdC90LjRgtGMINC/0YDQsNCy0LjQu9CwXCIsXG4gICAgICAgICAgICAjINGC0L4g0L3QtSDQvNC10YjQsNGC0Ywg0Y3RgtC+0Lkg0YjRgtGD0LrQtSDQtNC10LvQsNGC0Ywg0YHQstC+0Y4g0YDQsNCx0L7RgtGDLCDQv9C+0LrQsCDQvtC90LAg0L3QtSDQt9Cw0LrQvtC90YfQuNGCINC10ZEuXG4gICAgICAgICAgICByZXR1cm4gaWYgJHNjb3BlLmFwcGx5aW5nX3J1bGVzXG4gICAgICAgICAgICAjINC10YHQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQt9Cw0LPRgNGD0LbQsNC10YIg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC40Lcg0YTQsNC50LvQsCxcbiAgICAgICAgICAgICMg0YLQviDQvdC1INC80LXRiNCw0YLRjCDRgdC40YHRgtC10LzQtSDRjdGC0L4g0LTQtdC70LDRgtGMLCDQv9C+0LrQsCDQvtC90LAg0L3QtSDQt9Cw0LrQvtC90YfQuNGCLlxuICAgICAgICAgICAgcmV0dXJuIGlmICRyb290U2NvcGUuYXBwbHlpbmdfY29uZmlndXJhdGlvblxuXG4gICAgICAgICAgICBmb3IgcnVsZSBpbiBNb2RlbC5ydWxlc1xuICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLmRlc2NyaWJlX2FjdGlvbihydWxlKVxuXG4gICAgICAgICAgICAkc2NvcGUuaW50ZXJhY3RpdmVfdmFsaWRhdGlvbigpXG5cbiAgICAgICAgICAgIGlmICRzY29wZS5sb2FkX3J1bGVzX3RpbWVyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKCRzY29wZS5sb2FkX3J1bGVzX3RpbWVyKVxuXG4gICAgICAgICAgICAjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0YtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gLT4gRGV2aWNlLmxvYWRfcnVsZXMoKS50aGVuKChydWxlcykgLT5cbiAgICAgICAgICAgICAgICBndWlfcnVsZXMgPSBEZXZpY2Vfcm91dGluZy5jb252ZXJ0X3RvX2RldmljZV9ydWxlcyhNb2RlbC5ydWxlcylcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW55X2NoYW5nZXMgPSAhYW5ndWxhci5lcXVhbHMoZ3VpX3J1bGVzLCBydWxlcylcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgIyDQt9Cw0LTQtdGA0LbQutCwINCyINGB0LXQutGD0L3QtNGDINGBINC+0YLQvNC10L3QvtC5INC/0YDQtdC00YvQtNGD0YnQtdCz0L4g0YLQsNC50LzQtdGA0LAg0L3QsCDQt9Cw0L/RgNC+0YEg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INGBINC20LXQu9C10LfQutC4XG4gICAgICAgICAgICAkc2NvcGUubG9hZF9ydWxlc190aW1lciA9ICR0aW1lb3V0KGNhbGxiYWNrLCAxMDAwKVxuXG4gICAgICAgIGhhc2hpbmdfcHJvZmlsZV9jaGFuZ2VkOiAocnVsZSkgLT5cbiAgICAgICAgICAgICRzY29wZS5SVUxFLmRlc2NyaWJlX2FjdGlvbihydWxlKVxuXG4gICAgICAgIHZhbGlkYXRlOiAocnVsZSkgLT5cblxuICAgICAgICAgICAgIyDQv9GA0L7QstC10YDQuNGC0Ywg0L3QsNC70LjRh9C40LUg0L7RiNC40LHQvtC6INGE0L7RgNC80YsgKNGF0LcsINGH0YLQviDRjdGC0L4g0LzQvtCz0LvQviDQt9C90LDRh9C40YLRjClcbiAgICAgICAgICAgIGlmICRzY29wZS5mb3JtLiRpbnZhbGlkXG4gICAgICAgICAgICAgICAgcmV0dXJuICdmb3JtX2Vycm9ycydcblxuICAgICAgICAgICAgIyDQtdGB0LvQuCDQsiDRgNC10LbQuNC80LUg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQv9C+0YDRgtC+0LIsINGC0L4g0LLRi9C00LDRgtGMINC+0YjQuNCx0LrRg1xuICAgICAgICAgICAgaWYgJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0uZWRpdF9wb3J0c1xuICAgICAgICAgICAgICAgIHJldHVybiAnZXhpdF9wb3J0X2VkaXRpbmdfbW9kZSdcblxuICAgICAgICAgICAgIyDQv9GA0L7QstC10YDQuNGC0Ywg0L3QsNC70LjRh9C40LUg0LLRhdC+0LTQvdGL0YUg0L/QvtGA0YLQvtCyXG4gICAgICAgICAgICBpZiBydWxlLmlucHV0cy5pc19lbXB0eSgpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnB1dF9yZXF1aXJlZCdcblxuICAgICAgICAgICAgIyDQv9GA0L7QstC10YDQuNGC0Ywg0L3QsNC70LjRh9C40LUg0LLRi9GF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LJcbiAgICAgICAgICAgIHN3aXRjaCBydWxlLmFjdGlvblxuICAgICAgICAgICAgICAgIHdoZW4gJ2Ryb3AnXG4gICAgICAgICAgICAgICAgICAgICMg0LLRi9GF0L7QtNC90YvQtSDQv9C+0YDRgtGLINC90LUg0YLRgNC10LHRg9GO0YLRgdGPXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiBydWxlLm91dHB1dHMuaXNfZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdvdXRwdXRfcmVxdWlyZWQnXG5cbiAgICAgICAgICAgICMg0LLQsNC70LjQtNCw0YbQuNGPINC00LvRjyDQv9GA0LDQstC40LvQsCDQv9C10YDQtdC90LDQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgICAgIHN3aXRjaCBydWxlLmFjdGlvblxuICAgICAgICAgICAgICAgIHdoZW4gJ3JlZGlyZWN0J1xuICAgICAgICAgICAgICAgICAgICBpZiBydWxlLm91dHB1dHMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtdWx0aXBsZV9vdXRwdXRzX2Zvcl9yZWRpcmVjdCdcblxuICAgICAgICAgICAgIyDQv9GA0L7QstC10YDQuNGC0YwsINGH0YLQviDQtdGB0YLRjCDRhNC40LvRjNGC0YAg0L3QsCBJUCDQv9GA0L7RgtC+0LrQvtC7LCDQtdGB0LvQuCDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LTQuNCw0L/QsNC30L7QvSDQv9C+0YDRgtC+0LJcblxuICAgICAgICAgICAgc291cmNlX3BvcnRfZmlsdGVyICAgICAgPSBydWxlLmZpbHRlcnMuZmlsdGVyKCh4KSAtPiB4LnR5cGUgPT0gJ0lQX3Byb3RvY29sX3NvdXJjZScpWzBdXG4gICAgICAgICAgICBkZXN0aW5hdGlvbl9wb3J0X2ZpbHRlciA9IHJ1bGUuZmlsdGVycy5maWx0ZXIoKHgpIC0+IHgudHlwZSA9PSAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nKVswXVxuXG4gICAgICAgICAgICAjIGlmIHNvdXJjZV9wb3J0X2ZpbHRlciAmJiBzb3VyY2VfcG9ydF9maWx0ZXIudG9fdmFsdWU/IHx8IGRlc3RpbmF0aW9uX3BvcnRfZmlsdGVyICYmIGRlc3RpbmF0aW9uX3BvcnRfZmlsdGVyLnRvX3ZhbHVlP1xuICAgICAgICAgICAgIyAgICAgaWYgcnVsZS5maWx0ZXJzLmZpbHRlcigoeCkgLT4geC50eXBlID09ICdJUF9wcm90b2NvbCcpLmlzX2VtcHR5KClcbiAgICAgICAgICAgICMgICAgICAgICByZXR1cm4gJ2lwX3Byb3RvY29sX3JlcXVpcmVkX2Zvcl9wb3J0X3JhbmdlJ1xuXG4gICAgICAgICAgICBpZiBzb3VyY2VfcG9ydF9maWx0ZXIgfHwgZGVzdGluYXRpb25fcG9ydF9maWx0ZXJcbiAgICAgICAgICAgICAgICBpZiBydWxlLmZpbHRlcnMuZmlsdGVyKCh4KSAtPiB4LnR5cGUgPT0gJ0lQX3Byb3RvY29sJykuaXNfZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2lwX3Byb3RvY29sX3JlcXVpcmVkX2Zvcl9wb3J0X2ZpbHRlcmluZydcblxuICAgICAgICAgICAgIyDQv9C+INCy0YHQtdC8IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C8INC/0L7RgNGC0LDQvCDQv9GA0L7QstC10YDQuNGC0YwsINC90LUg0LjRgdC/0L7Qu9GM0LfRg9GO0YLRgdGPINC70Lgg0L/QvtC00L/QvtGA0YLRiyDQsiDQv9GA0LDQstC40LvQsNGFICjQutGA0L7QvNC1INC/0LXRgNCy0L7Qs9C+INC/0L7QtNC/0L7RgNGC0LApXG4gICAgICAgICAgICBmb3IgcG9ydCBpbiBydWxlLmlucHV0cy5jb25jYXQocnVsZS5vdXRwdXRzKVxuICAgICAgICAgICAgICAgIHBvcnQgPSBQb3J0X251bWVyYXRpb24uY2F0ZWdvcml6ZV9wb3J0KHBvcnQuaWQpXG4gICAgICAgICAgICAgICAgaWYgcG9ydC50eXBlID09ICdqb2luYWJsZSdcbiAgICAgICAgICAgICAgICAgICAgaWYgcG9ydC5qb2ludF9wb3J0Lm1vZGUgPT0gJzQwRydcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBwb3J0LmlzX2ZpcnN0X2luX2pvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdqb2ludF9wb3J0X2lzXzQwR19idXRfc3VicG9ydHNfYXJlX3VzZWRfaW5fcnVsZXMnXG5cbiAgICAgICAgZHVwbGljYXRlOiAocnVsZSkgLT5cbiAgICAgICAgICAgIGNvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSlcblxuICAgICAgICAgICAgY29weS5pbnB1dHMgID0gW10uY29uY2F0KHJ1bGUuaW5wdXRzKVxuICAgICAgICAgICAgY29weS5vdXRwdXRzID0gW10uY29uY2F0KHJ1bGUub3V0cHV0cylcblxuICAgICAgICAgICAgY29weS5pZCA9ICRzY29wZS5uZXh0X2lkKE1vZGVsLnJ1bGVzKVxuICAgICAgICAgICAgY29weS5uYW1lID0gJHNjb3BlLlJVTEUubmFtZShjb3B5KVxuXG4gICAgICAgICAgICBwcmV2aW91c19ydWxlID0gJHNjb3BlLlJVTEUucHJldmlvdXMocnVsZSlcbiAgICAgICAgICAgIGlmIHByZXZpb3VzX3J1bGVcbiAgICAgICAgICAgICAgICBmb3IgYV9ydWxlIGluIE1vZGVsLnJ1bGVzXG4gICAgICAgICAgICAgICAgICAgIGlmIGFfcnVsZS5wcmlvcml0eSA+IHJ1bGUucHJpb3JpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGFfcnVsZS5wcmlvcml0eSsrXG4gICAgICAgICAgICAgICAgY29weS5wcmlvcml0eSA9IHJ1bGUucHJpb3JpdHlcbiAgICAgICAgICAgICAgICBydWxlLnByaW9yaXR5KytcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb3B5LnByaW9yaXR5ID0gcnVsZS5wcmlvcml0eVxuICAgICAgICAgICAgICAgIHJ1bGUucHJpb3JpdHkgPSAkc2NvcGUubmV4dF9wcmlvcml0eShNb2RlbC5ydWxlcylcblxuICAgICAgICAgICAgJHNjb3BlLlJVTEUuZGVzY3JpYmVfYWN0aW9uKGNvcHkpXG5cbiAgICAgICAgICAgIE1vZGVsLnJ1bGVzLnB1c2goY29weSlcbiAgICAgICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKVxuXG4gICAgICAgICAgICAkdGltZW91dCgoLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5zZWxlY3QoY29weSlcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3X3J1bGUuc2V0KGNvcHksICdkdXBsaWNhdGUnKVxuICAgICAgICAgICAgKSwgMClcblxuICAgICAgICAgICAgIyAkc2NvcGUuUlVMRS5jaGFuZ2VkKGNvcHkpXG5cbiAgICAgICAgcG9ydF9jbGlja2VkOiAocnVsZSwgcG9ydCwgJGV2ZW50KSAtPlxuICAgICAgICAgICAgcmV0dXJuIGlmIG5vdCAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5zZWxlY3RlZFxuXG4gICAgICAgICAgICBQb3J0X3ZpZXcuc2VsZWN0KHBvcnQsIHllcylcbiAgICAgICAgICAgICRzY29wZS5ibG9ja19ldmVudCgkZXZlbnQpXG5cbiAgICAgICAgb25fb2ZmX2NsaWNrZWQ6IChydWxlLCAkZXZlbnQpIC0+XG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgICAgICBzZWxlY3RlZDogLT5cbiAgICAgICAgICAgIGZvciBydWxlX2lkLCBydWxlIG9mICRzY29wZS52aWV3LnJ1bGVzIHdoZW4gcnVsZS5zZWxlY3RlZFxuICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5ieV9pZChwYXJzZUludChydWxlX2lkKSlcblxuICAgICAgICBzZWxlY3Q6IChydWxlLCAkZXZlbnQpIC0+XG4gICAgICAgICAgICByZXR1cm4gaWYgJHNjb3BlLlJVTEUuc2VsZWN0ZWQoKSA9PSBydWxlXG5cbiAgICAgICAgICAgICMg0L7QsdGF0L7QtCDQsdCw0LPQsCDQsiBBbmd1bGFyLmpzOiDQv9GA0Lgg0LrQu9C40LrQtSDQvdCwINCy0YvQutC70Y7Rh9Cw0YLQtdC70LUg0L3QtdCy0YvQsdGA0LDQvdC90L7Qs9C+INC/0YDQsNCy0LjQu9CwLFxuICAgICAgICAgICAgIyDRgdC90LDRh9Cw0LvQsCDRgdGA0LDQsdCw0YLRi9Cy0LDQtdGCIG5nLWNsaWNrINC90LAg0L/RgNCw0LLQuNC70LUsINCwINC/0L7RgdC70LUg0L3QtdCz0L4gLSBuZy1jbGljayDQvdCwINCy0YvQutC70Y7Rh9Cw0YLQtdC70LUuXG4gICAgICAgICAgICBpZiAkZXZlbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gaWYgalF1ZXJ5KCRldmVudC50YXJnZXQpLmhhc0NsYXNzKCdydWxlX29uX29mZl9zd2l0Y2gnKVxuXG4gICAgICAgICAgICBpZiAkc2NvcGUuZWRpdF9wb3J0c1xuICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLnJlZnJlc2hfaW5wdXRfdGV4dChydWxlKVxuICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLnJlZnJlc2hfb3V0cHV0X3RleHQocnVsZSlcblxuICAgICAgICAgICAgJHNjb3BlLlJVTEUuZGVzZWxlY3RfYWxsKClcblxuICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ3NlbGVjdGVkJywgeWVzKVxuXG4gICAgICAgICAgICAjINCh0LrRgNGL0YLRjCDQs9GA0LDRhNC40Log0L/RgNC4INGB0LzQtdC90LUg0L/RgNCw0LLQuNC70LBcbiAgICAgICAgICAgIGlmIHJ1bGUgIT0gR3JhcGgucnVsZVxuICAgICAgICAgICAgICBHcmFwaC5zaG93ID0gbm9cblxuICAgICAgICAgICAgIyDQn9C+0LTRgdCy0LXRgtC60LAg0LLRhdC+0LTQvtCyINCyINGD0YHRgtGA0L7QudGB0YLQstC1XG4gICAgICAgICAgICBmb3IgcG9ydCBpbiBydWxlLmlucHV0c1xuICAgICAgICAgICAgICAgIE9iamVjdC5zZXQoJHJvb3RTY29wZS52aWV3LnBvcnRzLCBwb3J0LmlkLCAnc2VsZWN0ZWRJbicsIHllcylcblxuICAgICAgICAgICAgIyDQn9C+0LTRgdCy0LXRgtC60LAg0LLRi9GF0L7QtNC+0LIg0LIg0YPRgdGC0YDQvtC50YHRgtCy0LVcbiAgICAgICAgICAgIGZvciBwb3J0IGluIHJ1bGUub3V0cHV0c1xuICAgICAgICAgICAgICAgIE9iamVjdC5zZXQoJHJvb3RTY29wZS52aWV3LnBvcnRzLCBwb3J0LmlkLCAnc2VsZWN0ZWRPdXQnLCB5ZXMpXG5cbiAgICAgICAgZGVzZWxlY3RfYWxsOiAtPlxuICAgICAgICAgICAgZm9yIHJ1bGUgaW4gTW9kZWwucnVsZXNcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2VsZWN0ZWQnLCBubylcblxuICAgICAgICAgICAgZm9yIHBvcnQgaW4gTW9kZWwucG9ydHNcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkSW4nLCBubylcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0Jywgbm8pXG5cbiAgICAgICAgc29ydF9ieV9wcmlvcml0eTogLT5cbiAgICAgICAgICAgIE1vZGVsLnJ1bGVzLnNvcnQoKGEsIGIpIC0+IGIucHJpb3JpdHkgLSBhLnByaW9yaXR5KVxuXG4gICAgICAgIGNoYW5nZV9wcmlvcml0eTogKHJ1bGUsIGNoYW5nZSkgLT5cbiAgICAgICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKVxuXG4gICAgICAgICAgICAjINC00LvRjyDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC40L3QtNC10LrRgdCwINGN0YLQvtCz0L4g0L/RgNCw0LLQuNC70LAg0LIg0L3QsNCx0L7RgNC1INC/0YDQsNCy0LjQu1xuICAgICAgICAgICAgTW9kZWwucnVsZXMuZm9yRWFjaCAoaSwgaW5kZXgpIC0+XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmIGkgIT0gcnVsZVxuXG4gICAgICAgICAgICAgICAgIyDQvdC+0LLRi9C5INC40L3QtNC10LrRgSDRjdGC0L7Qs9C+INC/0YDQsNCy0LjQu9CwXG4gICAgICAgICAgICAgICAgaW5kZXggLT0gY2hhbmdlXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaWYgaW5kZXggPCAwIHx8IGluZGV4ID49IE1vZGVsLnJ1bGVzLmxlbmd0aFxuXG4gICAgICAgICAgICAgICAgIyDRgtC+INC/0YDQsNCy0LjQu9C+LCDRgSDQutC+0YLQvtGA0YvQvCDRjdGC0L4g0L/RgNCw0LLQuNC70L4g0LzQtdC90Y/QtdGC0YHRjyDQvNC10YHRgtCw0LzQuFxuICAgICAgICAgICAgICAgIHJlcGxhY2VkID0gTW9kZWwucnVsZXNbaW5kZXhdXG5cbiAgICAgICAgICAgICAgICAjIHN3YXAgcHJpb3JpdGllcyB3aXRoIHJlcGxhY2VkIHJ1bGVcbiAgICAgICAgICAgICAgICBwcmlvcml0eSA9IHJ1bGUucHJpb3JpdHlcbiAgICAgICAgICAgICAgICBydWxlLnByaW9yaXR5ID0gcmVwbGFjZWQucHJpb3JpdHlcbiAgICAgICAgICAgICAgICByZXBsYWNlZC5wcmlvcml0eSA9IHByaW9yaXR5XG5cbiAgICAgICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKVxuXG4gICAgICAgICAgICAjICRzY29wZS5SVUxFLmNoYW5nZWQocnVsZSlcblxuICAgICAgICBkZXNjcmliZV9hY3Rpb246IChydWxlKSAtPlxuICAgICAgICAgICAgZGVzY3JpYmVfZmlsdGVyID0gKGZpbHRlcikgLT5cbiAgICAgICAgICAgICAgICBnZXRfZmlsdGVyX3ZhbHVlX2xhYmVsID0gLT5cbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGZpbHRlci52YWx1ZT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPydcblxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgRW51bXMuQUNMX0ZpbHRlcltmaWx0ZXIudHlwZV0udmFsdWUuZnJvbVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIG9mIEVudW1zLkFDTF9GaWx0ZXJbZmlsdGVyLnR5cGVdLnZhbHVlLmZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkgaWYgdmFsdWUgPT0gZmlsdGVyLnZhbHVlXG5cbiAgICAgICAgICAgICAgICBnZXRfZmlsdGVyX3RvX3ZhbHVlX2xhYmVsID0gLT5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlmIG5vdCBmaWx0ZXIudG9fdmFsdWU/XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgRW51bXMuQUNMX0ZpbHRlcltmaWx0ZXIudHlwZV0udmFsdWUuZnJvbVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZmlsdGVyIHR5cGUgI3tmaWx0ZXIudHlwZX0gZm9yIHRvIHZhbHVlIHNlbGVjdGlvblwiKVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXIudG9fdmFsdWVcblxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZSAgICAgOiBmaWx0ZXIudHlwZVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgICA6IGdldF9maWx0ZXJfdmFsdWVfbGFiZWwoKVxuICAgICAgICAgICAgICAgICAgICB0b192YWx1ZSA6IGdldF9maWx0ZXJfdG9fdmFsdWVfbGFiZWwoKVxuICAgICAgICAgICAgICAgICAgICBtYXNrICAgICA6IHN3aXRjaCBmaWx0ZXIudHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAnTGV2ZWw0X2RhdGEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgI1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5tYXNrXG5cbiAgICAgICAgICAgIGRlc2NyaWJlX2ZpbHRlcnMgPSAocnVsZSkgLT5cbiAgICAgICAgICAgICAgICAoZGVzY3JpYmVfZmlsdGVyKGZpbHRlcikgZm9yIGZpbHRlciBpbiBydWxlLmZpbHRlcnMpXG5cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0ge31cblxuICAgICAgICAgICAgZGVzY3JpcHRpb24uYWN0aW9uX2luZm8gPSBzd2l0Y2ggcnVsZS5hY3Rpb25cbiAgICAgICAgICAgICAgICB3aGVuICdiYWxhbmNlJywgJ2R1YmJpbmcnXG4gICAgICAgICAgICAgICAgICAgIGlmIHJ1bGUub3V0cHV0cy5pc19lbXB0eSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIHJ1bGUub3V0cHV0cy5sZW5ndGggPT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcucnVsZS5hY3Rpb24uYWdncmVnYXRpb24nKVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2Vfcm91dGluZy5MQkcuSGFzaF9wcm9maWxlLmJ5X2lkKHJ1bGUuaGFzaGluZ19wcm9maWxlKS50aXRsZVxuXG4gICAgICAgICAgICBkZXNjcmlwdGlvbi5maWx0ZXJzID0gc3dpdGNoIHJ1bGUuYWN0aW9uXG4gICAgICAgICAgICAgICAgd2hlbiAnYmFsYW5jZScsICdyZWRpcmVjdCcsICdtaXJyb3InLCAnZHJvcCcsICdkdWJiaW5nJ1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZV9maWx0ZXJzKHJ1bGUpXG5cbiAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdhY3Rpb24uZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbilcblxuICAgICAgICBmaWx0ZXJfdHlwZV9jaGFuZ2VkOiAoZmlsdGVyKSAtPlxuICAgICAgICAgICAgZmlsdGVyLnZhbHVlID0gbnVsbFxuICAgICAgICAgICAgZmlsdGVyLm1hc2sgPSAkc2NvcGUuRklMVEVSLmlkZW50aXR5X21hc2soZmlsdGVyLnR5cGUpXG5cbiAgICAgICAgaGFzX2ZpbHRlcjogKHJ1bGUsIHR5cGUpIC0+XG4gICAgICAgICAgICBmb3IgZmlsdGVyIGluIHJ1bGUuZmlsdGVyc1xuICAgICAgICAgICAgICAgIGlmIGZpbHRlci50eXBlID09IHR5cGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHllc1xuXG4gICAgICAgIGFkZF9maWx0ZXI6IChydWxlLCB0eXBlKSAtPlxuICAgICAgICAgICAgZmlsdGVyID1cbiAgICAgICAgICAgICAgICB0eXBlIDogdHlwZVxuXG4gICAgICAgICAgICBzd2l0Y2ggdHlwZVxuICAgICAgICAgICAgICAgIHdoZW4gJ0lQX3Byb3RvY29sX3NvdXJjZScsICdJUF9wcm90b2NvbF9kZXN0aW5hdGlvbidcbiAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQvdC10YIg0YTQuNC70YzRgtGA0LAg0L3QsCBJUF9wcm90b2NvbFxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgJHNjb3BlLlJVTEUuaGFzX2ZpbHRlcihydWxlLCAnSVBfcHJvdG9jb2wnKVxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQtNC+0LHQsNCy0LjRgtGMINGE0LjQu9GM0YLRgCDQvdCwIElQX3Byb3RvY29sXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5hZGRfZmlsdGVyKHJ1bGUsICdJUF9wcm90b2NvbCcpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICMg0Lgg0L/QtdGA0LXQstGL0LfQstCw0YLRjCDQstGB0Y4g0Y3RgtGDINGE0YPQvdC60YbQuNGOINGBINGC0LXQvNC4INC20LUg0YHQsNC80YvQvNC4INCw0YDQs9GD0LzQtdC90YLQsNC80LgsXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC90L4g0YfRg9GC0Ywg0L/QvtC30LbQtSwg0YfRgtC+0LHRiyDRjdGC0L7RgiDRhNC40LvRjNGC0YAg0L/QvtGP0LLQuNC70YHRjyDQv9C+0YHQu9C1INGE0LjQu9GM0YLRgNCwIElQX3Byb3RvY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQuCDRhNC+0LrRg9GBINCy0YHRgtCw0Lsg0LHRiyDQvdCwINC90LXQs9C+LCDQsCDQvdC1INC90LAg0YTQuNC70YzRgtGAIElQX3Byb3RvY29sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5hZGRfZmlsdGVyKHJ1bGUsIHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICApLmRlbGF5KDApXG4gICAgICAgICAgICAgICAgICAgICMg0LXRgdC70Lgg0LXRgdGC0Ywg0YTQuNC70YzRgtGAINC90LAgSVBfcHJvdG9jb2xcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDRgtCw0Lwg0L3QtSBcIlRDUFwiL1wiVURQXCIsINC/0YDQvtGB0YLQsNCy0LjRgtGMINC30L3QsNGH0LXQvdC40LUg0YTQuNC70YzRgtGA0LAgSVBfcHJvdG9jb2wg0LIgXCJUQ1BcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaXBfcHJvdG9jb2xfZmlsdGVyID0gJHNjb3BlLlJVTEUuZ2V0X2ZpbHRlcihydWxlLCAnSVBfcHJvdG9jb2wnKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfdGNwX3VkcCA9ICRzY29wZS5wb3J0X2lwX3Byb3RvY29scy5maWx0ZXIoKHgpIC0+IHgua2V5ID09IGlwX3Byb3RvY29sX2ZpbHRlci52YWx1ZSkubm90X2VtcHR5KClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc190Y3BfdWRwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBfcHJvdG9jb2xfZmlsdGVyLnZhbHVlID0gJHNjb3BlLnBvcnRfaXBfcHJvdG9jb2xzWzBdLmtleVxuXG4gICAgICAgICAgICAgICAgd2hlbiAnZXRoZXJuZXRfcHJvdG9jb2wnXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZSA9IEVudW1zLkFDTF9GaWx0ZXIuZXRoZXJuZXRfcHJvdG9jb2wudmFsdWUuZGVmYXVsdFxuICAgICAgICAgICAgICAgIHdoZW4gJ0lQX3Byb3RvY29sJ1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIudmFsdWUgPSBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLnZhbHVlLmRlZmF1bHRcbiAgICAgICAgICAgICAgICB3aGVuICdMZXZlbDRfZGF0YSdcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLiQkc2hvd19tYXNrID0geWVzXG4gICAgICAgICAgICAgICAgd2hlbiAnbXVsdGlfSVBfYWRkcmVzcydcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJVTEUucmVtb3ZlX2ZpbHRlcihydWxlLCAnc291cmNlX0lQX2FkZHJlc3MnKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5yZW1vdmVfZmlsdGVyKHJ1bGUsICdkZXN0aW5hdGlvbl9JUF9hZGRyZXNzJylcblxuICAgICAgICAgICAgZmlsdGVyLm1hc2sgPSBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuZGVmYXVsdF9tYXNrKHR5cGUpXG5cbiAgICAgICAgICAgIHJ1bGUuZmlsdGVycy5wdXNoKGZpbHRlcilcblxuICAgICAgICAgICAgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLnNvcnQocnVsZS5maWx0ZXJzKVxuXG4gICAgICAgICAgICBydWxlLmZpbHRlcnMuZm9yRWFjaCAoYV9maWx0ZXIsIGluZGV4KSAtPlxuICAgICAgICAgICAgICAgIGlmIGFfZmlsdGVyID09IGZpbHRlclxuICAgICAgICAgICAgICAgICAgICAjINC/0L7QtNC+0LbQtNCw0YLRjCwg0L/QvtC60LAg0L3QsCDRgdGC0YDQsNC90LjRhtGDINCx0YPQtNC10YIg0LTQvtCx0LDQstC70LXQvSBET00g0Y3Qu9C10LzQtdC90YIg0Y3RgtC+0LPQviDRhNC40LvRjNGC0YDQsCxcbiAgICAgICAgICAgICAgICAgICAgIyDRgSDQv9C+0LvQtdC8IGRhdGEtaW5kZXgsINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQvCDRjdGC0L7QvNGDIGluZGV4J9GDLFxuICAgICAgICAgICAgICAgICAgICAjINC4INC/0L7RgtC+0Lwg0L/RgNC+0LrRgNGD0YLQuNGC0Ywg0L3QsCDRjdGC0L7RgiDRjdC70LXQvNC10L3RglxuICAgICAgICAgICAgICAgICAgICAoLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNjcm9sbF90byA9IGpRdWVyeSgnLnJ1bGVfZmlsdGVyX2xpc3RfaXRlbVtkYXRhLWluZGV4PScgKyBpbmRleCArICddJylbMF1cbiAgICAgICAgICAgICAgICAgICAgKS5kZWxheSgwKVxuXG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5jaGFuZ2VkKHJ1bGUpXG5cbiAgICAgICAgZ2V0X2ZpbHRlcjogKHJ1bGUsIGZpbHRlcl90eXBlKS0+XG4gICAgICAgICAgICBydWxlLmZpbHRlcnMuZmlsdGVyKChmaWx0ZXIpLT4gZmlsdGVyLnR5cGUgPT0gZmlsdGVyX3R5cGUpWzBdXG5cbiAgICAgICAgcmVtb3ZlX2ZpbHRlcjogKHJ1bGUsIGZpbHRlcikgLT5cbiAgICAgICAgICAgIGlmIGFuZ3VsYXIuaXNTdHJpbmcoZmlsdGVyKVxuICAgICAgICAgICAgICAgIGZpbHRlciA9ICRzY29wZS5SVUxFLmdldF9maWx0ZXIocnVsZSwgZmlsdGVyKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmICFmaWx0ZXJcblxuICAgICAgICAgICAgIyDQtdGB0LvQuCDRg9C00LDQu9GP0LXRgtGB0Y8g0YTQuNC70YzRgtGAINCy0YXQvtC00Y/RidC10LPQviDQuNC70Lgg0LjRgdGF0L7QtNGP0YnQtdCz0L4g0L/QvtGA0YLQsCxcbiAgICAgICAgICAgICMg0YPQtNCw0LvRj9GC0Ywg0YLQsNC60LbQtSDRhNC40LvRjNGC0YAgSVAg0L/RgNC+0YLQvtC60L7Qu9CwXG4gICAgICAgICAgICBzd2l0Y2ggZmlsdGVyLnR5cGVcbiAgICAgICAgICAgICAgICB3aGVuICdJUF9wcm90b2NvbF9zb3VyY2UnLCAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nXG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuZmlsdGVycy5yZW1vdmUoJHNjb3BlLlJVTEUuZ2V0X2ZpbHRlcihydWxlLCAnSVBfcHJvdG9jb2wnKSlcblxuICAgICAgICAgICAgcnVsZS5maWx0ZXJzLnJlbW92ZShmaWx0ZXIpXG5cbiAgICAgICAgICAgICRzY29wZS5SVUxFLmNoYW5nZWQocnVsZSlcblxuICAgICAgICBhY3Rpb25fY2hhbmdlZDogKHJ1bGUpIC0+XG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5hZGRfb3JfcmVtb3ZlX2hhc2hpbmdfcHJvZmlsZShydWxlKVxuICAgICAgICAgICAgJHNjb3BlLlJVTEUuaGFzaGluZ19wcm9maWxlX2NoYW5nZWQocnVsZSlcblxuICAgICAgICAgICAgc3dpdGNoIHJ1bGUuYWN0aW9uXG4gICAgICAgICAgICAgICAgIyB3aGVuICdiYWxhbmNlJ1xuICAgICAgICAgICAgICAgICMgICAgIHJ1bGUuZmlsdGVycyA9IFtdXG5cbiAgICAgICAgICAgICAgICB3aGVuICdyZWRpcmVjdCdcbiAgICAgICAgICAgICAgICAgICAgaWYgcnVsZS5vdXRwdXRzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1cy5pbmZvKHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnJ1bGUuZXJyb3IucmVkaXJlY3RpbmdfdG9fc2V2ZXJhbF9wb3J0c19pc19iYWxhbmNpbmcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuYWN0aW9uID0gJ2JhbGFuY2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC+0LHQvdC+0LLQuNGC0YwgcnVsZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLmFjdGlvbl9jaGFuZ2VkKHJ1bGUpXG5cbiAgICAgICAgICAgICAgICB3aGVuICdkcm9wJ1xuICAgICAgICAgICAgICAgICAgICBydWxlLm91dHB1dHMgPSBbXVxuXG4gICAgICAgICAgICAgICAgICAgICMg0L/QtdGA0LXQv9C+0LTRgdCy0LXRgtC40YLRjCDQv9C+0YDRgtGLINC90LAg0YPRgdGC0YDQvtC50YHRgtCy0LVcbiAgICAgICAgICAgICAgICAgICAgaWYgT2JqZWN0LmdldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ3NlbGVjdGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLmRlc2VsZWN0X2FsbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5zZWxlY3QocnVsZSlcblxuICAgICAgICBpbXBsaWVzX2RlZXBfaW5zcGVjdGlvbjogKHJ1bGUpIC0+XG4gICAgICAgICAgICBmb3IgZmlsdGVyIGluIHJ1bGUuZmlsdGVyc1xuICAgICAgICAgICAgICAgIGlmIGZpbHRlci50eXBlID09ICdMZXZlbDRfZGF0YSdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHllc1xuXG4gICAgIyBGaWx0ZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgJHNjb3BlLkZJTFRFUiA9XG5cbiAgICAgICAgaWRlbnRpdHlfbWFzazogKGZpbHRlcl90eXBlKSAtPiBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaWRlbnRpdHlfbWFzayhFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlcl90eXBlXSlcblxuICAgICAgICBpc19kZWZhdWx0X21hc2s6IChmaWx0ZXIpIC0+IERldmljZV9yb3V0aW5nLkZpbHRlci5pc19kZWZhdWx0X21hc2soZmlsdGVyKVxuXG4gICAgICAgICMg0LXRgdC70LggZnJvbSDQuCB0byDQv9C+0LzQtdC90Y/QvdGLINC80LXRgdGC0LDQvNC4IC0g0L/QtdGA0LXRgdGC0LDQstC40YLRjCDQuNGFLlxuICAgICAgICAjINC10YHQu9C4IGZyb20gPT0gdG8sINGC0L4g0YPQsdGA0LDRgtGMIHRvLlxuICAgICAgICBjb3JyZWN0X2Zyb21fdG9fdmFsdWVzOiAoZmlsdGVyKSAtPlxuICAgICAgICAgICAgIyDQtdGB0LvQuCDQtdGB0YLRjCB0b192YWx1ZSAtINGD0LTQsNC70LjRgtGMINC80LDRgdC60YNcbiAgICAgICAgICAgICMgaWYgZmlsdGVyLnRvX3ZhbHVlPyAmJiBmaWx0ZXIudG9fdmFsdWUgIT0gJydcbiAgICAgICAgICAgICMgICAgIGRlbGV0ZSBmaWx0ZXIubWFza1xuXG4gICAgICAgICAgICByZXR1cm4gaWYgbm90IGZpbHRlci50b192YWx1ZT8gb3Igbm90IGZpbHRlci52YWx1ZT9cblxuICAgICAgICAgICAgaWYgZmlsdGVyLnRvX3ZhbHVlID09ICcnXG4gICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlci50b192YWx1ZVxuXG4gICAgICAgICAgICBpZiBmaWx0ZXIudG9fdmFsdWUgPCBmaWx0ZXIudmFsdWVcbiAgICAgICAgICAgICAgICB0ZW1wb3JhcnkgPSBmaWx0ZXIudG9fdmFsdWVcbiAgICAgICAgICAgICAgICBmaWx0ZXIudG9fdmFsdWUgPSBmaWx0ZXIudmFsdWVcbiAgICAgICAgICAgICAgICBmaWx0ZXIudmFsdWUgPSB0ZW1wb3JhcnlcbiAgICAgICAgICAgIGVsc2UgaWYgZmlsdGVyLnRvX3ZhbHVlID09IGZpbHRlci52YWx1ZVxuICAgICAgICAgICAgICAgICMgaWYgdHlwZW9mIGZpbHRlci50b192YWx1ZSA9PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICMgICAgIGZpbHRlci50b192YWx1ZSA9ICcnXG4gICAgICAgICAgICAgICAgIyBlbHNlXG4gICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlci50b192YWx1ZVxuXG4gICAgICAgICAgICBpZiBub3QgZmlsdGVyLnRvX3ZhbHVlP1xuICAgICAgICAgICAgICAgIGZpbHRlci4kJGludGVydmFsID0gbm9cblxuICAgICAgICBpc191c2VkX2luX3J1bGU6IChydWxlLCBmaWx0ZXIpIC0+XG4gICAgICAgICAgICgoZmlsdGVyX3R5cGUpIC0+IChmaWx0ZXIgZm9yIGZpbHRlciBpbiBydWxlLmZpbHRlcnMgd2hlbiBmaWx0ZXIudHlwZSA9PSBmaWx0ZXJfdHlwZS5rZXkpLm5vdF9lbXB0eSgpKVxuXG4gICAgJHNjb3BlLnZhbGlkYXRlID0gLT5cbiAgICAgICAgIyAkc2NvcGUucnVsZV93aXRoX2Vycm9yID0gbnVsbFxuXG4gICAgICAgIGVycm9ycyA9IG5vXG5cbiAgICAgICAgIyDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0YHQvtGB0YLQsNCy0LvQtdC90L3QvtCz0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lwg0L/RgNCw0LLQuNC70LBcbiAgICAgICAgZm9yIHJ1bGUgaW4gTW9kZWwucnVsZXNcbiAgICAgICAgICAgICMg0YHQsdGA0L7RgdC40YLRjCDQvtGI0LjQsdC60Lgg0LTQu9GPINCy0YvQutC70Y7Rh9C10L3QvdGL0YUg0L/RgNCw0LLQuNC7XG4gICAgICAgICAgICBpZiBub3QgcnVsZS5lbmFibGVkXG4gICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yJywgbm8pXG4gICAgICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgIyDQtNC70Y8g0LLQutC70Y7Rh9C10L3QvdGL0YUg0L/RgNCw0LLQuNC7IC0g0YHQsdGA0L7RgdC40YLRjCDRgdGC0LDRgNGL0LUg0L7RiNC40LHQutC4INC4INC30LDQvdC+0LLQviDQv9GA0L7QstC10YDQuNGC0Ywg0L3QsCDQvtGI0LjQsdC60LhcbiAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvcicsIG5vKVxuICAgICAgICAgICAgZXJyb3IgPSAkc2NvcGUuUlVMRS52YWxpZGF0ZShydWxlKVxuXG4gICAgICAgICAgICBpZiBlcnJvcj9cbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnZXJyb3IuJyArIGVycm9yLCB5ZXMpXG5cbiAgICAgICAgICAgICAgICBpZiBub3QgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzY3JvbGxfdG8nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0geWVzXG5cbiAgICAgICAgcmV0dXJuIGVycm9yc1xuXG4gICAgIyDRjdGC0LAg0LLQsNC70LjQtNCw0YbQuNGPINCy0YvQv9C+0LvQvdGP0LXRgtGB0Y8g0LrQsNC20LTRi9C5INGA0LDQtyDQv9GA0Lgg0LLQvtC30LzQvtC20L3QvtC8INC40LfQvNC10L3QtdC90LjQuCDQv9GA0LDQstC40LsuXG4gICAgIyDQt9C00LXRgdGMINC80L7QttC90L4g0L/QvtC60LDQt9GL0LLQsNGC0Ywg0LrQsNC60LjQtS3QvdC40LHRg9C00Ywg0L/RgNC10LTRg9C/0YDQtdC20LTQtdC90LjRjyAo0YLQvtCz0LTQsCDRgNCw0YHQutC+0LzQvNC10L3RgtC40YDRg9C50YLQtSlcbiAgICAkc2NvcGUuaW50ZXJhY3RpdmVfdmFsaWRhdGlvbiA9IC0+XG5cbiAgICAkc2NvcGUuc2hvd19ydWxlX2ZpbHRlciA9IChydWxlLCBmaWx0ZXIpIC0+XG4gICAgICAgICMg0L/QvtC60LDQt9GL0LLQsNGC0YwgKNC4INC00LDQstCw0YLRjCDQstGL0LHQuNGA0LDRgtGMKSDRhNC40LvRjNGC0YAgSVBfcHJvdG9jb2wg0YLQvtC70YzQutC+INGC0L7Qs9C00LAsXG4gICAgICAgICMg0LrQvtCz0LTQsCDQvdC1INCy0YvQsdGA0LDQvSDRhNC40LvRjNGC0YAg0L3QsCBUQ1AvVURQINC/0L7RgNGCXG4gICAgICAgIHN3aXRjaCBmaWx0ZXIudHlwZSB8fCBmaWx0ZXIua2V5XG4gICAgICAgICAgICB3aGVuICdJUF9wcm90b2NvbCdcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5maWx0ZXJzLmZpbHRlcigoeCkgLT4geC50eXBlID09ICdJUF9wcm90b2NvbF9zb3VyY2UnIHx8IHgudHlwZSA9PSAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nKS5pc19lbXB0eSgpXG4gICAgICAgICAgICB3aGVuICdzb3VyY2VfSVBfYWRkcmVzcycsICdkZXN0aW5hdGlvbl9JUF9hZGRyZXNzJ1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlLmZpbHRlcnMuZmlsdGVyKCh4KSAtPiB4LnR5cGUgPT0gJ211bHRpX0lQX2FkZHJlc3MnKS5pc19lbXB0eSgpXG5cbiAgICAgICAgcmV0dXJuIHllc1xuXG4gICAgJHNjb3BlLnN1Ym1pdCA9IC0+XG4gICAgICAgIGlmIG5vdCAkc2NvcGUuZXhpdF9wb3J0c19lZGl0aW5nX21vZGUoKVxuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcih0cmFuc2xhdGUoJ3BhZ2Uucm91dGluZy5zdGF0dXMuZXJyb3JzX2luX3J1bGVzJykpXG5cbiAgICAgICAgJHNjb3BlLmZvcm0uc3VibWl0dGVkID0geWVzXG4gICAgICAgIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnN0YXR1cy5hcHBseWluZ19ydWxlcycpKVxuXG4gICAgICAgICMg0YPQsdGA0LDRgtGMINGE0LjQu9GM0YLRgNGLLCDRgyDQutC+0YLQvtGA0YvRhSDQvdC1INCy0YvQsdGA0LDQvSDRgtC40L8g0YTQuNC70YzRgtGA0LBcbiAgICAgICAgZm9yIHJ1bGUgaW4gTW9kZWwucnVsZXNcbiAgICAgICAgICAgIHJ1bGUuZmlsdGVycyA9IHJ1bGUuZmlsdGVycy5maWx0ZXIoKGZpbHRlcikgLT4gZmlsdGVyLnR5cGUpXG5cbiAgICAgICAgZXJyb3JzID0gJHNjb3BlLnZhbGlkYXRlKClcbiAgICAgICAgaWYgZXJyb3JzXG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnN0YXR1cy5lcnJvcnNfaW5fcnVsZXMnKSlcblxuICAgICAgICAkc2NvcGUuYnVzeSA9IHllc1xuXG4gICAgICAgICMg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQvtGC0LzQtdC90Ysg0Y3RgtC+0Lkg0YbQtdC/0L7Rh9C60LhQcm9taXNlJ9C+0LIg0L/RgNC4INGD0YXQvtC00LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGB0L4g0YHRgtGA0LDQvdC40YbRi1xuICAgICAgICBQcm9taXNlcy5wcm9taXNlIC0+XG4gICAgICAgICAgICBDb25maWd1cmF0aW9uLlJvdXRpbmcuc2F2ZSgpLnRoZW4gLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbHlfcnVsZXMoKVxuXG4gICAgICAgICAgICAudGhlbiAtPlxuICAgICAgICAgICAgICAgICRzY29wZS5hbnlfY2hhbmdlcyA9IG5vXG4gICAgICAgICAgICAgICAgU3RhdHVzLmlkbGUodHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcuc3RhdHVzLnJ1bGVzX3NhdmVkJykpXG5cbiAgICAgICAgICAgIC5jYXRjaChQcm9taXNlcy5ub3RfbmF2aWdhdGluZ19hd2F5LCAoZXJyb3IpIC0+XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmIGFwaS5pc19hcGlfZXJyb3IoZXJyb3IpXG5cbiAgICAgICAgICAgICAgICBpZiBSb3V0aW5nX21vZGVsX2Vycm9ycy5pcyhlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcihSb3V0aW5nX21vZGVsX2Vycm9ycy5tZXNzYWdlKGVycm9yKSlcblxuICAgICAgICAgICAgICAgIFN0YXR1cy5lcnJvcihlcnJvcilcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLmZpbmFsbHkgLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYnVzeSA9IG5vXG5cbiAgICAgICAgICAgIC4kYXBwbHkoJHNjb3BlKVxuXG4gICAgIyDQv9GA0L7Qs9GA0YPQt9C40YLRjCDQv9GA0LDQstC40LvQsCDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvlxuICAgICRzY29wZS5hcHBseV9ydWxlcyA9IC0+XG4gICAgICAgICRzY29wZS5hcHBseWluZ19ydWxlcyA9IHllc1xuXG4gICAgICAgIF9maW5hbGx5ID0gLT5cbiAgICAgICAgICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbHlpbmdfcnVsZXMgPSBub1xuXG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5ydWxlc19jaGFuZ2VkKClcblxuICAgICAgICBEZXZpY2UucmVmcmVzaF9wb3J0cygpLnRoZW4gLT5cbiAgICAgICAgICAgIERldmljZS5zZXRfdXBfcm91dGluZyhNb2RlbC5ydWxlcywgTW9kZWwucG9ydHMsIE1vZGVsLmpvaW50X3BvcnRzKVxuXG4gICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICBfZmluYWxseSgpXG5cbiAgICAgICAgLmNhdGNoKFByb21pc2VzLm5vdF9uYXZpZ2F0aW5nX2F3YXksIChlcnJvcikgLT5cbiAgICAgICAgICAgIF9maW5hbGx5KClcbiAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgIClcblxuICAgICMgJHNjb3BlLnRlc3QgPSAtPlxuICAgICMgICAgIEpTT04uc3RyaW5naWZ5KCRzY29wZS5mb3JtLCBudWxsLCAyKVxuXG4gICAgJHNjb3BlLmV4aXRfcG9ydHNfZWRpdGluZ19tb2RlID0gLT5cbiAgICAgICAgaWYgJHNjb3BlLmVkaXRfcG9ydHNcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUudG9nZ2xlX2VkaXRfcG9ydHMoKVxuICAgICAgICByZXR1cm4geWVzXG5cbiAgICAkc2NvcGUudG9nZ2xlX2VkaXRfcG9ydHMgPSAtPlxuICAgICAgICAjINC10YHQu9C4INCy0LrQu9GO0YfQsNC10YLRgdGPINC/0YDQsNCy0LrQsCDRgdC/0LjRgdC60LAg0L/QvtGA0YLQvtCyXG4gICAgICAgIGlmIHJ1bGUgPSAkc2NvcGUuUlVMRS5zZWxlY3RlZCgpXG4gICAgICAgICAgICBpZiBub3QgJHNjb3BlLmVkaXRfcG9ydHNcbiAgICAgICAgICAgICAgICAjINGC0L4g0LfQsNC/0L7Qu9C90LjRgtGMIHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5SVUxFLnJlZnJlc2hfaW5wdXRfdGV4dChydWxlKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5yZWZyZXNoX291dHB1dF90ZXh0KHJ1bGUpXG4gICAgICAgICAgICAgICAgI2ZvciBydWxlIGluIE1vZGVsLnJ1bGVzXG4gICAgICAgICAgICAgICAgIyAgICAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pbnB1dHNfdGV4dCA9IChQb3J0X251bWVyYXRpb24ubmFtZV9ieV9pZChpbnB1dC5pZCkgZm9yIGlucHV0IGluIHJ1bGUuaW5wdXRzKS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICAjICAgICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLm91dHB1dHNfdGV4dCA9IChQb3J0X251bWVyYXRpb24ubmFtZV9ieV9pZChvdXRwdXQuaWQpIGZvciBvdXRwdXQgaW4gcnVsZS5vdXRwdXRzKS5qb2luKCcgJylcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAjINC40L3QsNGH0LUg0YHRh9C40YLQsNGC0Ywg0L/QvtC/0YDQsNCy0LvQtdC90L3QvtC1INGB0L7QtNC10YDQttC40LzQvtC1IHRleHRhcmVhXG5cbiAgICAgICAgICAgICAgICBlcnJvciA9IC0+XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvci4nICsgZXJyb3IsIHllcylcblxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2Nyb2xsX3RvJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG5cbiAgICAgICAgICAgICAgICBpZiAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pbnB1dHNfdGV4dC50cmltKCkubm90X2VtcHR5KClcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzID0gJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0uaW5wdXRzX3RleHQuc3BsaXQoL1tcXHMsXFxuXSsvKVxuICAgICAgICAgICAgICAgICAgICB0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cyA9IChQb3J0X251bWVyYXRpb24uYnlfbmFtZShpbnB1dCkgZm9yIGlucHV0IGluIGlucHV0cylcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgbm8pXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgaW5wdXQgaW4gaW5wdXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIGlucHV0LmlkLCAnc2VsZWN0ZWRJbicsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLmlucHV0cyA9IGlucHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnlfaWQocnVsZS5pbnB1dHMpXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yLmludmFsaWRfaW5wdXRzX3RleHQnLCB5ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2Nyb2xsX3RvJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkSW4nLCBubylcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5pbnB1dHMgPSBbXVxuXG4gICAgICAgICAgICAgICAgaWYgJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0ub3V0cHV0c190ZXh0LnRyaW0oKS5ub3RfZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRzID0gJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0ub3V0cHV0c190ZXh0LnNwbGl0KC9bXFxzLFxcbl0rLylcbiAgICAgICAgICAgICAgICAgICAgdHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRzID0gKFBvcnRfbnVtZXJhdGlvbi5ieV9uYW1lKG91dHB1dCkgZm9yIG91dHB1dCBpbiBvdXRwdXRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHBvcnQgaW4gTW9kZWwucG9ydHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0Jywgbm8pXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3Igb3V0cHV0IGluIG91dHB1dHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgb3V0cHV0LmlkLCAnc2VsZWN0ZWRPdXQnLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5vdXRwdXRzID0gb3V0cHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnlfaWQocnVsZS5pbnB1dHMpXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yLmludmFsaWRfb3V0cHV0c190ZXh0JywgeWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ3Njcm9sbF90bycsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBmb3IgcG9ydCBpbiBNb2RlbC5wb3J0c1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZE91dCcsIG5vKVxuICAgICAgICAgICAgICAgICAgICBydWxlLm91dHB1dHMgPSBbXVxuXG4gICAgICAgICRzY29wZS5lZGl0X3BvcnRzID0gISRzY29wZS5lZGl0X3BvcnRzXG4gICAgICAgIHJldHVybiB5ZXNcblxuICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9wb3J0X3N0YXR1c2VzID0gLT5cbiAgICAgICAgZm9yIHJ1bGUgaW4gTW9kZWwucnVsZXNcbiAgICAgICAgICAgICMg0J/QvtC00YHQstC10YLQutCwINCy0YXQvtC00L7QsiDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQtVxuICAgICAgICAgICAgZm9yIHBvcnQgaW4gcnVsZS5pbnB1dHNcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ2luJywgeWVzKVxuXG4gICAgICAgICAgICAjINCf0L7QtNGB0LLQtdGC0LrQsCDQstGL0YXQvtC00L7QsiDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQtVxuICAgICAgICAgICAgZm9yIHBvcnQgaW4gcnVsZS5vdXRwdXRzXG4gICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdvdXQnLCB5ZXMpXG5cbiAgICAkc2NvcGUubWF4X2RpZ2l0c19mb3JfYml0X2NvdW50ID0gKGJpdF9jb3VudCkgLT5cbiAgICAgICAgbWF4X251bWJlciA9IE1hdGgucG93KDIsIGJpdF9jb3VudCArIDEpIC0gMVxuICAgICAgICByZXR1cm4gU3RyaW5nKG1heF9udW1iZXIpLmxlbmd0aFxuXG4gICAgIyDQtdGB0LvQuCDRjdGC0L4g0YHRgtGA0LDQvdC40YbQsCBcItCf0YDQsNCy0LjQu9CwXCIsINGC0L4g0L/RgNC+0LLQtdGA0LjRgtGMLFxuICAgICMg0L3Rg9C20L3QviDQu9C4INGD0LHRgNCw0YLRjCBoYXNoaW5nX3Byb2ZpbGUg0YMg0Y3RgtC+0LPQviDQv9GA0LDQstC40LvQsFxuICAgICMgKNGCLtC6LiBhY3Rpb24g0LzQvtC20LXRgiDQuNC30LzQtdC90LjRgtGM0YHRjyDRgSBiYWxhbmNlINC90LAgcmVkaXJlY3QpXG4gICAgJHNjb3BlLiRvbiAncG9ydF9yZW1vdmVkJywgKGV2ZW50LCBvcHRpb25zKSAtPlxuICAgICAgICAkc2NvcGUuUlVMRS5hZGRfb3JfcmVtb3ZlX2hhc2hpbmdfcHJvZmlsZShvcHRpb25zLnJ1bGUpXG5cbiAgICAjIEluaXRpYWxpemVcbiAgICAkc2NvcGUuaW5pdGlhbGl6ZV9wYWdlX3dpdGggLT5cbiAgICAgICAgJHNjb3BlLkdyYXBoID0gR3JhcGhcbiAgICAgICAgR3JhcGguc2hvdyA9IGZhbHNlXG4gICAgICAgIEdyYXBoLmVuYWJsZSA9IHRydWVcblxuICAgICAgICAkc2NvcGUudmFsaWRhdGlvbl9lcnJvcnMgPSB7fVxuXG4gICAgICAgICRzY29wZS5hbnlfY2hhbmdlcyA9IG5vXG5cbiAgICAgICAgJHNjb3BlLnZpZXcgPSBhbmd1bGFyLmV4dGVuZCh7IHJ1bGVzOiB7fSB9LCAkc2NvcGUudmlldylcblxuICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIHJ1bGU6XG4gICAgICAgICAgICAgICAgZW5hYmxlZCAgICAgICAgIDogeWVzXG4gICAgICAgICAgICAgICAgaW5wdXRzICAgICAgICAgIDogW11cbiAgICAgICAgICAgICAgICBvdXRwdXRzICAgICAgICAgOiBbXVxuICAgICAgICAgICAgICAgIGZpbHRlcnMgICAgICAgICA6IFtdXG4gICAgICAgICAgICAgICAgYWN0aW9uICAgICAgICAgIDogJ2JhbGFuY2UnXG4gICAgICAgICAgICAgICAgaGFzaGluZ19wcm9maWxlIDogMFxuXG4gICAgICAgICMgZmlsdGVyIHR5cGUgc2VsZWN0XG5cbiAgICAgICAgJHNjb3BlLmZpbHRlcl90eXBlcyA9IFtdXG4gICAgICAgIGZvciBrZXksIHZhbHVlIG9mIEVudW1zLkFDTF9GaWx0ZXJcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJfdHlwZXMucHVzaCh7IGtleToga2V5LCBsYWJlbDogdHJhbnNsYXRlKFwiQUNMLnJ1bGUuZmlsdGVyLnR5cGUuI3trZXl9XCIpIH0pXG5cbiAgICAgICAgIyBldGhlcm5ldCBwcm90b2NvbCBzZWxlY3RcblxuICAgICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzID0gW11cbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgRW51bXMuQUNMX0ZpbHRlci5ldGhlcm5ldF9wcm90b2NvbC52YWx1ZS5mcm9tXG4gICAgICAgICAgICAjICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMucHVzaCh7IGtleToga2V5LCBsYWJlbDoga2V5IH0pXG4gICAgICAgICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnB1c2goeyBrZXk6IHZhbHVlLCBsYWJlbDoga2V5IH0pXG5cbiAgICAgICAgJHNjb3BlLmV0aGVybmV0X3Byb3RvY29scyA9ICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMuZmlsdGVyKCh4KSAtPiBub3QgWydUQ1AnLCAnVURQJ10uaGFzKHgua2V5KSlcblxuICAgICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnNvcnQgKGEsIGIpIC0+XG4gICAgICAgICAgICBpZiBhLmxhYmVsID4gYi5sYWJlbFxuICAgICAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgICBpZiBhLmxhYmVsIDwgYi5sYWJlbFxuICAgICAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgICAgcmV0dXJuIDBcblxuICAgICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnVuc2hpZnQoeyBrZXk6ICcnLCBsYWJlbDogJ+KAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlCcgfSlcbiAgICAgICAgIyAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnVuc2hpZnQoeyBrZXk6ICdJUCcsIGxhYmVsOiAnSVAnIH0pXG4gICAgICAgICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMudW5zaGlmdCh7IGtleTogRW51bXMuQUNMX0ZpbHRlci5ldGhlcm5ldF9wcm90b2NvbC52YWx1ZS5mcm9tLklQLCBsYWJlbDogJ0lQJyB9KVxuXG4gICAgICAgICMgSVAgcHJvdG9jb2wgc2VsZWN0XG5cbiAgICAgICAgJHNjb3BlLmlwX3Byb3RvY29scyA9IFtdXG5cbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgRW51bXMuQUNMX0ZpbHRlci5JUF9wcm90b2NvbC52YWx1ZS5mcm9tXG4gICAgICAgICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnB1c2goXG4gICAgICAgICAgICAgIHsga2V5OiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLnZhbHVlLmZyb21ba2V5XSwgbGFiZWw6IGtleSB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICAjICRzY29wZS5pcF9wcm90b2NvbHMucHVzaCh7IGtleTogdmFsdWUsIGxhYmVsOiBrZXkgfSlcblxuICAgICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzID0gJHNjb3BlLmlwX3Byb3RvY29scy5maWx0ZXIoKHgpIC0+IG5vdCBbJ0lQdjQnXS5oYXMoeC5rZXkpKVxuXG4gICAgICAgICRzY29wZS5pcF9wcm90b2NvbHMuc29ydCAoYSwgYikgLT5cbiAgICAgICAgICAgIGlmIGEubGFiZWwgPiBiLmxhYmVsXG4gICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgIGlmIGEubGFiZWwgPCBiLmxhYmVsXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgICByZXR1cm4gMFxuXG4gICAgICAgICRzY29wZS5pcF9wcm90b2NvbHMudW5zaGlmdCh7IGtleTogJycsIGxhYmVsOiAn4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCUJyB9KVxuICAgICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnVuc2hpZnQoeyBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5VRFAsIGxhYmVsOiAnVURQJyB9KVxuICAgICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnVuc2hpZnQoeyBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5UQ1AsIGxhYmVsOiAnVENQJyB9KVxuXG4gICAgICAgICMgSVAgcHJvdG9jb2wgc2VsZWN0IGZvciBUQ1AgLyBVRFAgcG9ydFxuXG4gICAgICAgICRzY29wZS5wb3J0X2lwX3Byb3RvY29scyA9IFtcbiAgICAgICAgICAgIHsga2V5OiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLnZhbHVlLmZyb20uVENQLCBsYWJlbDogJ1RDUCcgfSxcbiAgICAgICAgICAgIHsga2V5OiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLnZhbHVlLmZyb20uVURQLCBsYWJlbDogJ1VEUCcgfVxuICAgICAgICBdXG5cbiAgICAgICAgIyBydWxlIGFjdGlvbnNcbiAgICAgICAgJHNjb3BlLnJ1bGVfYWN0aW9ucyA9IFsnYmFsYW5jZScsICdyZWRpcmVjdCcsICdtaXJyb3InLCAnZHJvcCddXG5cbiAgICAgICAgJHNjb3BlLnJ1bGVfYWN0aW9uX3RpdGxlcyA9IHt9XG5cbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgRW51bXMuQUNMX2FjdGlvbnNcbiAgICAgICAgICAgICRzY29wZS5ydWxlX2FjdGlvbl90aXRsZXNba2V5XSA9IHRyYW5zbGF0ZSgnQUNMLnJ1bGUuYWN0aW9uLicgKyBrZXkpXG5cbiAgICAgICAgJHNjb3BlLnVuc2VsZWN0X2FsbCgpXG5cbiAgICAgICAgU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcuc3RhdHVzLnJlYWRpbmdfcnVsZXNfZnJvbV9kZXZpY2UnKSlcblxuICAgICAgICAjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0YtcbiAgICAgICAgUHJvbWlzZXMucHJvbWlzZSAtPlxuICAgICAgICAgICAgRGV2aWNlX3JvdXRpbmcuTEJHLkhhc2hfcHJvZmlsZS5mZXRjaCgpXG5cbiAgICAgICAgICAgIC50aGVuIChoYXNoaW5nX3Byb2ZpbGUpIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcy5ydWxlLmhhc2hpbmdfcHJvZmlsZSA9IGhhc2hpbmdfcHJvZmlsZS5pZFxuXG4gICAgICAgICAgICAudGhlbiAtPlxuICAgICAgICAgICAgICAgICMg0YHRgtGA0LDQvdC40YbQsCDQsiDQvtCx0L7Qt9GA0LXQstCw0YLQtdC70LUg0LzQvtCz0LvQsCDQvdC1INC+0LHQvdC+0LLQu9GP0YLRjNGB0Y8g0LzQtdGB0Y/RhtCw0LzQuCxcbiAgICAgICAgICAgICAgICAjINC4INGD0YHRgtGA0L7QudGB0YLQstC+INC80L7Qs9C70L4g0L/QtdGA0LXQt9Cw0LPRgNGD0LbQsNGC0YzRgdGPLCDRgdGC0LjRgNCw0YLRjNGB0Y8sXG4gICAgICAgICAgICAgICAgIyDQsCDRgtCw0LrQttC1INC60YLQvi3RgtC+INC00YDRg9Cz0L7QuSDQvNC+0LMg0LjQt9C80LXQvdC40YLRjCDQv9GA0LDQstC40LvQsCDRgSDQtNGA0YPQs9C+0LPQviDQutC+0LzQv9GM0Y7RgtC10YDQsCxcbiAgICAgICAgICAgICAgICAjINC/0L7RjdGC0L7QvNGDINC/0YDQvtCz0YDRg9C30LjRgtGMINC/0YDQsNCy0LjQu9CwINC90LDRgdC40LvRjNC90L4g0L/RgNC4INC90LXRgdC+0LLQv9Cw0LTQtdC90LjQuCDQuNGFINGBINGC0LXQutGD0YnQuNC80Lgg0L3QsCDRg9GB0YLRgNC+0LnRgdGC0LLQtVxuXG4gICAgICAgICAgICAgICAgIyDQt9Cw0LPRgNGD0LfQuNGC0Ywg0L/QvtGB0LvQtdC00L3RjtGOINGB0L7RhdGA0LDQvdGR0L3QvdGD0Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOXG4gICAgICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5yZWFkX2xvY2FsX3JvdXRpbmdfY29uZmlndXJhdGlvbigpXG5cbiAgICAgICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLlJVTEUuaW5pdGlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgJHNjb3BlLndhdGNoX3J1bGVzKClcblxuICAgICAgICAgICAgLnRoZW4gLT5cbiAgICAgICAgICAgICAgICBTdGF0dXMuaWRsZSgpXG5cbiAgICAgICAgICAgIC5jYXRjaCBQcm9taXNlcy5ub3RfbmF2aWdhdGluZ19hd2F5LCAoZXJyb3IpIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLndhdGNoX3J1bGVzKClcblxuICAgICAgICAgICAgICAgIHJldHVybiBpZiBhcGkuaXNfYXBpX2Vycm9yKGVycm9yKVxuXG4gICAgICAgICAgICAgICAgaWYgUm91dGluZ19tb2RlbF9lcnJvcnMuaXMoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoUm91dGluZ19tb2RlbF9lcnJvcnMubWVzc2FnZShlcnJvcikpXG5cbiAgICAgICAgICAgICAgICBTdGF0dXMuZXJyb3IoZXJyb3IpXG5cbiAgICAgICAgICAgIC5maW5hbGx5IC0+XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uICdjb25maWd1cmF0aW9uX2xvYWRlZCcsIChydWxlcykgLT5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJVTEUucnVsZXNfY2hhbmdlZCgpXG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucmVhZHkgPSB5ZXNcblxuICAgICAgICAgICAgLiRhcHBseSgkc2NvcGUpIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFwcC5jb250cm9sbGVyKFwiUnVsZXNDdHJsXCIsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRzY29wZSwgJGZpbHRlciwgJGxvY2F0aW9uLCAkdGltZW91dCwgJHEsIHRyYW5zbGF0ZSwgYXBpLCBsb2csIFByb21pc2VzLCBEZXZpY2Vfcm91dGluZywgUG9ydCwgUnVsZSwgRW51bXMsIERldmljZSwgU3RhdHVzLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgQ29uZmlndXJhdGlvbiwgR3JhcGgsIFJvdXRpbmdfbW9kZWxfZXJyb3JzLCBQb3J0X3ZpZXcsIFBvcnRfbnVtZXJhdGlvbikge1xuICAgICRzY29wZS5fc2luZ2xlX2NvbXBsZXhfZmlsdGVyID0gZnVuY3Rpb24ocnVsZSkge1xuICAgICAgdmFyIGNvbXBsZXhfdHlwZXM7XG4gICAgICBjb21wbGV4X3R5cGVzID0gWydJUF9wcm90b2NvbF9zb3VyY2UnLCAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nLCAnSVBfcHJvdG9jb2wnXTtcbiAgICAgIHJldHVybiBydWxlLmZpbHRlcnMubGVuZ3RoID09PSAyICYmIHJ1bGUuZmlsdGVycy5maWx0ZXIoZnVuY3Rpb24oZikge1xuICAgICAgICByZXR1cm4gY29tcGxleF90eXBlcy5pbmRleE9mKGYudHlwZSkgIT09IC0xO1xuICAgICAgfSkubGVuZ3RoID09PSAyO1xuICAgIH07XG4gICAgJHNjb3BlLmhpZGVfYnJhY2tldCA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIHJldHVybiBydWxlLmZpbHRlcnMubGVuZ3RoIDwgMiB8fCAkc2NvcGUuX3NpbmdsZV9jb21wbGV4X2ZpbHRlcihydWxlKTtcbiAgICB9O1xuICAgICRzY29wZS5zaW5nbGVfZmlsdGVyID0gZnVuY3Rpb24ocnVsZSkge1xuICAgICAgcmV0dXJuIHJ1bGUuZmlsdGVycy5sZW5ndGggPT09IDEgfHwgJHNjb3BlLl9zaW5nbGVfY29tcGxleF9maWx0ZXIocnVsZSk7XG4gICAgfTtcbiAgICAkc2NvcGUuc29ydF9ieV9pZCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICB2YXIgc29ydGVyO1xuICAgICAgc29ydGVyID0gZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICAgICAgaWYgKG9uZS5pZCA+IHR3by5pZCkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2UgaWYgKG9uZS5pZCA9PT0gdHdvLmlkKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFycmF5LnNvcnQoc29ydGVyKTtcbiAgICB9O1xuICAgICRzY29wZS5uZXh0X2lkID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHZhciBpZCwgaXRlbSwgaiwgbGVuLCBtYXg7XG4gICAgICBtYXggPSAwO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgaXRlbSA9IGFycmF5W2pdO1xuICAgICAgICBpZCA9IGl0ZW0uaWQ7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgaWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1heCArIDE7XG4gICAgfTtcbiAgICAkc2NvcGUubmV4dF9wcmlvcml0eSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICB2YXIgaXRlbSwgaiwgbGVuLCBtYXgsIHByaW9yaXR5O1xuICAgICAgbWF4ID0gMDtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGl0ZW0gPSBhcnJheVtqXTtcbiAgICAgICAgcHJpb3JpdHkgPSBpdGVtLnByaW9yaXR5O1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHByaW9yaXR5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXggKyAxO1xuICAgIH07XG4gICAgJHNjb3BlLnVuc2VsZWN0X2FsbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGssIGtleSwgbGVuLCBsZW4xLCBwb3J0LCByZWYsIHJlZjEsIHJlc3VsdHMsIHJ1bGU7XG4gICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKCk7XG4gICAgICByZWYgPSAkc2NvcGUudmlldy5ydWxlcztcbiAgICAgIGZvciAocnVsZSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBydWxlID0gKytqKSB7XG4gICAgICAgIGtleSA9IHJlZltydWxlXTtcbiAgICAgICAgcnVsZS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmVmMSA9ICRyb290U2NvcGUudmlldy5wb3J0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAocG9ydCA9IGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBwb3J0ID0gKytrKSB7XG4gICAgICAgIGtleSA9IHJlZjFbcG9ydF07XG4gICAgICAgIHBvcnQuc2VsZWN0ZWRJbiA9IGZhbHNlO1xuICAgICAgICByZXN1bHRzLnB1c2gocG9ydC5zZWxlY3RlZE91dCA9IGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG4gICAgJHNjb3BlLmJ5X2lkID0gZnVuY3Rpb24oaWQsIHdoZXJlKSB7XG4gICAgICByZXR1cm4gd2hlcmUuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IGlkO1xuICAgICAgfSlbMF07XG4gICAgfTtcbiAgICAkc2NvcGUuaW5pdF9zdGlja3llYWggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICQuc3RpY2t5ZWFoKCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5uZXdfcnVsZSA9IHtcbiAgICAgIHNldDogZnVuY3Rpb24ocnVsZSwgbW9kZSkge1xuICAgICAgICAkc2NvcGUudmlldy5uZXdfcnVsZV9pZCA9IHJ1bGUuaWQ7XG4gICAgICAgICRzY29wZS52aWV3Lm5ld19ydWxlX21vZGUgPSBtb2RlO1xuICAgICAgICAkc2NvcGUubmV3X3J1bGUuY2FuY2VsX2FkZF90aW1lb3V0KCk7XG4gICAgICAgIGpRdWVyeShcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7XG4gICAgICAgICAgc2Nyb2xsVG9wOiAnMHB4J1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdhZGQnKSB7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS5uZXdfcnVsZS5zZXRfYWRkX3RpbWVvdXQoNSAqIDEwMDApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUudmlldy5uZXdfcnVsZV9pZCA9IG51bGw7XG4gICAgICAgICRzY29wZS52aWV3Lm1vZGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJHNjb3BlLm5ld19ydWxlLmNhbmNlbF9hZGRfdGltZW91dCgpO1xuICAgICAgfSxcbiAgICAgIGFkZGluZ19uZXdfcnVsZV9hbmRfbm90X3RpbWVkX291dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUudmlldy5uZXdfcnVsZV9pZCAmJiAkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dDtcbiAgICAgIH0sXG4gICAgICBzZXRfYWRkX3RpbWVvdXQ6IGZ1bmN0aW9uKGRlbGF5KSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgfSxcbiAgICAgIGNhbmNlbF9hZGRfdGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCgkc2NvcGUudmlldy5hZGRfbmV3X3J1bGVfdGltZW91dCk7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS52aWV3LmFkZF9uZXdfcnVsZV90aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlzOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUudmlldy5uZXdfcnVsZV9pZCA9PT0gcnVsZS5pZDtcbiAgICAgIH1cbiAgICB9O1xuICAgICRzY29wZS53YXRjaF9ydWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRzY29wZS53YXRjaGluZ19ydWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkc2NvcGUuJHdhdGNoKCdtb2RlbC5ydWxlcycsICRzY29wZS5SVUxFLnJ1bGVzX2NoYW5nZWQsIHRydWUpO1xuICAgICAgcmV0dXJuICRzY29wZS53YXRjaGluZ19ydWxlcyA9IHRydWU7XG4gICAgfTtcbiAgICAkc2NvcGUuUlVMRSA9IHtcbiAgICAgIGJ5X2lkOiBmdW5jdGlvbihpZCkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJ1bGU7XG4gICAgICAgIHJlZiA9IE1vZGVsLnJ1bGVzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBydWxlID0gcmVmW2pdO1xuICAgICAgICAgIGlmIChydWxlLmlkID09PSBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWRkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJ1bGU7XG4gICAgICAgIHJ1bGUgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLnRlbXBsYXRlcy5ydWxlKTtcbiAgICAgICAgcnVsZS5pZCA9ICRzY29wZS5uZXh0X2lkKE1vZGVsLnJ1bGVzKTtcbiAgICAgICAgcnVsZS5uYW1lID0gJHNjb3BlLlJVTEUubmFtZShydWxlKTtcbiAgICAgICAgcnVsZS5wcmlvcml0eSA9ICRzY29wZS5uZXh0X3ByaW9yaXR5KE1vZGVsLnJ1bGVzKTtcbiAgICAgICAgJHNjb3BlLlJVTEUuZGVzY3JpYmVfYWN0aW9uKHJ1bGUpO1xuICAgICAgICBNb2RlbC5ydWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICBpZiAoJHNjb3BlLmVkaXRfcG9ydHMpIHtcbiAgICAgICAgICAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pbnB1dHNfdGV4dCA9ICcnO1xuICAgICAgICAgICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLm91dHB1dHNfdGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKTtcbiAgICAgICAgJHNjb3BlLlJVTEUuc2VsZWN0KHJ1bGUpO1xuICAgICAgICByZXR1cm4gJHNjb3BlLm5ld19ydWxlLnNldChydWxlLCAnYWRkJyk7XG4gICAgICB9LFxuICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIE1vZGVsLnJ1bGVzLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgcmV0dXJuIHgucHJpb3JpdHkgPiBydWxlLnByaW9yaXR5O1xuICAgICAgICB9KVswXTtcbiAgICAgIH0sXG4gICAgICBuYW1lOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUoJ3BhZ2Uucm91dGluZy5ydWxlLm5hbWUnLCB7XG4gICAgICAgICAgaWQ6IHJ1bGUuaWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkc2NvcGUubmV3X3J1bGUuaXMocnVsZSkpIHtcbiAgICAgICAgICAgICRzY29wZS5uZXdfcnVsZS5yZXNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pc19iZWluZ19yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBNb2RlbC5ydWxlcy5yZW1vdmUocnVsZSk7XG4gICAgICAgICAgZGVsZXRlICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdO1xuICAgICAgICAgIGlmICghJHNjb3BlLlJVTEUuc2VsZWN0ZWQoKSAmJiBNb2RlbC5ydWxlc1swXSkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLnNlbGVjdChNb2RlbC5ydWxlc1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5kZXNlbGVjdF9hbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZV9hbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUubmV3X3J1bGUucmVzZXQoKTtcbiAgICAgICAgICAkc2NvcGUuUlVMRS5kZXNlbGVjdF9hbGwoKTtcbiAgICAgICAgICBNb2RlbC5ydWxlcyA9IFtdO1xuICAgICAgICAgIHJldHVybiAkc2NvcGUudmlldy5ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBhZGRfb3JfcmVtb3ZlX2hhc2hpbmdfcHJvZmlsZTogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICBpZiAoKHJ1bGUuYWN0aW9uID09PSAnYmFsYW5jZScgfHwgcnVsZS5hY3Rpb24gPT09ICdkdWJiaW5nJykgJiYgcnVsZS5vdXRwdXRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBpZiAocnVsZS5oYXNoaW5nX3Byb2ZpbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGUuaGFzaGluZ19wcm9maWxlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlbGV0ZSBydWxlLmhhc2hpbmdfcHJvZmlsZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhhc19kaXNhYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb3VudCwgaiwgbGVuLCByZWYsIHJ1bGU7XG4gICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgaWYgKE1vZGVsLnJ1bGVzKSB7XG4gICAgICAgICAgcmVmID0gTW9kZWwucnVsZXM7XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBydWxlID0gcmVmW2pdO1xuICAgICAgICAgICAgaWYgKCFydWxlLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICEhY291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3dpdGNoX2FsbDogZnVuY3Rpb24obW9kZSkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHMsIHJ1bGU7XG4gICAgICAgIHJlZiA9IE1vZGVsLnJ1bGVzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIHJ1bGUgPSByZWZbal07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHJ1bGUuZW5hYmxlZCA9IG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIGZpbHRlcl9saXN0X3Nob3duOiBmdW5jdGlvbihydWxlLCBleHRyYSkge1xuICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zY3JvbGxfYnkoZXh0cmEuaGVpZ2h0KCkpO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZV9hdmFpbGFibGVfZmlsdGVyczogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICB2YXIgc2hvd247XG4gICAgICAgIHNob3duID0gT2JqZWN0LmdldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ3Nob3dfYXZhaWxhYmxlX2ZpbHRlcnMnKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzaG93X2F2YWlsYWJsZV9maWx0ZXJzJywgIXNob3duKTtcbiAgICAgIH0sXG4gICAgICBpZl9zaG93X2F2YWlsYWJsZV9maWx0ZXJzOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2hvd19hdmFpbGFibGVfZmlsdGVycycpO1xuICAgICAgfSxcbiAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZmlsdGVyLCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgcnVsZTtcbiAgICAgICAgcmVmID0gTW9kZWwucnVsZXM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIHJ1bGUgPSByZWZbal07XG4gICAgICAgICAgJHNjb3BlLlJVTEUuZGVzY3JpYmVfYWN0aW9uKHJ1bGUpO1xuICAgICAgICAgIHJlZjEgPSBydWxlLmZpbHRlcnM7XG4gICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSByZWYxW2tdO1xuICAgICAgICAgICAgZmlsdGVyLiQkc2hvd19tYXNrID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGZpbHRlci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTGV2ZWw0X2RhdGEnOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLkZJTFRFUi5pc19kZWZhdWx0X21hc2soZmlsdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIGZpbHRlci4kJGludGVydmFsID0gZmlsdGVyLnRvX3ZhbHVlICE9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICRzY29wZS5yZWZyZXNoX2RldmljZV9wb3J0X3N0YXR1c2VzKCk7XG4gICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKTtcbiAgICAgICAgaWYgKE1vZGVsLnJ1bGVzWzBdKSB7XG4gICAgICAgICAgJHNjb3BlLlJVTEUuc2VsZWN0KE1vZGVsLnJ1bGVzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUub25fa2V5KGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChrZXkuaXMoJ0N0cmwnLCAnVXAnKSkge1xuICAgICAgICAgICAgcnVsZSA9ICRzY29wZS5SVUxFLnNlbGVjdGVkKCk7XG4gICAgICAgICAgICBpZiAocnVsZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5jaGFuZ2VfcHJpb3JpdHkocnVsZSwgKzEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleS5pcygnQ3RybCcsICdEb3duJykpIHtcbiAgICAgICAgICAgIHJ1bGUgPSAkc2NvcGUuUlVMRS5zZWxlY3RlZCgpO1xuICAgICAgICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUuY2hhbmdlX3ByaW9yaXR5KHJ1bGUsIC0xKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkuaXMoJ0N0cmwnLCAnRScpKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnRvZ2dsZV9lZGl0X3BvcnRzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZHVtbXlfcHJvbWlzZSgpO1xuICAgICAgfSxcbiAgICAgIHJlbmFtZTogZnVuY3Rpb24ocnVsZSwgb25fb2ZmKSB7XG4gICAgICAgIGlmIChvbl9vZmYgPT0gbnVsbCkge1xuICAgICAgICAgIG9uX29mZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uX29mZikge1xuICAgICAgICAgIGlmICghcnVsZS5lbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAncmVuYW1lJywgb25fb2ZmKTtcbiAgICAgIH0sXG4gICAgICBjYW5faGF2ZV9zYW1lX2lucHV0c19hbmRfb3V0cHV0czogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICBzd2l0Y2ggKHJ1bGUuYWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSAnbWlycm9yJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhZGRfaW5wdXQ6IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuICRzY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIGxlbiwgcG9ydCwgcmVmO1xuICAgICAgICAgIHJlZiA9IE1vZGVsLnBvcnRzLmZpbHRlcihmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgcG9ydCA9IHJlZltqXTtcbiAgICAgICAgICAgIGlmIChydWxlLmlucHV0cy5oYXMocG9ydCkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlLmlucHV0cy5wdXNoKHBvcnQpO1xuICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnlfaWQocnVsZS5pbnB1dHMpO1xuICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgdHJ1ZSk7XG4gICAgICAgICAgICAkc2NvcGUucmVmcmVzaF9kZXZpY2VfcG9ydF9zdGF0dXNlcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKCk7XG4gICAgICAgICAgJHNjb3BlLlJVTEUuY2hhbmdlZChydWxlKTtcbiAgICAgICAgICBpZiAoJHNjb3BlLm5ld19ydWxlLmlzKHJ1bGUpKSB7XG4gICAgICAgICAgICAkc2NvcGUubmV3X3J1bGUucmVzZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRzY29wZS5lZGl0X3BvcnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUucmVmcmVzaF9pbnB1dF90ZXh0KHJ1bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWRkX291dHB1dDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaiwgbGVuLCBwb3J0LCByZWY7XG4gICAgICAgICAgcmVmID0gTW9kZWwucG9ydHMuZmlsdGVyKGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBQb3J0X3ZpZXcuaXNfc2VsZWN0ZWQocG9ydCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBwb3J0ID0gcmVmW2pdO1xuICAgICAgICAgICAgaWYgKHJ1bGUub3V0cHV0cy5oYXMocG9ydCkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlLm91dHB1dHMucHVzaChwb3J0KTtcbiAgICAgICAgICAgICRzY29wZS5zb3J0X2J5X2lkKHJ1bGUub3V0cHV0cyk7XG4gICAgICAgICAgICBQb3J0X3ZpZXcuZGVzZWxlY3QocG9ydCk7XG4gICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgdHJ1ZSk7XG4gICAgICAgICAgICAkc2NvcGUucmVmcmVzaF9kZXZpY2VfcG9ydF9zdGF0dXNlcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocnVsZS5hY3Rpb24gPT09ICdyZWRpcmVjdCcgJiYgcnVsZS5vdXRwdXRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJ1bGUuYWN0aW9uID0gJ2JhbGFuY2UnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKCk7XG4gICAgICAgICAgJHNjb3BlLlJVTEUuYWRkX29yX3JlbW92ZV9oYXNoaW5nX3Byb2ZpbGUocnVsZSk7XG4gICAgICAgICAgJHNjb3BlLlJVTEUuY2hhbmdlZChydWxlKTtcbiAgICAgICAgICBpZiAoJHNjb3BlLm5ld19ydWxlLmlzKHJ1bGUpKSB7XG4gICAgICAgICAgICAkc2NvcGUubmV3X3J1bGUucmVzZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRzY29wZS5lZGl0X3BvcnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUucmVmcmVzaF9vdXRwdXRfdGV4dChydWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hfaW5wdXRfdGV4dDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICB2YXIgaW5wdXQ7XG4gICAgICAgIHJldHVybiAkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5pbnB1dHNfdGV4dCA9ICgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlZiA9IHJ1bGUuaW5wdXRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGlucHV0ID0gcmVmW2pdO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFBvcnRfbnVtZXJhdGlvbi5uYW1lX2J5X2lkKGlucHV0LmlkKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KSgpKS5qb2luKCcgJyk7XG4gICAgICB9LFxuICAgICAgcmVmcmVzaF9vdXRwdXRfdGV4dDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICB2YXIgb3V0cHV0O1xuICAgICAgICByZXR1cm4gJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0ub3V0cHV0c190ZXh0ID0gKChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgICAgcmVmID0gcnVsZS5vdXRwdXRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIG91dHB1dCA9IHJlZltqXTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChQb3J0X251bWVyYXRpb24ubmFtZV9ieV9pZChvdXRwdXQuaWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH0pKCkpLmpvaW4oJyAnKTtcbiAgICAgIH0sXG4gICAgICBjaGFuZ2VkOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnZXJyb3InLCBmYWxzZSk7XG4gICAgICB9LFxuICAgICAgaW5wdXRzX3RleHRfY2hhbmdlZDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yLmludmFsaWRfaW5wdXRzX3RleHQnLCBmYWxzZSk7XG4gICAgICB9LFxuICAgICAgb3V0cHV0c190ZXh0X2NoYW5nZWQ6IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvci5pbnZhbGlkX291dHB1dHNfdGV4dCcsIGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBydWxlc19jaGFuZ2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrLCBqLCBsZW4sIHJlZiwgcnVsZTtcbiAgICAgICAgaWYgKCRzY29wZS5hcHBseWluZ19ydWxlcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHJvb3RTY29wZS5hcHBseWluZ19jb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlZiA9IE1vZGVsLnJ1bGVzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBydWxlID0gcmVmW2pdO1xuICAgICAgICAgICRzY29wZS5SVUxFLmRlc2NyaWJlX2FjdGlvbihydWxlKTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUuaW50ZXJhY3RpdmVfdmFsaWRhdGlvbigpO1xuICAgICAgICBpZiAoJHNjb3BlLmxvYWRfcnVsZXNfdGltZXIpIHtcbiAgICAgICAgICAkdGltZW91dC5jYW5jZWwoJHNjb3BlLmxvYWRfcnVsZXNfdGltZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIERldmljZS5sb2FkX3J1bGVzKCkudGhlbihmdW5jdGlvbihydWxlcykge1xuICAgICAgICAgICAgdmFyIGd1aV9ydWxlcztcbiAgICAgICAgICAgIGd1aV9ydWxlcyA9IERldmljZV9yb3V0aW5nLmNvbnZlcnRfdG9fZGV2aWNlX3J1bGVzKE1vZGVsLnJ1bGVzKTtcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYW55X2NoYW5nZXMgPSAhYW5ndWxhci5lcXVhbHMoZ3VpX3J1bGVzLCBydWxlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiAkc2NvcGUubG9hZF9ydWxlc190aW1lciA9ICR0aW1lb3V0KGNhbGxiYWNrLCAxMDAwKTtcbiAgICAgIH0sXG4gICAgICBoYXNoaW5nX3Byb2ZpbGVfY2hhbmdlZDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUuZGVzY3JpYmVfYWN0aW9uKHJ1bGUpO1xuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbl9wb3J0X2ZpbHRlciwgaiwgbGVuLCBwb3J0LCByZWYsIHNvdXJjZV9wb3J0X2ZpbHRlcjtcbiAgICAgICAgaWYgKCRzY29wZS5mb3JtLiRpbnZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuICdmb3JtX2Vycm9ycyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLmVkaXRfcG9ydHMpIHtcbiAgICAgICAgICByZXR1cm4gJ2V4aXRfcG9ydF9lZGl0aW5nX21vZGUnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydWxlLmlucHV0cy5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgcmV0dXJuICdpbnB1dF9yZXF1aXJlZCc7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChydWxlLmFjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChydWxlLm91dHB1dHMuaXNfZW1wdHkoKSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ291dHB1dF9yZXF1aXJlZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChydWxlLmFjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ3JlZGlyZWN0JzpcbiAgICAgICAgICAgIGlmIChydWxlLm91dHB1dHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gJ211bHRpcGxlX291dHB1dHNfZm9yX3JlZGlyZWN0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzb3VyY2VfcG9ydF9maWx0ZXIgPSBydWxlLmZpbHRlcnMuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICByZXR1cm4geC50eXBlID09PSAnSVBfcHJvdG9jb2xfc291cmNlJztcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGRlc3RpbmF0aW9uX3BvcnRfZmlsdGVyID0gcnVsZS5maWx0ZXJzLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgcmV0dXJuIHgudHlwZSA9PT0gJ0lQX3Byb3RvY29sX2Rlc3RpbmF0aW9uJztcbiAgICAgICAgfSlbMF07XG4gICAgICAgIGlmIChzb3VyY2VfcG9ydF9maWx0ZXIgfHwgZGVzdGluYXRpb25fcG9ydF9maWx0ZXIpIHtcbiAgICAgICAgICBpZiAocnVsZS5maWx0ZXJzLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4geC50eXBlID09PSAnSVBfcHJvdG9jb2wnO1xuICAgICAgICAgIH0pLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnaXBfcHJvdG9jb2xfcmVxdWlyZWRfZm9yX3BvcnRfZmlsdGVyaW5nJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVmID0gcnVsZS5pbnB1dHMuY29uY2F0KHJ1bGUub3V0cHV0cyk7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgcG9ydCA9IFBvcnRfbnVtZXJhdGlvbi5jYXRlZ29yaXplX3BvcnQocG9ydC5pZCk7XG4gICAgICAgICAgaWYgKHBvcnQudHlwZSA9PT0gJ2pvaW5hYmxlJykge1xuICAgICAgICAgICAgaWYgKHBvcnQuam9pbnRfcG9ydC5tb2RlID09PSAnNDBHJykge1xuICAgICAgICAgICAgICBpZiAoIXBvcnQuaXNfZmlyc3RfaW5fam9pbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2pvaW50X3BvcnRfaXNfNDBHX2J1dF9zdWJwb3J0c19hcmVfdXNlZF9pbl9ydWxlcyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkdXBsaWNhdGU6IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgdmFyIGFfcnVsZSwgY29weSwgaiwgbGVuLCBwcmV2aW91c19ydWxlLCByZWY7XG4gICAgICAgIGNvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSk7XG4gICAgICAgIGNvcHkuaW5wdXRzID0gW10uY29uY2F0KHJ1bGUuaW5wdXRzKTtcbiAgICAgICAgY29weS5vdXRwdXRzID0gW10uY29uY2F0KHJ1bGUub3V0cHV0cyk7XG4gICAgICAgIGNvcHkuaWQgPSAkc2NvcGUubmV4dF9pZChNb2RlbC5ydWxlcyk7XG4gICAgICAgIGNvcHkubmFtZSA9ICRzY29wZS5SVUxFLm5hbWUoY29weSk7XG4gICAgICAgIHByZXZpb3VzX3J1bGUgPSAkc2NvcGUuUlVMRS5wcmV2aW91cyhydWxlKTtcbiAgICAgICAgaWYgKHByZXZpb3VzX3J1bGUpIHtcbiAgICAgICAgICByZWYgPSBNb2RlbC5ydWxlcztcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFfcnVsZSA9IHJlZltqXTtcbiAgICAgICAgICAgIGlmIChhX3J1bGUucHJpb3JpdHkgPiBydWxlLnByaW9yaXR5KSB7XG4gICAgICAgICAgICAgIGFfcnVsZS5wcmlvcml0eSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb3B5LnByaW9yaXR5ID0gcnVsZS5wcmlvcml0eTtcbiAgICAgICAgICBydWxlLnByaW9yaXR5Kys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29weS5wcmlvcml0eSA9IHJ1bGUucHJpb3JpdHk7XG4gICAgICAgICAgcnVsZS5wcmlvcml0eSA9ICRzY29wZS5uZXh0X3ByaW9yaXR5KE1vZGVsLnJ1bGVzKTtcbiAgICAgICAgfVxuICAgICAgICAkc2NvcGUuUlVMRS5kZXNjcmliZV9hY3Rpb24oY29weSk7XG4gICAgICAgIE1vZGVsLnJ1bGVzLnB1c2goY29weSk7XG4gICAgICAgICRzY29wZS5SVUxFLnNvcnRfYnlfcHJpb3JpdHkoKTtcbiAgICAgICAgcmV0dXJuICR0aW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuUlVMRS5zZWxlY3QoY29weSk7XG4gICAgICAgICAgcmV0dXJuICRzY29wZS5uZXdfcnVsZS5zZXQoY29weSwgJ2R1cGxpY2F0ZScpO1xuICAgICAgICB9KSwgMCk7XG4gICAgICB9LFxuICAgICAgcG9ydF9jbGlja2VkOiBmdW5jdGlvbihydWxlLCBwb3J0LCAkZXZlbnQpIHtcbiAgICAgICAgaWYgKCEkc2NvcGUudmlldy5ydWxlc1tydWxlLmlkXS5zZWxlY3RlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBQb3J0X3ZpZXcuc2VsZWN0KHBvcnQsIHRydWUpO1xuICAgICAgICByZXR1cm4gJHNjb3BlLmJsb2NrX2V2ZW50KCRldmVudCk7XG4gICAgICB9LFxuICAgICAgb25fb2ZmX2NsaWNrZWQ6IGZ1bmN0aW9uKHJ1bGUsICRldmVudCkge1xuICAgICAgICByZXR1cm4gJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlZiwgcnVsZSwgcnVsZV9pZDtcbiAgICAgICAgcmVmID0gJHNjb3BlLnZpZXcucnVsZXM7XG4gICAgICAgIGZvciAocnVsZV9pZCBpbiByZWYpIHtcbiAgICAgICAgICBydWxlID0gcmVmW3J1bGVfaWRdO1xuICAgICAgICAgIGlmIChydWxlLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUuYnlfaWQocGFyc2VJbnQocnVsZV9pZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNlbGVjdDogZnVuY3Rpb24ocnVsZSwgJGV2ZW50KSB7XG4gICAgICAgIHZhciBqLCBrLCBsZW4sIGxlbjEsIHBvcnQsIHJlZiwgcmVmMSwgcmVzdWx0cztcbiAgICAgICAgaWYgKCRzY29wZS5SVUxFLnNlbGVjdGVkKCkgPT09IHJ1bGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRldmVudCkge1xuICAgICAgICAgIGlmIChqUXVlcnkoJGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ3J1bGVfb25fb2ZmX3N3aXRjaCcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgkc2NvcGUuZWRpdF9wb3J0cykge1xuICAgICAgICAgICRzY29wZS5SVUxFLnJlZnJlc2hfaW5wdXRfdGV4dChydWxlKTtcbiAgICAgICAgICAkc2NvcGUuUlVMRS5yZWZyZXNoX291dHB1dF90ZXh0KHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgICRzY29wZS5SVUxFLmRlc2VsZWN0X2FsbCgpO1xuICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgaWYgKHJ1bGUgIT09IEdyYXBoLnJ1bGUpIHtcbiAgICAgICAgICBHcmFwaC5zaG93ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVmID0gcnVsZS5pbnB1dHM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVmMSA9IHJ1bGUub3V0cHV0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICBwb3J0ID0gcmVmMVtrXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZE91dCcsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0sXG4gICAgICBkZXNlbGVjdF9hbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgaywgbGVuLCBsZW4xLCBwb3J0LCByZWYsIHJlZjEsIHJlc3VsdHMsIHJ1bGU7XG4gICAgICAgIHJlZiA9IE1vZGVsLnJ1bGVzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBydWxlID0gcmVmW2pdO1xuICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzZWxlY3RlZCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZWYxID0gTW9kZWwucG9ydHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZjFba107XG4gICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgZmFsc2UpO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgZmFsc2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0sXG4gICAgICBzb3J0X2J5X3ByaW9yaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1vZGVsLnJ1bGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgY2hhbmdlX3ByaW9yaXR5OiBmdW5jdGlvbihydWxlLCBjaGFuZ2UpIHtcbiAgICAgICAgJHNjb3BlLlJVTEUuc29ydF9ieV9wcmlvcml0eSgpO1xuICAgICAgICBNb2RlbC5ydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGksIGluZGV4KSB7XG4gICAgICAgICAgdmFyIHByaW9yaXR5LCByZXBsYWNlZDtcbiAgICAgICAgICBpZiAoaSAhPT0gcnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleCAtPSBjaGFuZ2U7XG4gICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBNb2RlbC5ydWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVwbGFjZWQgPSBNb2RlbC5ydWxlc1tpbmRleF07XG4gICAgICAgICAgcHJpb3JpdHkgPSBydWxlLnByaW9yaXR5O1xuICAgICAgICAgIHJ1bGUucHJpb3JpdHkgPSByZXBsYWNlZC5wcmlvcml0eTtcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZWQucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5zb3J0X2J5X3ByaW9yaXR5KCk7XG4gICAgICB9LFxuICAgICAgZGVzY3JpYmVfYWN0aW9uOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHZhciBkZXNjcmliZV9maWx0ZXIsIGRlc2NyaWJlX2ZpbHRlcnMsIGRlc2NyaXB0aW9uO1xuICAgICAgICBkZXNjcmliZV9maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgICB2YXIgZGVzY3JpcHRpb24sIGdldF9maWx0ZXJfdG9fdmFsdWVfbGFiZWwsIGdldF9maWx0ZXJfdmFsdWVfbGFiZWw7XG4gICAgICAgICAgZ2V0X2ZpbHRlcl92YWx1ZV9sYWJlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGtleSwgcmVmLCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXIudmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gJz8nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlci50eXBlXS52YWx1ZS5mcm9tKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWx0ZXIudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWYgPSBFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlci50eXBlXS52YWx1ZS5mcm9tO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gcmVmW2tleV07XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmlsdGVyLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZ2V0X2ZpbHRlcl90b192YWx1ZV9sYWJlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGZpbHRlci50b192YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlci50eXBlXS52YWx1ZS5mcm9tKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGZpbHRlciB0eXBlIFwiICsgZmlsdGVyLnR5cGUgKyBcIiBmb3IgdG8gdmFsdWUgc2VsZWN0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlci50b192YWx1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgIHR5cGU6IGZpbHRlci50eXBlLFxuICAgICAgICAgICAgdmFsdWU6IGdldF9maWx0ZXJfdmFsdWVfbGFiZWwoKSxcbiAgICAgICAgICAgIHRvX3ZhbHVlOiBnZXRfZmlsdGVyX3RvX3ZhbHVlX2xhYmVsKCksXG4gICAgICAgICAgICBtYXNrOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZmlsdGVyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdMZXZlbDRfZGF0YSc6XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5tYXNrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpXG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgZGVzY3JpYmVfZmlsdGVycyA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICB2YXIgZmlsdGVyLCBqLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgICAgICByZWYgPSBydWxlLmZpbHRlcnM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgZmlsdGVyID0gcmVmW2pdO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGRlc2NyaWJlX2ZpbHRlcihmaWx0ZXIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH07XG4gICAgICAgIGRlc2NyaXB0aW9uID0ge307XG4gICAgICAgIGRlc2NyaXB0aW9uLmFjdGlvbl9pbmZvID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN3aXRjaCAocnVsZS5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2JhbGFuY2UnOlxuICAgICAgICAgICAgY2FzZSAnZHViYmluZyc6XG4gICAgICAgICAgICAgIGlmIChydWxlLm91dHB1dHMuaXNfZW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChydWxlLm91dHB1dHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnJ1bGUuYWN0aW9uLmFnZ3JlZ2F0aW9uJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERldmljZV9yb3V0aW5nLkxCRy5IYXNoX3Byb2ZpbGUuYnlfaWQocnVsZS5oYXNoaW5nX3Byb2ZpbGUpLnRpdGxlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgICBkZXNjcmlwdGlvbi5maWx0ZXJzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN3aXRjaCAocnVsZS5hY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2JhbGFuY2UnOlxuICAgICAgICAgICAgY2FzZSAncmVkaXJlY3QnOlxuICAgICAgICAgICAgY2FzZSAnbWlycm9yJzpcbiAgICAgICAgICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgICAgICAgY2FzZSAnZHViYmluZyc6XG4gICAgICAgICAgICAgIHJldHVybiBkZXNjcmliZV9maWx0ZXJzKHJ1bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdhY3Rpb24uZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XG4gICAgICB9LFxuICAgICAgZmlsdGVyX3R5cGVfY2hhbmdlZDogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgIGZpbHRlci52YWx1ZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBmaWx0ZXIubWFzayA9ICRzY29wZS5GSUxURVIuaWRlbnRpdHlfbWFzayhmaWx0ZXIudHlwZSk7XG4gICAgICB9LFxuICAgICAgaGFzX2ZpbHRlcjogZnVuY3Rpb24ocnVsZSwgdHlwZSkge1xuICAgICAgICB2YXIgZmlsdGVyLCBqLCBsZW4sIHJlZjtcbiAgICAgICAgcmVmID0gcnVsZS5maWx0ZXJzO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBmaWx0ZXIgPSByZWZbal07XG4gICAgICAgICAgaWYgKGZpbHRlci50eXBlID09PSB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhZGRfZmlsdGVyOiBmdW5jdGlvbihydWxlLCB0eXBlKSB7XG4gICAgICAgIHZhciBmaWx0ZXIsIGlwX3Byb3RvY29sX2ZpbHRlciwgaXNfdGNwX3VkcDtcbiAgICAgICAgZmlsdGVyID0ge1xuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAnSVBfcHJvdG9jb2xfc291cmNlJzpcbiAgICAgICAgICBjYXNlICdJUF9wcm90b2NvbF9kZXN0aW5hdGlvbic6XG4gICAgICAgICAgICBpZiAoISRzY29wZS5SVUxFLmhhc19maWx0ZXIocnVsZSwgJ0lQX3Byb3RvY29sJykpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLlJVTEUuYWRkX2ZpbHRlcihydWxlLCAnSVBfcHJvdG9jb2wnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5hZGRfZmlsdGVyKHJ1bGUsIHR5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KS5kZWxheSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlwX3Byb3RvY29sX2ZpbHRlciA9ICRzY29wZS5SVUxFLmdldF9maWx0ZXIocnVsZSwgJ0lQX3Byb3RvY29sJyk7XG4gICAgICAgICAgICAgIGlzX3RjcF91ZHAgPSAkc2NvcGUucG9ydF9pcF9wcm90b2NvbHMuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC5rZXkgPT09IGlwX3Byb3RvY29sX2ZpbHRlci52YWx1ZTtcbiAgICAgICAgICAgICAgfSkubm90X2VtcHR5KCk7XG4gICAgICAgICAgICAgIGlmICghaXNfdGNwX3VkcCkge1xuICAgICAgICAgICAgICAgIGlwX3Byb3RvY29sX2ZpbHRlci52YWx1ZSA9ICRzY29wZS5wb3J0X2lwX3Byb3RvY29sc1swXS5rZXk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2V0aGVybmV0X3Byb3RvY29sJzpcbiAgICAgICAgICAgIGZpbHRlci52YWx1ZSA9IEVudW1zLkFDTF9GaWx0ZXIuZXRoZXJuZXRfcHJvdG9jb2wudmFsdWVbXCJkZWZhdWx0XCJdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnSVBfcHJvdG9jb2wnOlxuICAgICAgICAgICAgZmlsdGVyLnZhbHVlID0gRW51bXMuQUNMX0ZpbHRlci5JUF9wcm90b2NvbC52YWx1ZVtcImRlZmF1bHRcIl07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdMZXZlbDRfZGF0YSc6XG4gICAgICAgICAgICBmaWx0ZXIuJCRzaG93X21hc2sgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbXVsdGlfSVBfYWRkcmVzcyc6XG4gICAgICAgICAgICAkc2NvcGUuUlVMRS5yZW1vdmVfZmlsdGVyKHJ1bGUsICdzb3VyY2VfSVBfYWRkcmVzcycpO1xuICAgICAgICAgICAgJHNjb3BlLlJVTEUucmVtb3ZlX2ZpbHRlcihydWxlLCAnZGVzdGluYXRpb25fSVBfYWRkcmVzcycpO1xuICAgICAgICB9XG4gICAgICAgIGZpbHRlci5tYXNrID0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmRlZmF1bHRfbWFzayh0eXBlKTtcbiAgICAgICAgcnVsZS5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICAgICAgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLnNvcnQocnVsZS5maWx0ZXJzKTtcbiAgICAgICAgcnVsZS5maWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oYV9maWx0ZXIsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGFfZmlsdGVyID09PSBmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnNjcm9sbF90byA9IGpRdWVyeSgnLnJ1bGVfZmlsdGVyX2xpc3RfaXRlbVtkYXRhLWluZGV4PScgKyBpbmRleCArICddJylbMF07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuZGVsYXkoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLmNoYW5nZWQocnVsZSk7XG4gICAgICB9LFxuICAgICAgZ2V0X2ZpbHRlcjogZnVuY3Rpb24ocnVsZSwgZmlsdGVyX3R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuZmlsdGVycy5maWx0ZXIoZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbHRlci50eXBlID09PSBmaWx0ZXJfdHlwZTtcbiAgICAgICAgfSlbMF07XG4gICAgICB9LFxuICAgICAgcmVtb3ZlX2ZpbHRlcjogZnVuY3Rpb24ocnVsZSwgZmlsdGVyKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICAgICAgICBmaWx0ZXIgPSAkc2NvcGUuUlVMRS5nZXRfZmlsdGVyKHJ1bGUsIGZpbHRlcik7XG4gICAgICAgICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChmaWx0ZXIudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ0lQX3Byb3RvY29sX3NvdXJjZSc6XG4gICAgICAgICAgY2FzZSAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nOlxuICAgICAgICAgICAgcnVsZS5maWx0ZXJzLnJlbW92ZSgkc2NvcGUuUlVMRS5nZXRfZmlsdGVyKHJ1bGUsICdJUF9wcm90b2NvbCcpKTtcbiAgICAgICAgfVxuICAgICAgICBydWxlLmZpbHRlcnMucmVtb3ZlKGZpbHRlcik7XG4gICAgICAgIHJldHVybiAkc2NvcGUuUlVMRS5jaGFuZ2VkKHJ1bGUpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbl9jaGFuZ2VkOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICRzY29wZS5SVUxFLmFkZF9vcl9yZW1vdmVfaGFzaGluZ19wcm9maWxlKHJ1bGUpO1xuICAgICAgICAkc2NvcGUuUlVMRS5oYXNoaW5nX3Byb2ZpbGVfY2hhbmdlZChydWxlKTtcbiAgICAgICAgc3dpdGNoIChydWxlLmFjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ3JlZGlyZWN0JzpcbiAgICAgICAgICAgIGlmIChydWxlLm91dHB1dHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBTdGF0dXMuaW5mbyh0cmFuc2xhdGUoJ3BhZ2Uucm91dGluZy5ydWxlLmVycm9yLnJlZGlyZWN0aW5nX3RvX3NldmVyYWxfcG9ydHNfaXNfYmFsYW5jaW5nJykpO1xuICAgICAgICAgICAgICBydWxlLmFjdGlvbiA9ICdiYWxhbmNlJztcbiAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLmFjdGlvbl9jaGFuZ2VkKHJ1bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6XG4gICAgICAgICAgICBydWxlLm91dHB1dHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChPYmplY3QuZ2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAkc2NvcGUuUlVMRS5kZXNlbGVjdF9hbGwoKTtcbiAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLnNlbGVjdChydWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGltcGxpZXNfZGVlcF9pbnNwZWN0aW9uOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHZhciBmaWx0ZXIsIGosIGxlbiwgcmVmO1xuICAgICAgICByZWYgPSBydWxlLmZpbHRlcnM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGZpbHRlciA9IHJlZltqXTtcbiAgICAgICAgICBpZiAoZmlsdGVyLnR5cGUgPT09ICdMZXZlbDRfZGF0YScpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgJHNjb3BlLkZJTFRFUiA9IHtcbiAgICAgIGlkZW50aXR5X21hc2s6IGZ1bmN0aW9uKGZpbHRlcl90eXBlKSB7XG4gICAgICAgIHJldHVybiBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaWRlbnRpdHlfbWFzayhFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlcl90eXBlXSk7XG4gICAgICB9LFxuICAgICAgaXNfZGVmYXVsdF9tYXNrOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIERldmljZV9yb3V0aW5nLkZpbHRlci5pc19kZWZhdWx0X21hc2soZmlsdGVyKTtcbiAgICAgIH0sXG4gICAgICBjb3JyZWN0X2Zyb21fdG9fdmFsdWVzOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgdmFyIHRlbXBvcmFyeTtcbiAgICAgICAgaWYgKChmaWx0ZXIudG9fdmFsdWUgPT0gbnVsbCkgfHwgKGZpbHRlci52YWx1ZSA9PSBudWxsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsdGVyLnRvX3ZhbHVlID09PSAnJykge1xuICAgICAgICAgIGRlbGV0ZSBmaWx0ZXIudG9fdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbHRlci50b192YWx1ZSA8IGZpbHRlci52YWx1ZSkge1xuICAgICAgICAgIHRlbXBvcmFyeSA9IGZpbHRlci50b192YWx1ZTtcbiAgICAgICAgICBmaWx0ZXIudG9fdmFsdWUgPSBmaWx0ZXIudmFsdWU7XG4gICAgICAgICAgZmlsdGVyLnZhbHVlID0gdGVtcG9yYXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci50b192YWx1ZSA9PT0gZmlsdGVyLnZhbHVlKSB7XG4gICAgICAgICAgZGVsZXRlIGZpbHRlci50b192YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsdGVyLnRvX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVyLiQkaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlzX3VzZWRfaW5fcnVsZTogZnVuY3Rpb24ocnVsZSwgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihmaWx0ZXJfdHlwZSkge1xuICAgICAgICAgIHJldHVybiAoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgcmVmID0gcnVsZS5maWx0ZXJzO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIGZpbHRlciA9IHJlZltqXTtcbiAgICAgICAgICAgICAgaWYgKGZpbHRlci50eXBlID09PSBmaWx0ZXJfdHlwZS5rZXkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfSkoKSkubm90X2VtcHR5KCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgICAkc2NvcGUudmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlcnJvciwgZXJyb3JzLCBqLCBsZW4sIHJlZiwgcnVsZTtcbiAgICAgIGVycm9ycyA9IGZhbHNlO1xuICAgICAgcmVmID0gTW9kZWwucnVsZXM7XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgcnVsZSA9IHJlZltqXTtcbiAgICAgICAgaWYgKCFydWxlLmVuYWJsZWQpIHtcbiAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnZXJyb3InLCBmYWxzZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yJywgZmFsc2UpO1xuICAgICAgICBlcnJvciA9ICRzY29wZS5SVUxFLnZhbGlkYXRlKHJ1bGUpO1xuICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvci4nICsgZXJyb3IsIHRydWUpO1xuICAgICAgICAgIGlmICghZXJyb3JzKSB7XG4gICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2Nyb2xsX3RvJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgZXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfTtcbiAgICAkc2NvcGUuaW50ZXJhY3RpdmVfdmFsaWRhdGlvbiA9IGZ1bmN0aW9uKCkge307XG4gICAgJHNjb3BlLnNob3dfcnVsZV9maWx0ZXIgPSBmdW5jdGlvbihydWxlLCBmaWx0ZXIpIHtcbiAgICAgIHN3aXRjaCAoZmlsdGVyLnR5cGUgfHwgZmlsdGVyLmtleSkge1xuICAgICAgICBjYXNlICdJUF9wcm90b2NvbCc6XG4gICAgICAgICAgcmV0dXJuIHJ1bGUuZmlsdGVycy5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHgudHlwZSA9PT0gJ0lQX3Byb3RvY29sX3NvdXJjZScgfHwgeC50eXBlID09PSAnSVBfcHJvdG9jb2xfZGVzdGluYXRpb24nO1xuICAgICAgICAgIH0pLmlzX2VtcHR5KCk7XG4gICAgICAgIGNhc2UgJ3NvdXJjZV9JUF9hZGRyZXNzJzpcbiAgICAgICAgY2FzZSAnZGVzdGluYXRpb25fSVBfYWRkcmVzcyc6XG4gICAgICAgICAgcmV0dXJuIHJ1bGUuZmlsdGVycy5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHgudHlwZSA9PT0gJ211bHRpX0lQX2FkZHJlc3MnO1xuICAgICAgICAgIH0pLmlzX2VtcHR5KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlcnJvcnMsIGosIGxlbiwgcmVmLCBydWxlO1xuICAgICAgaWYgKCEkc2NvcGUuZXhpdF9wb3J0c19lZGl0aW5nX21vZGUoKSkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnN0YXR1cy5lcnJvcnNfaW5fcnVsZXMnKSk7XG4gICAgICB9XG4gICAgICAkc2NvcGUuZm9ybS5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcuc3RhdHVzLmFwcGx5aW5nX3J1bGVzJykpO1xuICAgICAgcmVmID0gTW9kZWwucnVsZXM7XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgcnVsZSA9IHJlZltqXTtcbiAgICAgICAgcnVsZS5maWx0ZXJzID0gcnVsZS5maWx0ZXJzLmZpbHRlcihmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVyLnR5cGU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZXJyb3JzID0gJHNjb3BlLnZhbGlkYXRlKCk7XG4gICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcuc3RhdHVzLmVycm9yc19pbl9ydWxlcycpKTtcbiAgICAgIH1cbiAgICAgICRzY29wZS5idXN5ID0gdHJ1ZTtcbiAgICAgIHJldHVybiBQcm9taXNlcy5wcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5Sb3V0aW5nLnNhdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUuYXBwbHlfcnVsZXMoKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUuYW55X2NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gU3RhdHVzLmlkbGUodHJhbnNsYXRlKCdwYWdlLnJvdXRpbmcuc3RhdHVzLnJ1bGVzX3NhdmVkJykpO1xuICAgICAgICB9KVtcImNhdGNoXCJdKFByb21pc2VzLm5vdF9uYXZpZ2F0aW5nX2F3YXksIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFwaS5pc19hcGlfZXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChSb3V0aW5nX21vZGVsX2Vycm9ycy5pcyhlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoUm91dGluZ19tb2RlbF9lcnJvcnMubWVzc2FnZShlcnJvcikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUuYnVzeSA9IGZhbHNlO1xuICAgICAgICB9KS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmFwcGx5X3J1bGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX2ZpbmFsbHk7XG4gICAgICAkc2NvcGUuYXBwbHlpbmdfcnVsZXMgPSB0cnVlO1xuICAgICAgX2ZpbmFsbHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLmFwcGx5aW5nX3J1bGVzID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gJHNjb3BlLlJVTEUucnVsZXNfY2hhbmdlZCgpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBEZXZpY2UucmVmcmVzaF9wb3J0cygpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEZXZpY2Uuc2V0X3VwX3JvdXRpbmcoTW9kZWwucnVsZXMsIE1vZGVsLnBvcnRzLCBNb2RlbC5qb2ludF9wb3J0cyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2ZpbmFsbHkoKTtcbiAgICAgIH0pW1wiY2F0Y2hcIl0oUHJvbWlzZXMubm90X25hdmlnYXRpbmdfYXdheSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgX2ZpbmFsbHkoKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5leGl0X3BvcnRzX2VkaXRpbmdfbW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRzY29wZS5lZGl0X3BvcnRzKSB7XG4gICAgICAgIHJldHVybiAkc2NvcGUudG9nZ2xlX2VkaXRfcG9ydHMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgJHNjb3BlLnRvZ2dsZV9lZGl0X3BvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXJyLCBlcnJvciwgZXJyb3IxLCBlcnJvcjIsIGlucHV0LCBpbnB1dHMsIGosIGssIGwsIGxlbiwgbGVuMSwgbGVuMiwgbGVuMywgbGVuNCwgbGVuNSwgbSwgbiwgbywgb3V0cHV0LCBvdXRwdXRzLCBwb3J0LCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJ1bGU7XG4gICAgICBpZiAocnVsZSA9ICRzY29wZS5SVUxFLnNlbGVjdGVkKCkpIHtcbiAgICAgICAgaWYgKCEkc2NvcGUuZWRpdF9wb3J0cykge1xuICAgICAgICAgICRzY29wZS5SVUxFLnJlZnJlc2hfaW5wdXRfdGV4dChydWxlKTtcbiAgICAgICAgICAkc2NvcGUuUlVMRS5yZWZyZXNoX291dHB1dF90ZXh0KHJ1bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnZXJyb3IuJyArIGVycm9yLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICghZXJyb3JzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBPYmplY3Quc2V0KCRzY29wZS52aWV3LnJ1bGVzLCBydWxlLmlkLCAnc2Nyb2xsX3RvJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKCRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLmlucHV0c190ZXh0LnRyaW0oKS5ub3RfZW1wdHkoKSkge1xuICAgICAgICAgICAgaW5wdXRzID0gJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0uaW5wdXRzX3RleHQuc3BsaXQoL1tcXHMsXFxuXSsvKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlucHV0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgaiwgbGVuLCByZXN1bHRzO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBpbnB1dHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXRzW2pdO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFBvcnRfbnVtZXJhdGlvbi5ieV9uYW1lKGlucHV0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICByZWYgPSBNb2RlbC5wb3J0cztcbiAgICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgcG9ydCA9IHJlZltqXTtcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkSW4nLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IGlucHV0cy5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0c1trXTtcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgaW5wdXQuaWQsICdzZWxlY3RlZEluJywgdHJ1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcnVsZS5pbnB1dHMgPSBpbnB1dHM7XG4gICAgICAgICAgICAgICRzY29wZS5zb3J0X2J5X2lkKHJ1bGUuaW5wdXRzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgICAgICBlcnIgPSBlcnJvcjE7XG4gICAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdlcnJvci5pbnZhbGlkX2lucHV0c190ZXh0JywgdHJ1ZSk7XG4gICAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzY3JvbGxfdG8nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmMSA9IE1vZGVsLnBvcnRzO1xuICAgICAgICAgICAgZm9yIChsID0gMCwgbGVuMiA9IHJlZjEubGVuZ3RoOyBsIDwgbGVuMjsgbCsrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWYxW2xdO1xuICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkSW4nLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlLmlucHV0cyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHNjb3BlLnZpZXcucnVsZXNbcnVsZS5pZF0ub3V0cHV0c190ZXh0LnRyaW0oKS5ub3RfZW1wdHkoKSkge1xuICAgICAgICAgICAgb3V0cHV0cyA9ICRzY29wZS52aWV3LnJ1bGVzW3J1bGUuaWRdLm91dHB1dHNfdGV4dC5zcGxpdCgvW1xccyxcXG5dKy8pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgb3V0cHV0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuMywgbSwgcmVzdWx0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChtID0gMCwgbGVuMyA9IG91dHB1dHMubGVuZ3RoOyBtIDwgbGVuMzsgbSsrKSB7XG4gICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXRzW21dO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFBvcnRfbnVtZXJhdGlvbi5ieV9uYW1lKG91dHB1dCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgcmVmMiA9IE1vZGVsLnBvcnRzO1xuICAgICAgICAgICAgICBmb3IgKG0gPSAwLCBsZW4zID0gcmVmMi5sZW5ndGg7IG0gPCBsZW4zOyBtKyspIHtcbiAgICAgICAgICAgICAgICBwb3J0ID0gcmVmMlttXTtcbiAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAobiA9IDAsIGxlbjQgPSBvdXRwdXRzLmxlbmd0aDsgbiA8IGxlbjQ7IG4rKykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dHNbbl07XG4gICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIG91dHB1dC5pZCwgJ3NlbGVjdGVkT3V0JywgdHJ1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcnVsZS5vdXRwdXRzID0gb3V0cHV0cztcbiAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnlfaWQocnVsZS5pbnB1dHMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgICAgICAgIGVyciA9IGVycm9yMjtcbiAgICAgICAgICAgICAgT2JqZWN0LnNldCgkc2NvcGUudmlldy5ydWxlcywgcnVsZS5pZCwgJ2Vycm9yLmludmFsaWRfb3V0cHV0c190ZXh0JywgdHJ1ZSk7XG4gICAgICAgICAgICAgIE9iamVjdC5zZXQoJHNjb3BlLnZpZXcucnVsZXMsIHJ1bGUuaWQsICdzY3JvbGxfdG8nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmMyA9IE1vZGVsLnBvcnRzO1xuICAgICAgICAgICAgZm9yIChvID0gMCwgbGVuNSA9IHJlZjMubGVuZ3RoOyBvIDwgbGVuNTsgbysrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWYzW29dO1xuICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVsZS5vdXRwdXRzID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkc2NvcGUuZWRpdF9wb3J0cyA9ICEkc2NvcGUuZWRpdF9wb3J0cztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgJHNjb3BlLnJlZnJlc2hfZGV2aWNlX3BvcnRfc3RhdHVzZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBqLCBrLCBsZW4sIGxlbjEsIHBvcnQsIHJlZiwgcmVmMSwgcmVzdWx0cywgcnVsZTtcbiAgICAgIHJlZiA9IE1vZGVsLnJ1bGVzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHJ1bGUgPSByZWZbal07XG4gICAgICAgIHJlZjEgPSBydWxlLmlucHV0cztcbiAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZjFba107XG4gICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdpbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGwsIGxlbjIsIHJlZjIsIHJlc3VsdHMxO1xuICAgICAgICAgIHJlZjIgPSBydWxlLm91dHB1dHM7XG4gICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4yID0gcmVmMi5sZW5ndGg7IGwgPCBsZW4yOyBsKyspIHtcbiAgICAgICAgICAgIHBvcnQgPSByZWYyW2xdO1xuICAgICAgICAgICAgcmVzdWx0czEucHVzaChPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ291dCcsIHRydWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICB9KSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG4gICAgJHNjb3BlLm1heF9kaWdpdHNfZm9yX2JpdF9jb3VudCA9IGZ1bmN0aW9uKGJpdF9jb3VudCkge1xuICAgICAgdmFyIG1heF9udW1iZXI7XG4gICAgICBtYXhfbnVtYmVyID0gTWF0aC5wb3coMiwgYml0X2NvdW50ICsgMSkgLSAxO1xuICAgICAgcmV0dXJuIFN0cmluZyhtYXhfbnVtYmVyKS5sZW5ndGg7XG4gICAgfTtcbiAgICAkc2NvcGUuJG9uKCdwb3J0X3JlbW92ZWQnLCBmdW5jdGlvbihldmVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuICRzY29wZS5SVUxFLmFkZF9vcl9yZW1vdmVfaGFzaGluZ19wcm9maWxlKG9wdGlvbnMucnVsZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICRzY29wZS5pbml0aWFsaXplX3BhZ2Vfd2l0aChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXksIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgdmFsdWU7XG4gICAgICAkc2NvcGUuR3JhcGggPSBHcmFwaDtcbiAgICAgIEdyYXBoLnNob3cgPSBmYWxzZTtcbiAgICAgIEdyYXBoLmVuYWJsZSA9IHRydWU7XG4gICAgICAkc2NvcGUudmFsaWRhdGlvbl9lcnJvcnMgPSB7fTtcbiAgICAgICRzY29wZS5hbnlfY2hhbmdlcyA9IGZhbHNlO1xuICAgICAgJHNjb3BlLnZpZXcgPSBhbmd1bGFyLmV4dGVuZCh7XG4gICAgICAgIHJ1bGVzOiB7fVxuICAgICAgfSwgJHNjb3BlLnZpZXcpO1xuICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9IHtcbiAgICAgICAgcnVsZToge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgICBmaWx0ZXJzOiBbXSxcbiAgICAgICAgICBhY3Rpb246ICdiYWxhbmNlJyxcbiAgICAgICAgICBoYXNoaW5nX3Byb2ZpbGU6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgICRzY29wZS5maWx0ZXJfdHlwZXMgPSBbXTtcbiAgICAgIHJlZiA9IEVudW1zLkFDTF9GaWx0ZXI7XG4gICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgJHNjb3BlLmZpbHRlcl90eXBlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBsYWJlbDogdHJhbnNsYXRlKFwiQUNMLnJ1bGUuZmlsdGVyLnR5cGUuXCIgKyBrZXkpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmV0aGVybmV0X3Byb3RvY29scyA9IFtdO1xuICAgICAgcmVmMSA9IEVudW1zLkFDTF9GaWx0ZXIuZXRoZXJuZXRfcHJvdG9jb2wudmFsdWUuZnJvbTtcbiAgICAgIGZvciAoa2V5IGluIHJlZjEpIHtcbiAgICAgICAgdmFsdWUgPSByZWYxW2tleV07XG4gICAgICAgICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMucHVzaCh7XG4gICAgICAgICAga2V5OiB2YWx1ZSxcbiAgICAgICAgICBsYWJlbDoga2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmV0aGVybmV0X3Byb3RvY29scyA9ICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuICFbJ1RDUCcsICdVRFAnXS5oYXMoeC5rZXkpO1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICAgICRzY29wZS5ldGhlcm5ldF9wcm90b2NvbHMudW5zaGlmdCh7XG4gICAgICAgIGtleTogJycsXG4gICAgICAgIGxhYmVsOiAn4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCUJ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuZXRoZXJuZXRfcHJvdG9jb2xzLnVuc2hpZnQoe1xuICAgICAgICBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuZXRoZXJuZXRfcHJvdG9jb2wudmFsdWUuZnJvbS5JUCxcbiAgICAgICAgbGFiZWw6ICdJUCdcbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmlwX3Byb3RvY29scyA9IFtdO1xuICAgICAgcmVmMiA9IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbTtcbiAgICAgIGZvciAoa2V5IGluIHJlZjIpIHtcbiAgICAgICAgdmFsdWUgPSByZWYyW2tleV07XG4gICAgICAgICRzY29wZS5pcF9wcm90b2NvbHMucHVzaCh7XG4gICAgICAgICAga2V5OiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLnZhbHVlLmZyb21ba2V5XSxcbiAgICAgICAgICBsYWJlbDoga2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgJHNjb3BlLmlwX3Byb3RvY29scyA9ICRzY29wZS5pcF9wcm90b2NvbHMuZmlsdGVyKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuICFbJ0lQdjQnXS5oYXMoeC5rZXkpO1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICBpZiAoYS5sYWJlbCA+IGIubGFiZWwpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICAgICRzY29wZS5pcF9wcm90b2NvbHMudW5zaGlmdCh7XG4gICAgICAgIGtleTogJycsXG4gICAgICAgIGxhYmVsOiAn4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCUJ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnVuc2hpZnQoe1xuICAgICAgICBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5VRFAsXG4gICAgICAgIGxhYmVsOiAnVURQJ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUuaXBfcHJvdG9jb2xzLnVuc2hpZnQoe1xuICAgICAgICBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5UQ1AsXG4gICAgICAgIGxhYmVsOiAnVENQJ1xuICAgICAgfSk7XG4gICAgICAkc2NvcGUucG9ydF9pcF9wcm90b2NvbHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5UQ1AsXG4gICAgICAgICAgbGFiZWw6ICdUQ1AnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBrZXk6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2wudmFsdWUuZnJvbS5VRFAsXG4gICAgICAgICAgbGFiZWw6ICdVRFAnXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICAkc2NvcGUucnVsZV9hY3Rpb25zID0gWydiYWxhbmNlJywgJ3JlZGlyZWN0JywgJ21pcnJvcicsICdkcm9wJ107XG4gICAgICAkc2NvcGUucnVsZV9hY3Rpb25fdGl0bGVzID0ge307XG4gICAgICByZWYzID0gRW51bXMuQUNMX2FjdGlvbnM7XG4gICAgICBmb3IgKGtleSBpbiByZWYzKSB7XG4gICAgICAgIHZhbHVlID0gcmVmM1trZXldO1xuICAgICAgICAkc2NvcGUucnVsZV9hY3Rpb25fdGl0bGVzW2tleV0gPSB0cmFuc2xhdGUoJ0FDTC5ydWxlLmFjdGlvbi4nICsga2V5KTtcbiAgICAgIH1cbiAgICAgICRzY29wZS51bnNlbGVjdF9hbGwoKTtcbiAgICAgIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgncGFnZS5yb3V0aW5nLnN0YXR1cy5yZWFkaW5nX3J1bGVzX2Zyb21fZGV2aWNlJykpO1xuICAgICAgcmV0dXJuIFByb21pc2VzLnByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEZXZpY2Vfcm91dGluZy5MQkcuSGFzaF9wcm9maWxlLmZldGNoKCkudGhlbihmdW5jdGlvbihoYXNoaW5nX3Byb2ZpbGUpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnRlbXBsYXRlcy5ydWxlLmhhc2hpbmdfcHJvZmlsZSA9IGhhc2hpbmdfcHJvZmlsZS5pZDtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5yZWFkX2xvY2FsX3JvdXRpbmdfY29uZmlndXJhdGlvbigpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5SVUxFLmluaXRpYWxpemUoKTtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLndhdGNoX3J1bGVzKCk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFN0YXR1cy5pZGxlKCk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oUHJvbWlzZXMubm90X25hdmlnYXRpbmdfYXdheSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAkc2NvcGUud2F0Y2hfcnVsZXMoKTtcbiAgICAgICAgICBpZiAoYXBpLmlzX2FwaV9lcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFJvdXRpbmdfbW9kZWxfZXJyb3JzLmlzKGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcihSb3V0aW5nX21vZGVsX2Vycm9ycy5tZXNzYWdlKGVycm9yKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KVtcImZpbmFsbHlcIl0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLiRvbignY29uZmlndXJhdGlvbl9sb2FkZWQnLCBmdW5jdGlvbihydWxlcykge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5SVUxFLnJ1bGVzX2NoYW5nZWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSkuJGFwcGx5KCRzY29wZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIndXNlIHN0cmljdCdcblxuYXBwLmNvbnRyb2xsZXIgXCJTZXR0aW5nc0N0cmxcIiwgKCRzY29wZSwgJHVwbG9hZCwgYXBpLCBTdGF0dXMsIENvbmZpZ3VyYXRpb24sIERldmljZSwgR1VJLCBNb2RlbCwgdHJhbnNsYXRlLCBQcm9taXNlcykgLT5cblxuICAkc2NvcGUudmFsaWRhdGUgPSAtPlxuICAgIHJldHVybiBub3QgJHNjb3BlLnNldHRpbmdzX2Zvcm0uJGludmFsaWRcblxuICAkc2NvcGUuc2F2ZSA9IChjYWxsYmFjaykgLT5cbiAgICAjIGlmICRzY29wZS5zZXR0aW5nc19mb3JtLnBhc3N3b3JkXG5cbiAgICBpZiBub3QgJHNjb3BlLnZhbGlkYXRlKClcbiAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLmVycm9yLmZvcm1fZXJyb3JzJykpXG5cbiAgICAkc2NvcGUuYnVzeSA9IHllc1xuXG4gICAgIyDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC+0YLQvNC10L3RiyDRjdGC0L7QuSDRhtC10L/QvtGH0LrQuFByb21pc2Un0L7QsiDQv9GA0Lgg0YPRhdC+0LTQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YHQviDRgdGC0YDQsNC90LjRhtGLXG4gICAgUHJvbWlzZXMucHJvbWlzZSAtPlxuICAgICAgQ29uZmlndXJhdGlvbi5OZXR3b3JrLnNhdmUoKVxuXG4gICAgICAudGhlbiAtPlxuICAgICAgICAkc2NvcGUucmVib290aW5nID0geWVzXG4gICAgICAgIERldmljZS5yZXN0YXJ0KClcblxuICAgICAgLmZpbmFsbHkgLT5cbiAgICAgICAgJHNjb3BlLmJ1c3kgPSBub1xuXG4gICAgICAuJGFwcGx5KCRzY29wZSlcblxuICAkc2NvcGUuY2hhbmdlX3Bhc3N3b3JkID0gLT5cbiAgICAkc2NvcGUuYnVzeSA9IHllc1xuXG4gICAgIyDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC+0YLQvNC10L3RiyDRjdGC0L7QuSDRhtC10L/QvtGH0LrQuFByb21pc2Un0L7QsiDQv9GA0Lgg0YPRhdC+0LTQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YHQviDRgdGC0YDQsNC90LjRhtGLXG4gICAgUHJvbWlzZXMucHJvbWlzZSAtPlxuICAgICAgYXBpLmNhbGwoJ2F1dGgucGFzc3dvcmRfbWF0Y2hlcycsIHsgcGFzc3dvcmQ6ICRzY29wZS5jdXJyZW50X3Bhc3N3b3JkIH0pLnRoZW4gKG1hdGNoZXMpIC0+XG4gICAgICAgIGlmIG5vdCBtYXRjaGVzXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRyYW5zbGF0ZSgnZXJyb3Iud3JvbmdfcGFzc3dvcmQnKSlcblxuICAgICAgICBDb25maWd1cmF0aW9uLlVzZXJzLmNoYW5nZV9wYXNzd29yZCgkc2NvcGUubmV3X3Bhc3N3b3JkKVxuXG4gICAgICAudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICBpZiByZXN1bHQgIT0gbm9cbiAgICAgICAgICBTdGF0dXMuaW5mbyh0cmFuc2xhdGUoJ3BhZ2Uuc2V0dGluZ3MucGFzc3dvcmRfY2hhbmdlZCcpKVxuXG4gICAgICAuZmluYWxseSAtPlxuICAgICAgICAkc2NvcGUuYnVzeSA9IG5vXG5cbiAgICAgIC4kYXBwbHkoJHNjb3BlKVxuXG4gICRzY29wZS5vbl91cGxvYWRfZmlybXdhcmUgPSAoJGZpbGVzKSAtPlxuXG4gICAgJHNjb3BlLnNhZmVBcHBseSAtPlxuICAgICAgJHNjb3BlLnVwbG9hZGluZ19maXJtd2FyZSA9IHllc1xuICAgICAgU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy51cGxvYWRpbmdfZmlybXdhcmUnKSlcblxuICAgIGZpbGUgPSAkZmlsZXNbMF1cbiAgICB1cGxvYWQgPSBudWxsXG5cbiAgICAjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0YtcbiAgICBQcm9taXNlcy5wcm9taXNlIC0+XG4gICAgICBuZXcgUHJvbWlzZSAocmVzb2x2ZSwgcmVqZWN0KSAtPlxuXG4gICAgICAgIHVwbG9hZCA9ICR1cGxvYWQudXBsb2FkKHtcbiAgICAgICAgICB1cmw6ICcvdXBkYXRlX2Zpcm13YXJlJyxcbiAgICAgICAgICBkYXRhOiB7IHBhcmFtZXRlcjogJHNjb3BlLnBhcmFtZXRlciB9LFxuICAgICAgICAgIGZpbGU6IGZpbGVcblxuICAgICAgICAgICMgIG9yIGZpbGU6IGxpc3Qgb2YgZmlsZXMgKCRmaWxlcykgZm9yIGh0bWw1IG9ubHlcbiAgICAgICAgICAjIG1ldGhvZDogJ1BPU1QnIG9yICdQVVQnLFxuICAgICAgICAgICMgaGVhZGVyczogeydoZWFkZXIta2V5JzogJ2hlYWRlci12YWx1ZSd9LFxuICAgICAgICAgICMgd2l0aENyZWRlbnRpYWxzOiB0cnVlLFxuICAgICAgICAgICMgZmlsZU5hbWU6ICdkb2MuanBnJyBvciBbJzEuanBnJywgJzIuanBnJywgLi4uXSAjICB0byBtb2RpZnkgdGhlIG5hbWUgb2YgdGhlIGZpbGUocylcbiAgICAgICAgICAjICBjdXN0b21pemUgZmlsZSBmb3JtRGF0YSBuYW1lICgnQ29udGVudC1EaXNwb3NpdGlvbicpLCBzZXJ2ZXIgc2lkZSBmaWxlIHZhcmlhYmxlIG5hbWUuXG4gICAgICAgICAgIyBmaWxlRm9ybURhdGFOYW1lOiBteUZpbGUsICMgb3IgYSBsaXN0IG9mIG5hbWVzIGZvciBtdWx0aXBsZSBmaWxlcyAoaHRtbDUpLiBEZWZhdWx0IGlzICdmaWxlJ1xuICAgICAgICAgICMgIGN1c3RvbWl6ZSBob3cgZGF0YSBpcyBhZGRlZCB0byBmb3JtRGF0YS4gU2VlICM0MCNpc3N1ZWNvbW1lbnQtMjg2MTIwMDAgZm9yIHNhbXBsZSBjb2RlXG4gICAgICAgICAgIyBmb3JtRGF0YUFwcGVuZGVyOiBmdW5jdGlvbihmb3JtRGF0YSwga2V5LCB2YWwpe31cbiAgICAgICAgfSlcblxuICAgICAgICAucHJvZ3Jlc3MgKGV2ZW50KSAtPlxuICAgICAgICAgICMgY29uc29sZS5sb2coJ3BlcmNlbnQ6ICcgKyBwYXJzZUludCgxMDAuMCAqIGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsKSlcblxuICAgICAgICAgIGlmIGV2ZW50LmxvYWRlZCA9PSBldmVudC50b3RhbFxuICAgICAgICAgICAgU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy52YWxpZGF0aW5nX2Zpcm13YXJlJykpXG5cbiAgICAgICAgLnN1Y2Nlc3MgKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSAtPlxuXG4gICAgICAgICAgaWYgZGF0YS5lcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSB8fCBkYXRhLmVycm9yLmNvZGUpXG5cbiAgICAgICAgICBpZiBkYXRhLnJlc3VsdCAhPSAwXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVyYXRpb24gcmVzdWx0OiAje2RhdGEucmVzdWx0fVwiKVxuXG4gICAgICAgICAgIyBTdGF0dXMuYnVzeSgn0JjQtNGR0YIg0L7QsdC90L7QstC70LXQvdC40LUg0L/RgNC+0YjQuNCy0LrQuCDRg9GB0YLRgNC+0LnRgdGC0LLQsC4g0JbQtNC40YLQtS4uLicpXG4gICAgICAgICAgcmVzb2x2ZShHVUkud2FpdF9mb3JfY29ubmVjdGlvbigwLCB0cmFuc2xhdGUoJ3BhZ2Uuc2V0dGluZ3Muc3RhdHVzLnVwZGF0aW5nX2Zpcm13YXJlJyksIHsgdG86ICdkZXZpY2UnLCBpbmZpbml0ZTogeWVzLCBkZWxheTogOCB9KSlcblxuICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpXG4gICAgICAgICAgU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgncGFnZS5zZXR0aW5ncy5zdGF0dXMuZmlybXdhcmVfdXBkYXRlX2ZhaWxlZCcpKVxuICAgICAgICAgIHJlamVjdChlcnJvcilcblxuICAgICAgLmNhbmNlbGxhYmxlKClcblxuICAgICAgLmNhdGNoKFByb21pc2VzLmlzX25hdmlnYXRpbmdfYXdheSwgKGVycm9yKSAtPlxuICAgICAgICB1cGxvYWQuYWJvcnQoKVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgKVxuXG4gICAgICAuZmluYWxseSAtPlxuICAgICAgICAkc2NvcGUudXBsb2FkaW5nX2Zpcm13YXJlID0gbm9cblxuICAgICAgLiRhcHBseSgkc2NvcGUpXG5cbiAgJHNjb3BlLm9uX3VwbG9hZF9saWNlbmNlID0gKCRmaWxlcykgLT5cblxuICAgICRzY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICRzY29wZS51cGxvYWRpbmdfbGljZW5jZSA9IHllc1xuICAgICAgU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy51cGxvYWRpbmdfbGljZW5zZScpKVxuXG4gICAgZmlsZSA9ICRmaWxlc1swXVxuICAgIHVwbG9hZCA9IG51bGxcblxuICAgICMg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQvtGC0LzQtdC90Ysg0Y3RgtC+0Lkg0YbQtdC/0L7Rh9C60LhQcm9taXNlJ9C+0LIg0L/RgNC4INGD0YXQvtC00LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGB0L4g0YHRgtGA0LDQvdC40YbRi1xuICAgIFByb21pc2VzLnByb21pc2UgLT5cbiAgICAgIG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpIC0+XG5cbiAgICAgICAgdXBsb2FkID0gJHVwbG9hZC51cGxvYWQoe1xuICAgICAgICAgIHVybDogJy91cGxvYWRfbGljZW5jZScsXG4gICAgICAgICAgZGF0YTogeyBwYXJhbWV0ZXI6ICRzY29wZS5wYXJhbWV0ZXIgfSxcbiAgICAgICAgICBmaWxlOiBmaWxlXG4gICAgICAgIH0pXG5cbiAgICAgICAgLnByb2dyZXNzIChldmVudCkgLT5cbiAgICAgICAgICAjIGNvbnNvbGUubG9nKCdwZXJjZW50OiAnICsgcGFyc2VJbnQoMTAwLjAgKiBldmVudC5sb2FkZWQgLyBldmVudC50b3RhbCkpXG5cbiAgICAgICAgICBpZiBldmVudC5sb2FkZWQgPT0gZXZlbnQudG90YWxcbiAgICAgICAgICAgIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgncGFnZS5zZXR0aW5ncy5zdGF0dXMudmFsaWRhdGluZ19saWNlbnNlJykpXG5cbiAgICAgICAgLnN1Y2Nlc3MgKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSAtPlxuXG4gICAgICAgICAgaWYgZGF0YS5lcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSB8fCBkYXRhLmVycm9yLmNvZGUpXG5cbiAgICAgICAgICBpZiBkYXRhLnJlc3VsdCAhPSAwXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVyYXRpb24gcmVzdWx0OiAje2RhdGEucmVzdWx0fVwiKVxuXG4gICAgICAgICAgcmVzb2x2ZShDb25maWd1cmF0aW9uLkRldmljZS5yZXNldCgpKVxuXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcilcbiAgICAgICAgICBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy5maXJtd2FyZV91cGRhdGVfZmFpbGVkJykpXG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuXG4gICAgICAuY2FuY2VsbGFibGUoKVxuXG4gICAgICAuY2F0Y2goUHJvbWlzZXMuaXNfbmF2aWdhdGluZ19hd2F5LCAoZXJyb3IpIC0+XG4gICAgICAgIHVwbG9hZC5hYm9ydCgpXG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICApXG5cbiAgICAgIC5maW5hbGx5IC0+XG4gICAgICAgICRzY29wZS51cGxvYWRpbmdfbGljZW5jZSA9IG5vXG5cbiAgICAgIC4kYXBwbHkoJHNjb3BlKVxuXG4gICMg0KHQsdGA0L7RgSDQstGB0LXRhSDQvdCw0YHRgtGA0L7QtdC6XG4gICRzY29wZS5yZXNldF9jb25maWd1cmF0aW9uID0gLT4gXG4gICAgIyDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINC+0YLQvNC10L3RiyDRjdGC0L7QuSDRhtC10L/QvtGH0LrQuFByb21pc2Un0L7QsiDQv9GA0Lgg0YPRhdC+0LTQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YHQviDRgdGC0YDQsNC90LjRhtGLXG4gICAgUHJvbWlzZXMucHJvbWlzZSAtPlxuICAgICAgQ29uZmlndXJhdGlvbi5yZXNldCgpXG5cbiAgIyBJbml0aWFsaXphdGlvblxuICAkc2NvcGUuaW5pdGlhbGl6ZV9wYWdlX3dpdGggLT5cbiAgICAjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGLINGN0YLQvtC5INGG0LXQv9C+0YfQutC4UHJvbWlzZSfQvtCyINC/0YDQuCDRg9GF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDRgdC+INGB0YLRgNCw0L3QuNGG0YtcbiAgICBQcm9taXNlcy5wcm9taXNlIC0+XG4gICAgICBDb25maWd1cmF0aW9uLk5ldHdvcmsubG9hZF9pbnRvX21vZGVsKClcblxuICAgICAgLnRoZW4gLT5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCAnbW9kZWwubmV0d29yay5kaGNwJywgKHZhbHVlKSAtPlxuICAgICAgICAgIGlmIHZhbHVlXG4gICAgICAgICAgICBNb2RlbC5uZXR3b3JrLmlwICAgICAgPSAkc2NvcGUuaW5pdGlhbF9uZXR3b3JrX3NldHRpbmdzLmlwXG4gICAgICAgICAgICBNb2RlbC5uZXR3b3JrLmdhdGV3YXkgPSAkc2NvcGUuaW5pdGlhbF9uZXR3b3JrX3NldHRpbmdzLmdhdGV3YXlcbiAgICAgICAgICAgIE1vZGVsLm5ldHdvcmsubWFzayAgICA9ICRzY29wZS5pbml0aWFsX25ldHdvcmtfc2V0dGluZ3MubWFza1xuXG4gICAgICAgICRzY29wZS5pbml0aWFsX25ldHdvcmtfc2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkoTW9kZWwubmV0d29yaylcblxuICAgICAgLiRhcHBseSgkc2NvcGUpIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFwcC5jb250cm9sbGVyKFwiU2V0dGluZ3NDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgJHVwbG9hZCwgYXBpLCBTdGF0dXMsIENvbmZpZ3VyYXRpb24sIERldmljZSwgR1VJLCBNb2RlbCwgdHJhbnNsYXRlLCBQcm9taXNlcykge1xuICAgICRzY29wZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICEkc2NvcGUuc2V0dGluZ3NfZm9ybS4kaW52YWxpZDtcbiAgICB9O1xuICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIGlmICghJHNjb3BlLnZhbGlkYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcih0cmFuc2xhdGUoJ3BhZ2Uuc2V0dGluZ3MuZXJyb3IuZm9ybV9lcnJvcnMnKSk7XG4gICAgICB9XG4gICAgICAkc2NvcGUuYnVzeSA9IHRydWU7XG4gICAgICByZXR1cm4gUHJvbWlzZXMucHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uTmV0d29yay5zYXZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUucmVib290aW5nID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gRGV2aWNlLnJlc3RhcnQoKTtcbiAgICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkc2NvcGUuYnVzeSA9IGZhbHNlO1xuICAgICAgICB9KS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLmNoYW5nZV9wYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmJ1c3kgPSB0cnVlO1xuICAgICAgcmV0dXJuIFByb21pc2VzLnByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbCgnYXV0aC5wYXNzd29yZF9tYXRjaGVzJywge1xuICAgICAgICAgIHBhc3N3b3JkOiAkc2NvcGUuY3VycmVudF9wYXNzd29yZFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1hdGNoZXMpIHtcbiAgICAgICAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0cmFuc2xhdGUoJ2Vycm9yLndyb25nX3Bhc3N3b3JkJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5Vc2Vycy5jaGFuZ2VfcGFzc3dvcmQoJHNjb3BlLm5ld19wYXNzd29yZCk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuaW5mbyh0cmFuc2xhdGUoJ3BhZ2Uuc2V0dGluZ3MucGFzc3dvcmRfY2hhbmdlZCcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLmJ1c3kgPSBmYWxzZTtcbiAgICAgICAgfSkuJGFwcGx5KCRzY29wZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgICRzY29wZS5vbl91cGxvYWRfZmlybXdhcmUgPSBmdW5jdGlvbigkZmlsZXMpIHtcbiAgICAgIHZhciBmaWxlLCB1cGxvYWQ7XG4gICAgICAkc2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUudXBsb2FkaW5nX2Zpcm13YXJlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgncGFnZS5zZXR0aW5ncy5zdGF0dXMudXBsb2FkaW5nX2Zpcm13YXJlJykpO1xuICAgICAgfSk7XG4gICAgICBmaWxlID0gJGZpbGVzWzBdO1xuICAgICAgdXBsb2FkID0gbnVsbDtcbiAgICAgIHJldHVybiBQcm9taXNlcy5wcm9taXNlKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIHVwbG9hZCA9ICR1cGxvYWQudXBsb2FkKHtcbiAgICAgICAgICAgIHVybDogJy91cGRhdGVfZmlybXdhcmUnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBwYXJhbWV0ZXI6ICRzY29wZS5wYXJhbWV0ZXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxlOiBmaWxlXG4gICAgICAgICAgfSkucHJvZ3Jlc3MoZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5sb2FkZWQgPT09IGV2ZW50LnRvdGFsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBTdGF0dXMuYnVzeSh0cmFuc2xhdGUoJ3BhZ2Uuc2V0dGluZ3Muc3RhdHVzLnZhbGlkYXRpbmdfZmlybXdhcmUnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSB8fCBkYXRhLmVycm9yLmNvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wZXJhdGlvbiByZXN1bHQ6IFwiICsgZGF0YS5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoR1VJLndhaXRfZm9yX2Nvbm5lY3Rpb24oMCwgdHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy51cGRhdGluZ19maXJtd2FyZScpLCB7XG4gICAgICAgICAgICAgIHRvOiAnZGV2aWNlJyxcbiAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgIGRlbGF5OiA4XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcik7XG4gICAgICAgICAgICBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy5maXJtd2FyZV91cGRhdGVfZmFpbGVkJykpO1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhbmNlbGxhYmxlKClbXCJjYXRjaFwiXShQcm9taXNlcy5pc19uYXZpZ2F0aW5nX2F3YXksIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgdXBsb2FkLmFib3J0KCk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnVwbG9hZGluZ19maXJtd2FyZSA9IGZhbHNlO1xuICAgICAgICB9KS4kYXBwbHkoJHNjb3BlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgJHNjb3BlLm9uX3VwbG9hZF9saWNlbmNlID0gZnVuY3Rpb24oJGZpbGVzKSB7XG4gICAgICB2YXIgZmlsZSwgdXBsb2FkO1xuICAgICAgJHNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLnVwbG9hZGluZ19saWNlbmNlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgncGFnZS5zZXR0aW5ncy5zdGF0dXMudXBsb2FkaW5nX2xpY2Vuc2UnKSk7XG4gICAgICB9KTtcbiAgICAgIGZpbGUgPSAkZmlsZXNbMF07XG4gICAgICB1cGxvYWQgPSBudWxsO1xuICAgICAgcmV0dXJuIFByb21pc2VzLnByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICByZXR1cm4gdXBsb2FkID0gJHVwbG9hZC51cGxvYWQoe1xuICAgICAgICAgICAgdXJsOiAnL3VwbG9hZF9saWNlbmNlJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgcGFyYW1ldGVyOiAkc2NvcGUucGFyYW1ldGVyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsZTogZmlsZVxuICAgICAgICAgIH0pLnByb2dyZXNzKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQubG9hZGVkID09PSBldmVudC50b3RhbCkge1xuICAgICAgICAgICAgICByZXR1cm4gU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy52YWxpZGF0aW5nX2xpY2Vuc2UnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IubWVzc2FnZSB8fCBkYXRhLmVycm9yLmNvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEucmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wZXJhdGlvbiByZXN1bHQ6IFwiICsgZGF0YS5yZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoQ29uZmlndXJhdGlvbi5EZXZpY2UucmVzZXQoKSk7XG4gICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcik7XG4gICAgICAgICAgICBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdwYWdlLnNldHRpbmdzLnN0YXR1cy5maXJtd2FyZV91cGRhdGVfZmFpbGVkJykpO1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhbmNlbGxhYmxlKClbXCJjYXRjaFwiXShQcm9taXNlcy5pc19uYXZpZ2F0aW5nX2F3YXksIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgdXBsb2FkLmFib3J0KCk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLnVwbG9hZGluZ19saWNlbmNlID0gZmFsc2U7XG4gICAgICAgIH0pLiRhcHBseSgkc2NvcGUpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAkc2NvcGUucmVzZXRfY29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFByb21pc2VzLnByb21pc2UoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLnJlc2V0KCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiAkc2NvcGUuaW5pdGlhbGl6ZV9wYWdlX3dpdGgoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZXMucHJvbWlzZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uTmV0d29yay5sb2FkX2ludG9fbW9kZWwoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS4kd2F0Y2goJ21vZGVsLm5ldHdvcmsuZGhjcCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgTW9kZWwubmV0d29yay5pcCA9ICRzY29wZS5pbml0aWFsX25ldHdvcmtfc2V0dGluZ3MuaXA7XG4gICAgICAgICAgICAgIE1vZGVsLm5ldHdvcmsuZ2F0ZXdheSA9ICRzY29wZS5pbml0aWFsX25ldHdvcmtfc2V0dGluZ3MuZ2F0ZXdheTtcbiAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsLm5ldHdvcmsubWFzayA9ICRzY29wZS5pbml0aWFsX25ldHdvcmtfc2V0dGluZ3MubWFzaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gJHNjb3BlLmluaXRpYWxfbmV0d29ya19zZXR0aW5ncyA9IGFuZ3VsYXIuY29weShNb2RlbC5uZXR3b3JrKTtcbiAgICAgICAgfSkuJGFwcGx5KCRzY29wZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIjIEpzb24gUnBjXG5hcHAuZmFjdG9yeSAnYXBpJywgKCRyb290U2NvcGUsICRodHRwLCAkbG9jYXRpb24sICR0aW1lb3V0LCAkcSwgU3RhdHVzLCBsb2csIFByb21pc2VzLCBFbnVtcykgLT5cbiAgIyDRgdGH0ZHRgtGH0LjQuiBpZCDQutC+0LzQsNC90LTRi1xuICBpZCA9IDFcbiAgXG4gICMg0YPQv9C+0YDRj9C00L7Rh9C40LLQsNC10YIgYmF0Y2gg0LIg0L/QvtGA0Y/QtNC60LUg0YHQu9C10LTQvtCy0LDQvdC40Y8g0LrQvtC80LDQvdC0XG4gIHNvcnRfYnlfaWQgPSAoYSwgYikgLT4gYS5pZCAtIGIuaWRcblxuICAjINCy0YHQv9C+0LzQvtCz0LDRgtC10LvRjNC90YvQuSDQutC70LDRgdGBINC00LvRjyDQstGL0L/QvtC70L3QtdC90LjRjyBKc29uIFJwYyBCYXRjaCfQtdC5XG4gIGNsYXNzIEJhdGNoXG4gICAgIyDQvdCw0YfQsNGC0YwgYmF0Y2gg0LrQvtC80LDQvdC0XG4gICAgY29uc3RydWN0b3I6IChAb3B0aW9ucykgLT5cbiAgICAgIEBiYXRjaCA9IFtdXG4gICAgICBAcHJvbWlzZXMgPSBbXVxuXG4gICAgICBpZiBub3QgQG9wdGlvbnM/XG4gICAgICAgIEBvcHRpb25zID0ge31cblxuICAgICMg0LLRi9C30LLQsNGC0Ywg0LrQvtC80LDQvdC00YMg0LIg0YDQsNC80LrQsNGFIGJhdGNoJ9CwXG4gICAgY2FsbDogKG1ldGhvZCwgcGFyYW1ldGVycywgb3B0aW9ucykgLT5cbiAgICAgIEBiYXRjaC5wdXNoKGFwaS5yZXF1ZXN0X2pzb24obWV0aG9kLCBwYXJhbWV0ZXJzKSlcblxuICAgICAgbmV3IFByb21pc2UgKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgQHByb21pc2VzLnB1c2goeyByZXNvbHZlOiByZXNvbHZlLCByZWplY3Q6IHJlamVjdCB9KVxuXG4gICAgICAjINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L7RgtC80LXQvdGP0YLRjCDRjdGC0L7RgiBQcm9taXNlINCyIGJsdWViaXJkXG4gICAgICAuY2FuY2VsbGFibGUoKVxuXG4gICAgIyDQvtGC0L/RgNCw0LLQuNGC0YwgYmF0Y2gg0LrQvtC80LDQvdC0XG4gICAgZW5kOiAtPiBcbiAgICAgIGlmIEBiYXRjaC5pc19lbXB0eSgpXG4gICAgICAgICMg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQvtGC0LzQtdC90Y/RgtGMINGN0YLQvtGCIFByb21pc2Ug0LIgYmx1ZWJpcmRcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh5ZXMpLmNhbmNlbGxhYmxlKClcblxuICAgICAgIyDQstGL0LLQtdGB0YLQuCDQsiDQutC+0L3RgdC+0LvRjCDQstGL0LfQvtCy0Ysg0LzQtdGC0L7QtNC+0LJcbiAgICAgIGxvZy5pbmZvKCfilIzilIAnLCAnW+KApl0nKSAjICwgQGJhdGNoKVxuXG4gICAgICBAcG9zdCgpXG5cbiAgICAjINC/0L7RgdC70LDRgtGMIEh0dHAgUG9zdCBiYXRjaCfQsFxuICAgIHBvc3Q6IC0+XG4gICAgICAjINC/0L7RgdC70LDRgtGMIEh0dHAgcG9zdFxuICAgICAgYXBpLnBvc3RfcmVxdWVzdChAYmF0Y2gpLmNhbmNlbGxhYmxlKCkudGhlbiAoYmF0Y2hfcmVzcG9uc2UpID0+XG5cbiAgICAgICAgIyDQuNC90L7Qs9C00LAg0L/QvtGH0LXQvNGDLdGC0L4g0L3QtSBBcnJheSAo0YXQtywg0LIg0LrQsNC60LjRhSDRgdC70YPRh9Cw0Y/RhSAtINC+0LTQvdCw0LbQtNGLINC/0L7Qv9Cw0LvQvtGB0YwpXG4gICAgICAgIGlmIG5vdCAoYmF0Y2hfcmVzcG9uc2UgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICBiYXRjaF9yZXNwb25zZSA9IFtiYXRjaF9yZXNwb25zZV1cblxuICAgICAgICAjINGD0L/QvtGA0Y/QtNC+0YfQuNGC0Ywg0L7RgtCy0LXRgtC90YvQuSBiYXRjaCwg0L3QsCDQstGB0Y/QutC40Lkg0YHQu9GD0YfQsNC5XG4gICAgICAgICMgKNC80LEg0Y3RgtC+INC40LfQu9C40YjQvdC1OyDRhdC3LCDRgtGA0LXQsdGD0LXRgiDQu9C4INGB0L/QtdGG0LjRhNC40LrQsNGG0LjRjyDRg9C/0L7RgNGP0LTQvtGH0LXQvdC90L7RgdGC0LgpXG4gICAgICAgIGJhdGNoX3Jlc3BvbnNlLnNvcnQoc29ydF9ieV9pZClcblxuICAgICAgICAjICMg0LTQu9GPINC/0LXRgNCy0L7QuSDQstGB0YLRgNC10YfQtdC90L3QvtC5INC+0YjQuNCx0LrQuCDQuNC3IGJhdGNoJ9CwIC0g0LLRi9Cy0L7QtNC40YIg0Y3RgtGDINC+0YjQuNCx0LrRgyDQvdCwINC60L7QvdGB0L7Qu9GMLFxuICAgICAgICAjICMg0Lgg0L7RgtC80LXQvdGP0LXRgiBQcm9taXNlICjQv9C+0YHQu9C10LTRg9GO0YnQuNC1INC+0YjQuNCx0LrQuCDQv9GA0L7Qv9GD0YHQutCw0Y7RgtGB0Y8sINGH0YLQvtCx0Ysg0L3QtSDQvtGC0LLQu9C10LrQsNGC0YwpXG4gICAgICAgICMgYmF0Y2hfZmFpbGVkID0gbm9cbiAgICAgICAgIyBmYWlsZWQgPSAoZXJyb3IsIHJlcXVlc3QsIHJlc3BvbnNlKSAtPlxuICAgICAgICAjICAgcmV0dXJuIGlmIGJhdGNoX2ZhaWxlZFxuXG4gICAgICAgICMgICBhcGkubG9nX2Vycm9yKHJlcXVlc3QsIHJlc3BvbnNlKVxuICAgICAgICAjICAgYmF0Y2hfZmFpbGVkID0geWVzXG5cbiAgICAgICAgIyDQt9C00LXRgdGMINCx0YPQtNC10YIg0YXRgNCw0L3QuNGC0YzRgdGPINC+0YjQuNCx0LrQsCDQtNC70Y8g0LLRgdC10LPQviBiYXRjaCfQsFxuICAgICAgICBiYXRjaF9lcnJvciA9IG51bGxcblxuICAgICAgICAjINC/0YDQvtCw0L3QsNC70LjQt9C40YDQvtCy0LDRgtGMINC+0YLQstC10YIg0L3QsCDQutCw0LbQtNGD0Y4g0LrQvtC80LDQvdC00YMg0Y3RgtC+0LPQviBiYXRjaCfQsFxuICAgICAgICBmb3IgcmVzcG9uc2UgaW4gYmF0Y2hfcmVzcG9uc2VcblxuICAgICAgICAgICMg0LLRi9C30L7QsiDRjdGC0L7QuSDQutC+0LzQsNC90LTRi1xuICAgICAgICAgIHJlcXVlc3QgPSBAYmF0Y2guc2hpZnQoKVxuICAgICAgICAgICMgUHJvbWlzZSDRjdGC0L7QuSDQutC+0LzQsNC90LTRi1xuICAgICAgICAgIHByb21pc2UgPSBAcHJvbWlzZXMuc2hpZnQoKVxuXG4gICAgICAgICAgdHJ5XG4gICAgICAgICAgICAjINCy0YvQstC10YHRgtC4INC90LAg0LrQvtC90YHQvtC70Ywg0LLRi9C30L7QsiDRjdGC0L7QuSDQutC+0LzQsNC90LTRi1xuICAgICAgICAgICAgQmF0Y2gucHJpbnRlci5yZXF1ZXN0KHJlcXVlc3QsIEBiYXRjaC5pc19lbXB0eSgpKVxuXG4gICAgICAgICAgICAjINCy0YvQstC10YHRgtC4INC90LAg0LrQvtC90YHQvtC70Ywg0L7RgtCy0LUg0L3QsCDRjdGC0YMg0LrQvtC80LDQvdC00YNcbiAgICAgICAgICAgIEJhdGNoLnByaW50ZXIucmVzcG9uc2UocmVzcG9uc2UsIEBiYXRjaC5pc19lbXB0eSgpKVxuXG4gICAgICAgICAgICAjINC/0YDQvtCw0L3QsNC70LjQt9C40YDQvtCy0LDRgtGMINC+0YLQstC10YIg0L3QsCDRjdGC0YMg0LrQvtC80LDQvdC00YMgYmF0Y2gn0LBcbiAgICAgICAgICAgIGFwaS5hbmFseXplX3Jlc3BvbnNlKHJlc3BvbnNlKVxuXG4gICAgICAgICAgICAjINC10YHQu9C4INC60L7QvNCw0L3QtNCwINC40LcgYmF0Y2gn0LAg0LLRi9C/0L7Qu9C90LXQvdCwINC90L7RgNC80LDQu9GM0L3QviAtIFxuICAgICAgICAgICAgIyDQt9Cw0LLQtdGA0YjQuNGC0YwgUHJvbWlzZSDQtNC70Y8g0Y3RgtC+0Lkg0LrQvtC80LDQvdC00YtcbiAgICAgICAgICAgIHByb21pc2UucmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpXG5cbiAgICAgICAgICBjYXRjaCBlcnJvclxuICAgICAgICAgICAgIyDQtdGB0LvQuCDQstC+INCy0YDQtdC80Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0Y3RgtC+0Lkg0LrQvtC80LDQvdC00YsgYmF0Y2gn0LBcbiAgICAgICAgICAgICMg0L/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCAtINC+0YLQvNC10L3QuNGC0YwgUHJvbWlzZSDRjdGC0L7QuSDQutC+0LzQsNC90LTRi1xuICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpXG5cbiAgICAgICAgICAgICMg0LLRi9Cy0LXRgdGC0Lgg0L7RiNC40LHQutGDINC90LAg0LrQvtC90YHQvtC70YxcbiAgICAgICAgICAgIGFwaS5sb2dfZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpXG5cbiAgICAgICAgICAgICMg0JLRi9C/0L7Qu9C90LjRgtGMINC90YPQttC90YvQtSDQtNC10LnRgdGC0LLQuNGPINC/0YDQuCDQstC+0LfQvdC40LrQvdC+0LLQtdC90LjQuCDQvtGI0LjQsdC60LguXG4gICAgICAgICAgICAjICjQvdCw0L/RgNC40LzQtdGALCDQv9C+0LrQsNC30LDRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQvtGI0LjQsdC60Lgg0LIg0YHRgtCw0YLRg9GB0LUpXG4gICAgICAgICAgICBhcGkub25fZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpXG5cbiAgICAgICAgICAgICMgaWYgYXBpLmlzX2FwaV9lcnJvcihlcnJvcilcbiAgICAgICAgICAgICMgICBmYWlsZWQoZXJyb3IsIHJlcXVlc3QsIHJlc3BvbnNlKVxuXG4gICAgICAgICAgICAjINCy0YvQutC40L3Rg9GC0Ywg0L7RiNC40LHQutGDINC00LvRjyDQstGB0LXQs9C+IGJhdGNoJ9CwINC/0L7RgtC+0LwsXG4gICAgICAgICAgICAjINGB0L3QsNGH0LDQu9CwINCy0YvQv9C+0LvQvdC40YLRjCDQuNC70Lgg0LfQsNC60YDRi9GC0Ywg0LLRgdC1INC40L3QtNC40LLQuNC00YPQsNC70YzQvdGL0LUgUHJvbWlzZSBcbiAgICAgICAgICAgICMg0LTQu9GPINC+0YLQtNC10LvRjNC90YvRhSDQutC+0LzQsNC90LTRi1xuICAgICAgICAgICAgaWYgbm90IGJhdGNoX2Vycm9yXG4gICAgICAgICAgICAgIGJhdGNoX2Vycm9yID0gZXJyb3JcblxuICAgICAgICAjINCy0YvQutC40L3Rg9GC0Ywg0L7RiNC40LHQutGDINC00LvRjyDQstGB0LXQs9C+IGJhdGNoJ9CwLCDQtdGB0LvQuCDQvtC90LAg0LHRi9C70LBcbiAgICAgICAgaWYgYmF0Y2hfZXJyb3JcbiAgICAgICAgICB0aHJvdyBiYXRjaF9lcnJvclxuXG4gICAgICAgICMg0LXRgdC70Lgg0L3QtSDQsdGL0LvQviDQvtGI0LjQsdC+0Log0LIgYmF0Y2gn0LUgLSDQt9Cw0LLQtdGA0YjQuNGC0YwgUHJvbWlzZSBiYXRjaCfQsFxuICAgICAgICAjIGlmIG5vdCBiYXRjaF9mYWlsZWRcbiAgICAgICAgcmV0dXJuIGJhdGNoX3Jlc3BvbnNlXG4gICAgICAgIFxuICAgICAgIyDQtdGB0LvQuCDQstC+INCy0YDQtdC80Y8gSHR0cCBwb3N0INC/0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LBcbiAgICAgICwgKGVycm9yKSA9PlxuICAgICAgICAjINC10YHQu9C4IFBPU1Qg0L3QtSDQv9GA0L7RiNGR0LssINGC0L4g0L7RiNC40LHQutCwINC90LAg0LrQsNC20LTQvtC5INC60L7QvNCw0L3QtNC1IGJhdGNoJ9CwXG4gICAgICAgIGZvciBwcm9taXNlIGluIEBwcm9taXNlc1xuICAgICAgICAgIHByb21pc2UucmVqZWN0KGVycm9yKVxuXG4gICAgICAgICMg0LXRgdC70Lgg0Y3RgtCwINC+0YjQuNCx0LrQsCDQstGL0LfQstCw0L3QsCDQv9C10YDQtdGF0L7QtNC+0Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGB0L4g0YHRgtGA0LDQvdC40YbRiywg0L/QtdGA0LXQsdGA0L7RgdC40YLRjCDQtdGRXG4gICAgICAgIGlmIFByb21pc2VzLmlzX25hdmlnYXRpbmdfYXdheShlcnJvcilcbiAgICAgICAgICB0aHJvdyBlcnJvclxuXG4gICMg0LLRi9Cy0L7QtNC40YIg0L3QsCDQutC+0L3RgdC+0LvRjFxuICBCYXRjaC5wcmludGVyID1cblxuICAgICMg0LLRi9Cy0L7QtNC40YIg0L3QsCDQutC+0L3RgdC+0LvRjCDQstGL0LfQvtCyINC60L7QvNCw0L3QtNGLINC40LcgYmF0Y2gn0LBcbiAgICByZXF1ZXN0OiAocmVxdWVzdCwgbGFzdCkgLT5cbiAgICAgIHByZWFtYmxlID0gKGlmIGxhc3QgdGhlbiAn4pSUJyBlbHNlICfilJwnKSArICfilIAnXG4gICAgICBsb2cuaW5mbyhwcmVhbWJsZSwgcmVxdWVzdC5tZXRob2QsIHJlcXVlc3QucGFyYW1zKVxuXG4gICAgIyDQstGL0LLQvtC00LjRgiDQvdCwINC60L7QvdGB0L7Qu9GMINC+0YLQstC10YIg0L3QsCDQutC+0LzQsNC90LTRgyDQuNC3IGJhdGNoJ9CwXG4gICAgcmVzcG9uc2U6IChyZXNwb25zZSwgbGFzdCkgLT5cbiAgICAgIHByZWFtYmxlID0gKGlmIGxhc3QgdGhlbiAnICcgZWxzZSAn4pSCJykgKyAnICAgJ1xuICAgICAgaWYgcmVzcG9uc2UuZXJyb3JcbiAgICAgICAgbG9nLmluZm8ocHJlYW1ibGUsICfinJUnLCByZXNwb25zZS5lcnJvcilcbiAgICAgIGVsc2VcbiAgICAgICAgbG9nLmluZm8ocHJlYW1ibGUsICfinJMnLCByZXNwb25zZS5yZXN1bHQpXG5cbiAgIyBKc29uIFJwYyBiYXRjaCfQuCDRgtC10L/QtdGA0Ywg0YHQu9C10LTRg9C10YIg0L/QtdGA0LXQv9C40YHRi9Cy0LDRgtGMINC90LAg0LrQu9Cw0YHRgdC1INCy0YvRiNC1LlxuICAjINCf0L7RgdC70LUg0LfQsNCy0LXRgNGI0LXQvdC40Y8g0L/QtdGA0LXQv9C40YHRi9Cy0LDQvdC40Y8gLSDRg9Cx0YDQsNGC0Ywg0LjQtyDQutC+0LTQsCDQvdC40LbQtSDQstC10YHRjCDQutC+0LQg0L/QviDRgNCw0LHQvtGC0LUg0YEgYmF0Y2gn0LDQvNC4LFxuICAjINC4INC/0L7RgNC10YTQsNC60YLQvtGA0LjRgtGMINC4INC/0YDQvtC60L7QvNC80LXQvdGC0LjRgNC+0LLQsNGC0Ywg0L7RgdGC0LDQstGI0LjQudGB0Y8g0L/QvtGB0LvQtSDRh9C40YHRgtC60Lgg0LrQvtC0LlxuICBhcGkgPSBcbiAgICAjINC+0YjQuNCx0LrQuCBBcGlcbiAgICBlcnJvcjogXG4gICAgICBnZW5lcmljICAgICAgICAgICAgICA6IGN1c3RvbV9lcnJvcignQXBpX2Vycm9yJylcbiAgICAgIG5vdF9hdXRoZW50aWNhdGVkICAgIDogY3VzdG9tX2Vycm9yKCdOb3RfYXV0aGVudGljYXRlZCcpXG4gICAgICBkZXZpY2VfaXNfYm9vdGluZ191cCA6IGN1c3RvbV9lcnJvcignRGV2aWNlIGlzIGJvb3RpbmcgdXAnKVxuXG4gICAgIyDRg9Cx0YDQsNGC0Ywg0L/QvtGC0L7QvCDRjdGC0L7RgiDQvNC10YLQvtC0LCDRgi7Qui4g0L7QvSDQsdGD0LTQtdGCINC90LUg0L3Rg9C20LXQvSAo0L/QvtGB0LvQtSDQv9C10YDQtdC/0LjRgdGL0LLQsNC90LjRjylcbiAgICBpc19hcGlfZXJyb3I6IChlcnJvcikgLT5cbiAgICAgIGZvciBrZXksIHZhbHVlIG9mIGFwaS5lcnJvclxuICAgICAgICBpZiBlcnJvciBpbnN0YW5jZW9mIHZhbHVlXG4gICAgICAgICAgcmV0dXJuIHllc1xuICAgICBcbiAgICAjINC90LDRh9C40L3QsNC10YIg0LLRi9C/0L7Qu9C90LXQvdC40LUgSnNvbiBScGMgQmF0Y2gn0LBcbiAgICAjXG4gICAgIyAo0Y3RgtC+0YIg0LzQtdGC0L7QtCwg0LIg0L7RgtC70LjRh9C40LUg0L7RgiByZXR1cm4gbmV3IEJhdGNoKCksINC/0L7Qt9Cy0L7Qu9GP0LXRgiDQtNC10LvQsNGC0YwgXCLQs9C70L7QsdCw0LvRjNC90YvQuVwiINCx0LDRgtGHLCBcbiAgICAjICDQutC+0LPQtNCwINC+0L0g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60Lgg0YDQsNGB0L/RgNC+0YHRgtGA0LDQvdGP0LXRgtGB0Y8gXCLQs9C70L7QsdCw0LvRjNC90L5cIiDQvdCwINCy0YHQtSDQstGL0LfQvtCy0YsgYXBpLmNhbGwoKSlcbiAgICBiZWdpbjogLT5cbiAgICAgIEBqc29uX3JwY19iYXRjaCA9IG5ldyBCYXRjaCgpXG5cbiAgICAjINC30LDQstC10YDRiNCw0LXRgiDQstGL0L/QvtC70L3QtdC90LjQtSBKc29uIFJwYyBCYXRjaCfQsFxuICAgICNcbiAgICAjICjRjdGC0L7RgiDQvNC10YLQvtC0LCDQsiDQvtGC0LvQuNGH0LjQtSDQvtGCIHJldHVybiBuZXcgQmF0Y2goKSwg0L/QvtC30LLQvtC70Y/QtdGCINC00LXQu9Cw0YLRjCBcItCz0LvQvtCx0LDQu9GM0L3Ri9C5XCIg0LHQsNGC0YcsIFxuICAgICMgINC60L7Qs9C00LAg0L7QvSDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuCDRgNCw0YHQv9GA0L7RgdGC0YDQsNC90Y/QtdGC0YHRjyBcItCz0LvQvtCx0LDQu9GM0L3QvlwiINC90LAg0LLRgdC1INCy0YvQt9C+0LLRiyBhcGkuY2FsbCgpKVxuICAgIGVuZDogLT5cbiAgICAgIGlmIG5vdCBAanNvbl9ycGNfYmF0Y2g/XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXBpLmVuZCgpIGNhbGxlZCB3aXRob3V0IGFwaS5iZWdpbigpJylcblxuICAgICAganNvbl9ycGNfYmF0Y2ggPSBAanNvbl9ycGNfYmF0Y2hcbiAgICAgIEBqc29uX3JwY19iYXRjaCA9IG51bGxcbiAgICAgIHJldHVybiBqc29uX3JwY19iYXRjaC5lbmQoKVxuXG4gICAgIyDRgdGE0L7RgNC80LjRgNC+0LLQsNGC0Ywg0LfQsNC/0YDQvtGBINC90LAg0LLRi9C30L7QsiDQutC+0LzQsNC90LTRiyBKc29uIFJwY1xuICAgIHJlcXVlc3RfanNvbjogKG1ldGhvZCwgcGFyYW1zKSAtPlxuICAgICAgcmVxdWVzdCA9IFxuICAgICAgICBpZCAgICAgIDogaWQrK1xuICAgICAgICBqc29ucnBjIDogXCIyLjBcIlxuICAgICAgICBtZXRob2QgIDogbWV0aG9kXG4gICAgICAgIHBhcmFtcyAgOiBwYXJhbXMgfHwge31cblxuICAgICMg0JLRi9C30LLQsNGC0Ywg0LzQtdGC0L7QtCBKc29uIFJwY1xuICAgIGNhbGw6IChtZXRob2QsIHBhcmFtcywgb3B0aW9ucykgLT5cblxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICAgICAgaWYgQGpzb25fcnBjX2JhdGNoXG4gICAgICAgIHJldHVybiBAanNvbl9ycGNfYmF0Y2guY2FsbChtZXRob2QsIHBhcmFtcywgb3B0aW9ucylcblxuICAgICAgcmV0dXJuIEByZXF1ZXN0KEByZXF1ZXN0X2pzb24obWV0aG9kLCBwYXJhbXMpLCBvcHRpb25zKVxuXG4gICAgIyDQstGL0LLQtdGB0YLQuCDQvtGI0LjQsdC60YMg0L3QsCDQutC+0L3RgdC+0LvRjFxuICAgIGxvZ19lcnJvcjogKHJlcXVlc3QsIHJlc3BvbnNlKSAtPlxuICAgICAgaWYgcmVzcG9uc2UuZXJyb3IuY29kZSA9PSA0MDFcbiAgICAgICAgcmV0dXJuIGxvZy5pbmZvICdOb3QgYXV0aGVudGljYXRlZCdcblxuICAgICAgbG9nLmVycm9yKCdBUEkgZXJyb3IgaW4gcmVxdWVzdCcsIHJlcXVlc3QsICdyZXNwb25zZScsIHJlc3BvbnNlKVxuXG4gICAgIyDQstGL0L/QvtC70L3QuNGC0Ywg0LfQsNC/0YDQvtGBINC60L7QvNCw0L3QtNGLXG4gICAgcmVxdWVzdDogKHJlcXVlc3QsIG9wdGlvbnMpIC0+XG5cbiAgICAgICMg0LLRi9Cy0LXRgdGC0Lgg0LIg0LrQvtC90YHQvtC70Ywg0LLRi9C30L7QsiDQvNC10YLQvtC00LBcbiAgICAgIGlmIG5vdCBvcHRpb25zLm1pbm9yXG4gICAgICAgIGFwaS5wcmludGVyLnJlcXVlc3QocmVxdWVzdClcblxuICAgICAgIyDQn9C+0YHQu9Cw0YLRjCBIdHRwIFBvc3Qg0LfQsNC/0YDQvtGBXG4gICAgICBhcGkucG9zdChyZXF1ZXN0LCBvcHRpb25zKVxuXG4gICAgIyDQv9C+0YHQu9Cw0YLRjCBIdHRwIFBvc3Qg0LrQvtC80LDQvdC00Ysg0Lgg0L7QsdGA0LDQsdC+0YLQsNGC0Ywg0YDQtdC30YPQu9GM0YLQsNGCXG4gICAgcG9zdF9yZXF1ZXN0OiAocmVxdWVzdCkgLT5cbiAgICAgICMg0LLQtdGA0L3Rg9GC0YwgUHJvbWlzZVxuICAgICAgbmV3IFByb21pc2UgKHJlc29sdmUsIHJlamVjdCkgPT5cblxuICAgICAgICAjINC/0L7RgdC70LDRgtGMIEh0dHAgcG9zdCDQutC+0LzQsNC90LTRiyAo0LjQu9C4INC60L7QvNCw0L3QtCkgSnNvbiBScGNcbiAgICAgICAgJGh0dHAucG9zdCgnL2FwaScsIGFuZ3VsYXIudG9Kc29uKHJlcXVlc3QpKVxuXG4gICAgICAgIC50aGVuIChyZXNwb25zZSkgLT5cbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmRhdGEpXG5cbiAgICAgICAgIyDQtdGB0LvQuCDQstC+INCy0YDQtdC80Y8gSHR0cCBwb3N0INC/0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LBcbiAgICAgICAgLCAocmVzcG9uc2UpIC0+XG4gICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzID09IDQzNFxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgYXBpLmVycm9yLmRldmljZV9pc19ib290aW5nX3VwKHJlc3BvbnNlLmRhdGEuZXJyb3IpKVxuXG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXNwb25zZSkpXG5cbiAgICAgICMg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQvtGC0LzQtdC90Y/RgtGMINGN0YLQvtGCIFByb21pc2Ug0LIgYmx1ZWJpcmRcbiAgICAgIC5jYW5jZWxsYWJsZSgpXG5cbiAgICAjINC/0YDQvtCw0L3QsNC70LjQt9C40YDQvtCy0LDRgtGMINC+0YLQstC10YIg0L3QsCDQutC+0LzQsNC90LTRg1xuICAgIGFuYWx5emVfcmVzcG9uc2U6IChyZXNwb25zZSkgLT5cblxuICAgICAgIyDQtdGB0LvQuCDQutC+0LzQsNC90LTQsCDQstGL0L/QvtC70L3QtdC90LAg0L3QvtGA0LzQsNC70YzQvdC+IC0gXG4gICAgICAjINC30LDQstC10YDRiNC40YLRjCBQcm9taXNlINC00LvRjyDRjdGC0L7QuSDQutC+0LzQsNC90LTRi1xuICAgICAgaWYgbm90IHJlc3BvbnNlLmVycm9yXG4gICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHRcblxuICAgICAgIyDQldGB0LvQuCDQstC+INCy0YDQtdC80Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LrQvtC80LDQvdC00Ysg0L/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCAtIFxuICAgICAgIyDQvtGC0LzQtdC90LjRgtGMIFByb21pc2Ug0LTQu9GPINGN0YLQvtC5INC60L7QvNCw0L3QtNGLXG5cbiAgICAgICMg0L7Qv9GA0LXQtNC10LvQuNGC0YwsINC60LDQutCw0Y8g0L7RiNC40LHQutCwINC/0YDQvtC40LfQvtGI0LvQsFxuICAgICAgZXJyb3IgPSBpZiByZXNwb25zZS5lcnJvci5jb2RlID09IDQwMVxuICAgICAgICBuZXcgYXBpLmVycm9yLm5vdF9hdXRoZW50aWNhdGVkKHJlc3BvbnNlLmVycm9yKVxuICAgICAgZWxzZVxuICAgICAgICBuZXcgYXBpLmVycm9yLmdlbmVyaWMocmVzcG9uc2UuZXJyb3IpXG5cbiAgICAgICMg0L7RgtC80LXQvdC40YLRjCBwcm9taXNlINGN0YLQvtC5INC60L7QvNCw0L3QtNGLXG4gICAgICB0aHJvdyBlcnJvclxuXG4gICAgIyDQv9C+0YHQu9Cw0YLRjCBIdHRwIFBvc3Qg0LrQvtC80LDQvdC00YtcbiAgICBwb3N0OiAocmVxdWVzdCwgb3B0aW9ucykgLT5cblxuICAgICAgIyDQv9C+0YHQu9Cw0YLRjCBIdHRwIHBvc3Qg0LrQvtC80LDQvdC00YsgSnNvbiBScGNcbiAgICAgIGFwaS5wb3N0X3JlcXVlc3QocmVxdWVzdCkudGhlbiAocmVzcG9uc2UpID0+XG5cbiAgICAgICAgIyDQstGL0LLQtdGB0YLQuCDQvdCwINC60L7QvdGB0L7Qu9GMINC+0YLQstC10YIg0L3QsCDRjdGC0YMg0LrQvtC80LDQvdC00YNcbiAgICAgICAgaWYgbm90IG9wdGlvbnMubWlub3JcbiAgICAgICAgICBhcGkucHJpbnRlci5yZXNwb25zZShyZXNwb25zZSlcblxuICAgICAgICB0cnlcbiAgICAgICAgICAjINC/0YDQvtCw0L3QsNC70LjQt9C40YDQvtCy0LDRgtGMINC+0YLQstC10YIg0L3QsCDQutC+0LzQsNC90LTRg1xuICAgICAgICAgIGFwaS5hbmFseXplX3Jlc3BvbnNlKHJlc3BvbnNlKVxuXG4gICAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgICAgIyDQstGL0LLQtdGB0YLQuCDQvtGI0LjQsdC60YMg0L3QsCDQutC+0L3RgdC+0LvRjFxuICAgICAgICAgIGFwaS5sb2dfZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpXG5cbiAgICAgICAgICAjINCS0YvQv9C+0LvQvdC40YLRjCDQvdGD0LbQvdGL0LUg0LTQtdC50YHRgtCy0LjRjyDQv9GA0Lgg0LLQvtC30L3QuNC60L3QvtCy0LXQvdC40Lgg0L7RiNC40LHQutC4LlxuICAgICAgICAgICMgKNC90LDQv9GA0LjQvNC10YAsINC/0L7QutCw0LfQsNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INC+0YjQuNCx0LrQuCDQsiDRgdGC0LDRgtGD0YHQtSlcbiAgICAgICAgICBhcGkub25fZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpXG5cbiAgICAgICAgICAjINC60LjQvdGD0YLRjCDQvtGI0LjQsdC60YMg0LTQsNC70YzRiNC1LCDRh9GC0L7QsdGLINC+0L3QsCDQvtGC0LzQtdC90LjQu9CwINGC0LXQutGD0YnQuNC5IFByb21pc2VcbiAgICAgICAgICB0aHJvdyBlcnJvclxuXG4gICAgIyDQktGL0L/QvtC70L3QuNGC0Ywg0L3Rg9C20L3Ri9C1INC00LXQudGB0YLQstC40Y8g0L/RgNC4INCy0L7Qt9C90LjQutC90L7QstC10L3QuNC4INC+0YjQuNCx0LrQuC5cbiAgICAjICjQvdCw0L/RgNC40LzQtdGALCDQv9C+0LrQsNC30LDRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQvtGI0LjQsdC60Lgg0LIg0YHRgtCw0YLRg9GB0LUpXG4gICAgb25fZXJyb3I6IChyZXF1ZXN0LCByZXNwb25zZSkgLT5cblxuICAgICAgIyDQutC+0LQg0Lgg0YHQvtC+0LHRidC10L3QuNC1INC+0YjQuNCx0LrQuFxuICAgICAgY29kZSAgICA9IHJlc3BvbnNlLmVycm9yLmNvZGVcbiAgICAgIG1lc3NhZ2UgPSByZXNwb25zZS5lcnJvci5tZXNzYWdlXG5cbiAgICAgIGlmIGNvZGUgPT0gNDAxXG4gICAgICAgICMg0J3QtSDQt9Cw0LvQvtCz0LjQvdC10L1cbiAgICAgICAgJHJvb3RTY29wZS5ub3RfYXV0aGVudGljYXRlZCgpXG5cbiAgICAgIGVsc2UgaWYgY29kZSA9PSA0MDMgJiYgcmVxdWVzdC5tZXRob2QgPT0gJ2F1dGgubG9naW4nXG4gICAgICAgICMg0J3QtdCy0LXRgNC90LDRjyDQv9Cw0YDQsCDQu9C+0LPQuNC9L9C/0LDRgNC+0LvRjCAtINC90LUg0L/QvtC60LDQt9GL0LLQsNGC0Ywg0Y3RgtGDINC+0YjQuNCx0LrRg1xuICAgICAgZWxzZSBpZiBjb2RlID09IEVudW1zLkVycm9ycy5hcGkuc2V0X2ludGVyZmFjZV92ZXJzaW9uXG4gICAgICAgICMg0JLQtdGA0YHQuNGPINGD0LbQtSDRg9GB0YLQsNC90L7QstC70LXQvdCwINC90LAg0L3QvtCy0YPRjiwg0LIg0L3QtdC5INC90LUg0L3QsNC50LTQtdC9INC80LXRgtC+0LQg0YPRgdGC0LDQvdC+0LLQutC4INCy0LXRgNGB0LjQuFxuICAgICAgIyDQn9GA0L7Rh9C10LVcbiAgICAgIGVsc2VcbiAgICAgICAgIyDQv9C+0LrQsNC30LDRgtGMINC+0YjQuNCx0LrRgyDQsiDRgdGC0LDRgtGD0YHQtVxuICAgICAgICBTdGF0dXMuZXJyb3IocmVxdWVzdC5tZXRob2QgKyAnOiAnICsgbWVzc2FnZSlcblxuICAjINCy0YvQstC+0LTQuNGCINC90LAg0LrQvtC90YHQvtC70YxcbiAgYXBpLnByaW50ZXIgPSBcbiAgICAjINCy0YvQstC+0LTQuNGCINC90LAg0LrQvtC90YHQvtC70Ywg0LLRi9C30L7QsiDQutC+0LzQsNC90LTRi1xuICAgIHJlcXVlc3Q6IChyZXF1ZXN0KSAtPlxuICAgICAgbG9nLmluZm8ocmVxdWVzdC5tZXRob2QsIGlmIE9iamVjdC5ub3RfZW1wdHkocmVxdWVzdC5wYXJhbXMpIHRoZW4gcmVxdWVzdC5wYXJhbXMgZWxzZSAnJylcblxuICAgICMg0LLRi9Cy0L7QtNC40YIg0L3QsCDQutC+0L3RgdC+0LvRjCDQvtGC0LLQtdGCINC90LAg0LrQvtC80LDQvdC00YNcbiAgICByZXNwb25zZTogKHJlc3BvbnNlKSAtPlxuICAgICAgcHJlYW1ibGUgPSAnICdcbiAgICAgIGlmIHJlc3BvbnNlLmVycm9yXG4gICAgICAgIGxvZy5pbmZvKHByZWFtYmxlLCAn4pyVJywgcmVzcG9uc2UuZXJyb3IpXG4gICAgICBlbHNlXG4gICAgICAgIGxvZy5pbmZvKHByZWFtYmxlLCAn4pyTJywgcmVzcG9uc2UucmVzdWx0KVxuXG4gIHJldHVybiBhcGkiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdhcGknLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkaHR0cCwgJGxvY2F0aW9uLCAkdGltZW91dCwgJHEsIFN0YXR1cywgbG9nLCBQcm9taXNlcywgRW51bXMpIHtcbiAgICB2YXIgQmF0Y2gsIGFwaSwgaWQsIHNvcnRfYnlfaWQ7XG4gICAgaWQgPSAxO1xuICAgIHNvcnRfYnlfaWQgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XG4gICAgfTtcbiAgICBCYXRjaCA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIEJhdGNoKG9wdGlvbnMxKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMxO1xuICAgICAgICB0aGlzLmJhdGNoID0gW107XG4gICAgICAgIHRoaXMucHJvbWlzZXMgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgQmF0Y2gucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihtZXRob2QsIHBhcmFtZXRlcnMsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5iYXRjaC5wdXNoKGFwaS5yZXF1ZXN0X2pzb24obWV0aG9kLCBwYXJhbWV0ZXJzKSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSkuY2FuY2VsbGFibGUoKTtcbiAgICAgIH07XG5cbiAgICAgIEJhdGNoLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYmF0Y2guaXNfZW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSkuY2FuY2VsbGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICBsb2cuaW5mbygn4pSM4pSAJywgJ1vigKZdJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3QoKTtcbiAgICAgIH07XG5cbiAgICAgIEJhdGNoLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcGkucG9zdF9yZXF1ZXN0KHRoaXMuYmF0Y2gpLmNhbmNlbGxhYmxlKCkudGhlbigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYmF0Y2hfcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBiYXRjaF9lcnJvciwgZXJyb3IsIGVycm9yMSwgaSwgbGVuLCBwcm9taXNlLCByZXF1ZXN0LCByZXNwb25zZTtcbiAgICAgICAgICAgIGlmICghKGJhdGNoX3Jlc3BvbnNlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgIGJhdGNoX3Jlc3BvbnNlID0gW2JhdGNoX3Jlc3BvbnNlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJhdGNoX3Jlc3BvbnNlLnNvcnQoc29ydF9ieV9pZCk7XG4gICAgICAgICAgICBiYXRjaF9lcnJvciA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBiYXRjaF9yZXNwb25zZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICByZXNwb25zZSA9IGJhdGNoX3Jlc3BvbnNlW2ldO1xuICAgICAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuYmF0Y2guc2hpZnQoKTtcbiAgICAgICAgICAgICAgcHJvbWlzZSA9IF90aGlzLnByb21pc2VzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgQmF0Y2gucHJpbnRlci5yZXF1ZXN0KHJlcXVlc3QsIF90aGlzLmJhdGNoLmlzX2VtcHR5KCkpO1xuICAgICAgICAgICAgICAgIEJhdGNoLnByaW50ZXIucmVzcG9uc2UocmVzcG9uc2UsIF90aGlzLmJhdGNoLmlzX2VtcHR5KCkpO1xuICAgICAgICAgICAgICAgIGFwaS5hbmFseXplX3Jlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUocmVzcG9uc2UucmVzdWx0KTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIGFwaS5sb2dfZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGFwaS5vbl9lcnJvcihyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFiYXRjaF9lcnJvcikge1xuICAgICAgICAgICAgICAgICAgYmF0Y2hfZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiYXRjaF9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyBiYXRjaF9lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiYXRjaF9yZXNwb25zZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgaSwgbGVuLCBwcm9taXNlLCByZWY7XG4gICAgICAgICAgICByZWYgPSBfdGhpcy5wcm9taXNlcztcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICBwcm9taXNlID0gcmVmW2ldO1xuICAgICAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoUHJvbWlzZXMuaXNfbmF2aWdhdGluZ19hd2F5KGVycm9yKSkge1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQmF0Y2g7XG5cbiAgICB9KSgpO1xuICAgIEJhdGNoLnByaW50ZXIgPSB7XG4gICAgICByZXF1ZXN0OiBmdW5jdGlvbihyZXF1ZXN0LCBsYXN0KSB7XG4gICAgICAgIHZhciBwcmVhbWJsZTtcbiAgICAgICAgcHJlYW1ibGUgPSAobGFzdCA/ICfilJQnIDogJ+KUnCcpICsgJ+KUgCc7XG4gICAgICAgIHJldHVybiBsb2cuaW5mbyhwcmVhbWJsZSwgcmVxdWVzdC5tZXRob2QsIHJlcXVlc3QucGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICByZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2UsIGxhc3QpIHtcbiAgICAgICAgdmFyIHByZWFtYmxlO1xuICAgICAgICBwcmVhbWJsZSA9IChsYXN0ID8gJyAnIDogJ+KUgicpICsgJyAgICc7XG4gICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgIHJldHVybiBsb2cuaW5mbyhwcmVhbWJsZSwgJ+KclScsIHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbG9nLmluZm8ocHJlYW1ibGUsICfinJMnLCByZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkgPSB7XG4gICAgICBlcnJvcjoge1xuICAgICAgICBnZW5lcmljOiBjdXN0b21fZXJyb3IoJ0FwaV9lcnJvcicpLFxuICAgICAgICBub3RfYXV0aGVudGljYXRlZDogY3VzdG9tX2Vycm9yKCdOb3RfYXV0aGVudGljYXRlZCcpLFxuICAgICAgICBkZXZpY2VfaXNfYm9vdGluZ191cDogY3VzdG9tX2Vycm9yKCdEZXZpY2UgaXMgYm9vdGluZyB1cCcpXG4gICAgICB9LFxuICAgICAgaXNfYXBpX2Vycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgICByZWYgPSBhcGkuZXJyb3I7XG4gICAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICAgIHZhbHVlID0gcmVmW2tleV07XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJlZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuanNvbl9ycGNfYmF0Y2ggPSBuZXcgQmF0Y2goKTtcbiAgICAgIH0sXG4gICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIganNvbl9ycGNfYmF0Y2g7XG4gICAgICAgIGlmICh0aGlzLmpzb25fcnBjX2JhdGNoID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FwaS5lbmQoKSBjYWxsZWQgd2l0aG91dCBhcGkuYmVnaW4oKScpO1xuICAgICAgICB9XG4gICAgICAgIGpzb25fcnBjX2JhdGNoID0gdGhpcy5qc29uX3JwY19iYXRjaDtcbiAgICAgICAgdGhpcy5qc29uX3JwY19iYXRjaCA9IG51bGw7XG4gICAgICAgIHJldHVybiBqc29uX3JwY19iYXRjaC5lbmQoKTtcbiAgICAgIH0sXG4gICAgICByZXF1ZXN0X2pzb246IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIHZhciByZXF1ZXN0O1xuICAgICAgICByZXR1cm4gcmVxdWVzdCA9IHtcbiAgICAgICAgICBpZDogaWQrKyxcbiAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIHBhcmFtczogcGFyYW1zIHx8IHt9XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgY2FsbDogZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmICh0aGlzLmpzb25fcnBjX2JhdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuanNvbl9ycGNfYmF0Y2guY2FsbChtZXRob2QsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh0aGlzLnJlcXVlc3RfanNvbihtZXRob2QsIHBhcmFtcyksIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGxvZ19lcnJvcjogZnVuY3Rpb24ocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yLmNvZGUgPT09IDQwMSkge1xuICAgICAgICAgIHJldHVybiBsb2cuaW5mbygnTm90IGF1dGhlbnRpY2F0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nLmVycm9yKCdBUEkgZXJyb3IgaW4gcmVxdWVzdCcsIHJlcXVlc3QsICdyZXNwb25zZScsIHJlc3BvbnNlKTtcbiAgICAgIH0sXG4gICAgICByZXF1ZXN0OiBmdW5jdGlvbihyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy5taW5vcikge1xuICAgICAgICAgIGFwaS5wcmludGVyLnJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwaS5wb3N0KHJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIHBvc3RfcmVxdWVzdDogZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGknLCBhbmd1bGFyLnRvSnNvbihyZXF1ZXN0KSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQzNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IGFwaS5lcnJvci5kZXZpY2VfaXNfYm9vdGluZ191cChyZXNwb25zZS5kYXRhLmVycm9yKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKS5jYW5jZWxsYWJsZSgpO1xuICAgICAgfSxcbiAgICAgIGFuYWx5emVfcmVzcG9uc2U6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IgPSByZXNwb25zZS5lcnJvci5jb2RlID09PSA0MDEgPyBuZXcgYXBpLmVycm9yLm5vdF9hdXRoZW50aWNhdGVkKHJlc3BvbnNlLmVycm9yKSA6IG5ldyBhcGkuZXJyb3IuZ2VuZXJpYyhyZXNwb25zZS5lcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSxcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uKHJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5wb3N0X3JlcXVlc3QocmVxdWVzdCkudGhlbigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciwgZXJyb3IxO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLm1pbm9yKSB7XG4gICAgICAgICAgICAgIGFwaS5wcmludGVyLnJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcGkuYW5hbHl6ZV9yZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgICAgICAgIGFwaS5sb2dfZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICBhcGkub25fZXJyb3IocmVxdWVzdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSk7XG4gICAgICB9LFxuICAgICAgb25fZXJyb3I6IGZ1bmN0aW9uKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBjb2RlLCBtZXNzYWdlO1xuICAgICAgICBjb2RlID0gcmVzcG9uc2UuZXJyb3IuY29kZTtcbiAgICAgICAgbWVzc2FnZSA9IHJlc3BvbnNlLmVycm9yLm1lc3NhZ2U7XG4gICAgICAgIGlmIChjb2RlID09PSA0MDEpIHtcbiAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5ub3RfYXV0aGVudGljYXRlZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQwMyAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gJ2F1dGgubG9naW4nKSB7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSBFbnVtcy5FcnJvcnMuYXBpLnNldF9pbnRlcmZhY2VfdmVyc2lvbikge1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcihyZXF1ZXN0Lm1ldGhvZCArICc6ICcgKyBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgYXBpLnByaW50ZXIgPSB7XG4gICAgICByZXF1ZXN0OiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBsb2cuaW5mbyhyZXF1ZXN0Lm1ldGhvZCwgT2JqZWN0Lm5vdF9lbXB0eShyZXF1ZXN0LnBhcmFtcykgPyByZXF1ZXN0LnBhcmFtcyA6ICcnKTtcbiAgICAgIH0sXG4gICAgICByZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHByZWFtYmxlO1xuICAgICAgICBwcmVhbWJsZSA9ICcgJztcbiAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGxvZy5pbmZvKHByZWFtYmxlLCAn4pyVJywgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBsb2cuaW5mbyhwcmVhbWJsZSwgJ+KckycsIHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcGk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiXG4vKlxuICDQodC10YDQstC40YEg0YDQsNCx0L7RgtGLINGBINCx0YDQsNGD0LfQtdGA0L7QvFxuICovXG5cbihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ0Jyb3dzZXInLCBmdW5jdGlvbih0cmFuc2xhdGUpIHtcbiAgICB2YXIgQnJvd3NlciwgaXNWYWxpZCwgbmFtZXMsIHRlc3RzLCB2YWxpZGF0aW9uRW5hYmxlZDtcbiAgICB2YWxpZGF0aW9uRW5hYmxlZCA9IHRydWU7XG4gICAgaXNWYWxpZCA9IHZvaWQgMDtcbiAgICBuYW1lcyA9IHtcbiAgICAgIGllOiB7XG4gICAgICAgIHZhbHVlOiAnSW50ZXJuZXQgRXhwbG9yZXInXG4gICAgICB9LFxuICAgICAgY2hyb21lOiB7XG4gICAgICAgIHZhbHVlOiAnR29vZ2xlIENocm9tZSdcbiAgICAgIH0sXG4gICAgICBmaXJlZm94OiB7XG4gICAgICAgIHZhbHVlOiAnRmlyZWZveCdcbiAgICAgIH0sXG4gICAgICBzYWZhcmk6IHtcbiAgICAgICAgdmFsdWU6ICdTYWZhcmknXG4gICAgICB9LFxuICAgICAgb3BlcmE6IHtcbiAgICAgICAgdmFsdWU6ICdPcGVyYSdcbiAgICAgIH1cbiAgICB9O1xuICAgIHRlc3RzID0ge1xuICAgICAgaW5saW5lQmxvY2s6IHtcbiAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgIHZlcnNpb25zOiB7XG4gICAgICAgICAgaWU6IDgsXG4gICAgICAgICAgY2hyb21lOiAyLFxuICAgICAgICAgIGZpcmVmb3g6IDMsXG4gICAgICAgICAgc2FmYXJpOiAzLjEsXG4gICAgICAgICAgb3BlcmE6IDkuMlxuICAgICAgICB9LFxuICAgICAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNb2Rlcm5penIudGVzdEFsbFByb3BzKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3NzQW5pbWF0aW9uczoge1xuICAgICAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICAgICAgdmVyc2lvbnM6IHtcbiAgICAgICAgICBpZTogMTAsXG4gICAgICAgICAgY2hyb21lOiA0LFxuICAgICAgICAgIGZpcmVmb3g6IDUsXG4gICAgICAgICAgc2FmYXJpOiA0LFxuICAgICAgICAgIG9wZXJhOiAxMlxuICAgICAgICB9LFxuICAgICAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNb2Rlcm5penIuY3NzYW5pbWF0aW9ucztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZsZXhib3g6IHtcbiAgICAgICAgdmVyc2lvbnM6IHtcbiAgICAgICAgICBpZTogMTAsXG4gICAgICAgICAgY2hyb21lOiAyMSxcbiAgICAgICAgICBmaXJlZm94OiAxOCxcbiAgICAgICAgICBzYWZhcmk6IDYuMSxcbiAgICAgICAgICBvcGVyYTogJzEyLjEwJ1xuICAgICAgICB9LFxuICAgICAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNb2Rlcm5penIuZmxleGJveDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRyYWdBbmREcm9wOiB7XG4gICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICB2ZXJzaW9uczoge1xuICAgICAgICAgIGllOiA5LFxuICAgICAgICAgIGNocm9tZTogNCxcbiAgICAgICAgICBmaXJlZm94OiAzLjUsXG4gICAgICAgICAgc2FmYXJpOiA2LFxuICAgICAgICAgIG9wZXJhOiAxMlxuICAgICAgICB9LFxuICAgICAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNb2Rlcm5penIuZHJhZ2FuZGRyb3A7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhY2Nlc3NLZXk6IHtcbiAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgIHZlcnNpb25zOiB7XG4gICAgICAgICAgaWU6IDEsXG4gICAgICAgICAgY2hyb21lOiAxLFxuICAgICAgICAgIGZpcmVmb3g6IDEsXG4gICAgICAgICAgc2FmYXJpOiAxLFxuICAgICAgICAgIG9wZXJhOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmFjY2Vzc0tleSAhPT0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBCcm93c2VyID0ge1xuICAgICAgZ2V0TWluaW1hbFZlcnNpb25zOiBmdW5jdGlvbih0ZXN0cykge1xuICAgICAgICB2YXIgYnJvd3Nlck5hbWUsIHJlZiwgdGVzdCwgdGVzdE5hbWUsIHZlcnNpb24sIHZlcnNpb25zO1xuICAgICAgICB2ZXJzaW9ucyA9IHt9O1xuICAgICAgICB0ZXN0ID0gbnVsbDtcbiAgICAgICAgZm9yICh0ZXN0TmFtZSBpbiB0ZXN0cykge1xuICAgICAgICAgIHRlc3QgPSB0ZXN0c1t0ZXN0TmFtZV07XG4gICAgICAgICAgaWYgKHRlc3QuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWYgPSB0ZXN0LnZlcnNpb25zO1xuICAgICAgICAgIGZvciAoYnJvd3Nlck5hbWUgaW4gcmVmKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gcmVmW2Jyb3dzZXJOYW1lXTtcbiAgICAgICAgICAgIGlmICghbmFtZXNbYnJvd3Nlck5hbWVdKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihicm93c2VyTmFtZSArIFwiIGlzIHVua25vd24gYnJvd3NlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICF2ZXJzaW9uc1ticm93c2VyTmFtZV0gJiYgKHZlcnNpb25zW2Jyb3dzZXJOYW1lXSA9IDApO1xuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQodmVyc2lvbikgPiBwYXJzZUZsb2F0KHZlcnNpb25zW2Jyb3dzZXJOYW1lXSkpIHtcbiAgICAgICAgICAgICAgdmVyc2lvbnNbYnJvd3Nlck5hbWVdID0gdmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZlcnNpb25zO1xuICAgICAgfSxcbiAgICAgIHZlcnNpb25zVG9TdHJpbmc6IGZ1bmN0aW9uKHZlcnNpb25zKSB7XG4gICAgICAgIHZhciBuYW1lLCB0ZXh0LCB2ZXJzaW9uO1xuICAgICAgICB0ZXh0ID0gJyc7XG4gICAgICAgIGZvciAobmFtZSBpbiB2ZXJzaW9ucykge1xuICAgICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uc1tuYW1lXTtcbiAgICAgICAgICB0ZXh0ICs9IG5hbWVzW25hbWVdLnZhbHVlICsgXCI6IFwiICsgdmVyc2lvbiArIFwiKywgXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyKDAsIHRleHQubGVuZ3RoIC0gMik7XG4gICAgICB9LFxuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGVzdCwgdGVzdE5hbWU7XG4gICAgICAgIGlmICh2YWxpZGF0aW9uRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHRlc3ROYW1lIGluIHRlc3RzKSB7XG4gICAgICAgICAgdGVzdCA9IHRlc3RzW3Rlc3ROYW1lXTtcbiAgICAgICAgICBpZiAodGVzdC5kaXNhYmxlZCA9PT0gZmFsc2UgfHwgdGVzdC5ydW4oKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICB9LFxuICAgICAgZ2V0RXJyb3JNZXNzYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZlcnNpb25zO1xuICAgICAgICBpZiAoaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ZhbGlkID09PSB2b2lkIDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIHdhc24ndCBzdGFydGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZlcnNpb25zID0gdGhpcy5nZXRNaW5pbWFsVmVyc2lvbnModGVzdHMpO1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRlKCdlcnJvci5vbGRfYnJvd3NlcicsIHtcbiAgICAgICAgICBicm93c2VyczogdGhpcy52ZXJzaW9uc1RvU3RyaW5nKHZlcnNpb25zKVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBpc1ZhbGlkOiBmdW5jdGlvbih2YWxpZCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCA9IHZhbGlkICE9PSB2b2lkIDAgPyB2YWxpZCA6IGlzVmFsaWQ7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQnJvd3NlcjtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIjIyNcbiAg0KHQtdGA0LLQuNGBINGA0LDQsdC+0YLRiyDRgSDQsdGA0LDRg9C30LXRgNC+0LxcbiMjI1xuYXBwLmZhY3RvcnkgJ0Jyb3dzZXInLCAodHJhbnNsYXRlKSAtPlxuICAjINCk0LvQsNCzINC+0YHRg9GJ0LXRgdGC0LLQu9C10L3QuNGPINCy0LDQu9C40LTQsNGG0LjQuC4g0JTQu9GPINCy0L7Qt9C80L7QttC90L7RgdGC0Lgg0LLRi9C90L7RgdCwINCyINCz0LvQvtCx0LDQu9GM0L3Ri9C5INC60L7QvdGE0LjQsyDQuCDQvtC/0LXRgNCw0YLQuNCy0L3QvtGB0YLQuCDQsiDQvtGC0LrQu9GO0YfQtdC90LjQuCDRhNGD0L3QutGG0LjQvtC90LDQu9CwLlxuICB2YWxpZGF0aW9uRW5hYmxlZCA9IHRydWVcbiAgIyDQpNC70LDQsyDQstCw0LvQuNC00LDRhtC40LgsIHVuZGVmaW5lZCDQtNC+INC30LDQv9GD0YHQutCwINCy0LDQu9C40LTQsNGG0LjQuFxuICBpc1ZhbGlkID0gdW5kZWZpbmVkXG4gICMg0JjQvdGE0L7RgNC80LDRhtC40Y8g0L/QviDQsdGA0LDRg9C30LXRgNCw0LxcbiAgbmFtZXMgPVxuICAgIGllOiB7dmFsdWU6ICdJbnRlcm5ldCBFeHBsb3Jlcid9XG4gICAgY2hyb21lOiB7dmFsdWU6ICdHb29nbGUgQ2hyb21lJ31cbiAgICBmaXJlZm94OiB7dmFsdWU6ICdGaXJlZm94J31cbiAgICBzYWZhcmk6IHt2YWx1ZTogJ1NhZmFyaSd9XG4gICAgb3BlcmE6IHt2YWx1ZTogJ09wZXJhJ31cblxuICAjINCR0YDQsNGD0LfQtdGA0L3Ri9C1INGC0LXRgdGC0YtcbiAgdGVzdHMgPVxuICAgIGlubGluZUJsb2NrOlxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgIHZlcnNpb25zOiAgeyBpZTogOCwgY2hyb21lOiAyLCBmaXJlZm94OiAzLCBzYWZhcmk6IDMuMSwgb3BlcmE6IDkuMiB9XG4gICAgICBydW46IC0+IE1vZGVybml6ci50ZXN0QWxsUHJvcHMoJ2Rpc3BsYXknLCAnaW5saW5lLWJsb2NrJylcbiAgICBjc3NBbmltYXRpb25zOlxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgIHZlcnNpb25zOiAgeyBpZTogMTAsIGNocm9tZTogNCwgZmlyZWZveDogNSwgc2FmYXJpOiA0LCBvcGVyYTogMTIgfVxuICAgICAgcnVuOiAtPiBNb2Rlcm5penIuY3NzYW5pbWF0aW9uc1xuICAgIGZsZXhib3g6XG4gICAgICB2ZXJzaW9uczogIHsgaWU6IDEwLCBjaHJvbWU6IDIxLCBmaXJlZm94OiAxOCwgc2FmYXJpOiA2LjEsIG9wZXJhOiAnMTIuMTAnIH1cbiAgICAgIHJ1bjogLT4gTW9kZXJuaXpyLmZsZXhib3hcbiAgICBkcmFnQW5kRHJvcDpcbiAgICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICB2ZXJzaW9uczogIHsgaWU6IDksIGNocm9tZTogNCwgZmlyZWZveDogMy41LCBzYWZhcmk6IDYsIG9wZXJhOiAxMn1cbiAgICAgIHJ1bjogLT4gTW9kZXJuaXpyLmRyYWdhbmRkcm9wXG4gICAgYWNjZXNzS2V5OlxuICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgIHZlcnNpb25zOiAgeyBpZTogMSwgY2hyb21lOiAxLCBmaXJlZm94OiAxLCBzYWZhcmk6IDEsIG9wZXJhOiAxIH1cbiAgICAgIHJ1bjogLT5cbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHJldHVybiBlbGVtZW50LmFjY2Vzc0tleSAhPSB1bmRlZmluZWRcblxuICBCcm93c2VyID1cbiAgICAjINCf0L7QtNGB0YfRkdGCINC80LjQvdC40LzQsNC70YzQvdGL0YUg0LLQtdGA0YHQuNC5INCx0YDQsNGD0LfQtdGA0L7QsiDQv9C+IHRlc3RzINC4INGB0L7RhdGA0LDQvdC10L3QuNC1XG4gICAgZ2V0TWluaW1hbFZlcnNpb25zOiAodGVzdHMpIC0+XG4gICAgICB2ZXJzaW9ucyA9IHt9XG4gICAgICB0ZXN0ID0gbnVsbFxuXG4gICAgICBmb3IgdGVzdE5hbWUsIHRlc3Qgb2YgdGVzdHNcbiAgICAgICAgY29udGludWUgaWYgdGVzdC5kaXNhYmxlZFxuXG4gICAgICAgIGZvciBicm93c2VyTmFtZSwgdmVyc2lvbiBvZiB0ZXN0LnZlcnNpb25zXG5cbiAgICAgICAgICBpZiAhbmFtZXNbYnJvd3Nlck5hbWVdXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIje2Jyb3dzZXJOYW1lfSBpcyB1bmtub3duIGJyb3dzZXJcIilcblxuICAgICAgICAgICF2ZXJzaW9uc1ticm93c2VyTmFtZV0gJiYgKHZlcnNpb25zW2Jyb3dzZXJOYW1lXSA9IDApXG5cbiAgICAgICAgICBpZiBwYXJzZUZsb2F0KHZlcnNpb24pID4gcGFyc2VGbG9hdCh2ZXJzaW9uc1ticm93c2VyTmFtZV0pXG4gICAgICAgICAgICB2ZXJzaW9uc1ticm93c2VyTmFtZV0gPSB2ZXJzaW9uXG5cbiAgICAgIHJldHVybiB2ZXJzaW9uc1xuXG4gICAgIyDQpNC+0YDQvNCw0YLQuNGA0L7QstCw0L3QuNC1INCyINGB0YLRgNC+0LrRgyDQvNC40L3QuNC80LDQu9GM0L3Ri9GFINGC0YDQtdCx0L7QstCw0L3QuNC5XG4gICAgdmVyc2lvbnNUb1N0cmluZzogKHZlcnNpb25zKSAtPlxuICAgICAgdGV4dCA9ICcnXG4gICAgICBmb3IgbmFtZSwgdmVyc2lvbiBvZiB2ZXJzaW9uc1xuICAgICAgICB0ZXh0ICs9IFwiI3tuYW1lc1tuYW1lXS52YWx1ZX06ICN7dmVyc2lvbn0rLCBcIlxuXG4gICAgICByZXR1cm4gdGV4dC5zdWJzdHIoMCwgdGV4dC5sZW5ndGggLSAyKVxuXG4gICAgIyDQn9GA0L7QstC10YDQutCwINCx0YDQsNGD0LfQtdGA0LAg0L3QsCDRgdC+0L7RgtCy0LXRgtGB0YLQstC40LUg0YTRg9C90LrRhtC40L7QvdCw0LvQsFxuICAgIHZhbGlkYXRlOiAtPlxuICAgICAgaWYgdmFsaWRhdGlvbkVuYWJsZWQgaXMgbm9cbiAgICAgICAgaXNWYWxpZCA9IHRydWVcblxuICAgICAgICByZXR1cm4gaXNWYWxpZFxuXG4gICAgICBmb3IgdGVzdE5hbWUsIHRlc3Qgb2YgdGVzdHNcbiAgICAgICAgIyDQldGB0LvQuCDRgtC10YHRgiDQvtGC0LrQu9GO0YfQtdC9INC40LvQuCDQv9GA0L7QudC00LXQvSwg0YLQviDQv9GA0L7QtNC+0LvQttCw0LXQvFxuICAgICAgICBjb250aW51ZSBpZiB0ZXN0LmRpc2FibGVkIGlzIG5vIHx8IHRlc3QucnVuKCkgaXMgeWVzXG4gICAgICAgICMg0JjQvdCw0YfQtSDQv9GA0LXRgNGL0LLQsNC10Lwg0LLQsNC70LjQtNCw0YbQuNGOXG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZVxuICAgICAgICByZXR1cm4gaXNWYWxpZFxuXG4gICAgICBpc1ZhbGlkID0gdHJ1ZVxuXG4gICAgICByZXR1cm4gaXNWYWxpZFxuICAgICMg0J/QvtC70YPRh9C10L3QuNC1INGB0L7QvtCx0YnQtdC90LjRjyDQvtCxINC+0YjQuNCx0LrQtSDQstCw0LvQuNC00LDRhtC40LhcbiAgICBnZXRFcnJvck1lc3NhZ2U6IC0+XG4gICAgICByZXR1cm4gbnVsbCBpZiBpc1ZhbGlkIGlzIHllc1xuXG4gICAgICBpZiBpc1ZhbGlkIGlzIHVuZGVmaW5lZFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIHdhc24ndCBzdGFydGVkXCIpXG5cbiAgICAgIHZlcnNpb25zID0gQGdldE1pbmltYWxWZXJzaW9ucyh0ZXN0cylcbiAgICAgIHJldHVybiB0cmFuc2xhdGUoXG4gICAgICAgICdlcnJvci5vbGRfYnJvd3NlcicsXG4gICAgICAgIHticm93c2VyczogQHZlcnNpb25zVG9TdHJpbmcodmVyc2lvbnMpfVxuICAgICAgKVxuXG4gICAgIyDQn9GD0LHQu9C40YfQvdGL0Lkg0LPQtdGC0YLQtdGAfNGB0LXRgtGC0LXRgCDQtNC70Y8gaXNWYWxpZFxuICAgIGlzVmFsaWQ6ICh2YWxpZCkgLT5cbiAgICAgIGlzVmFsaWQgPSBpZiB2YWxpZCAhPSB1bmRlZmluZWQgdGhlbiB2YWxpZCBlbHNlIGlzVmFsaWRcblxuICByZXR1cm4gQnJvd3NlcjsiLCJhcHAuZmFjdG9yeSAnQ29uZmlndXJhdGlvbicsICgkcm9vdFNjb3BlLCAkcSwgYXBpLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgUG9ydCwgUnVsZSwgRGV2aWNlX3JvdXRpbmcsIFJvdXRpbmdfbW9kZWxfYXBwbGllciwgVmVyc2lvbiwgU3RhdHVzLCBHVUksIFJvdXRpbmdfbW9kZWxfZXJyb3JzLCBFbnVtcywgRGV2aWNlX3NldHRpbmdzLCB0cmFuc2xhdGUsIFBvcnRfbnVtZXJhdGlvbiwgRmlsZURCKSAtPlxuXG4gICMgLnNlcmlhbGl6ZSgpINCy0YvQt9GL0LLQsNC10YLRgdGPLCDQutC+0LPQtNCwINC90YPQttC90L4g0YHQvtGF0YDQsNC90LjRgtGMINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDQsiDRhNCw0LnQuyDRhtC10LvQuNC60L7QvCDQuNC70Lgg0YfQsNGB0YLQuNGH0L3QvlxuICAjICjQvdCw0L/RgNC40LzQtdGALCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Lgg0YXRgNCw0L3Rj9GC0YHRjyDRgtC+0LvRjNC60L4g0LIg0YTQsNC50LvQtSwg0L3QtSDQsiDRgdCw0LzQvtC8INGD0YHRgtGA0L7QudGB0YLQstC1INGD0YHRgtGA0L7QudGB0YLQstC1KVxuICAjXG4gICMgLmRlc2VyaWFsaXplKCkg0LLRi9C30YvQstCw0LXRgtGB0Y8sINC60L7Qs9C00LAg0L3Rg9C20L3QviDQstC+0YHRgdGC0LDQvdC+0LLQuNGC0Ywg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINGG0LXQu9C40LrQvtC8INC40Lcg0YTQsNC50LvQsCxcbiAgIyDQuNC70Lgg0LrQvtCz0LTQsCDQvdGD0LbQvdC+INCy0L7RgdGB0YLQsNC90L7QstC40YLRjCDQuNC3INGE0LDQudC70LAg0YfQsNGB0YLRjCDQutC+0L3RhNC40LPRg9GA0LDRhtC40LhcbiAgIyAo0L3QsNC/0YDQuNC80LXRgCwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C4INGF0YDQsNC90Y/RgtGB0Y8g0YLQvtC70YzQutC+INCyINGE0LDQudC70LUsINC90LUg0LIg0YHQsNC80L7QvCDRg9GB0YLRgNC+0LnRgdGC0LLQtSDRg9GB0YLRgNC+0LnRgdGC0LLQtSlcblxuICBzZWN0aW9uID0gKGRlc2NyaXB0aW9uKSAtPlxuICAgICMg0LfQsNGJ0LjRgtCwIFwi0L7RgiDQtNGD0YDQsNC60LBcIiAo0YHQvC4g0L/RgNC+0LLQtdGA0LrRgyDQsiDQutC+0L3RhtC1INGE0LDQudC70LApXG4gICAgZGVzY3JpcHRpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uID0geWVzXG5cbiAgICAjINCy0YvQt9GL0LLQsNGC0YwgbWlncmF0ZSDQutCw0LbQtNGL0Lkg0YDQsNC3INC/0LXRgNC10LQgZGVzZXJpYWxpemVcbiAgICBtaWdyYXRlX2JlZm9yZV9kZXNlcmlhbGl6ZSA9IChkZXNjcmlwdGlvbikgLT5cbiAgICAgIGRlc2VyaWFsaXplID0gZGVzY3JpcHRpb24uZGVzZXJpYWxpemVcbiAgICAgIGRlc2NyaXB0aW9uLmRlc2VyaWFsaXplID0gKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICAgICMg0LXRgdC70Lgg0Y3RgtC+INC90LUg0YHQsNC80LDRjyDQvdC+0LLQsNGPINCy0LXRgNGB0LjRjyAtINGB0LTQtdC70LDRgtGMINC80LjQs9GA0LDRhtC40Y5cbiAgICAgICAgaWYgbm90IGNvbmZpZ3VyYXRpb24udmVyc2lvbiB8fCAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi5hZnRlcihjb25maWd1cmF0aW9uLnZlcnNpb24pXG4gICAgICAgICAgaWYgZGVzY3JpcHRpb24ubWlncmF0ZVxuICAgICAgICAgICAgZGVzY3JpcHRpb24ubWlncmF0ZShjb25maWd1cmF0aW9uLCBWZXJzaW9uKGNvbmZpZ3VyYXRpb24udmVyc2lvbikpXG4gICAgICAgICMg0LTQtdGB0LXRgNC40LDQu9C40LfQvtCy0LDRgtGMXG4gICAgICAgIGRlc2VyaWFsaXplLmFwcGx5KEAsIGFyZ3VtZW50cylcblxuICAgICMg0LLRi9C30YvQstCw0YLRjCBzZXJpYWxpemUg0LrQsNC20LTRi9C5INGA0LDQtyDQv9C10YDQtdC0IHNhdmUsINC4INC/0YDQvtGB0YLQsNCy0LvRj9GC0Ywg0LzQtdGC0LrRgyDQstC10YDRgdC40LhcbiAgICBzZXJpYWxpemVfYmVmb3JlX3NhdmUgPSAoZGVzY3JpcHRpb24pIC0+XG4gICAgICBpZiBkZXNjcmlwdGlvbi5zYXZlXG4gICAgICAgIHNhdmUgPSBkZXNjcmlwdGlvbi5zYXZlXG4gICAgICAgIGRlc2NyaXB0aW9uLnNhdmUgPSAtPlxuICAgICAgICAgIGRhdGEgPSBkZXNjcmlwdGlvbi5zZXJpYWxpemUoTW9kZWwpXG4gICAgICAgICAgZGF0YS52ZXJzaW9uID0gJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLnZlcnNpb24udG9TdHJpbmcoKVxuICAgICAgICAgIHNhdmUoZGF0YSlcblxuICAgICMg0LLRi9C30YvQstCw0YLRjCBkZXNlcmlhbGl6ZSDQutCw0LbQtNGL0Lkg0YDQsNC3INC/0L7RgdC70LUgbG9hZFxuICAgIGRlc2VyaWFsaXplX2FmdGVyX2xvYWQgPSAoZGVzY3JpcHRpb24pIC0+XG4gICAgICBpZiBkZXNjcmlwdGlvbi5sb2FkXG4gICAgICAgIGxvYWQgPSBkZXNjcmlwdGlvbi5sb2FkXG4gICAgICAgIGRlc2NyaXB0aW9uLmxvYWQgPSAtPlxuICAgICAgICAgIGxvYWQuYXBwbHkoQCwgYXJndW1lbnRzKS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgICByZXN1bHQgPSBkZXNjcmlwdGlvbi5kZXNlcmlhbGl6ZShyZXN1bHQpXG4gICAgICAgICAgICBpZiBkZXNjcmlwdGlvbi52YWxpZGF0ZT9cbiAgICAgICAgICAgICAgZGVzY3JpcHRpb24udmFsaWRhdGUocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgbWlncmF0ZV9iZWZvcmVfZGVzZXJpYWxpemUoZGVzY3JpcHRpb24pXG5cbiAgICBzZXJpYWxpemVfYmVmb3JlX3NhdmUgKGRlc2NyaXB0aW9uKVxuICAgIGRlc2VyaWFsaXplX2FmdGVyX2xvYWQoZGVzY3JpcHRpb24pXG5cbiAgICBpZiBkZXNjcmlwdGlvbi5kZXZpY2VcbiAgICAgIHNlcmlhbGl6ZV9iZWZvcmVfc2F2ZSAoZGVzY3JpcHRpb24uZGV2aWNlKVxuICAgICAgZGVzZXJpYWxpemVfYWZ0ZXJfbG9hZChkZXNjcmlwdGlvbi5kZXZpY2UpXG5cbiAgICBkZXNjcmlwdGlvbi5sb2FkX2ludG9fbW9kZWwgPSAtPlxuICAgICAgZGVzY3JpcHRpb24ubG9hZCgpLnRoZW4gKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICAgIHJlcGxhY2Vfd2l0aChNb2RlbCwgY29uZmlndXJhdGlvbilcblxuICAgIHJldHVybiBkZXNjcmlwdGlvblxuXG4gIENvbmZpZ3VyYXRpb24gPVxuXG4gICAgRXJyb3I6XG4gICAgICBJbmNvbnNpc3RlbnRfY29uZmlndXJhdGlvbjogY3VzdG9tX2Vycm9yKCdJbmNvbnNpc3RlbnRfY29uZmlndXJhdGlvbicpXG5cbiAgICBEZXZpY2U6XG4gICAgICAjINGB0YLQuNGA0LDQtdGCINC00LDQvdC90YvQtSDRgNC+0YPRgtC40L3Qs9CwXG4gICAgICByZXNldF9yb3V0aW5nOiAtPlxuICAgICAgICBhcGkuY2FsbCgnc29mdFJlc2V0U3dpdGNoJylcblxuICAgICAgIyDRgdGC0LjRgNCw0LXRgiDQstGB0LUg0L3QsNGB0YLRgNC+0LnQutC4INC4INC/0LXRgNC10LfQsNC/0YPRgdC60LDQtdGCINC/0YDQvtGG0LXRgdGBINGB0LLQuNGH0LBcbiAgICAgIHJlc2V0OiAtPlxuICAgICAgICBhcGkuY2FsbCgncmVzZXRTd2l0Y2gnKS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICAgIyDRgtCw0LrQvtCz0L4g0L3QtSDQtNC+0LvQttC90L4g0LHRi9GC0YxcbiAgICAgICAgICBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdlcnJvci5kZXZpY2UucmVzZXRfZmFpbGVkJykpXG5cbiAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICAjIGlmIGVycm9yXG4gICAgICAgICAgIyAgIHJldHVybiBTdGF0dXMuZXJyb3IoJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0YHQsdGA0L7RgdC40YLRjCDRg9GB0YLRgNC+0LnRgdGC0LLQvicpXG5cbiAgICAgICAgICAjIFN0YXR1cy5idXN5KCfQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YHQsdGA0L7RiNC10L3QsC4g0KPRgdGC0YDQvtC50YHRgtCy0L4g0L/QtdGA0LXQt9Cw0LPRgNGD0LbQsNC10YLRgdGPLCDQttC00LjRgtC1Li4uJywgeyBzdGlja3k6IHllcyB9KVxuICAgICAgICAgIEdVSS53YWl0X2Zvcl9jb25uZWN0aW9uKDE2LCB0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLmFwcGxpY2F0aW9uX3Jlc3RhcnRpbmcnKSwgeyB0bzogJ2RldmljZScgfSlcblxuICAgICMg0L3QsNGB0YLRgNC+0LnQutC4INC/0L7RgNGC0L7QslxuICAgICMgKNC/0YDQuNGI0LvQvtGB0Ywg0YHQu9C40YLRjCDQstC80LXRgdGC0LUg0YHQtdC60YbQuNC4IFBvcnRzINC4IEpvaW50X3BvcnRzLFxuICAgICMgINC/0L7RgtC+0LzRgyDRh9GC0L4g0LIg0YTRg9C90LrRhtC40LggSm9pbnRfcG9ydHMuZGV2aWNlLmRlc2VyaWFsaXplKClcbiAgICAjICDQsiBqb2ludF9wb3J0cy5wb3J0cyDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0L/QvtGA0YLRiyDQuNC80LXQvdC90L4g0LjQtyDQvNCw0YHRgdC40LLQsCDRgdC10LrRhtC40LggUG9ydHMsXG4gICAgIyAgKNCyINGB0LzRi9GB0LvQtSDRg9C60LDQt9GC0LXQu9C10Lkg0L3QsCDQvtCx0LvQsNGB0YLRjCDQv9Cw0LzRj9GC0LgsINCwINC90LUg0LIg0YHQvNGL0YHQu9C1IGFuZ3VsYXIuZXF1YWxzKCkpXG4gICAgUG9ydHM6IHNlY3Rpb25cbiAgICAgIHNlcmlhbGl6ZTogKG1vZGVsKSAtPlxuICAgICAgICByZXN1bHQgPVxuICAgICAgICAgIHBvcnRzIDogKFBvcnQuc2FuaXRpemUocG9ydCkgZm9yIHBvcnQgaW4gbW9kZWwucG9ydHMpXG5cbiAgICAgICAgcmVwbGFjZV93aXRoKHJlc3VsdCwgQ29uZmlndXJhdGlvbi5Qb3J0cy5Kb2ludF9wb3J0cy5zZXJpYWxpemUobW9kZWwpKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG5cbiAgICAgIGRlc2VyaWFsaXplOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgICAgcmVzdWx0ID1cbiAgICAgICAgICBwb3J0cyAgICAgICA6IGNvbmZpZ3VyYXRpb24ucG9ydHNcbiAgICAgICAgICBqb2ludF9wb3J0cyA6IGNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHNcblxuICAgICAgICByZXBsYWNlX3dpdGgocmVzdWx0LCBDb25maWd1cmF0aW9uLlBvcnRzLkpvaW50X3BvcnRzLmRlc2VyaWFsaXplKGNvbmZpZ3VyYXRpb24sIHJlc3VsdC5wb3J0cykpXG4gICAgICAgIHJldHVybiByZXN1bHRcblxuICAgICAgbWlncmF0ZTogKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pIC0+XG4gICAgICAgIGlmIHZlcnNpb24uYmVmb3JlKCcxLjIuMCcpXG4gICAgICAgICAgZm9yIHBvcnQgaW4gY29uZmlndXJhdGlvbi5wb3J0c1xuICAgICAgICAgICAgaWYgbm90IHBvcnQuZGVlcF9pbnNwZWN0aW9uP1xuICAgICAgICAgICAgICBwb3J0LmRlZXBfaW5zcGVjdGlvbiA9IG5vXG5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5Qb3J0cy5Kb2ludF9wb3J0cy5taWdyYXRlKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pXG5cbiAgICAgIGxvYWRfY29tbWVudHM6IChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgICBGaWxlREIubG9hZCgnc3lzdGVtL3BvcnRzJykudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgIGZvciBwb3J0IGluIGNvbmZpZ3VyYXRpb24ucG9ydHNcbiAgICAgICAgICAgIHBvcnQuY29tbWVudCA9IHJlc3VsdC5jb21tZW50c1twb3J0LmlkXVxuICAgICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uXG5cbiAgICAgIHNldF9jb21tZW50OiAocG9ydCwgY29tbWVudCkgLT5cbiAgICAgICAgZGF0YSA9IFtdXG4gICAgICAgIGRhdGFbcG9ydC5pZF0gPSBjb21tZW50XG4gICAgICAgIEZpbGVEQi51cGRhdGUoJ3N5c3RlbS9wb3J0cycsICdjb21tZW50cycsIGRhdGEpXG4gICAgICAgIC50aGVuICgpIC0+XG4gICAgICAgICAgcG9ydC5jb21tZW50ID0gY29tbWVudFxuXG4gICAgICBsb2FkOiAtPlxuICAgICAgICAjINC90LAg0Y3RgtC+0Lwg0Y3RgtCw0L/QtSAuZGV2aWNlLmxvYWQoKSDRg9C20LUg0LHRg9C00LXRgiDQvtCx0ZHRgNC90YPRgtCwINGE0YPQvdC60YbQuNC10LkgLmRldmljZS5kZXNlcmlhbGl6ZSgpXG4gICAgICAgIENvbmZpZ3VyYXRpb24uUG9ydHMuZGV2aWNlLmxvYWQoKS50aGVuIChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgICAgIENvbmZpZ3VyYXRpb24uUG9ydHMubG9hZF9jb21tZW50cyhjb25maWd1cmF0aW9uKVxuXG4gICAgICBzYXZlOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgICAgZm9yIHBvcnQgaW4gY29uZmlndXJhdGlvbi5wb3J0c1xuICAgICAgICAgIGlmIHBvcnQuY29tbWVudFxuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5Qb3J0cy5zZXRfY29tbWVudChwb3J0KVxuXG4gICAgICByZXNldDogLT5cbiAgICAgICAgY2xlYXJfY29tbWVudHMgPSB7J2NvbW1lbnRzJzp7fX1cbiAgICAgICAgRmlsZURCLnNhdmUoJ3N5c3RlbS9wb3J0cycsY2xlYXJfY29tbWVudHMpXG5cbiAgICAgIGRldmljZTpcbiAgICAgICAgZGVzZXJpYWxpemU6IChwb3J0cykgLT5cbiAgICAgICAgICAjIGluaXRpYWxpemUgZ2VuZXJpYyBwb3J0c1xuICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPVxuICAgICAgICAgICAgcG9ydHMgOiAoeyBpZDogcG9ydC5pZCB9IGZvciBwb3J0IGluIHBvcnRzKVxuXG4gICAgICAgICAgIyBmaWxsIGluIHBvcnQgcHJvcGVydGllc1xuICAgICAgICAgIENvbmZpZ3VyYXRpb24uUG9ydHMuZGV2aWNlLnJlZnJlc2gocG9ydHMsIGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgICAgICAjINGB0LXQutGG0LjRjyBKb2ludF9wb3J0cyDQstGL0LfRi9Cy0LDQtdGC0YHRjyDQvtGC0YHRjtC00LAsINCwINC90LUg0YHQsNC80LAg0L/QviDRgdC10LHQtSwg0L/QvtGC0L7QvNGDINGH0YLQvlxuICAgICAgICAgICMg0LIgam9pbnRfcG9ydHMucG9ydHMg0LTQvtC70LbQvdGLINCx0YvRgtGMINC/0L7RgNGC0Ysg0LjQvNC10L3QvdC+INC40Lcg0Y3RgtC+0LPQviDQvNCw0YHRgdC40LLQsCBwb3J0cyxcbiAgICAgICAgICAjICjQsiDRgdC80YvRgdC70LUg0YPQutCw0LfRgtC10LvQtdC5INC90LAg0L7QsdC70LDRgdGC0Ywg0L/QsNC80Y/RgtC4LCDQsCDQvdC1INCyINGB0LzRi9GB0LvQtSBhbmd1bGFyLmVxdWFscygpKVxuICAgICAgICAgIHJlcGxhY2Vfd2l0aChjb25maWd1cmF0aW9uLCBDb25maWd1cmF0aW9uLlBvcnRzLkpvaW50X3BvcnRzLmRldmljZS5kZXNlcmlhbGl6ZShjb25maWd1cmF0aW9uKSlcblxuICAgICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uXG5cbiAgICAgICAgcmVmcmVzaDogKHBvcnRzLCBtb2RlbCkgLT5cblxuICAgICAgICAgICMg0LTQu9GPINC60LDQttC00L7Qs9C+INC/0L7RgNGC0LBcbiAgICAgICAgICBmb3IgcG9ydF9kYXRhIGluIHBvcnRzXG5cbiAgICAgICAgICAgICMg0J7QsdC90L7QstC40YLRjCDRgdGC0LDRgtGD0YEgRW5hYmxlZCAvIERpc2FibGVkINGN0YLQvtCz0L4g0L/QvtGA0YLQsCwg0LAg0YLQsNC60LbQtSDQv9GA0L7Rh9GD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4gKNGA0LXQttC40Lwg0YDQsNCx0L7RgtGLLCDQuCDRgi7Qvy4pXG4gICAgICAgICAgICBwb3J0ID0gbW9kZWwucG9ydHNbcG9ydF9kYXRhLmlkIC0gMV1cblxuICAgICAgICAgICAgZmllbGRzID1cblxuICAgICAgICAgICAgICBlbmFibGVkOiAoeCkgLT4gaWYgeCA9PSAxIHRoZW4geWVzIGVsc2Ugbm9cblxuICAgICAgICAgICAgICBldGhfbW9kZTogKHgpIC0+XG4gICAgICAgICAgICAgICAgIyDRgNC10YjQuNC70Lgg0L/QvtC00LTQtdGA0LbQuNCy0LDRgtGMINGC0L7Qu9GM0LrQviDRgtGA0LggZXRoZXJuZXQgbW9kZVxuICAgICAgICAgICAgICAgIHN3aXRjaCB4XG4gICAgICAgICAgICAgICAgICB3aGVuIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwMDBCQVNFX1gnXSAgdGhlbiB4XG4gICAgICAgICAgICAgICAgICB3aGVuIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwR0JBU0VfQ1InXSAgdGhlbiB4XG4gICAgICAgICAgICAgICAgICB3aGVuIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzQwR0JBU0VfU1I0J10gdGhlbiB4XG4gICAgICAgICAgICAgICAgICB3aGVuIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJ0RJU0FCTEVEJ10gICAgdGhlbiB4XG4gICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vua25vd24gcG9ydCBtb2RlJywgeClcbiAgICAgICAgICAgICAgICAgICAgeFxuXG4gICAgICAgICAgICAgIHBhcnNlcl9sZXZlbDogKHgpIC0+IHhcblxuICAgICAgICAgICAgICBtYWNfbGVhcm5pbmc6ICh4KSAtPiBpZiB4ID09IDEgdGhlbiB5ZXMgZWxzZSBub1xuXG4gICAgICAgICAgICAgIGRlZXBfaW5zcGVjdGlvbjogKHgpIC0+IGlmIHggPT0gMSB0aGVuIHllcyBlbHNlIG5vXG5cbiAgICAgICAgICAgICAgZm9yY2VfdXA6ICh4KSAtPiBpZiB4ID09IDEgdGhlbiB5ZXMgZWxzZSBub1xuXG4gICAgICAgICAgICAgIGxvb3BiYWNrOiAoeCkgLT4gaWYgeCA9PSAxIHRoZW4geWVzIGVsc2Ugbm9cblxuICAgICAgICAgICAgZm9yIGZpZWxkLCBjb252ZXJ0ZXIgb2YgZmllbGRzXG4gICAgICAgICAgICAgIHBvcnRbZmllbGRdID0gY29udmVydGVyKHBvcnRfZGF0YVtmaWVsZF0pXG5cbiAgICAgICAgbG9hZDogLT5cbiAgICAgICAgICBhcGkuY2FsbChcImdldFN3aXRjaEluZm9cIikudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5Qb3J0c1xuXG4gICAgICAjINC90LDRgdGC0YDQvtC50LrQuCA0MC3Qs9C40LPQsNCx0LjRgtC90YvRhSDQv9C+0YDRgtC+0LJcbiAgICAgIEpvaW50X3BvcnRzOlxuICAgICAgICBzZXJpYWxpemU6IChtb2RlbCkgLT5cbiAgICAgICAgICAjINCy0YHQtSDQv9C+0LTQv9C+0YDRgtGLINC30LDQvNC10L3QuNGC0Ywg0LjRhSBpZC3RiNC90LjQutCw0LzQuFxuICAgICAgICAgIGpvaW50X3BvcnRzID0gYW5ndWxhci5jb3B5KG1vZGVsLmpvaW50X3BvcnRzKVxuICAgICAgICAgIGZvciBqb2ludF9wb3J0IGluIGpvaW50X3BvcnRzXG4gICAgICAgICAgICBqb2ludF9wb3J0LnBvcnRzID0gKHBvcnQuaWQgZm9yIHBvcnQgaW4gam9pbnRfcG9ydC5wb3J0cylcblxuICAgICAgICAgIHJlc3VsdCA9XG4gICAgICAgICAgICBqb2ludF9wb3J0cyA6IGpvaW50X3BvcnRzXG5cbiAgICAgICAgZGVzZXJpYWxpemU6IChjb25maWd1cmF0aW9uLCBwb3J0cykgLT5cbiAgICAgICAgICBwb3J0X2J5X2lkID0gKGlkKSAtPlxuICAgICAgICAgICAgZm9yIHBvcnQgaW4gcG9ydHNcbiAgICAgICAgICAgICAgaWYgcG9ydC5pZCA9PSBpZFxuICAgICAgICAgICAgICAgIHJldHVybiBwb3J0XG5cbiAgICAgICAgICAjINCy0YHQtSDQv9C+0LTQv9C+0YDRgtGLINGA0LDQt9Cy0LXRgNC90YPRgtGMINC40LcgaWQt0YjQvdC40LrQvtCyINCyINC/0L7RgNGC0Ysg0LjQtyDQvNC+0LTQtdC70LhcbiAgICAgICAgICBqb2ludF9wb3J0cyA9IGFuZ3VsYXIuY29weShjb25maWd1cmF0aW9uLmpvaW50X3BvcnRzKVxuICAgICAgICAgIGZvciBqb2ludF9wb3J0IGluIGpvaW50X3BvcnRzXG4gICAgICAgICAgICBqb2ludF9wb3J0LnBvcnRzID0gKHBvcnRfYnlfaWQocG9ydCkgZm9yIHBvcnQgaW4gam9pbnRfcG9ydC5wb3J0cylcblxuICAgICAgICAgIHJlc3VsdCA9XG4gICAgICAgICAgICBqb2ludF9wb3J0cyA6IGpvaW50X3BvcnRzXG5cbiAgICAgICAgbWlncmF0ZTogKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pIC0+XG4gICAgICAgICAgaWYgdmVyc2lvbi5iZWZvcmUoJzEuNC4wJylcbiAgICAgICAgICAgIGlmIG5vdCBjb25maWd1cmF0aW9uLmpvaW50X3BvcnRzXG4gICAgICAgICAgICAgICMg0LfQsNC/0L7Qu9C90LjRgtGMIGpvaW50X3BvcnRzXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHMgPSBbXVxuICAgICAgICAgICAgICBpZiBQb3J0Lmhhc19qb2ludF9wb3J0cygpXG4gICAgICAgICAgICAgICAgZm9yIGkgaW4gWzEuLlBvcnQuam9pbnRfcG9ydF9jb3VudCgpXVxuICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5qb2ludF9wb3J0cy5wdXNoKHsgaWQ6IGksIG1vZGU6ICc0eDEwRycgfSlcblxuICAgICAgICBkZXZpY2U6XG4gICAgICAgICAgZGVzZXJpYWxpemU6IChtb2RlbCkgLT5cbiAgICAgICAgICAgICMgaW5pdGlhbGl6ZSBqb2ludCBwb3J0c1xuICAgICAgICAgICAgcG9ydHNJZCA9IFtdXG5cbiAgICAgICAgICAgIGpvaW5lZF9wb3J0cyA9IChpZCkgLT5cbiAgICAgICAgICAgICAgc2hpZnQgPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfdG9fcG9ydF9pZChpZCwgMClcbiAgICAgICAgICAgICAgWzEuLkRldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0XS5tYXAoKGkpIC0+IG1vZGVsLnBvcnRzW3NoaWZ0ICsgaSAtIDFdKVxuICAgICAgICAgICAgICAjINCy0LXRgNC90YPRgtGMIGlkLdGI0L3QuNC60Lgg0L/QvtGA0YLQvtCyINCy0LzQtdGB0YLQviDQvtCx0YrQtdC60YLQvtCyINC/0L7RgNGC0L7QsixcbiAgICAgICAgICAgICAgIyDQv9C+0YLQvtC80YMg0YfRgtC+INC/0L7RgtC+0Lwg0LHRg9C00LXRgiDQstGL0LfQstCw0L0g0LzQtdGC0L7QtCBkZXNlcmlhbGl6ZSgpXG4gICAgICAgICAgICAgIC5tYXAoKHBvcnQpIC0+IHBvcnQuaWQpXG5cbiAgICAgICAgICAgIGpvaW50X3BvcnRfY291bnQgPSBNYXRoLmNlaWwoKG1vZGVsLnBvcnRzLmxlbmd0aCAtIERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnQpICogMS4wIC8gRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQpXG5cbiAgICAgICAgICAgIGlmIGpvaW50X3BvcnRfY291bnQgPCAwXG4gICAgICAgICAgICAgIGpvaW50X3BvcnRfY291bnQgPSAwXG5cbiAgICAgICAgICAgIGZvciBpIGluIFsxLi5qb2ludF9wb3J0X2NvdW50XVxuICAgICAgICAgICAgICBpbmRleCA9IHN3aXRjaCBEZXZpY2Vfc2V0dGluZ3MuZ2V0X3BsYXRmb3JtKClcbiAgICAgICAgICAgICAgICB3aGVuIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MSB0aGVuIGlcblxuICAgICAgICAgICAgICAgIHdoZW4gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZiwgRGV2aWNlX3NldHRpbmdzLmRldmljZXMudW5rbm93blxuICAgICAgICAgICAgICAgICAgaWYgaSAlIDIgPT0gMSB0aGVuIGkgKyAxIGVsc2UgaSAtIDFcblxuICAgICAgICAgICAgICBwb3J0c0lkLnB1c2goaW5kZXgpXG5cbiAgICAgICAgICAgIGpvaW50X3BvcnRzID0gaWYgam9pbnRfcG9ydF9jb3VudCA9PSAwXG4gICAgICAgICAgICAgIFtdXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICh7IGlkOiBpZCwgcG9ydHM6IGpvaW5lZF9wb3J0cyhpZCkgfSBmb3IgaWQgaW4gcG9ydHNJZClcblxuICAgICAgICAgICAgIyByZXN1bHRcblxuICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9XG4gICAgICAgICAgICAgIGpvaW50X3BvcnRzIDogam9pbnRfcG9ydHNcblxuICAgICAgICAgICAgIyBmaWxsIGluIHBvcnQgcHJvcGVydGllc1xuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5Qb3J0cy5Kb2ludF9wb3J0cy5kZXZpY2UucmVmcmVzaChjb25maWd1cmF0aW9uKVxuXG4gICAgICAgICAgICByZXR1cm4gY29uZmlndXJhdGlvblxuXG4gICAgICAgICAgcmVmcmVzaDogKG1vZGVsKSAtPlxuICAgICAgICAgICAgIyDQvtCx0L3QvtCy0LjRgtGMINGB0YLQsNGC0YPRgdGLINC00LvRjyBqb2ludF9wb3J0c1xuICAgICAgICAgICAgZm9yIGpvaW50X3BvcnQgaW4gbW9kZWwuam9pbnRfcG9ydHNcbiAgICAgICAgICAgICAgam9pbnRfcG9ydC5tb2RlID0gaWYgam9pbnRfcG9ydC5wb3J0c1swXS5ldGhfbW9kZSA9PSBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddIHx8IGpvaW50X3BvcnQucG9ydHNbMF0uZXRoX21vZGUgPT0gRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlcy5YTEFVSSB0aGVuICc0MEcnIGVsc2UgJzR4MTBHJ1xuXG4gICAgIyDQvdCw0YHRgtGA0L7QudC60Lgg0LzQsNGA0YjRgNGD0YLQuNC30LDRhtC40LhcbiAgICBSb3V0aW5nOiBzZWN0aW9uXG4gICAgICBzZXJpYWxpemU6IChtb2RlbCkgLT5cbiAgICAgICAgcmVzdWx0ID1cbiAgICAgICAgICBydWxlcyAgICAgICAgOiBtb2RlbC5ydWxlcy5tYXAoKHJ1bGUpIC0+IFJ1bGUuc2VyaWFsaXplKHJ1bGUpKVxuICAgICAgICAgICMgaGFzaF9wcm9maWxlIDogbW9kZWwuaGFzaF9wcm9maWxlLmlkXG5cbiAgICAgIGRlc2VyaWFsaXplOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgICAgcmVzdWx0ID1cbiAgICAgICAgICBydWxlcyAgICAgICAgOiBjb25maWd1cmF0aW9uLnJ1bGVzLm1hcCgocnVsZSkgLT4gUnVsZS5kZXNlcmlhbGl6ZShydWxlKSlcbiAgICAgICAgICAjIGhhc2hfcHJvZmlsZSA6IERldmljZV9yb3V0aW5nLkxCRy5IYXNoX3Byb2ZpbGUuYnlfaWQoY29uZmlndXJhdGlvbi5oYXNoX3Byb2ZpbGUpXG5cbiAgICAgIG1pZ3JhdGU6IChjb25maWd1cmF0aW9uLCB2ZXJzaW9uKSAtPlxuXG4gICAgICAgIGlmIHZlcnNpb24uYmVmb3JlKCcxLjEuMCcpXG4gICAgICAgICAgZm9yIHJ1bGUgaW4gY29uZmlndXJhdGlvbi5ydWxlc1xuICAgICAgICAgICAgaWYgcnVsZS5hY3Rpb24gPT0gJ2JhbGFuY2UnICYmIHJ1bGUub3V0cHV0cy5sZW5ndGggPiAxICYmIG5vdCBydWxlLmhhc2hpbmdfcHJvZmlsZT9cbiAgICAgICAgICAgICAgcnVsZS5oYXNoaW5nX3Byb2ZpbGUgPSAwXG5cbiAgICAgIHNhdmU6IChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgICBGaWxlREIuc2F2ZSgnc3lzdGVtL3JvdXRpbmcnLCBjb25maWd1cmF0aW9uKVxuXG4gICAgICBsb2FkOiAtPlxuICAgICAgICBGaWxlREIubG9hZCgnc3lzdGVtL3JvdXRpbmcnKVxuXG4gICAgICByZXNldDogLT5cbiAgICAgICAgRmlsZURCLnNhdmUoJ3N5c3RlbS9yb3V0aW5nJywge1wicnVsZXNcIjpbXSxcInZlcnNpb25cIjpcIjEuNi42XCJ9KVxuXG4gICAgICB2YWxpZGF0ZTogKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICAgICMg0LfQtNC10YHRjCDQvdC1INGC0YDQtdCx0L7QstCw0YLRjCDQv9GA0LDQstC40LvRjNC90L7RgdGC0Lgg0L7RgiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lkg0YHRgtCw0YDRi9GFINCy0LXRgNGB0LjQuVxuXG4gICAgICAgICMg0LXRgdC70Lgg0LTQu9GPINGE0LjQu9GM0YLRgNCwINC90LUg0YDQsNC30YDQtdGI0LXQvdCwINC80LDRgdC60LAgLSDQtdGRINCx0YvRgtGMINC90LUg0LTQvtC70LbQvdC+ICjQvdCw0YfQuNC90LDRjyDRgSDQstC10YDRgdC40LggMS4zLjApXG4gICAgICAgIGlmICRyb290U2NvcGUuY29uZmlndXJhdGlvbi52ZXJzaW9uLnN0YXJ0aW5nX2Zyb20oJzEuMy4wJylcblxuICAgICAgICAgIGZvciBydWxlIGluIGNvbmZpZ3VyYXRpb24ucnVsZXNcbiAgICAgICAgICAgIGZvciBmaWx0ZXIgaW4gcnVsZS5maWx0ZXJzXG4gICAgICAgICAgICAgIGlmICRyb290U2NvcGUudW5tYXNrZWRfYWNsX2ZpbHRlcl90eXBlcy5oYXMoZmlsdGVyLnR5cGUpICYmIERldmljZV9yb3V0aW5nLkZpbHRlci5oYXNfbm9uX2RlZmF1bHRfbWFzayhmaWx0ZXIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5maWx0ZXJfc2hvdWxkX25vdF9oYXZlX2FfbWFzaycsIHsgZmlsdGVyOiB0cmFuc2xhdGUoXCJBQ0wucnVsZS5maWx0ZXIudHlwZS4je2ZpbHRlci50eXBlfVwiKSB9KSlcblxuICAgICMg0L3QsNGB0YLRgNC+0LnQutC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5XG4gICAgVXNlcnM6XG4gICAgICBjaGFuZ2VfcGFzc3dvcmQ6IChwYXNzd29yZCkgLT5cbiAgICAgICAgRmlsZURCLmxvYWQoJ3N5c3RlbS91c2VycycpLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICByZXN1bHQudXNlcnNbMF0ucGFzc3dvcmQgPSBwYXNzd29yZFxuICAgICAgICAgIEZpbGVEQi5zYXZlKCdzeXN0ZW0vdXNlcnMnLCByZXN1bHQpXG5cbiAgICAjINGB0LXRgtC10LLRi9C1INC90LDRgdGC0YDQvtC50LrQuFxuICAgIE5ldHdvcms6IHNlY3Rpb25cbiAgICAgIHNlcmlhbGl6ZTogKG1vZGVsKSAtPlxuICAgICAgICByZXN1bHQgPVxuICAgICAgICAgIG5ldHdvcmsgOiBtb2RlbC5uZXR3b3JrXG5cbiAgICAgIGRlc2VyaWFsaXplOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgICAgcmVzdWx0ID1cbiAgICAgICAgICBuZXR3b3JrIDogY29uZmlndXJhdGlvbi5uZXR3b3JrXG5cbiAgICAgIG1pZ3JhdGU6IChjb25maWd1cmF0aW9uLCB2ZXJzaW9uKSAtPlxuXG4gICAgICBsb2FkOiAtPiBDb25maWd1cmF0aW9uLk5ldHdvcmsuZGV2aWNlLmxvYWQoKVxuICAgICAgc2F2ZTogKGNvbmZpZ3VyYXRpb24pIC0+IENvbmZpZ3VyYXRpb24uTmV0d29yay5kZXZpY2Uuc2F2ZShjb25maWd1cmF0aW9uKVxuXG4gICAgICBkZXZpY2U6XG4gICAgICAgIHNlcmlhbGl6ZTogKG1vZGVsKSAtPlxuICAgICAgICAgIG5ldHdvcmsgPSBhbmd1bGFyLmNvcHkobW9kZWwubmV0d29yaylcblxuICAgICAgICAgIG5ldHdvcmsuZGhjcCA9IGlmIG5ldHdvcmsuZGhjcCA9PSB5ZXMgdGhlbiAnMScgZWxzZSAnMCdcblxuICAgICAgICAgIHJldHVybiBuZXR3b3JrXG5cbiAgICAgICAgZGVzZXJpYWxpemU6IChyZXN1bHQpIC0+XG4gICAgICAgICAgbmV0d29yazpcbiAgICAgICAgICAgIGRoY3AgICAgOiBpZiByZXN1bHQuZGhjcCA9PSAnMScgdGhlbiB5ZXMgZWxzZSBub1xuICAgICAgICAgICAgaXAgICAgICA6IHJlc3VsdC5pcFxuICAgICAgICAgICAgbWFzayAgICA6IHJlc3VsdC5tYXNrXG4gICAgICAgICAgICBnYXRld2F5IDogcmVzdWx0LmdhdGV3YXlcbiAgICAgICAgICAgIGRuczEgICAgOiByZXN1bHQuZG5zMSB8fCAnJ1xuICAgICAgICAgICAgZG5zMiAgICA6IHJlc3VsdC5kbnMyIHx8ICcnXG5cbiAgICAgICAgc2F2ZTogKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICAgICAgYXBpLmNhbGwoJ3NldE5ldENvbmZpZycsIGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgICAgbG9hZDogLT5cbiAgICAgICAgICBhcGkuY2FsbCgnZ2V0TmV0Q29uZmlnJylcblxuICAgICMgIyDQv9GA0L7Rh9C40LUg0L3QsNGB0YLRgNC+0LnQutC4XG4gICAgIyBTZXR0aW5nczogc2VjdGlvblxuICAgICMgICBzZXJpYWxpemU6IChtb2RlbCkgLT5cbiAgICAjICAgICByZXN1bHQgPSBtb2RlbFxuICAgICNcbiAgICAjICAgZGVzZXJpYWxpemU6IChjb25maWd1cmF0aW9uKSAtPlxuICAgICMgICAgIHJlc3VsdCA9XG4gICAgIyAgICAgICBsYW5ndWFnZTogY29uZmlndXJhdGlvbi5sYW5ndWFnZSB8fCAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24uZGVmYXVsdF9sYW5ndWFnZVxuICAgICNcbiAgICAjICAgc2F2ZTogKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgIyAgICAgRmlsZURCLnNhdmUoJ3N5c3RlbS9zZXR0aW5ncycsIGNvbmZpZ3VyYXRpb24pXG4gICAgI1xuICAgICMgICBsb2FkOiAtPlxuICAgICMgICAgIEZpbGVEQi5sb2FkKCdzeXN0ZW0vc2V0dGluZ3MnKVxuICAgICNcbiAgICAjICAgcmVzZXQ6IC0+XG4gICAgIyAgICAgZGF0YSA9IHt9XG4gICAgI1xuICAgICMgICAgIEBzYXZlKEBkZXNlcmlhbGl6ZShkYXRhKSlcblxuICAgICMgQ29uZmlndXJhdGlvbiBtZXRob2RzXG5cbiAgICAjINC00LvRjyDRgdC+0YXRgNCw0L3QtdC90LjRjyDQvNC+0LTQtdC70Lgg0LIg0YLQtdC60YHRgtC+0LLRi9C5INGE0LDQudC7XG4gICAgc2VyaWFsaXplOiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgIHNlcmlhbGl6ZWRfY29uZmlndXJhdGlvbiA9IHt9XG5cbiAgICAgIGZvciBuYW1lLCBzZWN0aW9uIG9mIENvbmZpZ3VyYXRpb25cbiAgICAgICAgaWYgc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb25cbiAgICAgICAgICByZXBsYWNlX3dpdGgoc2VyaWFsaXplZF9jb25maWd1cmF0aW9uLCBzZWN0aW9uLnNlcmlhbGl6ZShjb25maWd1cmF0aW9uKSlcblxuICAgICAgc2VyaWFsaXplZF9jb25maWd1cmF0aW9uLnZlcnNpb24gPSAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi50b1N0cmluZygpXG5cbiAgICAgIHJldHVybiBzZXJpYWxpemVkX2NvbmZpZ3VyYXRpb25cblxuICAgICMg0YHRh9C40YLRi9Cy0LDQtdGCINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiAo0L3QsNC/0YDQuNC80LXRgCwg0LTQu9GPINC/0L7RgdC70LXQtNGD0Y7RidC10LPQviDQtdGRINGB0L7RhdGA0LDQvdC10L3QuNGPINCyINGE0LDQudC7KVxuICAgIGxvYWQ6IC0+XG4gICAgICBjb25maWd1cmF0aW9uID0ge31cblxuICAgICAgc2VjdGlvbnMgPSBbXVxuXG4gICAgICBmb3IgbmFtZSwgc2VjdGlvbiBvZiBDb25maWd1cmF0aW9uXG4gICAgICAgIGlmIHNlY3Rpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uICYmIHNlY3Rpb24ubG9hZFxuICAgICAgICAgIHNlY3Rpb25zLnB1c2goc2VjdGlvbilcblxuICAgICAgUHJvbWlzZS5lYWNoIHNlY3Rpb25zLCAoc2VjdGlvbikgLT5cbiAgICAgICAgc2VjdGlvbi5sb2FkKCkudGhlbiAoY29uZmlndXJhdGlvbl9wb3J0aW9uKSAtPlxuICAgICAgICAgIHJlcGxhY2Vfd2l0aChjb25maWd1cmF0aW9uLCBjb25maWd1cmF0aW9uX3BvcnRpb24pXG5cbiAgICAgIC50aGVuIC0+XG4gICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uXG5cbiAgICAjICjQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDQv9GA0LjQu9C+0LbQtdC90LjRjykg0LfQsNCz0YDRg9C30LjRgtGMINC/0L7RgdC70LXQtNC90Y7RjiDRgdC+0YXRgNCw0L3RkdC90L3Rg9GOINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRji5cbiAgICAjINC/0YDQsNCy0LjQu9CwLCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LggLSDQstGB0ZEsINGH0YLQviDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0L/QvtC70YPRh9C10L3QviDRgSDRg9GB0YLRgNC+0LnRgdGC0LLQsC5cbiAgICByZWFkX2xvY2FsX3JvdXRpbmdfY29uZmlndXJhdGlvbjogLT5cbiAgICAgICRyb290U2NvcGUucm91dGluZyA9IHt9XG5cbiAgICAgIENvbmZpZ3VyYXRpb24uUm91dGluZy5sb2FkKClcblxuICAgICAgLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgJHJvb3RTY29wZS5yb3V0aW5nID0gcmVzdWx0XG5cbiAgICAjINCy0LDQu9C40LTQsNGG0LjRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40LhcbiAgICB2YWxpZGF0ZTogKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICAjIHRvIGRvOiDQvdCw0L/QuNGB0LDRgtGMINCy0LDQu9C40LTQsNGG0LjRjiBqc29uJ9CwINC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuFxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLmludmFsaWQnKSkgaWYgbm90IGNvbmZpZ3VyYXRpb24ucG9ydHNcbiAgICAgIHRocm93IG5ldyBFcnJvcih0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uZXJyb3IuaW52YWxpZCcpKSBpZiBub3QgY29uZmlndXJhdGlvbi5ydWxlc1xuXG4gICAgICAjICMg0L/QtdGA0LXQtCDRjdGC0LjQvCwg0L3QsNCy0LXRgNC90L7QtSwg0YHQvdCw0YfQsNC70LAg0L3Rg9C20L3QviDQtNC10LvQsNGC0Ywg0LzQuNCz0YDQsNGG0LjRjlxuICAgICAgIyBmb3IgbmFtZSwgc2VjdGlvbiBvZiBDb25maWd1cmF0aW9uXG4gICAgICAjICAgaWYgdHlwZW9mIHNlY3Rpb24gPT0gJ29iamVjdCdcbiAgICAgICMgICAgIHNlY3Rpb24udmFsaWRhdGUoY29uZmlndXJhdGlvbilcblxuICAgICMg0L/QtdGA0LXQstC10YHRgtC4INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRgdGC0LDRgNC+0Lkg0LLQtdGA0YHQuNC4INCyINCy0LjQtCDRgdCw0LzQvtC5INC90L7QstC+0Lkg0LLQtdGA0YHQuNC4XG4gICAgbWlncmF0ZTogKGNvbmZpZ3VyYXRpb24pIC0+XG4gICAgICB2ZXJzaW9uID0gVmVyc2lvbihjb25maWd1cmF0aW9uLnZlcnNpb24pXG5cbiAgICAgIGZvciBuYW1lLCBzZWN0aW9uIG9mIENvbmZpZ3VyYXRpb25cbiAgICAgICAgaWYgc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb24gJiYgc2VjdGlvbi5taWdyYXRlXG4gICAgICAgICAgc2VjdGlvbi5taWdyYXRlKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pXG5cbiAgICAgICMg0L7QsdC90L7QstC40YLRjCDQstC10YDRgdC40Y4sINGA0LDQtyDRgdC00LXQu9Cw0LvQuCDQvNC40LPRgNCw0YbQuNGOXG4gICAgICBjb25maWd1cmF0aW9uLnZlcnNpb24gPSAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi50b1N0cmluZygpXG5cbiAgICAgIHJldHVybiBjb25maWd1cmF0aW9uXG5cbiAgICAjINC/0YDQvtGB0YLQtdC50YjQsNGPINC/0YDQvtCy0LXRgNC60LAg0L3QsCDRgtC+LCDRh9GC0L4g0LTQsNC90L3QsNGPINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDQv9GA0LjQvNC10L3QuNC80LAg0Log0LTQsNC90L3QvtC80YMg0YPRgdGC0YDQvtC50YHRgtCy0YNcbiAgICB0ZXN0X2NvbXBsaWFuY2U6IChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgIyDQvdC1INC/0L7Qt9Cy0L7Qu9GP0YLRjCDQt9Cw0LPRgNGD0LbQsNGC0Ywg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC00LvRjyDQtNGA0YPQs9C+0LPQviDQutC+0LvQuNGH0LXRgdGC0LLQsCDQv9C+0YDRgtC+0LJcbiAgICAgIGlmIFBvcnQuY291bnQgIT0gY29uZmlndXJhdGlvbi5wb3J0cy5sZW5ndGhcbiAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb24uRXJyb3IuSW5jb25zaXN0ZW50X2NvbmZpZ3VyYXRpb24oKVxuXG4gICAgICBmb3IgcG9ydCBpbiBjb25maWd1cmF0aW9uLnBvcnRzXG4gICAgICAgIGlmIG5vdCBQb3J0LmJ5X2lkKHBvcnQuaWQpXG4gICAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb24uRXJyb3IuSW5jb25zaXN0ZW50X2NvbmZpZ3VyYXRpb24oKVxuICAgICAgICAgICMgdGhyb3cgbmV3IEVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5wb3J0X25vdF9mb3VuZCcsIHsgcG9ydDogcG9ydC5pZCB9KSlcblxuICAgICMg0L/RgNC40LzQtdC90LjRgtGMINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjlxuICAgIGFwcGx5OiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgIFByb21pc2UucmVzb2x2ZSh5ZXMpLnRoZW4gLT5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5taWdyYXRlKGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgICAgQ29uZmlndXJhdGlvbi50ZXN0X2NvbXBsaWFuY2UoY29uZmlndXJhdGlvbilcblxuICAgICAgICBjb25maWd1cmF0aW9uID0gYW5ndWxhci5jb3B5KGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgIC50aGVuIC0+XG4gICAgICAgICMg0LjQt9Cy0LXRgdGC0LjRgtGMINGB0YLRgNCw0L3QuNGG0YMgXCLQn9GA0LDQstC40LtcIiDQviDRgtC+0LwsINGH0YLQviDQv9GA0LjQvNC10L3Rj9C10YLRgdGPINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRj1xuICAgICAgICAjICjRh9GC0L7QsdGLINGC0LDQvCAkd2F0Y2gn0LXRgCDQvdCwIE1vZGVsLnJ1bGVzINC90LUg0L7RgtGA0LDQsdCw0YLRi9Cy0LDQuyAtINC90LUg0LTQtdC70LDQuyDQu9C40YjQvdGO0Y4g0YDQsNCx0L7RgtGDKVxuICAgICAgICAkcm9vdFNjb3BlLmFwcGx5aW5nX2NvbmZpZ3VyYXRpb24gPSB5ZXNcblxuICAgICAgICAjINC+0LHQvdC+0LLQuNGC0Ywg0LIg0LzQvtC00LXQu9C4INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDQv9C+0YDRgtC+0LJcbiAgICAgICAgTW9kZWxfc2VydmljZS5kb193aXRoX3BvcnRfbG9jayAtPlxuXG4gICAgICAgICAgcmVwbGFjZV93aXRoKE1vZGVsLCBDb25maWd1cmF0aW9uLlBvcnRzLmRlc2VyaWFsaXplKGNvbmZpZ3VyYXRpb24pKVxuXG4gICAgICAgICAgZm9yIG5hbWUsIHNlY3Rpb24gb2YgQ29uZmlndXJhdGlvbiB3aGVuIG5vdCBbJ1BvcnRzJ10uaGFzKG5hbWUpXG4gICAgICAgICAgICBpZiBzZWN0aW9uLmlzX2NvbmZpZ3VyYXRpb25fc2VjdGlvblxuICAgICAgICAgICAgICByZXBsYWNlX3dpdGgoTW9kZWwsIHNlY3Rpb24uZGVzZXJpYWxpemUoY29uZmlndXJhdGlvbikpXG5cbiAgICAgICAgICBDb25maWd1cmF0aW9uLkRldmljZS5yZXNldF9yb3V0aW5nKClcblxuICAgICAgICAgIC50aGVuIC0+XG4gICAgICAgICAgICAjINGB0L7RhdGA0LDQvdC40YLRjCDQutCw0LbQtNGL0Lkg0YDQsNC30LTQtdC7INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuFxuXG4gICAgICAgICAgICBzZWN0aW9ucyA9IFtdXG5cbiAgICAgICAgICAgIGZvciBuYW1lLCBzZWN0aW9uIG9mIENvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgaWYgc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb24gJiYgc2VjdGlvbi5zYXZlXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaChzZWN0aW9uKVxuXG4gICAgICAgICAgICBQcm9taXNlLmVhY2goc2VjdGlvbnMsICgoc2VjdGlvbikgLT4gc2VjdGlvbi5zYXZlKCkpKVxuXG4gICAgICAgICAgLnRoZW4gLT5cbiAgICAgICAgICAgICMg0L/RgNC+0LPRgNGD0LfQuNGC0Ywg0L/RgNCw0LLQuNC70LAg0LIg0YPRgdGC0YDQvtC50YHRgtCy0L5cbiAgICAgICAgICAgIFJvdXRpbmdfbW9kZWxfYXBwbGllci5zZXRfdXBfcm91dGluZyhNb2RlbC5ydWxlcywgTW9kZWwucG9ydHMsIE1vZGVsLmpvaW50X3BvcnRzKVxuXG4gICAgICAuZmluYWxseSAtPlxuICAgICAgICAjINC40LfQstC10YHRgtC40YLRjCDRgdGC0YDQsNC90LjRhtGDIFwi0J/RgNCw0LLQuNC7XCIg0L4g0YLQvtC8LCDRh9GC0L4g0L/RgNC+0YbQtdGB0YEg0L/RgNC40LzQtdC90LXQvdC40Y8g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INC30LDQstC10YDRiNGR0L1cbiAgICAgICAgIyAo0YfRgtC+0LHRiyDRgtCw0LwgJHdhdGNoJ9C10YAg0L3QsCBNb2RlbC5ydWxlcyDRgdC90L7QstCwINC80L7QsyDQvtGC0YDQsNCx0LDRgtGL0LLQsNGC0YwpXG4gICAgICAgICRyb290U2NvcGUuYXBwbHlpbmdfY29uZmlndXJhdGlvbiA9IG5vXG5cbiAgICByZXNldDogLT5cbiAgICAgIHJldHVybiBpZiBub3QgY29uZmlybSB0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uY29uZmlybV9yZXNldCcpXG5cbiAgICAgIHJlc2V0cyA9IFtdXG5cbiAgICAgIGZvciBuYW1lLCBzZWN0aW9uIG9mIENvbmZpZ3VyYXRpb25cbiAgICAgICAgaWYgc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb25cbiAgICAgICAgICBpZiBzZWN0aW9uLnJlc2V0P1xuICAgICAgICAgICAgcmVzZXRzLnB1c2goc2VjdGlvbi5yZXNldC5iaW5kKHNlY3Rpb24pKVxuXG4gICAgICAjINCy0YvQv9C+0LvQvdC40YLRjCDQstGB0LUgcmVzZXQn0Ysg0L/QviDQvtGH0LXRgNC10LTQuFxuICAgICAgIyAo0LIgUSDQvdC10YIg0YHQv9C+0YHQvtCx0LAg0Y3RgtC+INGB0LTQtdC70LDRgtGMINGH0LXRgNC10LcgQVBJKVxuXG4gICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKVxuICAgICAgZGVmZXJyZWQucHJvbWlzZVxuXG4gICAgICByZXNldHMucmVkdWNlKCgocmVkdWNlZCwgcmVzZXQpIC0+IHJlZHVjZWQudGhlbihyZXNldCkpLCBkZWZlcnJlZC5wcm9taXNlKS50aGVuIC0+XG4gICAgICAgIENvbmZpZ3VyYXRpb24uRGV2aWNlLnJlc2V0KClcblxuICAgICAgIyBibHVlYmlyZCDQstGL0LrQuNC00YvQstCw0LXRgiDQvtGI0LjQsdC60YNcbiAgICAgICMgUHJvbWlzZS5lYWNoKHJlc2V0cykudGhlbiAtPlxuICAgICAgIyAgIENvbmZpZ3VyYXRpb24uRGV2aWNlLnJlc2V0KClcblxuICAjINC30LDRidC40YLQsCBcItC+0YIg0LTRg9GA0LDQutCwXCJcbiAgZXhjZXB0aW9ucyA9IFsnRXJyb3InLCAnRGV2aWNlJywgJ1VzZXJzJ11cbiAgZm9yIGtleSwgc2VjdGlvbiBvZiBDb25maWd1cmF0aW9uXG4gICAgaWYgdHlwZW9mIHNlY3Rpb24gPT0gJ29iamVjdCcgJiYgbm90IHNlY3Rpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uICYmIGV4Y2VwdGlvbnMuaGFzX25vKGtleSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbmZpZ3VyYXRpb24uI3trZXl9IGlzIG5vdCBhIHNlY3Rpb24uIElmIGl0J3MgaW50ZW5kZWQgYWRkIGl0IHRvIGV4Y2VwdGlvbnNcIilcblxuICByZXR1cm4gQ29uZmlndXJhdGlvblxuIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnQ29uZmlndXJhdGlvbicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRxLCBhcGksIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBQb3J0LCBSdWxlLCBEZXZpY2Vfcm91dGluZywgUm91dGluZ19tb2RlbF9hcHBsaWVyLCBWZXJzaW9uLCBTdGF0dXMsIEdVSSwgUm91dGluZ19tb2RlbF9lcnJvcnMsIEVudW1zLCBEZXZpY2Vfc2V0dGluZ3MsIHRyYW5zbGF0ZSwgUG9ydF9udW1lcmF0aW9uLCBGaWxlREIpIHtcbiAgICB2YXIgQ29uZmlndXJhdGlvbiwgZXhjZXB0aW9ucywga2V5LCBzZWN0aW9uO1xuICAgIHNlY3Rpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgdmFyIGRlc2VyaWFsaXplX2FmdGVyX2xvYWQsIG1pZ3JhdGVfYmVmb3JlX2Rlc2VyaWFsaXplLCBzZXJpYWxpemVfYmVmb3JlX3NhdmU7XG4gICAgICBkZXNjcmlwdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb24gPSB0cnVlO1xuICAgICAgbWlncmF0ZV9iZWZvcmVfZGVzZXJpYWxpemUgPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgICAgICB2YXIgZGVzZXJpYWxpemU7XG4gICAgICAgIGRlc2VyaWFsaXplID0gZGVzY3JpcHRpb24uZGVzZXJpYWxpemU7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICBpZiAoIWNvbmZpZ3VyYXRpb24udmVyc2lvbiB8fCAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi5hZnRlcihjb25maWd1cmF0aW9uLnZlcnNpb24pKSB7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24ubWlncmF0ZSkge1xuICAgICAgICAgICAgICBkZXNjcmlwdGlvbi5taWdyYXRlKGNvbmZpZ3VyYXRpb24sIFZlcnNpb24oY29uZmlndXJhdGlvbi52ZXJzaW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHNlcmlhbGl6ZV9iZWZvcmVfc2F2ZSA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzYXZlO1xuICAgICAgICBpZiAoZGVzY3JpcHRpb24uc2F2ZSkge1xuICAgICAgICAgIHNhdmUgPSBkZXNjcmlwdGlvbi5zYXZlO1xuICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgIGRhdGEgPSBkZXNjcmlwdGlvbi5zZXJpYWxpemUoTW9kZWwpO1xuICAgICAgICAgICAgZGF0YS52ZXJzaW9uID0gJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLnZlcnNpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBzYXZlKGRhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBkZXNlcmlhbGl6ZV9hZnRlcl9sb2FkID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdmFyIGxvYWQ7XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbi5sb2FkKSB7XG4gICAgICAgICAgbG9hZCA9IGRlc2NyaXB0aW9uLmxvYWQ7XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uLmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2FkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZGVzY3JpcHRpb24uZGVzZXJpYWxpemUocmVzdWx0KTtcbiAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uLnZhbGlkYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbi52YWxpZGF0ZShyZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgbWlncmF0ZV9iZWZvcmVfZGVzZXJpYWxpemUoZGVzY3JpcHRpb24pO1xuICAgICAgc2VyaWFsaXplX2JlZm9yZV9zYXZlKGRlc2NyaXB0aW9uKTtcbiAgICAgIGRlc2VyaWFsaXplX2FmdGVyX2xvYWQoZGVzY3JpcHRpb24pO1xuICAgICAgaWYgKGRlc2NyaXB0aW9uLmRldmljZSkge1xuICAgICAgICBzZXJpYWxpemVfYmVmb3JlX3NhdmUoZGVzY3JpcHRpb24uZGV2aWNlKTtcbiAgICAgICAgZGVzZXJpYWxpemVfYWZ0ZXJfbG9hZChkZXNjcmlwdGlvbi5kZXZpY2UpO1xuICAgICAgfVxuICAgICAgZGVzY3JpcHRpb24ubG9hZF9pbnRvX21vZGVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5sb2FkKCkudGhlbihmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2Vfd2l0aChNb2RlbCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9O1xuICAgIENvbmZpZ3VyYXRpb24gPSB7XG4gICAgICBFcnJvcjoge1xuICAgICAgICBJbmNvbnNpc3RlbnRfY29uZmlndXJhdGlvbjogY3VzdG9tX2Vycm9yKCdJbmNvbnNpc3RlbnRfY29uZmlndXJhdGlvbicpXG4gICAgICB9LFxuICAgICAgRGV2aWNlOiB7XG4gICAgICAgIHJlc2V0X3JvdXRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnc29mdFJlc2V0U3dpdGNoJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ3Jlc2V0U3dpdGNoJykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdlcnJvci5kZXZpY2UucmVzZXRfZmFpbGVkJykpO1xuICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBHVUkud2FpdF9mb3JfY29ubmVjdGlvbigxNiwgdHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLnN0YXR1cy5hcHBsaWNhdGlvbl9yZXN0YXJ0aW5nJyksIHtcbiAgICAgICAgICAgICAgdG86ICdkZXZpY2UnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFBvcnRzOiBzZWN0aW9uKHtcbiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgIHZhciBwb3J0LCByZXN1bHQ7XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgcG9ydHM6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgICByZWYgPSBtb2RlbC5wb3J0cztcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBwb3J0ID0gcmVmW2pdO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChQb3J0LnNhbml0aXplKHBvcnQpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0pKClcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlcGxhY2Vfd2l0aChyZXN1bHQsIENvbmZpZ3VyYXRpb24uUG9ydHMuSm9pbnRfcG9ydHMuc2VyaWFsaXplKG1vZGVsKSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHBvcnRzOiBjb25maWd1cmF0aW9uLnBvcnRzLFxuICAgICAgICAgICAgam9pbnRfcG9ydHM6IGNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHNcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlcGxhY2Vfd2l0aChyZXN1bHQsIENvbmZpZ3VyYXRpb24uUG9ydHMuSm9pbnRfcG9ydHMuZGVzZXJpYWxpemUoY29uZmlndXJhdGlvbiwgcmVzdWx0LnBvcnRzKSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgbWlncmF0ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbiwgdmVyc2lvbikge1xuICAgICAgICAgIHZhciBqLCBsZW4sIHBvcnQsIHJlZjtcbiAgICAgICAgICBpZiAodmVyc2lvbi5iZWZvcmUoJzEuMi4wJykpIHtcbiAgICAgICAgICAgIHJlZiA9IGNvbmZpZ3VyYXRpb24ucG9ydHM7XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgcG9ydCA9IHJlZltqXTtcbiAgICAgICAgICAgICAgaWYgKHBvcnQuZGVlcF9pbnNwZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwb3J0LmRlZXBfaW5zcGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLlBvcnRzLkpvaW50X3BvcnRzLm1pZ3JhdGUoY29uZmlndXJhdGlvbiwgdmVyc2lvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRfY29tbWVudHM6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gRmlsZURCLmxvYWQoJ3N5c3RlbS9wb3J0cycpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgaiwgbGVuLCBwb3J0LCByZWY7XG4gICAgICAgICAgICByZWYgPSBjb25maWd1cmF0aW9uLnBvcnRzO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgICAgIHBvcnQuY29tbWVudCA9IHJlc3VsdC5jb21tZW50c1twb3J0LmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXRfY29tbWVudDogZnVuY3Rpb24ocG9ydCwgY29tbWVudCkge1xuICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICBkYXRhW3BvcnQuaWRdID0gY29tbWVudDtcbiAgICAgICAgICByZXR1cm4gRmlsZURCLnVwZGF0ZSgnc3lzdGVtL3BvcnRzJywgJ2NvbW1lbnRzJywgZGF0YSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3J0LmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5Qb3J0cy5kZXZpY2UubG9hZCgpLnRoZW4oZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uUG9ydHMubG9hZF9jb21tZW50cyhjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICAgIHZhciBqLCBsZW4sIHBvcnQsIHJlZiwgcmVzdWx0cztcbiAgICAgICAgICByZWYgPSBjb25maWd1cmF0aW9uLnBvcnRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgICBpZiAocG9ydC5jb21tZW50KSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaChDb25maWd1cmF0aW9uLlBvcnRzLnNldF9jb21tZW50KHBvcnQpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBjbGVhcl9jb21tZW50cztcbiAgICAgICAgICBjbGVhcl9jb21tZW50cyA9IHtcbiAgICAgICAgICAgICdjb21tZW50cyc6IHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gRmlsZURCLnNhdmUoJ3N5c3RlbS9wb3J0cycsIGNsZWFyX2NvbW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGV2aWNlOiB7XG4gICAgICAgICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uKHBvcnRzKSB7XG4gICAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiwgcG9ydDtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICAgICAgICAgIHBvcnRzOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGosIGxlbiwgcmVzdWx0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcG9ydHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgIHBvcnQgPSBwb3J0c1tqXTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBwb3J0LmlkXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICAgIH0pKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBDb25maWd1cmF0aW9uLlBvcnRzLmRldmljZS5yZWZyZXNoKHBvcnRzLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJlcGxhY2Vfd2l0aChjb25maWd1cmF0aW9uLCBDb25maWd1cmF0aW9uLlBvcnRzLkpvaW50X3BvcnRzLmRldmljZS5kZXNlcmlhbGl6ZShjb25maWd1cmF0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlndXJhdGlvbjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlZnJlc2g6IGZ1bmN0aW9uKHBvcnRzLCBtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGNvbnZlcnRlciwgZmllbGQsIGZpZWxkcywgaiwgbGVuLCBwb3J0LCBwb3J0X2RhdGEsIHJlc3VsdHM7XG4gICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBwb3J0cy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgICBwb3J0X2RhdGEgPSBwb3J0c1tqXTtcbiAgICAgICAgICAgICAgcG9ydCA9IG1vZGVsLnBvcnRzW3BvcnRfZGF0YS5pZCAtIDFdO1xuICAgICAgICAgICAgICBmaWVsZHMgPSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBldGhfbW9kZTogZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICAgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlc1snMTAwMEJBU0VfWCddOlxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwR0JBU0VfQ1InXTpcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddOlxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJ0RJU0FCTEVEJ106XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5rbm93biBwb3J0IG1vZGUnLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcnNlcl9sZXZlbDogZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYWNfbGVhcm5pbmc6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh4ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVlcF9pbnNwZWN0aW9uOiBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvcmNlX3VwOiBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvb3BiYWNrOiBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMxO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChmaWVsZCBpbiBmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnZlcnRlciA9IGZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgICAgICAgICByZXN1bHRzMS5wdXNoKHBvcnRbZmllbGRdID0gY29udmVydGVyKHBvcnRfZGF0YVtmaWVsZF0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBpLmNhbGwoXCJnZXRTd2l0Y2hJbmZvXCIpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQuUG9ydHM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIEpvaW50X3BvcnRzOiB7XG4gICAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGosIGpvaW50X3BvcnQsIGpvaW50X3BvcnRzLCBsZW4sIHBvcnQsIHJlc3VsdDtcbiAgICAgICAgICAgIGpvaW50X3BvcnRzID0gYW5ndWxhci5jb3B5KG1vZGVsLmpvaW50X3BvcnRzKTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGpvaW50X3BvcnRzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIGpvaW50X3BvcnQgPSBqb2ludF9wb3J0c1tqXTtcbiAgICAgICAgICAgICAgam9pbnRfcG9ydC5wb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgaywgbGVuMSwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgICAgIHJlZiA9IGpvaW50X3BvcnQucG9ydHM7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgICBwb3J0ID0gcmVmW2tdO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHBvcnQuaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPSB7XG4gICAgICAgICAgICAgIGpvaW50X3BvcnRzOiBqb2ludF9wb3J0c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlc2VyaWFsaXplOiBmdW5jdGlvbihjb25maWd1cmF0aW9uLCBwb3J0cykge1xuICAgICAgICAgICAgdmFyIGosIGpvaW50X3BvcnQsIGpvaW50X3BvcnRzLCBsZW4sIHBvcnQsIHBvcnRfYnlfaWQsIHJlc3VsdDtcbiAgICAgICAgICAgIHBvcnRfYnlfaWQgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICB2YXIgaiwgbGVuLCBwb3J0O1xuICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSBwb3J0cy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgICAgIHBvcnQgPSBwb3J0c1tqXTtcbiAgICAgICAgICAgICAgICBpZiAocG9ydC5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwb3J0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGpvaW50X3BvcnRzID0gYW5ndWxhci5jb3B5KGNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHMpO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gam9pbnRfcG9ydHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgam9pbnRfcG9ydCA9IGpvaW50X3BvcnRzW2pdO1xuICAgICAgICAgICAgICBqb2ludF9wb3J0LnBvcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBrLCBsZW4xLCByZWYsIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgcmVmID0gam9pbnRfcG9ydC5wb3J0cztcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgIHBvcnQgPSByZWZba107XG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocG9ydF9ieV9pZChwb3J0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgam9pbnRfcG9ydHM6IGpvaW50X3BvcnRzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWlncmF0ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbiwgdmVyc2lvbikge1xuICAgICAgICAgICAgdmFyIGksIGosIHJlZiwgcmVzdWx0cztcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uLmJlZm9yZSgnMS40LjAnKSkge1xuICAgICAgICAgICAgICBpZiAoIWNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHMpIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmpvaW50X3BvcnRzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKFBvcnQuaGFzX2pvaW50X3BvcnRzKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGogPSAxLCByZWYgPSBQb3J0LmpvaW50X3BvcnRfY291bnQoKTsgMSA8PSByZWYgPyBqIDw9IHJlZiA6IGogPj0gcmVmOyBpID0gMSA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNvbmZpZ3VyYXRpb24uam9pbnRfcG9ydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgbW9kZTogJzR4MTBHJ1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGRldmljZToge1xuICAgICAgICAgICAgZGVzZXJpYWxpemU6IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uLCBpLCBpZCwgaW5kZXgsIGosIGpvaW5lZF9wb3J0cywgam9pbnRfcG9ydF9jb3VudCwgam9pbnRfcG9ydHMsIHBvcnRzSWQsIHJlZjtcbiAgICAgICAgICAgICAgcG9ydHNJZCA9IFtdO1xuICAgICAgICAgICAgICBqb2luZWRfcG9ydHMgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgIHZhciBqLCByZWYsIHJlc3VsdHMsIHNoaWZ0O1xuICAgICAgICAgICAgICAgIHNoaWZ0ID0gUG9ydF9udW1lcmF0aW9uLmpvaW5lZF9wb3J0X2lkX3RvX3BvcnRfaWQoaWQsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMSwgcmVmID0gRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQ7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgMSA8PSByZWYgPyBqKysgOiBqLS0peyByZXN1bHRzLnB1c2goaik7IH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICAgIH0pLmFwcGx5KHRoaXMpLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWwucG9ydHNbc2hpZnQgKyBpIC0gMV07XG4gICAgICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwb3J0LmlkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBqb2ludF9wb3J0X2NvdW50ID0gTWF0aC5jZWlsKChtb2RlbC5wb3J0cy5sZW5ndGggLSBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50KSAqIDEuMCAvIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0KTtcbiAgICAgICAgICAgICAgaWYgKGpvaW50X3BvcnRfY291bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgam9pbnRfcG9ydF9jb3VudCA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChpID0gaiA9IDEsIHJlZiA9IGpvaW50X3BvcnRfY291bnQ7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKERldmljZV9zZXR0aW5ncy5nZXRfcGxhdGZvcm0oKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MTpcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejFmOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLnVua25vd246XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICBwb3J0c0lkLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGpvaW50X3BvcnRzID0gam9pbnRfcG9ydF9jb3VudCA9PT0gMCA/IFtdIDogKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBrLCBsZW4sIHJlc3VsdHM7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbiA9IHBvcnRzSWQubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgIGlkID0gcG9ydHNJZFtrXTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgcG9ydHM6IGpvaW5lZF9wb3J0cyhpZClcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBqb2ludF9wb3J0czogam9pbnRfcG9ydHNcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5Qb3J0cy5Kb2ludF9wb3J0cy5kZXZpY2UucmVmcmVzaChjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgICAgICAgdmFyIGosIGpvaW50X3BvcnQsIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgICByZWYgPSBtb2RlbC5qb2ludF9wb3J0cztcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBqb2ludF9wb3J0ID0gcmVmW2pdO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChqb2ludF9wb3J0Lm1vZGUgPSBqb2ludF9wb3J0LnBvcnRzWzBdLmV0aF9tb2RlID09PSBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddIHx8IGpvaW50X3BvcnQucG9ydHNbMF0uZXRoX21vZGUgPT09IEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXMuWExBVUkgPyAnNDBHJyA6ICc0eDEwRycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBSb3V0aW5nOiBzZWN0aW9uKHtcbiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHJ1bGVzOiBtb2RlbC5ydWxlcy5tYXAoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gUnVsZS5zZXJpYWxpemUocnVsZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGRlc2VyaWFsaXplOiBmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ID0ge1xuICAgICAgICAgICAgcnVsZXM6IGNvbmZpZ3VyYXRpb24ucnVsZXMubWFwKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJ1bGUuZGVzZXJpYWxpemUocnVsZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1pZ3JhdGU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pIHtcbiAgICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHMsIHJ1bGU7XG4gICAgICAgICAgaWYgKHZlcnNpb24uYmVmb3JlKCcxLjEuMCcpKSB7XG4gICAgICAgICAgICByZWYgPSBjb25maWd1cmF0aW9uLnJ1bGVzO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIHJ1bGUgPSByZWZbal07XG4gICAgICAgICAgICAgIGlmIChydWxlLmFjdGlvbiA9PT0gJ2JhbGFuY2UnICYmIHJ1bGUub3V0cHV0cy5sZW5ndGggPiAxICYmIChydWxlLmhhc2hpbmdfcHJvZmlsZSA9PSBudWxsKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChydWxlLmhhc2hpbmdfcHJvZmlsZSA9IDApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gRmlsZURCLnNhdmUoJ3N5c3RlbS9yb3V0aW5nJywgY29uZmlndXJhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBGaWxlREIubG9hZCgnc3lzdGVtL3JvdXRpbmcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBGaWxlREIuc2F2ZSgnc3lzdGVtL3JvdXRpbmcnLCB7XG4gICAgICAgICAgICBcInJ1bGVzXCI6IFtdLFxuICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwiMS42LjZcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICAgIHZhciBmaWx0ZXIsIGosIGxlbiwgcmVmLCByZXN1bHRzLCBydWxlO1xuICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi5zdGFydGluZ19mcm9tKCcxLjMuMCcpKSB7XG4gICAgICAgICAgICByZWYgPSBjb25maWd1cmF0aW9uLnJ1bGVzO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgIHJ1bGUgPSByZWZbal07XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGssIGxlbjEsIHJlZjEsIHJlc3VsdHMxO1xuICAgICAgICAgICAgICAgIHJlZjEgPSBydWxlLmZpbHRlcnM7XG4gICAgICAgICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgIGZpbHRlciA9IHJlZjFba107XG4gICAgICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS51bm1hc2tlZF9hY2xfZmlsdGVyX3R5cGVzLmhhcyhmaWx0ZXIudHlwZSkgJiYgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmhhc19ub25fZGVmYXVsdF9tYXNrKGZpbHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5maWx0ZXJfc2hvdWxkX25vdF9oYXZlX2FfbWFzaycsIHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHRyYW5zbGF0ZShcIkFDTC5ydWxlLmZpbHRlci50eXBlLlwiICsgZmlsdGVyLnR5cGUpXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMxLnB1c2godm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBVc2Vyczoge1xuICAgICAgICBjaGFuZ2VfcGFzc3dvcmQ6IGZ1bmN0aW9uKHBhc3N3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIEZpbGVEQi5sb2FkKCdzeXN0ZW0vdXNlcnMnKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0LnVzZXJzWzBdLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgICAgICAgICByZXR1cm4gRmlsZURCLnNhdmUoJ3N5c3RlbS91c2VycycsIHJlc3VsdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBOZXR3b3JrOiBzZWN0aW9uKHtcbiAgICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5ldHdvcms6IG1vZGVsLm5ldHdvcmtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5ldHdvcms6IGNvbmZpZ3VyYXRpb24ubmV0d29ya1xuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1pZ3JhdGU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pIHt9LFxuICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5OZXR3b3JrLmRldmljZS5sb2FkKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5OZXR3b3JrLmRldmljZS5zYXZlKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBkZXZpY2U6IHtcbiAgICAgICAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgbmV0d29yaztcbiAgICAgICAgICAgIG5ldHdvcmsgPSBhbmd1bGFyLmNvcHkobW9kZWwubmV0d29yayk7XG4gICAgICAgICAgICBuZXR3b3JrLmRoY3AgPSBuZXR3b3JrLmRoY3AgPT09IHRydWUgPyAnMScgOiAnMCc7XG4gICAgICAgICAgICByZXR1cm4gbmV0d29yaztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlc2VyaWFsaXplOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICAgICAgICBkaGNwOiByZXN1bHQuZGhjcCA9PT0gJzEnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlwOiByZXN1bHQuaXAsXG4gICAgICAgICAgICAgICAgbWFzazogcmVzdWx0Lm1hc2ssXG4gICAgICAgICAgICAgICAgZ2F0ZXdheTogcmVzdWx0LmdhdGV3YXksXG4gICAgICAgICAgICAgICAgZG5zMTogcmVzdWx0LmRuczEgfHwgJycsXG4gICAgICAgICAgICAgICAgZG5zMjogcmVzdWx0LmRuczIgfHwgJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNhdmU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnc2V0TmV0Q29uZmlnJywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGkuY2FsbCgnZ2V0TmV0Q29uZmlnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICB2YXIgbmFtZSwgc2VyaWFsaXplZF9jb25maWd1cmF0aW9uO1xuICAgICAgICBzZXJpYWxpemVkX2NvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgZm9yIChuYW1lIGluIENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICBzZWN0aW9uID0gQ29uZmlndXJhdGlvbltuYW1lXTtcbiAgICAgICAgICBpZiAoc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb24pIHtcbiAgICAgICAgICAgIHJlcGxhY2Vfd2l0aChzZXJpYWxpemVkX2NvbmZpZ3VyYXRpb24sIHNlY3Rpb24uc2VyaWFsaXplKGNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VyaWFsaXplZF9jb25maWd1cmF0aW9uLnZlcnNpb24gPSAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplZF9jb25maWd1cmF0aW9uO1xuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29uZmlndXJhdGlvbiwgbmFtZSwgc2VjdGlvbnM7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChuYW1lIGluIENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICBzZWN0aW9uID0gQ29uZmlndXJhdGlvbltuYW1lXTtcbiAgICAgICAgICBpZiAoc2VjdGlvbi5pc19jb25maWd1cmF0aW9uX3NlY3Rpb24gJiYgc2VjdGlvbi5sb2FkKSB7XG4gICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHNlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5lYWNoKHNlY3Rpb25zLCBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHNlY3Rpb24ubG9hZCgpLnRoZW4oZnVuY3Rpb24oY29uZmlndXJhdGlvbl9wb3J0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZV93aXRoKGNvbmZpZ3VyYXRpb24sIGNvbmZpZ3VyYXRpb25fcG9ydGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb247XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlYWRfbG9jYWxfcm91dGluZ19jb25maWd1cmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgJHJvb3RTY29wZS5yb3V0aW5nID0ge307XG4gICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLlJvdXRpbmcubG9hZCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuICRyb290U2NvcGUucm91dGluZyA9IHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgaWYgKCFjb25maWd1cmF0aW9uLnBvcnRzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5pbnZhbGlkJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29uZmlndXJhdGlvbi5ydWxlcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uZXJyb3IuaW52YWxpZCcpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1pZ3JhdGU6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgdmFyIG5hbWUsIHZlcnNpb247XG4gICAgICAgIHZlcnNpb24gPSBWZXJzaW9uKGNvbmZpZ3VyYXRpb24udmVyc2lvbik7XG4gICAgICAgIGZvciAobmFtZSBpbiBDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgc2VjdGlvbiA9IENvbmZpZ3VyYXRpb25bbmFtZV07XG4gICAgICAgICAgaWYgKHNlY3Rpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uICYmIHNlY3Rpb24ubWlncmF0ZSkge1xuICAgICAgICAgICAgc2VjdGlvbi5taWdyYXRlKGNvbmZpZ3VyYXRpb24sIHZlcnNpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25maWd1cmF0aW9uLnZlcnNpb24gPSAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb24udmVyc2lvbi50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gY29uZmlndXJhdGlvbjtcbiAgICAgIH0sXG4gICAgICB0ZXN0X2NvbXBsaWFuY2U6IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgdmFyIGosIGxlbiwgcG9ydCwgcmVmLCByZXN1bHRzO1xuICAgICAgICBpZiAoUG9ydC5jb3VudCAhPT0gY29uZmlndXJhdGlvbi5wb3J0cy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvbi5FcnJvci5JbmNvbnNpc3RlbnRfY29uZmlndXJhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJlZiA9IGNvbmZpZ3VyYXRpb24ucG9ydHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZltqXTtcbiAgICAgICAgICBpZiAoIVBvcnQuYnlfaWQocG9ydC5pZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uLkVycm9yLkluY29uc2lzdGVudF9jb25maWd1cmF0aW9uKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0sXG4gICAgICBhcHBseTogZnVuY3Rpb24oY29uZmlndXJhdGlvbikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgQ29uZmlndXJhdGlvbi5taWdyYXRlKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgIENvbmZpZ3VyYXRpb24udGVzdF9jb21wbGlhbmNlKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uID0gYW5ndWxhci5jb3B5KGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRyb290U2NvcGUuYXBwbHlpbmdfY29uZmlndXJhdGlvbiA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsX3NlcnZpY2UuZG9fd2l0aF9wb3J0X2xvY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgICAgIHJlcGxhY2Vfd2l0aChNb2RlbCwgQ29uZmlndXJhdGlvbi5Qb3J0cy5kZXNlcmlhbGl6ZShjb25maWd1cmF0aW9uKSk7XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICBzZWN0aW9uID0gQ29uZmlndXJhdGlvbltuYW1lXTtcbiAgICAgICAgICAgICAgaWYgKCFbJ1BvcnRzJ10uaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlY3Rpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICByZXBsYWNlX3dpdGgoTW9kZWwsIHNlY3Rpb24uZGVzZXJpYWxpemUoY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uRGV2aWNlLnJlc2V0X3JvdXRpbmcoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgc2VjdGlvbnM7XG4gICAgICAgICAgICAgIHNlY3Rpb25zID0gW107XG4gICAgICAgICAgICAgIGZvciAobmFtZSBpbiBDb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IENvbmZpZ3VyYXRpb25bbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHNlY3Rpb24uaXNfY29uZmlndXJhdGlvbl9zZWN0aW9uICYmIHNlY3Rpb24uc2F2ZSkge1xuICAgICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaChzZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuZWFjaChzZWN0aW9ucywgKGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbi5zYXZlKCk7XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBSb3V0aW5nX21vZGVsX2FwcGxpZXIuc2V0X3VwX3JvdXRpbmcoTW9kZWwucnVsZXMsIE1vZGVsLnBvcnRzLCBNb2RlbC5qb2ludF9wb3J0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJmaW5hbGx5XCJdKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmFwcGx5aW5nX2NvbmZpZ3VyYXRpb24gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGVmZXJyZWQsIG5hbWUsIHJlc2V0cztcbiAgICAgICAgaWYgKCFjb25maXJtKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5jb25maXJtX3Jlc2V0JykpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0cyA9IFtdO1xuICAgICAgICBmb3IgKG5hbWUgaW4gQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgIHNlY3Rpb24gPSBDb25maWd1cmF0aW9uW25hbWVdO1xuICAgICAgICAgIGlmIChzZWN0aW9uLmlzX2NvbmZpZ3VyYXRpb25fc2VjdGlvbikge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24ucmVzZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXNldHMucHVzaChzZWN0aW9uLnJlc2V0LmJpbmQoc2VjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgICAgZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIHJlc2V0cy5yZWR1Y2UoKGZ1bmN0aW9uKHJlZHVjZWQsIHJlc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlZHVjZWQudGhlbihyZXNldCk7XG4gICAgICAgIH0pLCBkZWZlcnJlZC5wcm9taXNlKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLkRldmljZS5yZXNldCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGV4Y2VwdGlvbnMgPSBbJ0Vycm9yJywgJ0RldmljZScsICdVc2VycyddO1xuICAgIGZvciAoa2V5IGluIENvbmZpZ3VyYXRpb24pIHtcbiAgICAgIHNlY3Rpb24gPSBDb25maWd1cmF0aW9uW2tleV07XG4gICAgICBpZiAodHlwZW9mIHNlY3Rpb24gPT09ICdvYmplY3QnICYmICFzZWN0aW9uLmlzX2NvbmZpZ3VyYXRpb25fc2VjdGlvbiAmJiBleGNlcHRpb25zLmhhc19ubyhrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbmZpZ3VyYXRpb24uXCIgKyBrZXkgKyBcIiBpcyBub3QgYSBzZWN0aW9uLiBJZiBpdCdzIGludGVuZGVkIGFkZCBpdCB0byBleGNlcHRpb25zXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQ29uZmlndXJhdGlvbjtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnQ29uZmlndXJhdGlvbnMnLCAoJHJvb3RTY29wZSwgJGh0dHAsICR0aW1lb3V0LCBhcGksIGxvZywgU3RhdHVzLCBNb2RlbCwgQ29uZmlndXJhdGlvbiwgRGV2aWNlLCBEZXZpY2VfR1VJLCB0cmFuc2xhdGUsIFJvdXRpbmdfbW9kZWxfZXJyb3JzKSAtPlxuICBDb25maWd1cmF0aW9ucyA9XG5cbiAgICBzYXZlOiAobmFtZSkgLT5cbiAgICAgIENvbmZpZ3VyYXRpb24ubG9hZCgpXG5cbiAgICAgIC50aGVuIChjb25maWd1cmF0aW9uKSAtPlxuICAgICAgICBjb25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbi5zZXJpYWxpemUoY29uZmlndXJhdGlvbilcblxuICAgICAgICBhcGkuY2FsbChcImZpbGVkYi5zYXZlXCIsIHsgZmlsZTogbmFtZSArICcuY29uZicsIGRhdGE6IGNvbmZpZ3VyYXRpb24gfSlcblxuICAgICAgLnRoZW4gLT5cblxuICAgICAgICBsb2cuaW5mbyh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLnNhdmVkJyksIGNvbmZpZ3VyYXRpb24pXG4gICAgICAgIFN0YXR1cy5pbmZvKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5zdGF0dXMuc2F2ZWQnKSlcblxuICAgICAgICBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KClcblxuICAgIGxvYWQ6IChuYW1lKSAtPlxuICAgICAgcmV0dXJuIGlmIG5vdCBuYW1lXG5cbiAgICAgIGFwaS5jYWxsKFwiZmlsZWRiLmxvYWRcIiwgeyBmaWxlOiBuYW1lICsgJy5jb25mJyB9KS50aGVuIChjb25maWd1cmF0aW9uKSAtPlxuXG4gICAgICAgIFN0YXR1cy5idXN5KHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5zdGF0dXMuYXBwbHlpbmcnKSlcblxuICAgICAgICBDb25maWd1cmF0aW9uLmFwcGx5KGNvbmZpZ3VyYXRpb24pXG5cbiAgICAgIC50aGVuIC0+XG4gICAgICAgIFN0YXR1cy5pbmZvKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5zdGF0dXMubG9hZGVkJykpXG5cbiAgICAgICAgQ29uZmlndXJhdGlvbnMuY29sbGFwc2VfbWVudSgpXG5cbiAgICBkb3dubG9hZDogKG5hbWUpIC0+XG4gICAgICBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KClcblxuICAgICAgIyDQv9C+0YHQu9C1INGC0L7Qs9C+LCDQutCw0Log0LzQtdC90Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INC30LDQutGA0L7QtdGC0YHRj1xuICAgICAgJHRpbWVvdXQoLT5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5sb2FkKClcblxuICAgICAgICAudGhlbiAoY29uZmlndXJhdGlvbikgLT5cbiAgICAgICAgICBjb25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbi5zZXJpYWxpemUoY29uZmlndXJhdGlvbilcbiAgICAgICAgICBkb3dubG9hZF9maWxlKGNvbmZpZ3VyYXRpb24sICdjb25maWd1cmF0aW9uLmNvbmYnKVxuXG4gICAgICAgIC5jYXRjaCAoZXJyb3IpIC0+XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcilcbiAgICAgICAgICBTdGF0dXMuZXJyb3IoZXJyb3IubWVzc2FnZSlcbiAgICAgICwgMClcblxuICAgIHVwbG9hZDogKGZpbGUpIC0+XG4gICAgICBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KClcbiAgICAgIFN0YXR1cy5idXN5KClcblxuICAgICAgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuXG4gICAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSAtPlxuICAgICAgICBjb25maWd1cmF0aW9uID0gbnVsbFxuXG4gICAgICAgIHRyeVxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBKU09OLnBhcnNlKGV2ZW50LnRhcmdldC5yZXN1bHQpXG4gICAgICAgICAgQ29uZmlndXJhdGlvbi52YWxpZGF0ZShjb25maWd1cmF0aW9uKVxuXG4gICAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgICAgbG9nLmVycm9yKGVycm9yKVxuICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLmludmFsaWQnKSlcblxuICAgICAgICBTdGF0dXMuYnVzeSh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLmFwcGx5aW5nJykpXG5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5hcHBseShjb25maWd1cmF0aW9uKVxuXG4gICAgICAgIC50aGVuIChydWxlcykgLT5cbiAgICAgICAgICBTdGF0dXMuaW5mbyh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLmxvYWRlZCcpKVxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY29uZmlndXJhdGlvbl9sb2FkZWQnLCBydWxlcylcblxuICAgICAgICAuY2F0Y2ggKGVycm9yKSAtPlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjaykgaWYgZXJyb3Iuc3RhY2tcblxuICAgICAgICAgIGlmIGVycm9yLm5hbWUgPT0gJ0luY29uc2lzdGVudF9jb25maWd1cmF0aW9uJ1xuICAgICAgICAgICAgcmV0dXJuIFN0YXR1cy5lcnJvcih0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uZXJyb3IuaW5jb25zaXN0ZW50JykpXG5cbiAgICAgICAgICByZXR1cm4gaWYgYXBpLmlzX2FwaV9lcnJvcihlcnJvcilcblxuICAgICAgICAgIGlmIFJvdXRpbmdfbW9kZWxfZXJyb3JzLmlzKGVycm9yKVxuICAgICAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKFJvdXRpbmdfbW9kZWxfZXJyb3JzLm1lc3NhZ2UoZXJyb3IpKVxuXG4gICAgICAgICAgU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5jb25maWd1cmF0aW9uX3VwbG9hZF9mYWlsZWQnKSlcblxuICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSlcblxuICAgIGZldGNoX2xpc3Q6IC0+XG4gICAgICBhcGkuY2FsbChcImZpbGVkYi5saXN0XCIsIHt9KS50aGVuIChsaXN0KSAtPlxuICAgICAgICAkcm9vdFNjb3BlLmNvbmZpZ3VyYXRpb25zID0gbGlzdC5tYXAgKGl0ZW0pIC0+XG4gICAgICAgICAgaXRlbS5zdWJzdHJpbmcoMCwgaXRlbS5sYXN0SW5kZXhPZignLmNvbmYnKSlcblxuICAgIGRlbGV0ZTogKG5hbWUpIC0+XG4gICAgICByZXR1cm4gaWYgbm90IGNvbmZpcm0odHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmNvbmZpcm1fZGVsZXRpb24nLCB7IG5hbWU6IG5hbWUgfSkpXG5cbiAgICAgIGFwaS5jYWxsKFwiZmlsZWRiLmRlbGV0ZVwiLCB7IGZpbGU6IG5hbWUgKyAnLmNvbmYnIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgU3RhdHVzLmluZm8odHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLnN0YXR1cy5kZWxldGVkJykpXG4gICAgICAgIENvbmZpZ3VyYXRpb25zLmNvbGxhcHNlX21lbnUoKVxuXG4gICAgY29sbGFwc2VfbWVudTogLT5cbiAgICAgICRyb290U2NvcGUuY2xvc2VfY29uZmlndXJhdGlvbl9tZW51X2Ryb3Bkb3duID0ge30iLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdDb25maWd1cmF0aW9ucycsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRodHRwLCAkdGltZW91dCwgYXBpLCBsb2csIFN0YXR1cywgTW9kZWwsIENvbmZpZ3VyYXRpb24sIERldmljZSwgRGV2aWNlX0dVSSwgdHJhbnNsYXRlLCBSb3V0aW5nX21vZGVsX2Vycm9ycykge1xuICAgIHZhciBDb25maWd1cmF0aW9ucztcbiAgICByZXR1cm4gQ29uZmlndXJhdGlvbnMgPSB7XG4gICAgICBzYXZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLmxvYWQoKS50aGVuKGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICBjb25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbi5zZXJpYWxpemUoY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgcmV0dXJuIGFwaS5jYWxsKFwiZmlsZWRiLnNhdmVcIiwge1xuICAgICAgICAgICAgZmlsZTogbmFtZSArICcuY29uZicsXG4gICAgICAgICAgICBkYXRhOiBjb25maWd1cmF0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG9nLmluZm8odHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLnN0YXR1cy5zYXZlZCcpLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICBTdGF0dXMuaW5mbyh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLnNhdmVkJykpO1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcImZpbGVkYi5sb2FkXCIsIHtcbiAgICAgICAgICBmaWxlOiBuYW1lICsgJy5jb25mJ1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICBTdGF0dXMuYnVzeSh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLmFwcGx5aW5nJykpO1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLmFwcGx5KGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIFN0YXR1cy5pbmZvKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5zdGF0dXMubG9hZGVkJykpO1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGRvd25sb2FkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIENvbmZpZ3VyYXRpb25zLmNvbGxhcHNlX21lbnUoKTtcbiAgICAgICAgcmV0dXJuICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLmxvYWQoKS50aGVuKGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBDb25maWd1cmF0aW9uLnNlcmlhbGl6ZShjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBkb3dubG9hZF9maWxlKGNvbmZpZ3VyYXRpb24sICdjb25maWd1cmF0aW9uLmNvbmYnKTtcbiAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrIHx8IGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfSxcbiAgICAgIHVwbG9hZDogZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICB2YXIgcmVhZGVyO1xuICAgICAgICBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KCk7XG4gICAgICAgIFN0YXR1cy5idXN5KCk7XG4gICAgICAgIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uLCBlcnJvciwgZXJyb3IxO1xuICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBudWxsO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgIENvbmZpZ3VyYXRpb24udmFsaWRhdGUoY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5pbnZhbGlkJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBTdGF0dXMuYnVzeSh0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uc3RhdHVzLmFwcGx5aW5nJykpO1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9uLmFwcGx5KGNvbmZpZ3VyYXRpb24pLnRoZW4oZnVuY3Rpb24ocnVsZXMpIHtcbiAgICAgICAgICAgIFN0YXR1cy5pbmZvKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5zdGF0dXMubG9hZGVkJykpO1xuICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY29uZmlndXJhdGlvbl9sb2FkZWQnLCBydWxlcyk7XG4gICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0luY29uc2lzdGVudF9jb25maWd1cmF0aW9uJykge1xuICAgICAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5pbmNvbnNpc3RlbnQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXBpLmlzX2FwaV9lcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFJvdXRpbmdfbW9kZWxfZXJyb3JzLmlzKGVycm9yKSkge1xuICAgICAgICAgICAgICByZXR1cm4gU3RhdHVzLmVycm9yKFJvdXRpbmdfbW9kZWxfZXJyb3JzLm1lc3NhZ2UoZXJyb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IodHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLmNvbmZpZ3VyYXRpb25fdXBsb2FkX2ZhaWxlZCcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuICAgICAgfSxcbiAgICAgIGZldGNoX2xpc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoXCJmaWxlZGIubGlzdFwiLCB7fSkudGhlbihmdW5jdGlvbihsaXN0KSB7XG4gICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuY29uZmlndXJhdGlvbnMgPSBsaXN0Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5zdWJzdHJpbmcoMCwgaXRlbS5sYXN0SW5kZXhPZignLmNvbmYnKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIFwiZGVsZXRlXCI6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaWYgKCFjb25maXJtKHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5jb25maXJtX2RlbGV0aW9uJywge1xuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcImZpbGVkYi5kZWxldGVcIiwge1xuICAgICAgICAgIGZpbGU6IG5hbWUgKyAnLmNvbmYnXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgU3RhdHVzLmluZm8odHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLnN0YXR1cy5kZWxldGVkJykpO1xuICAgICAgICAgIHJldHVybiBDb25maWd1cmF0aW9ucy5jb2xsYXBzZV9tZW51KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGNvbGxhcHNlX21lbnU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5jbG9zZV9jb25maWd1cmF0aW9uX21lbnVfZHJvcGRvd24gPSB7fTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdEZXZpY2VfR1VJJywgKCRyb290U2NvcGUsIGFwaSwgUG9ydCwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIFN0YXR1cywgRGV2aWNlX3NldHRpbmdzLCBMb2dpbiwgdHJhbnNsYXRlLCBQb3J0X3ZpZXcsIENvbmZpZ3VyYXRpb24sIFBvcnRfbnVtZXJhdGlvbikgLT5cbiAgcG9ydHNfY29udGFpbmVyICAgICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGV2aWNlIC5wb3J0cycpXG4gIG1lbnUgICAgICAgICAgICAgICAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnUnKVxuICBkZXZpY2UgICAgICAgICAgICAgICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXZpY2UnKVxuICBkZWZhdWx0X3N0YXR1c19wbGFjZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWZhdWx0LXN0YXR1cy1wbGFjZScpXG4gIGZpeGVkX2hlYWQgICAgICAgICAgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpeGVkLWhlYWQnKVxuXG4gIG5hdmlnYXRpbmdfZnJvbV9wYWdlX2NvbmZpcm1hdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZpZ2F0aW5nLWZyb20tcGFnZS1jb25maXJtYXRpb24nKVxuXG4gIGZpeGVkX2hlYWRfaGVpZ2h0ID0gZml4ZWRfaGVhZC5vZmZzZXRIZWlnaHRcblxuICBkZXZpY2VfbWFyZ2luX3RvcCA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRldmljZSkubWFyZ2luVG9wKVxuICBtZW51X2hlaWdodCAgICAgPSBtZW51Lm9mZnNldEhlaWdodCArIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1lbnUpLm1hcmdpblRvcCkgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShtZW51KS5tYXJnaW5Cb3R0b20pXG5cbiAgb2Zmc2V0TGVmdCA9IChlbGVtZW50KSAtPlxuICAgIG9mZnNldF9sZWZ0ID0gMFxuICAgIFx0XG4gICAgYWRkID0gLT5cbiAgICAgIGlmIGVsZW1lbnQub2Zmc2V0TGVmdD9cbiAgICAgICAgb2Zmc2V0X2xlZnQgKz0gZWxlbWVudC5vZmZzZXRMZWZ0XG5cbiAgICBhZGQoKVxuICAgIHdoaWxlIGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudFxuICAgICAgYWRkKClcblx0XG4gICAgcmV0dXJuIG9mZnNldF9sZWZ0XG5cbiAgRGV2aWNlID1cbiAgICBwb3J0X2NvdW50ICAgICAgICAgOiAtPiBcbiAgICAgIHJldHVybiBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50IGlmIG5vdCBNb2RlbC5wb3J0c1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1vZGVsLnBvcnRzLmxlbmd0aCwgRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudClcblxuICAgIGdyb3VwX2NvdW50ICAgICAgICA6IC0+XG4gICAgICBNYXRoLmNlaWwoKDEuMCAqIEBwb3J0X2NvdW50KCkpIC8gQHBvcnRfZ3JvdXBfc2l6ZSlcblxuICAgIHBvcnRfZ3JvdXBfc2l6ZSAgICA6IDEyXG5cbiAgICBwb3J0X2dyb3VwX3NwYWNpbmcgOiAxMFxuICAgIGpvaW50X3BvcnRfZ3JvdXBfc3BhY2luZyA6IDdcbiAgICBqb2ludF9wb3J0X3ZlcnRpY2FsX3NwYWNpbmcgOiA0XG5cbiAgICAjINGN0YLQviDQt9C90LDRh9C10L3QuNGPINC00L7Qu9C20L3RiyDRgdC+0LLQv9Cw0LTQsNGC0Ywg0YHQviDQt9C90LDRh9C10L3QuNGP0LzQuCDQsiBpbmNsdWRlLmxlc3NcbiAgICBwb3J0X3dpZHRoICAgICAgICAgOiAzOVxuICAgIGhvbGVfaGVpZ2h0ICAgICAgICA6IDIwXG4gICAgaW5zaWRlX2pvaW50X3BvcnRfd2lkdGggIDogMjNcbiAgICBpbnNpZGVfam9pbnRfcG9ydF9oZWlnaHQgOiAxNlxuICAgIGluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCA6IDIwXG4gICAgcG9ydF9udW1iZXJfaGVpZ2h0IDogMjVcblxuICAgIHBvcnRfaGVpZ2h0ICAgICAgICA6IDQ1XG4gICAgaW50ZXJfcG9ydF9zcGFjaW5nIDogMVxuXG4gICAgcG9ydF9ncm91cF90b3Bfb2Zmc2V0IDogNlxuXG4gICAgam9pbnRfcG9ydF9udW1iZXJfaGVpZ2h0OiAxNlxuXG4gICAgIyDQstGL0LTQtdC70LXQvdC40LUg0L/QvtGA0YLQvtCyINC80YvRiNGM0Y5cbiAgICBzZWxlY3Rpb246XG4gICAgICAjINC90LDRh9Cw0LvQvlxuICAgICAgc3RhcnQgOiBub1xuICAgICAgIyDQutC+0L3QtdGGXG4gICAgICBlbmQgICA6IG5vXG4gICAgICAjINGA0LDQvNC60LAg0LLRi9C00LXQu9C10L3QuNGPXG4gICAgICBib3ggICA6IFxuICAgICAgICBlbGVtZW50OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VsZWN0aW9uJylcblxuICAgICAgICBoaWRlOiAtPiBEZXZpY2Uuc2VsZWN0aW9uLmJveC5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcblxuICAgICAgICBzaG93OiAtPiBEZXZpY2Uuc2VsZWN0aW9uLmJveC5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG5cbiAgICAgICAgc2l6ZTogKHNpemUpIC0+XG4gICAgICAgICAgaWYgbm90IHNpemUud2lkdGg/XG4gICAgICAgICAgICBzaXplLndpZHRoID0gMFxuXG4gICAgICAgICAgaWYgbm90IHNpemUuaGVpZ2h0P1xuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSAwXG5cbiAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBzaXplXG4gICAgICAgICAgICBEZXZpY2Uuc2VsZWN0aW9uLmJveC5lbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZSArICdweCdcblxuICAgICMg0YHQtNCy0LjQsyDRgdC40YHRgtC10LzRiyDQutC+0L7RgNC00LjQvdCw0YIg0YPRgdGC0YDQvtC50YHRgtCy0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC+0LrQvdCwXG4gICAgIyBzaGlmdDogLT5cbiAgICAjICAgc2hpZnQgPSBcbiAgICAjICAgICB4OiBvZmZzZXRMZWZ0KHBvcnRzX2NvbnRhaW5lcilcbiAgICAjICAgICB5OiBtZW51Lm91dGVySGVpZ2h0KHRydWUpXG5cbiAgICAjICAgc2hpZnQueCA9IHBvcnRzX2NvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0XG4gICAgIyAgIHNoaWZ0XG5cbiAgICByZXNoaWZ0OiAtPlxuICAgICAgQHNoaWZ0ID0gXG4gICAgICAgIHg6IG9mZnNldExlZnQocG9ydHNfY29udGFpbmVyKVxuICAgICAgICB5OiBtZW51X2hlaWdodCArIGRldmljZV9tYXJnaW5fdG9wXG5cbiAgICBpbml0aWFsaXplOiAtPlxuXG4gICAgICAjINCx0LXQtyDRjdGC0L7Qs9C+INCyIGZpcmVmb3gg0L3QtSDQvtGC0YDQsNCx0LDRgtGL0LLQsNC10YIgZG9jdW1lbnQub25jbGljaywgXG4gICAgICAjINC10YHQu9C4INCyINC80L7QvNC10L3RgiBtb3VzZXVwINC80YvRiNC60LAg0L3QsNGF0L7QtNC40YLRgdGPINC90LDQtCDQv9GA0Y/QvNC+0YPQs9C+0LvRjNC90LjQutC+0Lwg0LLRi9C00LXQu9C10L3QuNGPXG4gICAgICBqUXVlcnkoRGV2aWNlLnNlbGVjdGlvbi5ib3guZWxlbWVudCkub24gJ21vdXNldXAnLCAtPlxuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLnRyaWdnZXIoJ2NsaWNrJylcblxuICAgICAgQHJlc2hpZnQoKVxuXG4gICAgICB3aW5kb3cub25yZXNpemUgPSBAcmVzaGlmdC5iaW5kKEApXG5cbiAgICAgIEByZWZyZXNoX3BvcnRfY29vcmRpbmF0ZXMoKVxuXG4gICAgICBEZXZpY2UucmVhZHkgPSB5ZXNcblxuICAgIHNlbGVjdF9wb3J0OiAocG9ydCwgbXVsdGlwbGVfc2VsZWN0aW9uKSAtPlxuICAgICAgaWYgbXVsdGlwbGVfc2VsZWN0aW9uXG4gICAgICAgIFBvcnRfdmlldy50b2dnbGVfc2VsZWN0aW9uKHBvcnQpXG4gICAgICBlbHNlXG4gICAgICAgIFBvcnRfdmlldy5zZWxlY3QocG9ydClcblxuICAgIHJlZnJlc2hfcG9ydF9jb29yZGluYXRlczogLT4gQHBvcnRfY29vcmRpbmF0ZXMgPSBAZ2VuZXJhdGVfcG9ydF9jb29yZGluYXRlcygpXG5cbiAgICBnZW5lcmF0ZV9wb3J0X2Nvb3JkaW5hdGVzOiAtPlxuXG4gICAgICAjIGZha2UgcG9ydCAjMCwg0YfRgtC+0LHRiyDQuNC90LTQtdC60YEg0LIg0LzQsNGB0YHQuNCy0LUg0YHQvtCy0L/QsNC00LDQuyDRgSDQvdC+0LzQtdGA0L7QvCDQv9C+0YDRgtCwXG4gICAgICBjb29yZGluYXRlcyA9IFtbLTEsIC0xLCAtMSwgLTFdXVxuXG4gICAgICAjIEBwb3J0c190b3Bfb2Zmc2V0ID0gcGFyc2VJbnQoKGRldmljZS5xdWVyeVNlbGVjdG9yKCcuZGV2aWNlLWJvZHknKS5jbGllbnRIZWlnaHQgLSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkZXZpY2UucXVlcnlTZWxlY3RvcignLmRldmljZS1ib2R5JykpLnBhZGRpbmdCb3R0b20pIC0gKDIgKiBAcG9ydF9udW1iZXJfaGVpZ2h0ICsgMiAqIEBob2xlX2hlaWdodCArIEBpbnRlcl9wb3J0X3NwYWNpbmcpKSAvIDIpXG5cbiAgICAgIHhfeV93aWR0aF9oZWlnaHQgPSAoeCwgeSwgd2lkdGgsIGhlaWdodCkgLT4gW3gsIHksIHggKyB3aWR0aCAtIDEsIHkgKyBoZWlnaHQgLSAxXVxuXG4gICAgICAjINC/0L7Qv9GA0LDQstC60LAg0L3QsCB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlXG4gICAgICB5ID0gQHBvcnRfZ3JvdXBfdG9wX29mZnNldCAjICsgQHBvcnRzX3RvcF9vZmZzZXRcblxuICAgICAgcG9ydF9zaGlmdCA9IDBcbiAgICAgIGhvcml6b250YWxfc2hpZnQgPSAwXG5cbiAgICAgIHRvcF9yb3dfc2hpZnQgICAgPSBAcG9ydF9udW1iZXJfaGVpZ2h0XG4gICAgICBib3R0b21fcm93X3NoaWZ0ID0gQHBvcnRfbnVtYmVyX2hlaWdodCArIEBob2xlX2hlaWdodCArIEBpbnRlcl9wb3J0X3NwYWNpbmdcbiAgICAgIFxuICAgICAgc2V0X2Nvb3JkaW5hdGVzID0gKGluZGV4LCB4X3lfd2lkdGhfaGVpZ2h0KSAtPlxuICAgICAgICBpZiBpbmRleCA8PSBQb3J0LmNvdW50XG4gICAgICAgICAgY29vcmRpbmF0ZXNbaW5kZXhdID0geF95X3dpZHRoX2hlaWdodFxuXG4gICAgICAjINC00LvRjyDQutCw0LbQtNC+0Lkg0LPRgNGD0L/Qv9GLINC+0LHRi9GH0L3Ri9GFINC/0L7RgNGC0L7QslxuICAgICAgZ3JvdXAgPSAwXG4gICAgICBpbmRleCA9IDBcbiAgICAgIGZpcnN0Um93ID0gMFxuICAgICAgc2Vjb25kUm93ID0gMFxuICAgICAgZGV2aWNlX3BsYXRmb3JtID0gRGV2aWNlX3NldHRpbmdzLmdldF9wbGF0Zm9ybSgpXG5cbiAgICAgIHdoaWxlIGdyb3VwIDwgQGdyb3VwX2NvdW50KClcblxuICAgICAgICBmb3IgaSBpbiBbMS4uQHBvcnRfZ3JvdXBfc2l6ZSAvIDJdXG4gICAgICAgICAgaW5kZXggPSBncm91cCAqIEBwb3J0X2dyb3VwX3NpemUgKyBpICogMlxuXG4gICAgICAgICAgc3dpdGNoIGRldmljZV9wbGF0Zm9ybVxuICAgICAgICAgICAgd2hlbiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejFcbiAgICAgICAgICAgICAgZmlyc3RSb3cgPSBpbmRleCAtIDFcbiAgICAgICAgICAgICAgc2Vjb25kUm93ID0gaW5kZXhcblxuICAgICAgICAgICAgd2hlbiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejFmLCBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy51bmtub3duXG4gICAgICAgICAgICAgIGZpcnN0Um93ID0gaW5kZXhcbiAgICAgICAgICAgICAgc2Vjb25kUm93ID0gaW5kZXggLSAxXG5cblxuICAgICAgICAgIHNldF9jb29yZGluYXRlcyhmaXJzdFJvdywgeF95X3dpZHRoX2hlaWdodChob3Jpem9udGFsX3NoaWZ0LCB5ICsgdG9wX3Jvd19zaGlmdCwgICAgQHBvcnRfd2lkdGgsIEBob2xlX2hlaWdodCkpXG4gICAgICAgICAgc2V0X2Nvb3JkaW5hdGVzKHNlY29uZFJvdywgeF95X3dpZHRoX2hlaWdodChob3Jpem9udGFsX3NoaWZ0LCB5ICsgYm90dG9tX3Jvd19zaGlmdCwgQHBvcnRfd2lkdGgsIEBob2xlX2hlaWdodCkpXG5cbiAgICAgICAgICBob3Jpem9udGFsX3NoaWZ0ICs9IEBwb3J0X3dpZHRoICsgQGludGVyX3BvcnRfc3BhY2luZ1xuICAgICAgICBcbiAgICAgICAgIyDRgyDQv9C+0YDRgtC+0LIg0YHQv9GA0LDQstCwINC90LXRgiBzcGFjZXIn0LBcbiAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCAtPSBAaW50ZXJfcG9ydF9zcGFjaW5nXG5cbiAgICAgICAgIyDQtNC+0LHQsNCy0LjRgtGMINGB0LTQstC40LMg0LPRgNGD0L/QvyDQv9C+0YDRgtC+0LIg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC00YDRg9CzINC00YDRg9Cz0LBcbiAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCArPSBAcG9ydF9ncm91cF9zcGFjaW5nIFxuXG4gICAgICAgIHBvcnRfc2hpZnQgKz0gQHBvcnRfZ3JvdXBfc2l6ZVxuXG4gICAgICAgIGdyb3VwKytcblxuICAgICAgIyDQv9C+0L/RgNCw0LLQutCwINC90LAgdmVydGljYWwtYWxpZ246IG1pZGRsZVxuICAgICAgIyDQv9C+0L/RgNCw0LLQutCwINC90LAgbWFyZ2luLXRvcFxuICAgICAgeSA9IEBqb2ludF9wb3J0X251bWJlcl9oZWlnaHQgIyArIEBwb3J0c190b3Bfb2Zmc2V0XG5cbiAgICAgIHRvcF9yb3dfc2hpZnQgICAgPSAwXG4gICAgICBib3R0b21fcm93X3NoaWZ0ID0gQGluc2lkZV9qb2ludF9wb3J0X2hlaWdodCArIEBpbnRlcl9wb3J0X3NwYWNpbmcgKyBAaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0ICsgQGpvaW50X3BvcnRfdmVydGljYWxfc3BhY2luZ1xuXG4gICAgICBpbnNpZGVfam9pbnRfcm93X3NoaWZ0ID0gQGluc2lkZV9qb2ludF9wb3J0X2hlaWdodCArIEBpbnRlcl9wb3J0X3NwYWNpbmdcblxuICAgICAgaWYgUG9ydC5oYXNfam9pbnRfcG9ydHMoKVxuXG4gICAgICAgICMg0LLRi9GH0LjRgdC70LjRgtGMINC60L7QvtGA0LTQuNC90LDRgtGLINC60LDQttC00L7Qs9C+INC/0L7QtNC/0L7RgNGC0LAg0LTQsNC90L3QvtCz0L4gNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwXG4gICAgICAgIGNhbGN1bGF0ZV9qb2ludF9wb3J0X2Nvb3JkaW5hdGVzID0gKGlkKSA9PlxuICAgICAgICAgIHBvcnRfc2hpZnQgPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfdG9fcG9ydF9pZChpZCwgMClcblxuICAgICAgICAgIHNoaWZ0U3RhdGVtZW50ID0gc3dpdGNoIERldmljZV9zZXR0aW5ncy5nZXRfcGxhdGZvcm0oKVxuICAgICAgICAgICAgd2hlbiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejFcbiAgICAgICAgICAgICAgaWQgJSAyID09IDFcbiAgICAgICAgICAgIHdoZW4gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZiwgRGV2aWNlX3NldHRpbmdzLmRldmljZXMudW5rbm93blxuICAgICAgICAgICAgICBpZCAlIDIgPT0gMFxuXG4gICAgICAgICAgdmVydGljYWxfc2hpZnQgPSBpZiBzaGlmdFN0YXRlbWVudCB0aGVuIHRvcF9yb3dfc2hpZnQgZWxzZSBib3R0b21fcm93X3NoaWZ0XG5cbiAgICAgICAgICBpZiBNb2RlbF9zZXJ2aWNlLmdldF9qb2ludF9wb3J0X3dpdGhfb2Zmc2V0KE1vZGVsLCBpZCkubW9kZSA9PSAnNDBHJ1xuICAgICAgICAgICAgIyDQv9C10YDQstGL0Lkg0L/QvtGA0YIgLSDQvdCwINCy0YHRjiDRiNC40YDQuNC90YMg0Lgg0LLRi9GB0L7RgtGDXG4gICAgICAgICAgICBjb29yZGluYXRlc1twb3J0X3NoaWZ0ICsgMV0gPSB4X3lfd2lkdGhfaGVpZ2h0KFxuICAgICAgICAgICAgICBob3Jpem9udGFsX3NoaWZ0ICsgQGluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCxcbiAgICAgICAgICAgICAgeSArIHZlcnRpY2FsX3NoaWZ0LFxuICAgICAgICAgICAgICBAaW5zaWRlX2pvaW50X3BvcnRfd2lkdGggKiBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydCAvIDIgKyBAaW50ZXJfcG9ydF9zcGFjaW5nLFxuICAgICAgICAgICAgICBAaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0ICogRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQgLyAyICsgQGludGVyX3BvcnRfc3BhY2luZ1xuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAjINC00LvRjyDQutCw0LbQtNC+0LPQviDQvtCx0YvRh9C90L7Qs9C+INC/0L7RgNGC0LAg0LLQvdGD0YLRgNC4IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICAgICAgZm9yIGogaW4gWzIuLkRldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0XVxuICAgICAgICAgICAgICBjb29yZGluYXRlc1twb3J0X3NoaWZ0ICsgal0gPSBbLTEsIC0xLCAtMSwgLTFdXG5cbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBleHRyYV9ob3Jpem9udGFsX3NoaWZ0ID0gMFxuXG4gICAgICAgICAgICAjINC00LvRjyDQutCw0LbQtNC+0LPQviDQvtCx0YvRh9C90L7Qs9C+INC/0L7RgNGC0LAg0LLQvdGD0YLRgNC4IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICAgICAgZm9yIGogaW4gWzEuLkRldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMl1cblxuICAgICAgICAgICAgICBkZWx0YV94ID0gaWYgaiA9PSAxIHRoZW4gQGluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCBlbHNlIDBcblxuICAgICAgICAgICAgICBjb29yZGluYXRlc1twb3J0X3NoaWZ0ICsgal0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB4X3lfd2lkdGhfaGVpZ2h0KGhvcml6b250YWxfc2hpZnQgKyBleHRyYV9ob3Jpem9udGFsX3NoaWZ0ICsgZGVsdGFfeCwgeSArIHZlcnRpY2FsX3NoaWZ0LCAgICAgICAgICAgICAgICAgICAgICAgICAgQGluc2lkZV9qb2ludF9wb3J0X3dpZHRoLCBAaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0KVxuICAgICAgICAgICAgICBjb29yZGluYXRlc1twb3J0X3NoaWZ0ICsgaiArIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMl0gPSB4X3lfd2lkdGhfaGVpZ2h0KGhvcml6b250YWxfc2hpZnQgKyBleHRyYV9ob3Jpem9udGFsX3NoaWZ0ICsgZGVsdGFfeCwgeSArIHZlcnRpY2FsX3NoaWZ0ICsgaW5zaWRlX2pvaW50X3Jvd19zaGlmdCwgQGluc2lkZV9qb2ludF9wb3J0X3dpZHRoLCBAaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0KVxuXG4gICAgICAgICAgICAgIGV4dHJhX2hvcml6b250YWxfc2hpZnQgKz0gQGluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCArIEBpbnNpZGVfam9pbnRfcG9ydF93aWR0aCArIEBpbnRlcl9wb3J0X3NwYWNpbmdcblxuICAgICAgICBzZXRfam9pbnRfcG9ydF9jb29yZGluYXRlcyA9IChpLCB4LCB5KSAtPlxuICAgICAgICAgIGluZGV4ID0gc3dpdGNoIERldmljZV9zZXR0aW5ncy5nZXRfcGxhdGZvcm0oKVxuICAgICAgICAgICAgd2hlbiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejEgdGhlbiB4XG4gICAgICAgICAgICB3aGVuIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MWYsIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLnVua25vd24gdGhlbiB5XG4gICAgICAgICAgY2FsY3VsYXRlX2pvaW50X3BvcnRfY29vcmRpbmF0ZXMoaSAqIDIgKyAxICsgaW5kZXgpXG4gICAgICAgICMg0LTQu9GPINC60LDQttC00L7Qs9C+INGB0YLQvtC70LHRhtCwIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINC/0L7RgNGC0L7QsiAo0L/QviDQtNCy0L7QtSDQsiDRgdGC0L7Qu9Cx0YbQtSlcbiAgICAgICAgZm9yIGkgaW4gWzAuLlBvcnQuam9pbnRfcG9ydF9jb3VudCgpIC8gMiAtIDFdXG5cbiAgICAgICAgICAjINC00LvRjyDQstC10YDRhdC90LXQs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICAgIHNldF9qb2ludF9wb3J0X2Nvb3JkaW5hdGVzKGksIDAsIDEpXG5cbiAgICAgICAgICAjINC00LvRjyDQvdC40LbQvdC10LPQviA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LBcbiAgICAgICAgICBzZXRfam9pbnRfcG9ydF9jb29yZGluYXRlcyhpLCAxLCAwKVxuXG4gICAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCArPSAoRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQgLyAyKSAqIChAaW5zaWRlX2pvaW50X3BvcnRfbnVtYmVyX3dpZHRoICsgQGluc2lkZV9qb2ludF9wb3J0X3dpZHRoICsgQGludGVyX3BvcnRfc3BhY2luZylcblxuICAgICAgICAgICMg0YMg0L/QvtGA0YLQvtCyINGB0L/RgNCw0LLQsCDQvdC10YIgc3BhY2VyJ9CwXG4gICAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCAtPSBAaW50ZXJfcG9ydF9zcGFjaW5nXG5cbiAgICAgICAgICAjINC00L7QsdCw0LLQuNGC0Ywg0YHQtNCy0LjQsyDQs9GA0YPQv9C/INC/0L7RgNGC0L7QsiDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LTRgNGD0LMg0LTRgNGD0LPQsFxuICAgICAgICAgIGhvcml6b250YWxfc2hpZnQgKz0gQGpvaW50X3BvcnRfZ3JvdXBfc3BhY2luZ1xuXG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNcblxuICAgICMg0J7Qv9GA0LXQtNC10LvRj9C10YIsINC10YHRgtGMINC70Lgg0L/QtdGA0LXRgdC10YfQtdC90LjQtSDRgyDQtNCy0YPRhSDQv9GA0Y/QvNC+0YPQs9C+0LvRjNC90LjQutC+0LIg0YTQvtGA0LzQsNGC0LAgW2xlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbV1cbiAgICBpbnRlcnNlY3RzOiAoYSwgYikgLT5cbiAgICAgICMgSWYgb25lIHJlY3RhbmdsZSBpcyBvbiBsZWZ0IHNpZGUgb2Ygb3RoZXJcbiAgICAgICMgaWYgYS54ID4gYi5yaWdodCB8fCBiLnggPiBhLnJpZ2h0XG4gICAgICBpZiBhWzBdID4gYlsyXSAgfHwgYlswXSA+IGFbMl1cbiAgICAgICAgICByZXR1cm4gbm9cblxuICAgICAgIyBJZiBvbmUgcmVjdGFuZ2xlIGlzIGFib3ZlIG90aGVyXG4gICAgICAjIGlmIGEueSA+IGIuYm90dG9tIHx8IGIueSA+IGEuYm90dG9tXG4gICAgICBpZiBhWzFdID4gYlszXSB8fCBiWzFdID4gYVszXVxuICAgICAgICAgIHJldHVybiBub1xuICAgXG4gICAgICByZXR1cm4geWVzXG5cbiAgICAjINCe0L/RgNC10LTQtdC70LXQvdC40LUg0L3QvtC80LXRgNCwINC/0L7RgNGC0LAg0L/QviDQutC+0L7RgNC00LjQvdCw0YLQsNC8XG4gICAgZGV0ZWN0X3BvcnRfYnlfaG9sZTogKHgsIHkpIC0+XG5cbiAgICAgICMg0L3QtdC+0L/RgtC40LzQsNC70YzQvdC+LiDRgdCw0LzQvtC1INC+0L/RgtC40LzQsNC70YzQvdC+0LU6INC00LXQu9Cw0YLRjCByZXNoaWZ0INC/0YDQuCBhbmd1bGFyLiR3YXRjaChNb2RlbC5wb3J0cykg0LjQu9C4INGC0LjQv9CwINGC0L7Qs9C+XG4gICAgICBAcmVzaGlmdCgpXG5cbiAgICAgICMg0L/QtdGA0LXQudGC0Lgg0LIg0YHQuNGB0YLQtdC80YMg0LrQvtC+0YDQtNC40L3QsNGCINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICAgICB4IC09IEBzaGlmdC54XG4gICAgICB5IC09IEBzaGlmdC55XG5cbiAgICAgIGlkID0gMVxuICAgICAgd2hpbGUgaWQgPCBAcG9ydF9jb29yZGluYXRlcy5sZW5ndGhcblxuICAgICAgICBpZiBAaW50ZXJzZWN0cyhAcG9ydF9jb29yZGluYXRlc1tpZF0sIFt4LCB5LCB4LCB5XSlcbiAgICAgICAgICByZXR1cm4gUG9ydC5ieV9pZChpZClcbiAgICAgICAgaWQrK1xuXG4gICAgIyDQtdGB0LvQuCDRjdGC0L4g0Y3Qu9C10LzQtdC90YIsINC60L7RgtC+0YDRi9C5INC90LDRhdC+0LTQuNGC0YHRjyDQstC90YPRgtGA0Lgg0L7QtNC90L7Qs9C+INC40Lcg0LLRi9C00LXQu9C10L3QvdGL0YUg0L/QvtGA0YLQvtCyLCDRgtC+IHRydWVcbiAgICBkZXRlY3RfcG9ydDogKGV2ZW50KSAtPlxuXG4gICAgICBlbGVtZW50ID0gZXZlbnQudGFyZ2V0XG5cbiAgICAgIHdoaWxlIGpRdWVyeS5jb250YWlucyhwb3J0c19jb250YWluZXIsIGVsZW1lbnQpXG4gICAgICAgICRlbGVtZW50ID0galF1ZXJ5KGVsZW1lbnQpXG4gICAgICAgIGlmICRlbGVtZW50Lmhhc0NsYXNzKCdwb3J0JylcbiAgICAgICAgICByZXR1cm4gUG9ydC5ieV9pZChwYXJzZUludCgkZWxlbWVudC5hdHRyKCdkYXRhLXBvcnQtaWQnKSkpXG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGVcblxuICAgIHRlc3RfY2xpY2tlZF9lbGVtZW50OiAoZWxlbWVudCkgLT5cbiAgICAgICMgaWYgKCFqUXVlcnkuY29udGFpbnMoZGV2aWNlLCBlbGVtZW50KSkge1xuICAgICAgIyAgIHJldHVyblxuICAgICAgIyB9XG5cbiAgICAgIGlmIGpRdWVyeS5jb250YWlucyhtZW51LCBlbGVtZW50KVxuICAgICAgICByZXR1cm4gbm9cblxuICAgICAgaWYgalF1ZXJ5LmNvbnRhaW5zKGRlZmF1bHRfc3RhdHVzX3BsYWNlLCBlbGVtZW50KVxuICAgICAgICByZXR1cm4gbm9cblxuICAgICAgaWYgalF1ZXJ5LmNvbnRhaW5zKG5hdmlnYXRpbmdfZnJvbV9wYWdlX2NvbmZpcm1hdGlvbiwgZWxlbWVudClcbiAgICAgICAgcmV0dXJuIG5vXG5cbiAgICB4OiAoZXZlbnQpIC0+XG4gICAgICBpZiBldmVudC5jbGllbnRYPyB0aGVuIGV2ZW50LmNsaWVudFggZWxzZSBldmVudC54XG5cbiAgICB5OiAoZXZlbnQpIC0+XG4gICAgICBpZiBldmVudC5jbGllbnRZPyB0aGVuIGV2ZW50LmNsaWVudFkgZWxzZSBldmVudC55XG5cbiAgICB4eTogKGV2ZW50KSAtPlxuICAgICAgW0B4KGV2ZW50KSwgQHkoZXZlbnQpXVxuXG4gICAgc3RhcnRfc2VsZWN0aW9uOiAoZXZlbnQpIC0+XG5cbiAgICAgICMg0L7QsdGA0LDQsdCw0YLRi9Cy0LDRgtGMINGC0L7Qu9GM0LrQviDQu9C10LLRg9GOINC60L3QvtC/0LrRgyDQvNGL0YjQuFxuICAgICAgcmV0dXJuIGlmIGV2ZW50LndoaWNoICE9IDFcbiAgICAgIFxuICAgICAgcmV0dXJuIGlmIG5vdCBEZXZpY2UucmVhZHlcblxuICAgICAgcmV0dXJuIGlmIG5vdCBMb2dpbi5pc19hdXRoZW50aWNhdGVkXG5cbiAgICAgIHJldHVybiBpZiBAdGVzdF9jbGlja2VkX2VsZW1lbnQoZXZlbnQudGFyZ2V0KSA9PSBub1xuXG4gICAgICBbeCwgeV0gPSBAeHkoZXZlbnQpXG5cbiAgICAgIHN0YXJ0X3NlbGVjdGlvbiA9ID0+XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgIGpRdWVyeShmaXhlZF9oZWFkKS5hZGRDbGFzcygnc2VsZWN0aW5nJylcblxuICAgICAgICBAc2VsZWN0aW9uLnN0YXJ0ID0gXG4gICAgICAgICAgeDogeFxuICAgICAgICAgIHk6IHlcblxuICAgICAgICAjIHJldHVybiB5ZXNcblxuICAgICAgICBAc2VsZWN0aW9uLmJveC5zaXplKHsgbGVmdDogeCwgdG9wOiB5IH0pXG4gICAgICAgIEBzZWxlY3Rpb24uYm94LnNob3coKVxuXG4gICAgICAgIHJldHVybiB5ZXNcblxuICAgICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKClcblxuICAgICAgaXNfY3RybF9jbGljayA9IC0+IGV2ZW50LmN0cmxLZXlcblxuICAgICAgdG9nZ2xlX3BvcnRfc2VsZWN0aW9uID0gKHBvcnQpIC0+XG4gICAgICAgIEBtdWx0aXBsZV9wb3J0c19zZWxlY3RlZCA9IFBvcnRfdmlldy5zZWxlY3RlZF9jb3VudCgpID4gMVxuICAgICAgICBQb3J0X3ZpZXcudG9nZ2xlX3NlbGVjdGlvbihwb3J0KVxuICAgICAgICAgIFxuICAgICAgcG9ydCA9IEBkZXRlY3RfcG9ydChldmVudClcbiAgICAgIGlmIHBvcnRcbiAgICAgICAgaWYgaXNfY3RybF9jbGljaygpXG4gICAgICAgICAgcmV0dXJuIHRvZ2dsZV9wb3J0X3NlbGVjdGlvbihwb3J0KVxuXG4gICAgICAgIGlmIFBvcnRfdmlldy5pc19zZWxlY3RlZChwb3J0KVxuICAgICAgICAgIHJldHVyblxuXG4gICAgICBwb3J0ID0gQGRldGVjdF9wb3J0X2J5X2hvbGUoeCwgeSlcblxuICAgICAgaWYgbm90IHBvcnRcbiAgICAgICAgcmV0dXJuIGlmIGlzX2N0cmxfY2xpY2soKVxuICAgICAgICByZXR1cm4gc3RhcnRfc2VsZWN0aW9uKClcblxuICAgICAgaWYgaXNfY3RybF9jbGljaygpXG4gICAgICAgIHJldHVybiB0b2dnbGVfcG9ydF9zZWxlY3Rpb24ocG9ydClcblxuICAgICAgaWYgUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpXG4gICAgICAgIHJldHVyblxuXG4gICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKClcbiAgICAgIEBzZWxlY3RfcG9ydChwb3J0LCBmYWxzZSlcbiAgICAgIEBtdWx0aXBsZV9wb3J0c19zZWxlY3RlZCA9IGZhbHNlXG5cbiAgICBtb3VzZV9tb3ZlZDogKGV2ZW50KSAtPlxuXG4gICAgICByZXR1cm4gaWYgbm90IERldmljZS5yZWFkeVxuXG4gICAgICByZXR1cm4gaWYgbm90IEBzZWxlY3Rpb24uc3RhcnRcblxuICAgICAgeCA9IEB4KGV2ZW50KVxuICAgICAgeSA9IEB5KGV2ZW50KVxuXG4gICAgICBpZiB5ID4gZml4ZWRfaGVhZF9oZWlnaHRcbiAgICAgICAgeSA9IGZpeGVkX2hlYWRfaGVpZ2h0XG5cbiAgICAgIHdpZHRoICA9IHggLSBAc2VsZWN0aW9uLnN0YXJ0LnhcbiAgICAgIGhlaWdodCA9IHkgLSBAc2VsZWN0aW9uLnN0YXJ0LnlcblxuICAgICAgc2l6ZSA9IFxuICAgICAgICBsZWZ0ICAgOiBpZiB3aWR0aCA8IDAgdGhlbiB4IGVsc2UgQHNlbGVjdGlvbi5zdGFydC54XG4gICAgICAgIHRvcCAgICA6IGlmIGhlaWdodCA8IDAgdGhlbiB5IGVsc2UgQHNlbGVjdGlvbi5zdGFydC55XG5cbiAgICAgICAgd2lkdGggIDogTWF0aC5hYnMod2lkdGgpXG4gICAgICAgIGhlaWdodCA6IE1hdGguYWJzKGhlaWdodClcblxuICAgICAgQHNlbGVjdGlvbi5ib3guc2l6ZShzaXplKVxuXG4gICAgZW5kX3NlbGVjdGlvbjogKGV2ZW50KSAtPlxuXG4gICAgICAjINC+0LHRgNCw0LHQsNGC0YvQstCw0YLRjCDRgtC+0LvRjNC60L4g0LvQtdCy0YPRjiDQutC90L7Qv9C60YMg0LzRi9GI0LhcbiAgICAgIHJldHVybiBpZiBldmVudC53aGljaCAhPSAxXG5cbiAgICAgIHJldHVybiBpZiBub3QgRGV2aWNlLnJlYWR5XG5cbiAgICAgIFt4LCB5XSA9IEB4eShldmVudClcblxuICAgICAgcmV0dXJuIGlmIG5vdCBAc2VsZWN0aW9uLnN0YXJ0XG5cbiAgICAgIGpRdWVyeShmaXhlZF9oZWFkKS5yZW1vdmVDbGFzcygnc2VsZWN0aW5nJylcblxuICAgICAgQHNlbGVjdGlvbi5lbmQgPSBcbiAgICAgICAgeDogeFxuICAgICAgICB5OiB5XG5cbiAgICAgIHN0YXJ0ID0gQHNlbGVjdGlvbi5zdGFydFxuICAgICAgZW5kICAgPSBAc2VsZWN0aW9uLmVuZFxuXHRcdFxuICAgICAgIyDQvdC10L7Qv9GC0LjQvNCw0LvRjNC90L4uINGB0LDQvNC+0LUg0L7Qv9GC0LjQvNCw0LvRjNC90L7QtTog0LTQtdC70LDRgtGMIHJlc2hpZnQg0L/RgNC4IGFuZ3VsYXIuJHdhdGNoKE1vZGVsLnBvcnRzKSDQuNC70Lgg0YLQuNC/0LAg0YLQvtCz0L5cbiAgICAgIEByZXNoaWZ0KClcblxuICAgICAgIyDQv9C10YDQtdC50YLQuCDQsiDRgdC40YHRgtC10LzRgyDQutC+0L7RgNC00LjQvdCw0YIg0YPRgdGC0YDQvtC50YHRgtCy0LBcblxuICAgICAgc3RhcnQueCAtPSBAc2hpZnQueFxuICAgICAgc3RhcnQueSAtPSBAc2hpZnQueVxuXG4gICAgICBlbmQueCAgIC09IEBzaGlmdC54XG4gICAgICBlbmQueSAgIC09IEBzaGlmdC55XG5cbiAgICAgICMg0J/QvtC80LXQvdGP0YLRjCDRgtC+0YfQutC4INC80LXRgdGC0LDQvNC4INC/0YDQuCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLQuCBcblxuICAgICAgaWYgc3RhcnQueCA+IGVuZC54XG4gICAgICAgIHRtcCAgICAgPSBzdGFydC54XG4gICAgICAgIHN0YXJ0LnggPSBlbmQueFxuICAgICAgICBlbmQueCAgID0gdG1wXG5cbiAgICAgIGlmIHN0YXJ0LnkgPiBlbmQueVxuICAgICAgICB0bXAgICAgID0gc3RhcnQueVxuICAgICAgICBzdGFydC55ID0gZW5kLnlcbiAgICAgICAgZW5kLnkgICA9IHRtcFxuXHRcbiAgICAgICMg0LfQsNGB0LXRh9GMLCDQutCw0LrQuNC1INC/0L7RgNGC0Ysg0L/QvtC/0LDQu9C4INCyINC+0LHQu9Cw0YHRgtGMINCy0YvQtNC10LvQtdC90LjRj1xuXG4gICAgICBzZWxlY3RlZCA9IFtdXG5cbiAgICAgIGlkID0gMVxuICAgICAgd2hpbGUgaWQgPCBAcG9ydF9jb29yZGluYXRlcy5sZW5ndGhcblxuICAgICAgICBpZiBAaW50ZXJzZWN0cyhAcG9ydF9jb29yZGluYXRlc1tpZF0sIFtzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnldKVxuICAgICAgICAgIHNlbGVjdGVkLnB1c2goUG9ydC5ieV9pZChpZCkpXG4gICAgICAgIGlkKytcblxuICAgICAgIyBpZiBzZWxlY3RlZC5ub3RfZW1wdHkoKVxuICAgICAgUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpXG4gICAgICBmb3IgcG9ydCBpbiBzZWxlY3RlZFxuICAgICAgICBQb3J0X3ZpZXcuc2VsZWN0KHBvcnQsIG5vKVxuXG4gICAgICBAbXVsdGlwbGVfcG9ydHNfc2VsZWN0ZWQgPSBzZWxlY3RlZC5sZW5ndGggPiAxXG5cbiAgICAgICMgZmluaXNoZWRcblxuICAgICAgQHNlbGVjdGlvbi5zdGFydCA9IG5vXG4gICAgICBAc2VsZWN0aW9uLmVuZCAgID0gbm9cblxuICAgICAgQHNlbGVjdGlvbi5ib3guaGlkZSgpXG4gICAgICBAc2VsZWN0aW9uLmJveC5zaXplKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KVxuXG4gIERldmljZS5qb2ludF9wb3J0X3dpZHRoID0gLT4gXG4gICAgKERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMikgKiBcbiAgICAgICAgKERldmljZS5pbnNpZGVfam9pbnRfcG9ydF93aWR0aCArIERldmljZS5pbnNpZGVfam9pbnRfcG9ydF9udW1iZXJfd2lkdGggKyBEZXZpY2UuaW50ZXJfcG9ydF9zcGFjaW5nKSAtXG4gICAgICAgIERldmljZS5pbnRlcl9wb3J0X3NwYWNpbmdcblxuICByZXR1cm4gRGV2aWNlIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnRGV2aWNlX0dVSScsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGFwaSwgUG9ydCwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIFN0YXR1cywgRGV2aWNlX3NldHRpbmdzLCBMb2dpbiwgdHJhbnNsYXRlLCBQb3J0X3ZpZXcsIENvbmZpZ3VyYXRpb24sIFBvcnRfbnVtZXJhdGlvbikge1xuICAgIHZhciBEZXZpY2UsIGRlZmF1bHRfc3RhdHVzX3BsYWNlLCBkZXZpY2UsIGRldmljZV9tYXJnaW5fdG9wLCBmaXhlZF9oZWFkLCBmaXhlZF9oZWFkX2hlaWdodCwgbWVudSwgbWVudV9oZWlnaHQsIG5hdmlnYXRpbmdfZnJvbV9wYWdlX2NvbmZpcm1hdGlvbiwgb2Zmc2V0TGVmdCwgcG9ydHNfY29udGFpbmVyO1xuICAgIHBvcnRzX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZXZpY2UgLnBvcnRzJyk7XG4gICAgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51Jyk7XG4gICAgZGV2aWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRldmljZScpO1xuICAgIGRlZmF1bHRfc3RhdHVzX3BsYWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlZmF1bHQtc3RhdHVzLXBsYWNlJyk7XG4gICAgZml4ZWRfaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maXhlZC1oZWFkJyk7XG4gICAgbmF2aWdhdGluZ19mcm9tX3BhZ2VfY29uZmlybWF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpbmctZnJvbS1wYWdlLWNvbmZpcm1hdGlvbicpO1xuICAgIGZpeGVkX2hlYWRfaGVpZ2h0ID0gZml4ZWRfaGVhZC5vZmZzZXRIZWlnaHQ7XG4gICAgZGV2aWNlX21hcmdpbl90b3AgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkZXZpY2UpLm1hcmdpblRvcCk7XG4gICAgbWVudV9oZWlnaHQgPSBtZW51Lm9mZnNldEhlaWdodCArIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1lbnUpLm1hcmdpblRvcCkgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShtZW51KS5tYXJnaW5Cb3R0b20pO1xuICAgIG9mZnNldExlZnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgYWRkLCBvZmZzZXRfbGVmdDtcbiAgICAgIG9mZnNldF9sZWZ0ID0gMDtcbiAgICAgIGFkZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZWxlbWVudC5vZmZzZXRMZWZ0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0X2xlZnQgKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgYWRkKCk7XG4gICAgICB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgIGFkZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9mZnNldF9sZWZ0O1xuICAgIH07XG4gICAgRGV2aWNlID0ge1xuICAgICAgcG9ydF9jb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghTW9kZWwucG9ydHMpIHtcbiAgICAgICAgICByZXR1cm4gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5taW4oTW9kZWwucG9ydHMubGVuZ3RoLCBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50KTtcbiAgICAgIH0sXG4gICAgICBncm91cF9jb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKDEuMCAqIHRoaXMucG9ydF9jb3VudCgpKSAvIHRoaXMucG9ydF9ncm91cF9zaXplKTtcbiAgICAgIH0sXG4gICAgICBwb3J0X2dyb3VwX3NpemU6IDEyLFxuICAgICAgcG9ydF9ncm91cF9zcGFjaW5nOiAxMCxcbiAgICAgIGpvaW50X3BvcnRfZ3JvdXBfc3BhY2luZzogNyxcbiAgICAgIGpvaW50X3BvcnRfdmVydGljYWxfc3BhY2luZzogNCxcbiAgICAgIHBvcnRfd2lkdGg6IDM5LFxuICAgICAgaG9sZV9oZWlnaHQ6IDIwLFxuICAgICAgaW5zaWRlX2pvaW50X3BvcnRfd2lkdGg6IDIzLFxuICAgICAgaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0OiAxNixcbiAgICAgIGluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aDogMjAsXG4gICAgICBwb3J0X251bWJlcl9oZWlnaHQ6IDI1LFxuICAgICAgcG9ydF9oZWlnaHQ6IDQ1LFxuICAgICAgaW50ZXJfcG9ydF9zcGFjaW5nOiAxLFxuICAgICAgcG9ydF9ncm91cF90b3Bfb2Zmc2V0OiA2LFxuICAgICAgam9pbnRfcG9ydF9udW1iZXJfaGVpZ2h0OiAxNixcbiAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICBzdGFydDogZmFsc2UsXG4gICAgICAgIGVuZDogZmFsc2UsXG4gICAgICAgIGJveDoge1xuICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3Rpb24nKSxcbiAgICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBEZXZpY2Uuc2VsZWN0aW9uLmJveC5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBEZXZpY2Uuc2VsZWN0aW9uLmJveC5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2l6ZTogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgICAgICAgdmFyIGtleSwgcmVzdWx0cywgdmFsdWU7XG4gICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHNpemUud2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNpemUuaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gc2l6ZSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHNpemVba2V5XTtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKERldmljZS5zZWxlY3Rpb24uYm94LmVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbHVlICsgJ3B4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNoaWZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hpZnQgPSB7XG4gICAgICAgICAgeDogb2Zmc2V0TGVmdChwb3J0c19jb250YWluZXIpLFxuICAgICAgICAgIHk6IG1lbnVfaGVpZ2h0ICsgZGV2aWNlX21hcmdpbl90b3BcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgalF1ZXJ5KERldmljZS5zZWxlY3Rpb24uYm94LmVsZW1lbnQpLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGpRdWVyeShkb2N1bWVudCkudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzaGlmdCgpO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSB0aGlzLnJlc2hpZnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoX3BvcnRfY29vcmRpbmF0ZXMoKTtcbiAgICAgICAgcmV0dXJuIERldmljZS5yZWFkeSA9IHRydWU7XG4gICAgICB9LFxuICAgICAgc2VsZWN0X3BvcnQ6IGZ1bmN0aW9uKHBvcnQsIG11bHRpcGxlX3NlbGVjdGlvbikge1xuICAgICAgICBpZiAobXVsdGlwbGVfc2VsZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFBvcnRfdmlldy50b2dnbGVfc2VsZWN0aW9uKHBvcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQb3J0X3ZpZXcuc2VsZWN0KHBvcnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVmcmVzaF9wb3J0X2Nvb3JkaW5hdGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9ydF9jb29yZGluYXRlcyA9IHRoaXMuZ2VuZXJhdGVfcG9ydF9jb29yZGluYXRlcygpO1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRlX3BvcnRfY29vcmRpbmF0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYm90dG9tX3Jvd19zaGlmdCwgY2FsY3VsYXRlX2pvaW50X3BvcnRfY29vcmRpbmF0ZXMsIGNvb3JkaW5hdGVzLCBkZXZpY2VfcGxhdGZvcm0sIGZpcnN0Um93LCBncm91cCwgaG9yaXpvbnRhbF9zaGlmdCwgaSwgaW5kZXgsIGluc2lkZV9qb2ludF9yb3dfc2hpZnQsIGssIGwsIHBvcnRfc2hpZnQsIHJlZiwgcmVmMSwgc2Vjb25kUm93LCBzZXRfY29vcmRpbmF0ZXMsIHNldF9qb2ludF9wb3J0X2Nvb3JkaW5hdGVzLCB0b3Bfcm93X3NoaWZ0LCB4X3lfd2lkdGhfaGVpZ2h0LCB5O1xuICAgICAgICBjb29yZGluYXRlcyA9IFtbLTEsIC0xLCAtMSwgLTFdXTtcbiAgICAgICAgeF95X3dpZHRoX2hlaWdodCA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gW3gsIHksIHggKyB3aWR0aCAtIDEsIHkgKyBoZWlnaHQgLSAxXTtcbiAgICAgICAgfTtcbiAgICAgICAgeSA9IHRoaXMucG9ydF9ncm91cF90b3Bfb2Zmc2V0O1xuICAgICAgICBwb3J0X3NoaWZ0ID0gMDtcbiAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCA9IDA7XG4gICAgICAgIHRvcF9yb3dfc2hpZnQgPSB0aGlzLnBvcnRfbnVtYmVyX2hlaWdodDtcbiAgICAgICAgYm90dG9tX3Jvd19zaGlmdCA9IHRoaXMucG9ydF9udW1iZXJfaGVpZ2h0ICsgdGhpcy5ob2xlX2hlaWdodCArIHRoaXMuaW50ZXJfcG9ydF9zcGFjaW5nO1xuICAgICAgICBzZXRfY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihpbmRleCwgeF95X3dpZHRoX2hlaWdodCkge1xuICAgICAgICAgIGlmIChpbmRleCA8PSBQb3J0LmNvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXNbaW5kZXhdID0geF95X3dpZHRoX2hlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGdyb3VwID0gMDtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBmaXJzdFJvdyA9IDA7XG4gICAgICAgIHNlY29uZFJvdyA9IDA7XG4gICAgICAgIGRldmljZV9wbGF0Zm9ybSA9IERldmljZV9zZXR0aW5ncy5nZXRfcGxhdGZvcm0oKTtcbiAgICAgICAgd2hpbGUgKGdyb3VwIDwgdGhpcy5ncm91cF9jb3VudCgpKSB7XG4gICAgICAgICAgZm9yIChpID0gayA9IDEsIHJlZiA9IHRoaXMucG9ydF9ncm91cF9zaXplIC8gMjsgMSA8PSByZWYgPyBrIDw9IHJlZiA6IGsgPj0gcmVmOyBpID0gMSA8PSByZWYgPyArK2sgOiAtLWspIHtcbiAgICAgICAgICAgIGluZGV4ID0gZ3JvdXAgKiB0aGlzLnBvcnRfZ3JvdXBfc2l6ZSArIGkgKiAyO1xuICAgICAgICAgICAgc3dpdGNoIChkZXZpY2VfcGxhdGZvcm0pIHtcbiAgICAgICAgICAgICAgY2FzZSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejE6XG4gICAgICAgICAgICAgICAgZmlyc3RSb3cgPSBpbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgc2Vjb25kUm93ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZjpcbiAgICAgICAgICAgICAgY2FzZSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy51bmtub3duOlxuICAgICAgICAgICAgICAgIGZpcnN0Um93ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgc2Vjb25kUm93ID0gaW5kZXggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0X2Nvb3JkaW5hdGVzKGZpcnN0Um93LCB4X3lfd2lkdGhfaGVpZ2h0KGhvcml6b250YWxfc2hpZnQsIHkgKyB0b3Bfcm93X3NoaWZ0LCB0aGlzLnBvcnRfd2lkdGgsIHRoaXMuaG9sZV9oZWlnaHQpKTtcbiAgICAgICAgICAgIHNldF9jb29yZGluYXRlcyhzZWNvbmRSb3csIHhfeV93aWR0aF9oZWlnaHQoaG9yaXpvbnRhbF9zaGlmdCwgeSArIGJvdHRvbV9yb3dfc2hpZnQsIHRoaXMucG9ydF93aWR0aCwgdGhpcy5ob2xlX2hlaWdodCkpO1xuICAgICAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCArPSB0aGlzLnBvcnRfd2lkdGggKyB0aGlzLmludGVyX3BvcnRfc3BhY2luZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCAtPSB0aGlzLmludGVyX3BvcnRfc3BhY2luZztcbiAgICAgICAgICBob3Jpem9udGFsX3NoaWZ0ICs9IHRoaXMucG9ydF9ncm91cF9zcGFjaW5nO1xuICAgICAgICAgIHBvcnRfc2hpZnQgKz0gdGhpcy5wb3J0X2dyb3VwX3NpemU7XG4gICAgICAgICAgZ3JvdXArKztcbiAgICAgICAgfVxuICAgICAgICB5ID0gdGhpcy5qb2ludF9wb3J0X251bWJlcl9oZWlnaHQ7XG4gICAgICAgIHRvcF9yb3dfc2hpZnQgPSAwO1xuICAgICAgICBib3R0b21fcm93X3NoaWZ0ID0gdGhpcy5pbnNpZGVfam9pbnRfcG9ydF9oZWlnaHQgKyB0aGlzLmludGVyX3BvcnRfc3BhY2luZyArIHRoaXMuaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0ICsgdGhpcy5qb2ludF9wb3J0X3ZlcnRpY2FsX3NwYWNpbmc7XG4gICAgICAgIGluc2lkZV9qb2ludF9yb3dfc2hpZnQgPSB0aGlzLmluc2lkZV9qb2ludF9wb3J0X2hlaWdodCArIHRoaXMuaW50ZXJfcG9ydF9zcGFjaW5nO1xuICAgICAgICBpZiAoUG9ydC5oYXNfam9pbnRfcG9ydHMoKSkge1xuICAgICAgICAgIGNhbGN1bGF0ZV9qb2ludF9wb3J0X2Nvb3JkaW5hdGVzID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgdmFyIGRlbHRhX3gsIGV4dHJhX2hvcml6b250YWxfc2hpZnQsIGosIGwsIG0sIHJlZjEsIHJlZjIsIHJlc3VsdHMsIHJlc3VsdHMxLCBzaGlmdFN0YXRlbWVudCwgdmVydGljYWxfc2hpZnQ7XG4gICAgICAgICAgICAgIHBvcnRfc2hpZnQgPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfdG9fcG9ydF9pZChpZCwgMCk7XG4gICAgICAgICAgICAgIHNoaWZ0U3RhdGVtZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoRGV2aWNlX3NldHRpbmdzLmdldF9wbGF0Zm9ybSgpKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkICUgMiA9PT0gMTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgRGV2aWNlX3NldHRpbmdzLmRldmljZXMudW5rbm93bjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkICUgMiA9PT0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgIHZlcnRpY2FsX3NoaWZ0ID0gc2hpZnRTdGF0ZW1lbnQgPyB0b3Bfcm93X3NoaWZ0IDogYm90dG9tX3Jvd19zaGlmdDtcbiAgICAgICAgICAgICAgaWYgKE1vZGVsX3NlcnZpY2UuZ2V0X2pvaW50X3BvcnRfd2l0aF9vZmZzZXQoTW9kZWwsIGlkKS5tb2RlID09PSAnNDBHJykge1xuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzW3BvcnRfc2hpZnQgKyAxXSA9IHhfeV93aWR0aF9oZWlnaHQoaG9yaXpvbnRhbF9zaGlmdCArIF90aGlzLmluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCwgeSArIHZlcnRpY2FsX3NoaWZ0LCBfdGhpcy5pbnNpZGVfam9pbnRfcG9ydF93aWR0aCAqIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMiArIF90aGlzLmludGVyX3BvcnRfc3BhY2luZywgX3RoaXMuaW5zaWRlX2pvaW50X3BvcnRfaGVpZ2h0ICogRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQgLyAyICsgX3RoaXMuaW50ZXJfcG9ydF9zcGFjaW5nKTtcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gbCA9IDIsIHJlZjEgPSBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydDsgMiA8PSByZWYxID8gbCA8PSByZWYxIDogbCA+PSByZWYxOyBqID0gMiA8PSByZWYxID8gKytsIDogLS1sKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goY29vcmRpbmF0ZXNbcG9ydF9zaGlmdCArIGpdID0gWy0xLCAtMSwgLTEsIC0xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4dHJhX2hvcml6b250YWxfc2hpZnQgPSAwO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gbSA9IDEsIHJlZjIgPSBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydCAvIDI7IDEgPD0gcmVmMiA/IG0gPD0gcmVmMiA6IG0gPj0gcmVmMjsgaiA9IDEgPD0gcmVmMiA/ICsrbSA6IC0tbSkge1xuICAgICAgICAgICAgICAgICAgZGVsdGFfeCA9IGogPT09IDEgPyBfdGhpcy5pbnNpZGVfam9pbnRfcG9ydF9udW1iZXJfd2lkdGggOiAwO1xuICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXNbcG9ydF9zaGlmdCArIGpdID0geF95X3dpZHRoX2hlaWdodChob3Jpem9udGFsX3NoaWZ0ICsgZXh0cmFfaG9yaXpvbnRhbF9zaGlmdCArIGRlbHRhX3gsIHkgKyB2ZXJ0aWNhbF9zaGlmdCwgX3RoaXMuaW5zaWRlX2pvaW50X3BvcnRfd2lkdGgsIF90aGlzLmluc2lkZV9qb2ludF9wb3J0X2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICBjb29yZGluYXRlc1twb3J0X3NoaWZ0ICsgaiArIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMl0gPSB4X3lfd2lkdGhfaGVpZ2h0KGhvcml6b250YWxfc2hpZnQgKyBleHRyYV9ob3Jpem9udGFsX3NoaWZ0ICsgZGVsdGFfeCwgeSArIHZlcnRpY2FsX3NoaWZ0ICsgaW5zaWRlX2pvaW50X3Jvd19zaGlmdCwgX3RoaXMuaW5zaWRlX2pvaW50X3BvcnRfd2lkdGgsIF90aGlzLmluc2lkZV9qb2ludF9wb3J0X2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzMS5wdXNoKGV4dHJhX2hvcml6b250YWxfc2hpZnQgKz0gX3RoaXMuaW5zaWRlX2pvaW50X3BvcnRfbnVtYmVyX3dpZHRoICsgX3RoaXMuaW5zaWRlX2pvaW50X3BvcnRfd2lkdGggKyBfdGhpcy5pbnRlcl9wb3J0X3NwYWNpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyk7XG4gICAgICAgICAgc2V0X2pvaW50X3BvcnRfY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihpLCB4LCB5KSB7XG4gICAgICAgICAgICBpbmRleCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChEZXZpY2Vfc2V0dGluZ3MuZ2V0X3BsYXRmb3JtKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIGNhc2UgRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZjpcbiAgICAgICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLnVua25vd246XG4gICAgICAgICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVfam9pbnRfcG9ydF9jb29yZGluYXRlcyhpICogMiArIDEgKyBpbmRleCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmb3IgKGkgPSBsID0gMCwgcmVmMSA9IFBvcnQuam9pbnRfcG9ydF9jb3VudCgpIC8gMiAtIDE7IDAgPD0gcmVmMSA/IGwgPD0gcmVmMSA6IGwgPj0gcmVmMTsgaSA9IDAgPD0gcmVmMSA/ICsrbCA6IC0tbCkge1xuICAgICAgICAgICAgc2V0X2pvaW50X3BvcnRfY29vcmRpbmF0ZXMoaSwgMCwgMSk7XG4gICAgICAgICAgICBzZXRfam9pbnRfcG9ydF9jb29yZGluYXRlcyhpLCAxLCAwKTtcbiAgICAgICAgICAgIGhvcml6b250YWxfc2hpZnQgKz0gKERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMikgKiAodGhpcy5pbnNpZGVfam9pbnRfcG9ydF9udW1iZXJfd2lkdGggKyB0aGlzLmluc2lkZV9qb2ludF9wb3J0X3dpZHRoICsgdGhpcy5pbnRlcl9wb3J0X3NwYWNpbmcpO1xuICAgICAgICAgICAgaG9yaXpvbnRhbF9zaGlmdCAtPSB0aGlzLmludGVyX3BvcnRfc3BhY2luZztcbiAgICAgICAgICAgIGhvcml6b250YWxfc2hpZnQgKz0gdGhpcy5qb2ludF9wb3J0X2dyb3VwX3NwYWNpbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgICAgIH0sXG4gICAgICBpbnRlcnNlY3RzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChhWzBdID4gYlsyXSB8fCBiWzBdID4gYVsyXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVsxXSA+IGJbM10gfHwgYlsxXSA+IGFbM10pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgZGV0ZWN0X3BvcnRfYnlfaG9sZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB2YXIgaWQ7XG4gICAgICAgIHRoaXMucmVzaGlmdCgpO1xuICAgICAgICB4IC09IHRoaXMuc2hpZnQueDtcbiAgICAgICAgeSAtPSB0aGlzLnNoaWZ0Lnk7XG4gICAgICAgIGlkID0gMTtcbiAgICAgICAgd2hpbGUgKGlkIDwgdGhpcy5wb3J0X2Nvb3JkaW5hdGVzLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmludGVyc2VjdHModGhpcy5wb3J0X2Nvb3JkaW5hdGVzW2lkXSwgW3gsIHksIHgsIHldKSkge1xuICAgICAgICAgICAgcmV0dXJuIFBvcnQuYnlfaWQoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZCsrO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGV0ZWN0X3BvcnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciAkZWxlbWVudCwgZWxlbWVudDtcbiAgICAgICAgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgd2hpbGUgKGpRdWVyeS5jb250YWlucyhwb3J0c19jb250YWluZXIsIGVsZW1lbnQpKSB7XG4gICAgICAgICAgJGVsZW1lbnQgPSBqUXVlcnkoZWxlbWVudCk7XG4gICAgICAgICAgaWYgKCRlbGVtZW50Lmhhc0NsYXNzKCdwb3J0JykpIHtcbiAgICAgICAgICAgIHJldHVybiBQb3J0LmJ5X2lkKHBhcnNlSW50KCRlbGVtZW50LmF0dHIoJ2RhdGEtcG9ydC1pZCcpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0ZXN0X2NsaWNrZWRfZWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoalF1ZXJ5LmNvbnRhaW5zKG1lbnUsIGVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqUXVlcnkuY29udGFpbnMoZGVmYXVsdF9zdGF0dXNfcGxhY2UsIGVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqUXVlcnkuY29udGFpbnMobmF2aWdhdGluZ19mcm9tX3BhZ2VfY29uZmlybWF0aW9uLCBlbGVtZW50KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5jbGllbnRYICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQueDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5jbGllbnRZICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQueTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHh5OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICByZXR1cm4gW3RoaXMueChldmVudCksIHRoaXMueShldmVudCldO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0X3NlbGVjdGlvbjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGlzX2N0cmxfY2xpY2ssIHBvcnQsIHJlZiwgc3RhcnRfc2VsZWN0aW9uLCB0b2dnbGVfcG9ydF9zZWxlY3Rpb24sIHgsIHk7XG4gICAgICAgIGlmIChldmVudC53aGljaCAhPT0gMSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURldmljZS5yZWFkeSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUxvZ2luLmlzX2F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGVzdF9jbGlja2VkX2VsZW1lbnQoZXZlbnQudGFyZ2V0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVmID0gdGhpcy54eShldmVudCksIHggPSByZWZbMF0sIHkgPSByZWZbMV07XG4gICAgICAgIHN0YXJ0X3NlbGVjdGlvbiA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBqUXVlcnkoZml4ZWRfaGVhZCkuYWRkQ2xhc3MoJ3NlbGVjdGluZycpO1xuICAgICAgICAgICAgX3RoaXMuc2VsZWN0aW9uLnN0YXJ0ID0ge1xuICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICB5OiB5XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuc2VsZWN0aW9uLmJveC5zaXplKHtcbiAgICAgICAgICAgICAgbGVmdDogeCxcbiAgICAgICAgICAgICAgdG9wOiB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLnNlbGVjdGlvbi5ib3guc2hvdygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICByZXR1cm4gUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpO1xuICAgICAgICBpc19jdHJsX2NsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmN0cmxLZXk7XG4gICAgICAgIH07XG4gICAgICAgIHRvZ2dsZV9wb3J0X3NlbGVjdGlvbiA9IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgICB0aGlzLm11bHRpcGxlX3BvcnRzX3NlbGVjdGVkID0gUG9ydF92aWV3LnNlbGVjdGVkX2NvdW50KCkgPiAxO1xuICAgICAgICAgIHJldHVybiBQb3J0X3ZpZXcudG9nZ2xlX3NlbGVjdGlvbihwb3J0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcG9ydCA9IHRoaXMuZGV0ZWN0X3BvcnQoZXZlbnQpO1xuICAgICAgICBpZiAocG9ydCkge1xuICAgICAgICAgIGlmIChpc19jdHJsX2NsaWNrKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0b2dnbGVfcG9ydF9zZWxlY3Rpb24ocG9ydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChQb3J0X3ZpZXcuaXNfc2VsZWN0ZWQocG9ydCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcG9ydCA9IHRoaXMuZGV0ZWN0X3BvcnRfYnlfaG9sZSh4LCB5KTtcbiAgICAgICAgaWYgKCFwb3J0KSB7XG4gICAgICAgICAgaWYgKGlzX2N0cmxfY2xpY2soKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc3RhcnRfc2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzX2N0cmxfY2xpY2soKSkge1xuICAgICAgICAgIHJldHVybiB0b2dnbGVfcG9ydF9zZWxlY3Rpb24ocG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFBvcnRfdmlldy5pc19zZWxlY3RlZChwb3J0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBQb3J0X3ZpZXcuZGVzZWxlY3RfYWxsKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0X3BvcnQocG9ydCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aXBsZV9wb3J0c19zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgfSxcbiAgICAgIG1vdXNlX21vdmVkOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgaGVpZ2h0LCBzaXplLCB3aWR0aCwgeCwgeTtcbiAgICAgICAgaWYgKCFEZXZpY2UucmVhZHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbi5zdGFydCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gdGhpcy54KGV2ZW50KTtcbiAgICAgICAgeSA9IHRoaXMueShldmVudCk7XG4gICAgICAgIGlmICh5ID4gZml4ZWRfaGVhZF9oZWlnaHQpIHtcbiAgICAgICAgICB5ID0gZml4ZWRfaGVhZF9oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgd2lkdGggPSB4IC0gdGhpcy5zZWxlY3Rpb24uc3RhcnQueDtcbiAgICAgICAgaGVpZ2h0ID0geSAtIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Lnk7XG4gICAgICAgIHNpemUgPSB7XG4gICAgICAgICAgbGVmdDogd2lkdGggPCAwID8geCA6IHRoaXMuc2VsZWN0aW9uLnN0YXJ0LngsXG4gICAgICAgICAgdG9wOiBoZWlnaHQgPCAwID8geSA6IHRoaXMuc2VsZWN0aW9uLnN0YXJ0LnksXG4gICAgICAgICAgd2lkdGg6IE1hdGguYWJzKHdpZHRoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKGhlaWdodClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmJveC5zaXplKHNpemUpO1xuICAgICAgfSxcbiAgICAgIGVuZF9zZWxlY3Rpb246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBlbmQsIGlkLCBrLCBsZW4sIHBvcnQsIHJlZiwgc2VsZWN0ZWQsIHN0YXJ0LCB0bXAsIHgsIHk7XG4gICAgICAgIGlmIChldmVudC53aGljaCAhPT0gMSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURldmljZS5yZWFkeSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWYgPSB0aGlzLnh5KGV2ZW50KSwgeCA9IHJlZlswXSwgeSA9IHJlZlsxXTtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbi5zdGFydCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBqUXVlcnkoZml4ZWRfaGVhZCkucmVtb3ZlQ2xhc3MoJ3NlbGVjdGluZycpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5lbmQgPSB7XG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICB5OiB5XG4gICAgICAgIH07XG4gICAgICAgIHN0YXJ0ID0gdGhpcy5zZWxlY3Rpb24uc3RhcnQ7XG4gICAgICAgIGVuZCA9IHRoaXMuc2VsZWN0aW9uLmVuZDtcbiAgICAgICAgdGhpcy5yZXNoaWZ0KCk7XG4gICAgICAgIHN0YXJ0LnggLT0gdGhpcy5zaGlmdC54O1xuICAgICAgICBzdGFydC55IC09IHRoaXMuc2hpZnQueTtcbiAgICAgICAgZW5kLnggLT0gdGhpcy5zaGlmdC54O1xuICAgICAgICBlbmQueSAtPSB0aGlzLnNoaWZ0Lnk7XG4gICAgICAgIGlmIChzdGFydC54ID4gZW5kLngpIHtcbiAgICAgICAgICB0bXAgPSBzdGFydC54O1xuICAgICAgICAgIHN0YXJ0LnggPSBlbmQueDtcbiAgICAgICAgICBlbmQueCA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQueSA+IGVuZC55KSB7XG4gICAgICAgICAgdG1wID0gc3RhcnQueTtcbiAgICAgICAgICBzdGFydC55ID0gZW5kLnk7XG4gICAgICAgICAgZW5kLnkgPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgaWQgPSAxO1xuICAgICAgICB3aGlsZSAoaWQgPCB0aGlzLnBvcnRfY29vcmRpbmF0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0cyh0aGlzLnBvcnRfY29vcmRpbmF0ZXNbaWRdLCBbc3RhcnQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55XSkpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goUG9ydC5ieV9pZChpZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZCsrO1xuICAgICAgICB9XG4gICAgICAgIFBvcnRfdmlldy5kZXNlbGVjdF9hbGwoKTtcbiAgICAgICAgZm9yIChrID0gMCwgbGVuID0gc2VsZWN0ZWQubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICBwb3J0ID0gc2VsZWN0ZWRba107XG4gICAgICAgICAgUG9ydF92aWV3LnNlbGVjdChwb3J0LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdWx0aXBsZV9wb3J0c19zZWxlY3RlZCA9IHNlbGVjdGVkLmxlbmd0aCA+IDE7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLnN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLmVuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5ib3guaGlkZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24uYm94LnNpemUoe1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIERldmljZS5qb2ludF9wb3J0X3dpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0IC8gMikgKiAoRGV2aWNlLmluc2lkZV9qb2ludF9wb3J0X3dpZHRoICsgRGV2aWNlLmluc2lkZV9qb2ludF9wb3J0X251bWJlcl93aWR0aCArIERldmljZS5pbnRlcl9wb3J0X3NwYWNpbmcpIC0gRGV2aWNlLmludGVyX3BvcnRfc3BhY2luZztcbiAgICB9O1xuICAgIHJldHVybiBEZXZpY2U7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiYXBwLmZhY3RvcnkgJ0RldmljZV9zZXR0aW5ncycsICgkcm9vdFNjb3BlKSAtPlxuXG4gIERldmljZV9zZXR0aW5ncyA9IHtcbiAgICBkZXZpY2VzOlxuICAgICAgaXoxOiB7IG5hbWU6ICdJWjEnIH1cbiAgICAgIGl6MWY6IHsgbmFtZTogJ0laMUYnIH1cbiAgICAgIHVua25vd246IHsgbmFtZTogJ3Vua25vd24nIH1cbiAgICBpc191bmtub3duX3BsYXRmb3JtOiAtPlxuICAgICAgcmV0dXJuICFEZXZpY2Vfc2V0dGluZ3MuaXNfaXoxKCkgJiYgIURldmljZV9zZXR0aW5ncy5pc19pejFmKClcbiAgICBpc19pejE6IC0+XG4gICAgICByZXR1cm4gJHJvb3RTY29wZS5kZXZpY2VfcGxhdGZvcm0gPT0gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxLm5hbWVcbiAgICBpc19pejFmOiAtPlxuICAgICAgcmV0dXJuICRyb290U2NvcGUuZGV2aWNlX3BsYXRmb3JtID09IERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MWYubmFtZVxuICAgIGdldF9wbGF0Zm9ybTogLT5cbiAgICAgIGZvciBuYW1lLCBwbGF0Zm9ybSBvZiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlc1xuICAgICAgICByZXR1cm4gcGxhdGZvcm0gaWYgJHJvb3RTY29wZS5kZXZpY2VfcGxhdGZvcm0gPT0gcGxhdGZvcm0ubmFtZVxuXG4gICAgICByZXR1cm4gQGRldmljZXMudW5rbm93blxuIyBsZXZlbF80X2RhdGFfbWF4X2J5dGVzOiAzOFxuIyBtYXhfbWlycm9yX2dyb3VwczogLi4uXG4jIG1heF9hY2xzOiAuLi5cbiAgfSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ0RldmljZV9zZXR0aW5ncycsIGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAgICB2YXIgRGV2aWNlX3NldHRpbmdzO1xuICAgIHJldHVybiBEZXZpY2Vfc2V0dGluZ3MgPSB7XG4gICAgICBkZXZpY2VzOiB7XG4gICAgICAgIGl6MToge1xuICAgICAgICAgIG5hbWU6ICdJWjEnXG4gICAgICAgIH0sXG4gICAgICAgIGl6MWY6IHtcbiAgICAgICAgICBuYW1lOiAnSVoxRidcbiAgICAgICAgfSxcbiAgICAgICAgdW5rbm93bjoge1xuICAgICAgICAgIG5hbWU6ICd1bmtub3duJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNfdW5rbm93bl9wbGF0Zm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhRGV2aWNlX3NldHRpbmdzLmlzX2l6MSgpICYmICFEZXZpY2Vfc2V0dGluZ3MuaXNfaXoxZigpO1xuICAgICAgfSxcbiAgICAgIGlzX2l6MTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmRldmljZV9wbGF0Zm9ybSA9PT0gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxLm5hbWU7XG4gICAgICB9LFxuICAgICAgaXNfaXoxZjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmRldmljZV9wbGF0Zm9ybSA9PT0gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZi5uYW1lO1xuICAgICAgfSxcbiAgICAgIGdldF9wbGF0Zm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuYW1lLCBwbGF0Zm9ybSwgcmVmO1xuICAgICAgICByZWYgPSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcztcbiAgICAgICAgZm9yIChuYW1lIGluIHJlZikge1xuICAgICAgICAgIHBsYXRmb3JtID0gcmVmW25hbWVdO1xuICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmRldmljZV9wbGF0Zm9ybSA9PT0gcGxhdGZvcm0ubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBsYXRmb3JtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZXZpY2VzLnVua25vd247XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnRGV2aWNlJywgKCRyb290U2NvcGUsICRxLCBhcGksIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBQb3J0LCBTdGF0dXMsIEdVSSwgRGV2aWNlX0dVSSwgUG9ydF9udW1lcmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2Vfc2V0dGluZ3MsIERldmljZV9yb3V0aW5nLCBSb3V0aW5nX21vZGVsX2FwcGxpZXIsIENvbmZpZ3VyYXRpb24sIHRyYW5zbGF0ZSwgTG9naW4pIC0+XG5cbiAgZ2V0X3NmcF9kYXRhID0gKGRhdGEpIC0+XG4gICAgc2ZwX2RhdGEgPSBkYXRhLnNmcF9kYXRhXG5cbiAgICBpZiBub3QgUG9ydC5pc19nZW5lcmljKGRhdGEuaWQpXG4gICAgICBbam9pbnRfcG9ydF9pZCwgc3ViX3BvcnRfaWRdID0gUG9ydF9udW1lcmF0aW9uLmpvaW5lZF9wb3J0X2lkX2Zyb21fcG9ydF9pZChkYXRhLmlkKVxuICAgICAgc2ZwX2RhdGEucnhfcG93ZXIgPSBzZnBfZGF0YVsncngnICsgc3ViX3BvcnRfaWQgKyAnX3Bvd2VyJ11cblxuICAgIHJldHVybiBzZnBfZGF0YVxuXG4gIERldmljZSA9XG4gICAgcG9ydF9zdGF0c19maWVsZHM6IFtcbiAgICAgICdzdGF0ZSdcbiAgICAgICdyeF9vY3RldHMnXG4gICAgICAndHhfb2N0ZXRzJ1xuICAgICAgJ3J4X2NyY19lcnJvcl9vY3RldHMnXG4gICAgICAndHhfZHJvcF9vY3RldHMnXG4gICAgXVxuICAgICMg0KHRgtCw0YLRg9GBINC30LDQs9GA0YPQt9C60Lgg0LbQtdC70LXQt9C60LhcbiAgICBpc0Jvb3Rpbmc6IHRydWVcblxuICAgIGluaXRpYWxpemU6IC0+XG4gICAgICBhcGkuY2FsbCgnZ2V0U3dpdGNoSW5mbycpLnRoZW4gKHJlc3VsdCkgLT5cblxuICAgICAgICAkcm9vdFNjb3BlLnNlcmlhbCA9IHJlc3VsdC5TZXJpYWxcbiAgICAgICAgJHJvb3RTY29wZS5kZXZpY2VfdmVyc2lvbiA9IHJlc3VsdC52ZXJzaW9uXG4gICAgICAgICRyb290U2NvcGUuZGV2aWNlX3BsYXRmb3JtID0gcmVzdWx0LlBsYXRmb3JtXG5cbiAgICAgICAgUG9ydC5jb3VudCA9IHJlc3VsdC5Qb3J0c0NvdW50XG5cbiAgICAgICAgcG9ydHNfbW9kZWwgPSBDb25maWd1cmF0aW9uLlBvcnRzLmRldmljZS5kZXNlcmlhbGl6ZShyZXN1bHQuUG9ydHMpXG4gICAgICAgIHJlcGxhY2Vfd2l0aChNb2RlbCwgQ29uZmlndXJhdGlvbi5Qb3J0cy5kZXNlcmlhbGl6ZShwb3J0c19tb2RlbCkpXG5cbiAgICAgICAgRGV2aWNlLmluaXRpYWxpemVfcG9ydF9ncm91cHMoKVxuICAgICAgICBEZXZpY2UucmVmcmVzaF9wb3J0X3N0YXRzX2Zyb21fc3dpdGNoX2luZm8ocmVzdWx0KVxuXG4gICAgICAgIFJvdXRpbmdfbW9kZWxfYXBwbGllci5zZXRfaW50ZXJmYWNlX3ZlcnNpb24oYXBpKVxuICAgICAgICAuY2F0Y2ggKGUpIC0+XG4gICAgICAgICAgY29uc29sZS5lcnJvciBlXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgIyDRgNCw0YHQv9GA0LXQtNC10LvQuNGC0Ywg0L/QvtGA0YLRiyDQv9C+INCz0YDRg9C/0L/QsNC8XG4gICAgaW5pdGlhbGl6ZV9wb3J0X2dyb3VwczogLT5cbiAgICAgIGdyb3VwX251bSA9IC0xXG4gICAgICBncm91cCAgICAgPSBudWxsXG5cbiAgICAgICMg0LTQu9GPINC+0LHRi9GH0L3Ri9GFINC/0L7RgNGC0L7QslxuICAgICAgZm9yIHBvcnQgaW4gTW9kZWwucG9ydHMgd2hlbiBwb3J0LmlkIDw9IERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnRcblxuICAgICAgICAjINGA0LDRgdC/0YDQtdC00LXQu9C40YLRjCDQvtCx0YvRh9C90YvQtSDQv9C+0YDRgtGLINC/0L4g0LPRgNGD0L/Qv9Cw0LxcbiAgICAgICAgaWYgcG9ydC5pZCAlIERldmljZV9HVUkucG9ydF9ncm91cF9zaXplID09IDFcbiAgICAgICAgICBncm91cF9udW0rK1xuICAgICAgICAgIGdyb3VwID0gW11cbiAgICAgICAgICAkcm9vdFNjb3BlLmdyb3Vwc1tncm91cF9udW1dID0gZ3JvdXBcblxuICAgICAgICBncm91cC5wdXNoKE1vZGVsX3NlcnZpY2UuZ2V0X3BvcnRfd2l0aF9vZmZzZXQoTW9kZWwsIHBvcnQuaWQpKVxuXG4gICAgIyDQvtCx0L3QvtCy0LjRgtGMINCyINC80L7QtNC10LvQuCDQvtGB0L3QvtCy0L3Rg9GOINC40L3RhNC+0YDQvNCw0YbQuNGOINC/0L4g0L/QvtGA0YLQsNC8XG4gICAgcmVmcmVzaF9wb3J0c19mcm9tX3N3aXRjaF9pbmZvOiAocmVzdWx0KSAtPlxuICAgICAgcmV0dXJuIGlmICFNb2RlbF9zZXJ2aWNlLmlzX3BvcnRzX2xvY2tfZW1wdHkoKVxuXG4gICAgICAjIGZpbGwgaW4gcG9ydCBwcm9wZXJ0aWVzXG4gICAgICBDb25maWd1cmF0aW9uLlBvcnRzLmRldmljZS5yZWZyZXNoKHJlc3VsdC5Qb3J0cywgTW9kZWwpXG4gICAgICBDb25maWd1cmF0aW9uLlBvcnRzLkpvaW50X3BvcnRzLmRldmljZS5yZWZyZXNoKE1vZGVsKVxuXG4gICAgcmVmcmVzaF9wb3J0X3N0YXRzX2Zyb21fc3dpdGNoX2luZm86IChyZXN1bHQpIC0+XG5cbiAgICAgICMg0LTQu9GPINC60LDQttC00L7Qs9C+INC/0L7RgNGC0LBcbiAgICAgIGZvciBwb3J0X2RhdGEgaW4gcmVzdWx0LlBvcnRzXG5cbiAgICAgICAgIyDQtdGB0LvQuCDRhdGA0LDQvdC40LvQuNGJ0LAg0YHRgtCw0YLQuNGB0YLQuNC60Lgg0L/QviDQtNCw0L3QvdC+0LzRgyDQv9C+0YDRgtGDINC10YnRkSDQvdC1INGB0L7Qt9C00LDQvdC+LCDRgdC+0LfQtNCw0YLRjCDQtdCz0L5cbiAgICAgICAgaWYgbm90ICRyb290U2NvcGUuc3RhdHMucG9ydHNbcG9ydF9kYXRhLmlkXVxuICAgICAgICAgICRyb290U2NvcGUuc3RhdHMucG9ydHNbcG9ydF9kYXRhLmlkXSA9IHt9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAjINC+0LHQvdC+0LLQuNGC0Ywg0YHRgtCw0YLQuNGB0YLQuNC60YMg0L/QvtGA0YLQsFxuICAgICAgICAgIHBvcnQgPSAkcm9vdFNjb3BlLnN0YXRzLnBvcnRzW3BvcnRfZGF0YS5pZF1cblxuICAgICAgICAgIGRlbHRhX3QgPSAocmVzdWx0LnRpbWVzdGFtcCAtIHBvcnQudGltZXN0YW1wKSAvIDEwMDAgIyBpbiBzZWNvbmRzXG5cbiAgICAgICAgICBkZWx0YV9yeCA9IHBvcnRfZGF0YS5yeF9vY3RldHMgLSBwb3J0LnJ4X29jdGV0c1xuICAgICAgICAgIGRlbHRhX3R4ID0gcG9ydF9kYXRhLnR4X29jdGV0cyAtIHBvcnQudHhfb2N0ZXRzXG5cbiAgICAgICAgICBwb3J0LnJ4X3NwZWVkID0gaWYgcG9ydF9kYXRhLnN0YXRlICYmIGRlbHRhX3J4ID4gMFxuICAgICAgICAgICAgZGVsdGFfcnggLyBkZWx0YV90ICMgb2N0ZXRzIHBlciBzZWNvbmRcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAwXG5cbiAgICAgICAgICBwb3J0LnR4X3NwZWVkID0gaWYgcG9ydF9kYXRhLnN0YXRlICYmIGRlbHRhX3R4ID4gMFxuICAgICAgICAgICAgZGVsdGFfdHggLyBkZWx0YV90ICMgb2N0ZXRzIHBlciBzZWNvbmRcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAwXG5cbiAgICAgICAgICBwb3J0LmFjdGl2ZSAgICAgICA9IGlmIHBvcnQucnhfc3BlZWQgfHwgcG9ydC50eF9zcGVlZCB0aGVuIHllcyBlbHNlIG5vXG4gICAgICAgICAgcG9ydC5zZnBfcHJlc2VudCAgPSBpZiBwb3J0X2RhdGEuc2ZwX3ByZXNlbnQgPT0gMSB0aGVuIHllcyBlbHNlIG5vXG4gICAgICAgICAgcG9ydC5zZnBfZGF0YSAgICAgPSBnZXRfc2ZwX2RhdGEocG9ydF9kYXRhKTtcblxuICAgICAgICAgIHBvcnQudGltZXN0YW1wID0gcmVzdWx0LnRpbWVzdGFtcFxuXG4gICAgICAgICAgZm9yIGZpZWxkIGluIERldmljZS5wb3J0X3N0YXRzX2ZpZWxkcyB3aGVuIHBvcnRfZGF0YVtmaWVsZF0/XG4gICAgICAgICAgICBwb3J0W2ZpZWxkXSA9IHBvcnRfZGF0YVtmaWVsZF1cblxuICAgICMg0L7QsdC90L7QstC40YLRjCDQsiDQsdGA0LDRg9C30LXRgNC1INC40L3RhNC+0YDQvNCw0YbQuNGOINC/0L4g0L/QvtGA0YLQsNC8XG4gICAgcmVmcmVzaF9wb3J0czogLT5cbiAgICAgIGlmICRyb290U2NvcGUub2ZmbGluZVxuICAgICAgICAjIGFsd2F5cyByZXNvbHZpbmcgcHJvbWlzZVxuICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKClcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlXG5cbiAgICAgIGFwaS5jYWxsKFwiZ2V0U3dpdGNoSW5mb1wiLCB7fSwgeyBtaW5vcjogeWVzIH0pLnRoZW4oKHJlc3VsdCkgLT5cbiAgICAgICAgIyDQvtCx0L3QvtCy0LjRgtGMINCyINC80L7QtNC10LvQuCDQvtGB0L3QvtCy0L3Rg9GOINC40L3RhNC+0YDQvNCw0YbQuNGOINC/0L4g0L/QvtGA0YLQsNC8XG4gICAgICAgIERldmljZS5yZWZyZXNoX3BvcnRzX2Zyb21fc3dpdGNoX2luZm8ocmVzdWx0KVxuICAgICAgICBEZXZpY2UucmVmcmVzaF9wb3J0X3N0YXRzX2Zyb21fc3dpdGNoX2luZm8ocmVzdWx0KVxuXG4gICAgICAgICMg0JLRi9C30YvQstCw0YLRjCBhcHBseSDRgtC+0LvRjNC60L4g0YLQvtCz0LTQsCwg0LrQvtCz0LTQsCDQttC10LvQtdC30LrQsCDQvdCw0YXQvtC00LjRgtGB0Y8g0L/QvtGB0LvQtSDQt9Cw0LPRgNGD0LfQutC4LiDQo9Cx0LjRgNCw0LXQvCDQvdCw0LPRgNGD0LfQutGDINC90LAg0L/QtdGA0LXRgNCw0YHRh9GR0YLRi1xuICAgICAgICAjINCy0YzRjtGJ0LXQulxuICAgICAgICBpZihAaXNCb290aW5nKVxuICAgICAgICAgICRyb290U2NvcGUuc2FmZUFwcGx5IC0+XG4gICAgICAgICAgICBAaXNCb290aW5nID0gZmFsc2VcbiAgICAgICAgICAgICRyb290U2NvcGUuZGV2aWNlX2lzX2Jvb3RpbmcgPSBub1xuICAgICAgICAgICAgTG9naW4uYXV0aGVudGljYXRlKClcbiAgICAgIClcbiAgICAgIC5jYXRjaChhcGkuZXJyb3IuZGV2aWNlX2lzX2Jvb3RpbmdfdXAsIC0+XG4gICAgICAgICMg0KHQvCDQstGL0YjQtS5cbiAgICAgICAgaWYoIUBpc0Jvb3RpbmcpXG4gICAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICAgIEBpc0Jvb3RpbmcgPSB0cnVlXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmRldmljZV9pc19ib290aW5nID0geWVzXG4gICAgICApXG5cbiAgICAjINC/0YDQuNC80LXQvdGP0LXRgiDQv9GA0LDQstC40LvQsCDQsdC10Lcg0YHQsdGA0L7RgdCwINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICAgc2V0X3VwX3JvdXRpbmc6IChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5kb193aXRoX3BvcnRfbG9jayAtPlxuXG4gICAgICAgIFJvdXRpbmdfbW9kZWxfYXBwbGllci5zZXRfdXBfcm91dGluZyhydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKVxuXG4gICAgIyDQv9C10YDQtdC30LDQs9GA0YPQttCw0LXRgiDRg9GB0YLRgNC+0LnRgdGC0LLQvlxuICAgIHJlc3RhcnQ6IC0+XG4gICAgICByZWJvb3RlZCA9IC0+XG4gICAgICAgICMgU3RhdHVzLmlkbGUoJ9Cd0LDRgdGC0YDQvtC50LrQuCDRgdC+0YXRgNCw0L3QtdC90YsuINCj0YHRgtGA0L7QudGB0YLQstC+INC/0LXRgNC10LfQsNCz0YDRg9C20LDQtdGC0YHRjywg0LbQtNC40YLQtS4uLicpXG4gICAgICAgIEdVSS53YWl0X2Zvcl9jb25uZWN0aW9uKDYwLCB0cmFuc2xhdGUoJ2RldmljZS5zdGF0dXMucmVib290aW5nJyksIHsgdG86ICdkZXZpY2UnIH0pXG5cbiAgICAgIGFwaS5jYWxsKCdyZWJvb3QnKS5maW5hbGx5KHJlYm9vdGVkKVxuXG4gICAgbG9hZF9jb25maWd1cmF0aW9uOiAtPlxuICAgICAgYXBpLmNhbGwoJ2dldENvbmZpZycpXG4gICAgIyDQktGL0YfQu9C10L3Rj9C90LjQtSDQuNC3INGB0L7RhdGA0LDQvdGR0L3QvdC+0LPQviDQutC+0L3RhNC40LPQsCwg0YIu0LouINGA0YPQu9GB0Ysg0YHRgtCw0LLRj9GC0YHRjyDQv9C+0YHQu9C10LTQvdC40LzQuCwg0YLQviDQu9GD0YfRiNC1INC40YHQutCw0YLRjCDRgSDQutC+0L3RhtCwINC80LDRgdGB0LjQstCwLlxuICAgIGxvYWRfcnVsZXM6IC0+XG4gICAgICBEZXZpY2UubG9hZF9jb25maWd1cmF0aW9uKCkudGhlbigocmVzdWx0KSAtPlxuICAgICAgICBmb3IgaW5kZXggaW4gW3Jlc3VsdC5sZW5ndGgtMS4uMF1cbiAgICAgICAgICBtZXRob2QgPSByZXN1bHRbaW5kZXhdLm1ldGhvZFxuICAgICAgICAgIGlmIG1ldGhvZCA9PSAnc2V0UnVsZXNMaXN0J1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFtpbmRleF0ucGFyYW1zLnJ1bGVzXG5cbiAgICAgICAgcmV0dXJuIHt9XG4gICAgICApXG5cbiAgICAjINGB0L7RhdGA0LDQvdGP0LXRgiDQv9C+0LvQvdGD0Y4g0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINGA0L7Rg9GC0LjQvdCz0LAg0YPRgdGC0YDQvtC50YHRgtCy0LAgKNC/0YDQsNCy0LjQu9CwLCDQv9C+0YDRgtGLLCAuLi4pXG4gICAgc2F2ZV9jb25maWd1cmF0aW9uOiAtPlxuICAgICAgUm91dGluZ19tb2RlbF9hcHBsaWVyLnNhdmVfY29uZmlndXJhdGlvbihNb2RlbC5ydWxlcywgTW9kZWwucG9ydHMsIE1vZGVsLmpvaW50X3BvcnRzKVxuIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnRGV2aWNlJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHEsIGFwaSwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIFBvcnQsIFN0YXR1cywgR1VJLCBEZXZpY2VfR1VJLCBQb3J0X251bWVyYXRpb24sIERldmljZV9zZXR0aW5ncywgRGV2aWNlX3JvdXRpbmcsIFJvdXRpbmdfbW9kZWxfYXBwbGllciwgQ29uZmlndXJhdGlvbiwgdHJhbnNsYXRlLCBMb2dpbikge1xuICAgIHZhciBEZXZpY2UsIGdldF9zZnBfZGF0YTtcbiAgICBnZXRfc2ZwX2RhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgam9pbnRfcG9ydF9pZCwgcmVmLCBzZnBfZGF0YSwgc3ViX3BvcnRfaWQ7XG4gICAgICBzZnBfZGF0YSA9IGRhdGEuc2ZwX2RhdGE7XG4gICAgICBpZiAoIVBvcnQuaXNfZ2VuZXJpYyhkYXRhLmlkKSkge1xuICAgICAgICByZWYgPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfZnJvbV9wb3J0X2lkKGRhdGEuaWQpLCBqb2ludF9wb3J0X2lkID0gcmVmWzBdLCBzdWJfcG9ydF9pZCA9IHJlZlsxXTtcbiAgICAgICAgc2ZwX2RhdGEucnhfcG93ZXIgPSBzZnBfZGF0YVsncngnICsgc3ViX3BvcnRfaWQgKyAnX3Bvd2VyJ107XG4gICAgICB9XG4gICAgICByZXR1cm4gc2ZwX2RhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gRGV2aWNlID0ge1xuICAgICAgcG9ydF9zdGF0c19maWVsZHM6IFsnc3RhdGUnLCAncnhfb2N0ZXRzJywgJ3R4X29jdGV0cycsICdyeF9jcmNfZXJyb3Jfb2N0ZXRzJywgJ3R4X2Ryb3Bfb2N0ZXRzJ10sXG4gICAgICBpc0Jvb3Rpbmc6IHRydWUsXG4gICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdnZXRTd2l0Y2hJbmZvJykudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB2YXIgcG9ydHNfbW9kZWw7XG4gICAgICAgICAgJHJvb3RTY29wZS5zZXJpYWwgPSByZXN1bHQuU2VyaWFsO1xuICAgICAgICAgICRyb290U2NvcGUuZGV2aWNlX3ZlcnNpb24gPSByZXN1bHQudmVyc2lvbjtcbiAgICAgICAgICAkcm9vdFNjb3BlLmRldmljZV9wbGF0Zm9ybSA9IHJlc3VsdC5QbGF0Zm9ybTtcbiAgICAgICAgICBQb3J0LmNvdW50ID0gcmVzdWx0LlBvcnRzQ291bnQ7XG4gICAgICAgICAgcG9ydHNfbW9kZWwgPSBDb25maWd1cmF0aW9uLlBvcnRzLmRldmljZS5kZXNlcmlhbGl6ZShyZXN1bHQuUG9ydHMpO1xuICAgICAgICAgIHJlcGxhY2Vfd2l0aChNb2RlbCwgQ29uZmlndXJhdGlvbi5Qb3J0cy5kZXNlcmlhbGl6ZShwb3J0c19tb2RlbCkpO1xuICAgICAgICAgIERldmljZS5pbml0aWFsaXplX3BvcnRfZ3JvdXBzKCk7XG4gICAgICAgICAgRGV2aWNlLnJlZnJlc2hfcG9ydF9zdGF0c19mcm9tX3N3aXRjaF9pbmZvKHJlc3VsdCk7XG4gICAgICAgICAgUm91dGluZ19tb2RlbF9hcHBsaWVyLnNldF9pbnRlcmZhY2VfdmVyc2lvbihhcGkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaW5pdGlhbGl6ZV9wb3J0X2dyb3VwczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBncm91cCwgZ3JvdXBfbnVtLCBpLCBsZW4sIHBvcnQsIHJlZiwgcmVzdWx0cztcbiAgICAgICAgZ3JvdXBfbnVtID0gLTE7XG4gICAgICAgIGdyb3VwID0gbnVsbDtcbiAgICAgICAgcmVmID0gTW9kZWwucG9ydHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoIShwb3J0LmlkIDw9IERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBvcnQuaWQgJSBEZXZpY2VfR1VJLnBvcnRfZ3JvdXBfc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgZ3JvdXBfbnVtKys7XG4gICAgICAgICAgICBncm91cCA9IFtdO1xuICAgICAgICAgICAgJHJvb3RTY29wZS5ncm91cHNbZ3JvdXBfbnVtXSA9IGdyb3VwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHRzLnB1c2goZ3JvdXAucHVzaChNb2RlbF9zZXJ2aWNlLmdldF9wb3J0X3dpdGhfb2Zmc2V0KE1vZGVsLCBwb3J0LmlkKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hfcG9ydHNfZnJvbV9zd2l0Y2hfaW5mbzogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIGlmICghTW9kZWxfc2VydmljZS5pc19wb3J0c19sb2NrX2VtcHR5KCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgQ29uZmlndXJhdGlvbi5Qb3J0cy5kZXZpY2UucmVmcmVzaChyZXN1bHQuUG9ydHMsIE1vZGVsKTtcbiAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uUG9ydHMuSm9pbnRfcG9ydHMuZGV2aWNlLnJlZnJlc2goTW9kZWwpO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hfcG9ydF9zdGF0c19mcm9tX3N3aXRjaF9pbmZvOiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgdmFyIGRlbHRhX3J4LCBkZWx0YV90LCBkZWx0YV90eCwgZmllbGQsIGksIGxlbiwgcG9ydCwgcG9ydF9kYXRhLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlZiA9IHJlc3VsdC5Qb3J0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBwb3J0X2RhdGEgPSByZWZbaV07XG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLnN0YXRzLnBvcnRzW3BvcnRfZGF0YS5pZF0pIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCgkcm9vdFNjb3BlLnN0YXRzLnBvcnRzW3BvcnRfZGF0YS5pZF0gPSB7fSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcnQgPSAkcm9vdFNjb3BlLnN0YXRzLnBvcnRzW3BvcnRfZGF0YS5pZF07XG4gICAgICAgICAgICBkZWx0YV90ID0gKHJlc3VsdC50aW1lc3RhbXAgLSBwb3J0LnRpbWVzdGFtcCkgLyAxMDAwO1xuICAgICAgICAgICAgZGVsdGFfcnggPSBwb3J0X2RhdGEucnhfb2N0ZXRzIC0gcG9ydC5yeF9vY3RldHM7XG4gICAgICAgICAgICBkZWx0YV90eCA9IHBvcnRfZGF0YS50eF9vY3RldHMgLSBwb3J0LnR4X29jdGV0cztcbiAgICAgICAgICAgIHBvcnQucnhfc3BlZWQgPSBwb3J0X2RhdGEuc3RhdGUgJiYgZGVsdGFfcnggPiAwID8gZGVsdGFfcnggLyBkZWx0YV90IDogMDtcbiAgICAgICAgICAgIHBvcnQudHhfc3BlZWQgPSBwb3J0X2RhdGEuc3RhdGUgJiYgZGVsdGFfdHggPiAwID8gZGVsdGFfdHggLyBkZWx0YV90IDogMDtcbiAgICAgICAgICAgIHBvcnQuYWN0aXZlID0gcG9ydC5yeF9zcGVlZCB8fCBwb3J0LnR4X3NwZWVkID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgcG9ydC5zZnBfcHJlc2VudCA9IHBvcnRfZGF0YS5zZnBfcHJlc2VudCA9PT0gMSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIHBvcnQuc2ZwX2RhdGEgPSBnZXRfc2ZwX2RhdGEocG9ydF9kYXRhKTtcbiAgICAgICAgICAgIHBvcnQudGltZXN0YW1wID0gcmVzdWx0LnRpbWVzdGFtcDtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBqLCBsZW4xLCByZWYxLCByZXN1bHRzMTtcbiAgICAgICAgICAgICAgcmVmMSA9IERldmljZS5wb3J0X3N0YXRzX2ZpZWxkcztcbiAgICAgICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgZmllbGQgPSByZWYxW2pdO1xuICAgICAgICAgICAgICAgIGlmIChwb3J0X2RhdGFbZmllbGRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMxLnB1c2gocG9ydFtmaWVsZF0gPSBwb3J0X2RhdGFbZmllbGRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgICAgfSkoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIHJlZnJlc2hfcG9ydHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGVmZXJyZWQ7XG4gICAgICAgIGlmICgkcm9vdFNjb3BlLm9mZmxpbmUpIHtcbiAgICAgICAgICBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcImdldFN3aXRjaEluZm9cIiwge30sIHtcbiAgICAgICAgICBtaW5vcjogdHJ1ZVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIERldmljZS5yZWZyZXNoX3BvcnRzX2Zyb21fc3dpdGNoX2luZm8ocmVzdWx0KTtcbiAgICAgICAgICBEZXZpY2UucmVmcmVzaF9wb3J0X3N0YXRzX2Zyb21fc3dpdGNoX2luZm8ocmVzdWx0KTtcbiAgICAgICAgICBpZiAodGhpcy5pc0Jvb3RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdGhpcy5pc0Jvb3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS5kZXZpY2VfaXNfYm9vdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gTG9naW4uYXV0aGVudGljYXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oYXBpLmVycm9yLmRldmljZV9pc19ib290aW5nX3VwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaXNCb290aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zYWZlQXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRoaXMuaXNCb290aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuZGV2aWNlX2lzX2Jvb3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzZXRfdXBfcm91dGluZzogZnVuY3Rpb24ocnVsZXMsIHBvcnRzLCBqb2ludF9wb3J0cykge1xuICAgICAgICByZXR1cm4gTW9kZWxfc2VydmljZS5kb193aXRoX3BvcnRfbG9jayhmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gUm91dGluZ19tb2RlbF9hcHBsaWVyLnNldF91cF9yb3V0aW5nKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlYm9vdGVkO1xuICAgICAgICByZWJvb3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBHVUkud2FpdF9mb3JfY29ubmVjdGlvbig2MCwgdHJhbnNsYXRlKCdkZXZpY2Uuc3RhdHVzLnJlYm9vdGluZycpLCB7XG4gICAgICAgICAgICB0bzogJ2RldmljZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdyZWJvb3QnKVtcImZpbmFsbHlcIl0ocmVib290ZWQpO1xuICAgICAgfSxcbiAgICAgIGxvYWRfY29uZmlndXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbCgnZ2V0Q29uZmlnJyk7XG4gICAgICB9LFxuICAgICAgbG9hZF9ydWxlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEZXZpY2UubG9hZF9jb25maWd1cmF0aW9uKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICB2YXIgaSwgaW5kZXgsIG1ldGhvZCwgcmVmO1xuICAgICAgICAgIGZvciAoaW5kZXggPSBpID0gcmVmID0gcmVzdWx0Lmxlbmd0aCAtIDE7IHJlZiA8PSAwID8gaSA8PSAwIDogaSA+PSAwOyBpbmRleCA9IHJlZiA8PSAwID8gKytpIDogLS1pKSB7XG4gICAgICAgICAgICBtZXRob2QgPSByZXN1bHRbaW5kZXhdLm1ldGhvZDtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICdzZXRSdWxlc0xpc3QnKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRbaW5kZXhdLnBhcmFtcy5ydWxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzYXZlX2NvbmZpZ3VyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUm91dGluZ19tb2RlbF9hcHBsaWVyLnNhdmVfY29uZmlndXJhdGlvbihNb2RlbC5ydWxlcywgTW9kZWwucG9ydHMsIE1vZGVsLmpvaW50X3BvcnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdEZXZpY2Vfcm91dGluZycsICgkcm9vdFNjb3BlLCBhcGksIEVudW1zLCBVdGlsaXRpZXMsICRzYW5pdGl6ZSkgLT5cbiAgRGV2aWNlX3JvdXRpbmcgPVxuICAgIGNvbnZlcnRfdG9fZGV2aWNlX3J1bGVzOiAocnVsZXMpIC0+XG5cbiAgICAgIHJ1bGVzID0gYW5ndWxhci5jb3B5KHJ1bGVzKVxuICAgICAgZm9yIHJ1bGUgaW4gcnVsZXNcblxuICAgICAgICBydWxlLm5hbWUgPSAkc2FuaXRpemUocnVsZS5uYW1lKTtcblxuICAgICAgICBmb3IgcG9ydCwgaSBpbiBydWxlLmlucHV0c1xuICAgICAgICAgIHJ1bGUuaW5wdXRzW2ldID0gcG9ydC5pZFxuXG4gICAgICAgIGZvciBwb3J0LCBpIGluIHJ1bGUub3V0cHV0c1xuICAgICAgICAgIHJ1bGUub3V0cHV0c1tpXSA9IHBvcnQuaWRcblxuICAgICAgICAjINCU0LvRjyDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCDQvdC10LrQvtGC0L7RgNGL0YUg0YTQuNC70YzRgtGA0L7QsiDQvdCwINCx0Y3QutC10L3QtNC1INC90YPQttC90LAg0YHQvtGA0YLQuNGA0L7QstC60LAg0L/QviDRgtC40L/Rg1xuICAgICAgICBydWxlLmZpbHRlcnMuc29ydCAoYSwgYikgLT5cbiAgICAgICAgICByZXR1cm4gYS50eXBlID4gYi50eXBlXG5cbiAgICAgICAgZm9yIG5hbWUsIHByb3BlcnR5IG9mIHJ1bGVcbiAgICAgICAgICAjINC10YHQu9C4INGC0LjQvyDQsdGD0LssINGC0L4g0L/RgNC40LLQvtC00LjQvCDQuiDQuNC90YLRg1xuICAgICAgICAgIGlmIHR5cGVvZiBwcm9wZXJ0eSA9PSAnYm9vbGVhbidcbiAgICAgICAgICAgIHJ1bGVbbmFtZV0gPSBwcm9wZXJ0eSA8PCAwXG5cbiAgICAgICAgZm9yIGZpbHRlciBpbiBydWxlLmZpbHRlcnNcbiAgICAgICAgICBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuY29udmVydF90b19kZXZpY2UoZmlsdGVyKVxuXG4gICAgICByZXR1cm4gcnVsZXNcbiAgICBMQkc6XG4gICAgICBIYXNoX3Byb2ZpbGU6XG4gICAgICAgIGJ5X2lkOiAoaWQpIC0+XG4gICAgICAgICAgJHJvb3RTY29wZS5oYXNoX3Byb2ZpbGVzLmZpbHRlcigocHJvZmlsZSkgLT4gcHJvZmlsZS5pZCA9PSBpZClbMF1cblxuICAgICAgICBmZXRjaDogLT5cbiAgICAgICAgICBhcGkuY2FsbCgnZ2V0RGVmYXVsdEhhc2hQcm9maWxlJykudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgRGV2aWNlX3JvdXRpbmcuTEJHLkhhc2hfcHJvZmlsZS5ieV9pZChyZXN1bHQucHJvZmlsZSlcblxuICAgICAgICBmZXRjaF9hbGw6IC0+XG4gICAgICAgICAgYXBpLmNhbGwoJ2dldEhhc2hQcm9maWxlcycpLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgICAgICRyb290U2NvcGUuaGFzaF9wcm9maWxlcyA9IHJlc3VsdC5wcm9maWxlc1xuXG4gICAgRmlsdGVyOlxuICAgICAgaXBfc3BsaXRfcnVsZTogL1ssO1xcblxcclxcc10vXG5cbiAgICAgIF9nZXRfYnlfdHlwZTogKHR5cGUpIC0+XG4gICAgICAgIGlmICFFbnVtcy5BQ0xfRmlsdGVyW3R5cGVdXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfQndC1INC90LDQudC00LXQvSDRhNC40LvRjNGC0YAg0YEg0YLQuNC/0L7QvDogJysgdHlwZSlcblxuICAgICAgICByZXR1cm4gRW51bXMuQUNMX0ZpbHRlclt0eXBlXVxuXG4gICAgICBfZ2V0X3ZhbHVlOiAoZmlsdGVyKSAtPlxuICAgICAgICBzd2l0Y2ggZmlsdGVyLnR5cGVcbiAgICAgICAgICB3aGVuICdtdWx0aV9JUF9hZGRyZXNzJ1xuICAgICAgICAgICAgaXBzID0gZmlsdGVyLnZhbHVlLnNwbGl0KERldmljZV9yb3V0aW5nLkZpbHRlci5pcF9zcGxpdF9ydWxlKVxuICAgICAgICAgICAgcmVzdWx0ID0gW11cblxuICAgICAgICAgICAgZm9yIGlwIGluIGlwc1xuICAgICAgICAgICAgICBpZiAoaXAgPSBpcC50cmltKCkpLmxlbmd0aCAhPSAwXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe3NyYzogaXB9KVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtkc3Q6IGlwfSlcblxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCA9IGZpbHRlci52YWx1ZVxuXG4gICAgICAgIHJldHVybiByZXN1bHRcblxuICAgICAgX2dldF90eXBlOiAoZmlsdGVyKSAtPlxuICAgICAgICBmaWx0ZXJfdHlwZSA9IERldmljZV9yb3V0aW5nLkZpbHRlci5fZ2V0X2J5X3R5cGUoZmlsdGVyLnR5cGUpXG5cbiAgICAgICAgdHlwZSA9IHN3aXRjaCBmaWx0ZXIudHlwZVxuICAgICAgICAgIHdoZW4gJ0lQX3Byb3RvY29sX2Rlc3RpbmF0aW9uJywgJ0lQX3Byb3RvY29sX3NvdXJjZSdcbiAgICAgICAgICAgIGlmIGZpbHRlci50b192YWx1ZVxuICAgICAgICAgICAgICBmaWx0ZXJfdHlwZS5maWx0ZXIudmFsdWVfcmFuZ2VcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgZmlsdGVyX3R5cGUuZmlsdGVyLnZhbHVlXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmlsdGVyX3R5cGUuZmlsdGVyLnZhbHVlXG5cbiAgICAgICAgcmV0dXJuIHR5cGVcblxuICAgICAgX2dldF9tYXNrOiAoZmlsdGVyKSAtPlxuICAgICAgICBmaWx0ZXJfdHlwZSA9IERldmljZV9yb3V0aW5nLkZpbHRlci5fZ2V0X2J5X3R5cGUoZmlsdGVyLnR5cGUpXG5cbiAgICAgICAgbWFzayA9IGlmIGZpbHRlcl90eXBlLm1hc2sgJiYgdHlwZW9mIGZpbHRlcl90eXBlLm1hc2suZGV2aWNlID09ICdmdW5jdGlvbidcbiAgICAgICAgICAgIGZpbHRlcl90eXBlLm1hc2suZGV2aWNlKGZpbHRlci5tYXNrKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbHRlci5tYXNrXG5cbiAgICAgICAgcmV0dXJuIG1hc2tcblxuICAgICAgZGVmYXVsdF9tYXNrOiAoZmlsdGVyX3R5cGUpIC0+XG4gICAgICAgIHN3aXRjaCBmaWx0ZXJfdHlwZVxuICAgICAgICAgIHdoZW4gJ0xldmVsNF9kYXRhJyB0aGVuICcnXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmlkZW50aXR5X21hc2soRW51bXMuQUNMX0ZpbHRlcltmaWx0ZXJfdHlwZV0pXG5cbiAgICAgIGlzX2RlZmF1bHRfbWFzazogKGZpbHRlcikgLT5cbiAgICAgICAgZmlsdGVyLm1hc2sgPT0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmRlZmF1bHRfbWFzayhmaWx0ZXIudHlwZSlcblxuICAgICAgaXNfZW1wdHk6IChmaWx0ZXIpIC0+XG4gICAgICAgIGlmIGZpbHRlci50eXBlID09ICdMZXZlbDRfZGF0YSdcbiMg0LXRgdC70Lgg0YMg0YTQuNC70YzRgtGA0LAgRFBJIC0g0L7QtNC90LggWFggKNCyINC70Y7QsdC+0Lwg0LrQvtC70LjRh9C10YHRgtCy0LUpLFxuIyDRgtC+INGD0L/RgNC+0YHRgtC40YLRjCDRjdGC0L4g0LTQviDQv9GD0YHRgtC+0Lkg0YHRgtGA0L7QutC4LCDQsCDQv9GD0YHRgtC+0YLRgyAtINGB0YfQuNGC0LDRgtGMINC/0YPRgdGC0YvQvCDRhNC40LvRjNGC0YDQvtC8XG4gICAgICAgICAgZmlsdGVyLnZhbHVlID0gVXRpbGl0aWVzLnRyaW1fbWFza2VkX2hleChmaWx0ZXIudmFsdWUpIHx8ICcnXG4gICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZS5pc19lbXB0eSgpXG5cbiAgICAgICAgcmV0dXJuIG5vdCBmaWx0ZXIudmFsdWU/ICYmIERldmljZV9yb3V0aW5nLkZpbHRlci5pc19kZWZhdWx0X21hc2soZmlsdGVyKVxuXG4gICAgICBoYXNfbm9uX2RlZmF1bHRfbWFzazogKGZpbHRlcikgLT5cbiAgICAgICAgbm90IERldmljZV9yb3V0aW5nLkZpbHRlci5pc19kZWZhdWx0X21hc2soZmlsdGVyKVxuXG4gICAgICBjb252ZXJ0X3RvX2RldmljZTogKGZpbHRlcikgLT5cbiAgICAgICAgZmlsdGVyLm1hc2sgPSBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuX2dldF9tYXNrKGZpbHRlcilcbiAgICAgICAgZmlsdGVyLnZhbHVlID0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLl9nZXRfdmFsdWUoZmlsdGVyKVxuICAgICAgICBmaWx0ZXIudHlwZSA9IERldmljZV9yb3V0aW5nLkZpbHRlci5fZ2V0X3R5cGUoZmlsdGVyKVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXJcblxuICAgICAgc29ydDogKGZpbHRlcnMpIC0+XG4gICAgICAgIGZpbHRlcnMuc29ydCAoYSwgYikgLT5cbiAgICAgICAgICBFbnVtcy5BQ0xfRmlsdGVyW2EudHlwZV0uY29uZGl0aW9uIC0gRW51bXMuQUNMX0ZpbHRlcltiLnR5cGVdLmNvbmRpdGlvblxuXG4gICAgICB0eXBlOiAoZmlsdGVyKSAtPlxuICAgICAgICBmb3IgbmFtZSwgYV9maWx0ZXIgb2YgRW51bXMuQUNMX0ZpbHRlclxuICAgICAgICAgIHJldHVybiBuYW1lIGlmIGFfZmlsdGVyID09IGZpbHRlclxuXG4gICAgICBpZGVudGl0eV9tYXNrOiAoZmlsdGVyKSAtPlxuXG4jIGZpbHRlcl9kZXNjcmlwdGlvbiA9IEVudW1zLkFDTF9GaWx0ZXJbZmlsdGVyX3R5cGVdXG5cbiMgamF2YXNjcmlwdCDQvdC1INC/0L7QtNC00LXRgNC20LjQstCw0LXRgiB0YWlsIHJlY3Vyc2lvbiwg0L/QvtGN0YLQvtC80YMg0L/RgNC40LTRkdGC0YHRjyDQv9C10YDQtdC/0LjRgdCw0YLRjCDQuNC80L/QtdGA0LDRgtC40LLQvdC+XG4jIHRvX2hleCA9IChiaXRzKSAtPiBzd2l0Y2ggYml0c1xuI1x0IHdoZW4gMCB0aGVuICcnXG4jXHQgd2hlbiAxIHRoZW4gJzEnXG4jXHQgd2hlbiAyIHRoZW4gJzMnXG4jXHQgd2hlbiAzIHRoZW4gJzcnXG4jXHQgZWxzZSB0b19oZXgoYml0cyAtIDQpICsgJ0YnXG4gICAgICAgIHRvX2hleCA9IChiaXRzKSAtPlxuICAgICAgICAgIGFycmF5ID0gW11cblxuICAgICAgICAgIHdoaWxlIGJpdHMgPiAwXG4gICAgICAgICAgICBoYWxmX2J5dGUgPSBzd2l0Y2ggYml0c1xuICAgICAgICAgICAgICB3aGVuIDFcbiAgICAgICAgICAgICAgICBiaXRzIC09IDFcbiAgICAgICAgICAgICAgICAnMSdcbiAgICAgICAgICAgICAgd2hlbiAyXG4gICAgICAgICAgICAgICAgYml0cyAtPSAyXG4gICAgICAgICAgICAgICAgJzMnXG4gICAgICAgICAgICAgIHdoZW4gM1xuICAgICAgICAgICAgICAgIGJpdHMgLT0gM1xuICAgICAgICAgICAgICAgICc3J1xuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYml0cyAtPSA0XG4gICAgICAgICAgICAgICAgJ0YnXG5cbiAgICAgICAgICAgIGFycmF5LnVuc2hpZnQoaGFsZl9ieXRlKVxuXG4gICAgICAgICAgYXJyYXkuam9pbignJylcblxuICAgICAgICAjIHNlbGYgdGVzdGluZ1xuICAgICAgICAjICjQstGL0L3QtdGB0YLQuCDRjdGC0L4g0YLQtdGB0YLQuNGA0L7QstCw0L3QuNC1INC60YPQtNCwLdC90LjQsdGD0LTRjCwg0YHQutCw0LbQtdC8LCDQsiB0ZXN0cy91dGlsaXRpZXMuY29mZmVlKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodG9faGV4KDApKSAgaWYgdG9faGV4KDApICE9ICcnXG4gICAgICAgIHRocm93IG5ldyBFcnJvcih0b19oZXgoNSkpICBpZiB0b19oZXgoNSkgIT0gJzFGJ1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodG9faGV4KDgpKSAgaWYgdG9faGV4KDgpICE9ICdGRidcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRvX2hleCgzMSkpIGlmIHRvX2hleCgzMSkgIT0gJzdGRkZGRkZGJ1xuXG4gICAgICAgIF8gPSBFbnVtcy5BQ0xfRmlsdGVyXG5cbiAgICAgICAgc3dpdGNoIGZpbHRlclxuICAgICAgICAgIHdoZW4gXy5zb3VyY2VfTUFDX2FkZHJlc3MsIF8uZGVzdGluYXRpb25fTUFDX2FkZHJlc3NcbiAgICAgICAgICAgIHRvX2hleChmaWx0ZXIubWFzay5iaXRzKS5tYXRjaCgvLnsyfS9nKS5qb2luKCc6JylcbiAgICAgICAgICB3aGVuIF8uc291cmNlX0lQX2FkZHJlc3MsIF8uZGVzdGluYXRpb25fSVBfYWRkcmVzc1xuICAgICAgICAgICAgdG9faGV4KGZpbHRlci5tYXNrLmJpdHMpLm1hdGNoKC8uezJ9L2cpLm1hcCgoeCkgLT4gcGFyc2VJbnQoeCwgMTYpKS5qb2luKCcuJylcbiAgICAgICAgICB3aGVuIF8uTGV2ZWw0X2RhdGEsIF8ubXVsdGlfSVBfYWRkcmVzc1xuICAgICAgICAgICAgJydcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB0b19oZXgoZmlsdGVyLm1hc2suYml0cykiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdEZXZpY2Vfcm91dGluZycsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGFwaSwgRW51bXMsIFV0aWxpdGllcywgJHNhbml0aXplKSB7XG4gICAgdmFyIERldmljZV9yb3V0aW5nO1xuICAgIHJldHVybiBEZXZpY2Vfcm91dGluZyA9IHtcbiAgICAgIGNvbnZlcnRfdG9fZGV2aWNlX3J1bGVzOiBmdW5jdGlvbihydWxlcykge1xuICAgICAgICB2YXIgZmlsdGVyLCBpLCBqLCBrLCBsLCBsZW4sIGxlbjEsIGxlbjIsIGxlbjMsIG0sIG5hbWUsIHBvcnQsIHByb3BlcnR5LCByZWYsIHJlZjEsIHJlZjIsIHJ1bGU7XG4gICAgICAgIHJ1bGVzID0gYW5ndWxhci5jb3B5KHJ1bGVzKTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcnVsZXMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBydWxlID0gcnVsZXNbal07XG4gICAgICAgICAgcnVsZS5uYW1lID0gJHNhbml0aXplKHJ1bGUubmFtZSk7XG4gICAgICAgICAgcmVmID0gcnVsZS5pbnB1dHM7XG4gICAgICAgICAgZm9yIChpID0gayA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBrIDwgbGVuMTsgaSA9ICsraykge1xuICAgICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICAgIHJ1bGUuaW5wdXRzW2ldID0gcG9ydC5pZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVmMSA9IHJ1bGUub3V0cHV0cztcbiAgICAgICAgICBmb3IgKGkgPSBsID0gMCwgbGVuMiA9IHJlZjEubGVuZ3RoOyBsIDwgbGVuMjsgaSA9ICsrbCkge1xuICAgICAgICAgICAgcG9ydCA9IHJlZjFbaV07XG4gICAgICAgICAgICBydWxlLm91dHB1dHNbaV0gPSBwb3J0LmlkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBydWxlLmZpbHRlcnMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS50eXBlID4gYi50eXBlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvciAobmFtZSBpbiBydWxlKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHJ1bGVbbmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgcnVsZVtuYW1lXSA9IHByb3BlcnR5IDw8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlZjIgPSBydWxlLmZpbHRlcnM7XG4gICAgICAgICAgZm9yIChtID0gMCwgbGVuMyA9IHJlZjIubGVuZ3RoOyBtIDwgbGVuMzsgbSsrKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSByZWYyW21dO1xuICAgICAgICAgICAgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmNvbnZlcnRfdG9fZGV2aWNlKGZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0sXG4gICAgICBMQkc6IHtcbiAgICAgICAgSGFzaF9wcm9maWxlOiB7XG4gICAgICAgICAgYnlfaWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5oYXNoX3Byb2ZpbGVzLmZpbHRlcihmdW5jdGlvbihwcm9maWxlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcm9maWxlLmlkID09PSBpZDtcbiAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdnZXREZWZhdWx0SGFzaFByb2ZpbGUnKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICByZXR1cm4gRGV2aWNlX3JvdXRpbmcuTEJHLkhhc2hfcHJvZmlsZS5ieV9pZChyZXN1bHQucHJvZmlsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZldGNoX2FsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2dldEhhc2hQcm9maWxlcycpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmhhc2hfcHJvZmlsZXMgPSByZXN1bHQucHJvZmlsZXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBGaWx0ZXI6IHtcbiAgICAgICAgaXBfc3BsaXRfcnVsZTogL1ssO1xcblxcclxcc10vLFxuICAgICAgICBfZ2V0X2J5X3R5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICBpZiAoIUVudW1zLkFDTF9GaWx0ZXJbdHlwZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtSDQvdCw0LnQtNC10L0g0YTQuNC70YzRgtGAINGBINGC0LjQv9C+0Lw6ICcgKyB0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIEVudW1zLkFDTF9GaWx0ZXJbdHlwZV07XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRfdmFsdWU6IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgICAgIHZhciBpcCwgaXBzLCBqLCBsZW4sIHJlc3VsdDtcbiAgICAgICAgICBzd2l0Y2ggKGZpbHRlci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdtdWx0aV9JUF9hZGRyZXNzJzpcbiAgICAgICAgICAgICAgaXBzID0gZmlsdGVyLnZhbHVlLnNwbGl0KERldmljZV9yb3V0aW5nLkZpbHRlci5pcF9zcGxpdF9ydWxlKTtcbiAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGlwcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgICAgIGlwID0gaXBzW2pdO1xuICAgICAgICAgICAgICAgIGlmICgoaXAgPSBpcC50cmltKCkpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzcmM6IGlwXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZHN0OiBpcFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmVzdWx0ID0gZmlsdGVyLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBfZ2V0X3R5cGU6IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgICAgIHZhciBmaWx0ZXJfdHlwZSwgdHlwZTtcbiAgICAgICAgICBmaWx0ZXJfdHlwZSA9IERldmljZV9yb3V0aW5nLkZpbHRlci5fZ2V0X2J5X3R5cGUoZmlsdGVyLnR5cGUpO1xuICAgICAgICAgIHR5cGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbHRlci50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ0lQX3Byb3RvY29sX2Rlc3RpbmF0aW9uJzpcbiAgICAgICAgICAgICAgY2FzZSAnSVBfcHJvdG9jb2xfc291cmNlJzpcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnRvX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyX3R5cGUuZmlsdGVyLnZhbHVlX3JhbmdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyX3R5cGUuZmlsdGVyLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyX3R5cGUuZmlsdGVyLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIF9nZXRfbWFzazogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgdmFyIGZpbHRlcl90eXBlLCBtYXNrO1xuICAgICAgICAgIGZpbHRlcl90eXBlID0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLl9nZXRfYnlfdHlwZShmaWx0ZXIudHlwZSk7XG4gICAgICAgICAgbWFzayA9IGZpbHRlcl90eXBlLm1hc2sgJiYgdHlwZW9mIGZpbHRlcl90eXBlLm1hc2suZGV2aWNlID09PSAnZnVuY3Rpb24nID8gZmlsdGVyX3R5cGUubWFzay5kZXZpY2UoZmlsdGVyLm1hc2spIDogZmlsdGVyLm1hc2s7XG4gICAgICAgICAgcmV0dXJuIG1hc2s7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRfbWFzazogZnVuY3Rpb24oZmlsdGVyX3R5cGUpIHtcbiAgICAgICAgICBzd2l0Y2ggKGZpbHRlcl90eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdMZXZlbDRfZGF0YSc6XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaWRlbnRpdHlfbWFzayhFbnVtcy5BQ0xfRmlsdGVyW2ZpbHRlcl90eXBlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc19kZWZhdWx0X21hc2s6IGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgICAgIHJldHVybiBmaWx0ZXIubWFzayA9PT0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmRlZmF1bHRfbWFzayhmaWx0ZXIudHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzX2VtcHR5OiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgICBpZiAoZmlsdGVyLnR5cGUgPT09ICdMZXZlbDRfZGF0YScpIHtcbiAgICAgICAgICAgIGZpbHRlci52YWx1ZSA9IFV0aWxpdGllcy50cmltX21hc2tlZF9oZXgoZmlsdGVyLnZhbHVlKSB8fCAnJztcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXIudmFsdWUuaXNfZW1wdHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChmaWx0ZXIudmFsdWUgPT0gbnVsbCkgJiYgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmlzX2RlZmF1bHRfbWFzayhmaWx0ZXIpO1xuICAgICAgICB9LFxuICAgICAgICBoYXNfbm9uX2RlZmF1bHRfbWFzazogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgcmV0dXJuICFEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaXNfZGVmYXVsdF9tYXNrKGZpbHRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRfdG9fZGV2aWNlOiBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgICBmaWx0ZXIubWFzayA9IERldmljZV9yb3V0aW5nLkZpbHRlci5fZ2V0X21hc2soZmlsdGVyKTtcbiAgICAgICAgICBmaWx0ZXIudmFsdWUgPSBEZXZpY2Vfcm91dGluZy5GaWx0ZXIuX2dldF92YWx1ZShmaWx0ZXIpO1xuICAgICAgICAgIGZpbHRlci50eXBlID0gRGV2aWNlX3JvdXRpbmcuRmlsdGVyLl9nZXRfdHlwZShmaWx0ZXIpO1xuICAgICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNvcnQ6IGZ1bmN0aW9uKGZpbHRlcnMpIHtcbiAgICAgICAgICByZXR1cm4gZmlsdGVycy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBFbnVtcy5BQ0xfRmlsdGVyW2EudHlwZV0uY29uZGl0aW9uIC0gRW51bXMuQUNMX0ZpbHRlcltiLnR5cGVdLmNvbmRpdGlvbjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgdmFyIGFfZmlsdGVyLCBuYW1lLCByZWY7XG4gICAgICAgICAgcmVmID0gRW51bXMuQUNMX0ZpbHRlcjtcbiAgICAgICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgICAgICBhX2ZpbHRlciA9IHJlZltuYW1lXTtcbiAgICAgICAgICAgIGlmIChhX2ZpbHRlciA9PT0gZmlsdGVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaWRlbnRpdHlfbWFzazogZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgdmFyIF8sIHRvX2hleDtcbiAgICAgICAgICB0b19oZXggPSBmdW5jdGlvbihiaXRzKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXksIGhhbGZfYnl0ZTtcbiAgICAgICAgICAgIGFycmF5ID0gW107XG4gICAgICAgICAgICB3aGlsZSAoYml0cyA+IDApIHtcbiAgICAgICAgICAgICAgaGFsZl9ieXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYml0cykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBiaXRzIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnMSc7XG4gICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICczJztcbiAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzcnO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0YnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgYXJyYXkudW5zaGlmdChoYWxmX2J5dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5LmpvaW4oJycpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHRvX2hleCgwKSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0b19oZXgoMCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodG9faGV4KDUpICE9PSAnMUYnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodG9faGV4KDUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvX2hleCg4KSAhPT0gJ0ZGJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRvX2hleCg4KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b19oZXgoMzEpICE9PSAnN0ZGRkZGRkYnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodG9faGV4KDMxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF8gPSBFbnVtcy5BQ0xfRmlsdGVyO1xuICAgICAgICAgIHN3aXRjaCAoZmlsdGVyKSB7XG4gICAgICAgICAgICBjYXNlIF8uc291cmNlX01BQ19hZGRyZXNzOlxuICAgICAgICAgICAgY2FzZSBfLmRlc3RpbmF0aW9uX01BQ19hZGRyZXNzOlxuICAgICAgICAgICAgICByZXR1cm4gdG9faGV4KGZpbHRlci5tYXNrLmJpdHMpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJzonKTtcbiAgICAgICAgICAgIGNhc2UgXy5zb3VyY2VfSVBfYWRkcmVzczpcbiAgICAgICAgICAgIGNhc2UgXy5kZXN0aW5hdGlvbl9JUF9hZGRyZXNzOlxuICAgICAgICAgICAgICByZXR1cm4gdG9faGV4KGZpbHRlci5tYXNrLmJpdHMpLm1hdGNoKC8uezJ9L2cpLm1hcChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDE2KTtcbiAgICAgICAgICAgICAgfSkuam9pbignLicpO1xuICAgICAgICAgICAgY2FzZSBfLkxldmVsNF9kYXRhOlxuICAgICAgICAgICAgY2FzZSBfLm11bHRpX0lQX2FkZHJlc3M6XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiB0b19oZXgoZmlsdGVyLm1hc2suYml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnRW51bXMnLCAoVXRpbGl0aWVzKSAtPlxuICAjIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXRoZXJUeXBlXG4gIGV0aGVybmV0X3Byb3RvY29scyA9IFxuICAgICdJUCcgICAgICAgICAgICAgICAgICAgICAgOiAweDA4MDBcbiAgICAnQVJQJyAgICAgICAgICAgICAgICAgICAgIDogMHgwODA2XG4gICAgJ1ZMQU4gKElFRUUgODAyLjFRKScgICAgICA6IDB4ODEwMFxuICAgICdXYWtlLW9uLUxBTicgICAgICAgICAgICAgOiAweDA4NDJcbiAgICAnVFJJTEwnICAgICAgICAgICAgICAgICAgIDogMHgyMkYzXG4gICAgJ0RFQ25ldCBQaGFzZSBJVicgICAgICAgICA6IDB4NjAwM1xuICAgICdSZXZlcnNlIEFSUCcgICAgICAgICAgICAgOiAweDgwMzVcbiAgICAnQXBwbGVUYWxrIChFdGhlcnRhbGspJyAgIDogMHg4MDlCXG4gICAgJ0FBUlAnICAgICAgICAgICAgICAgICAgICA6IDB4ODBGM1xuICAgICdJUFgnICAgICAgICAgICAgICAgICAgICAgOiAweDgxMzdcbiAgICAnSVBYJyAgICAgICAgICAgICAgICAgICAgIDogMHg4MTM4XG4gICAgJ1FOWCBRbmV0JyAgICAgICAgICAgICAgICA6IDB4ODIwNFxuICAgICdJUHY2JyAgICAgICAgICAgICAgICAgICAgOiAweDg2RERcbiAgICAnRXRoZXJuZXQgZmxvdyBjb250cm9sJyAgIDogMHg4ODA4XG4gICAgJ0lFRUUgODAyLjMnICAgICAgICAgICAgICA6IDB4ODgwOVxuICAgICdDb2JyYU5ldCcgICAgICAgICAgICAgICAgOiAweDg4MTlcbiAgICAnTVBMUyB1bmljYXN0JyAgICAgICAgICAgIDogMHg4ODQ3XG4gICAgJ01QTFMgbXVsdGljYXN0JyAgICAgICAgICA6IDB4ODg0OFxuICAgICdQUFBvRSBEaXNjb3ZlcnknICAgICAgICAgOiAweDg4NjNcbiAgICAnUFBQb0UgU2Vzc2lvbicgICAgICAgICAgIDogMHg4ODY0XG4gICAgJ0p1bWJvIEZyYW1lJyAgICAgICAgICAgICA6IDB4ODg3MFxuICAgICdIb21lUGx1ZyAxLjAgTU1FJyAgICAgICAgOiAweDg4N0JcbiAgICAnSUVFRSA4MDIuMVgnICAgICAgICAgICAgIDogMHg4ODhFXG4gICAgJ1BST0ZJTkVUJyAgICAgICAgICAgICAgICA6IDB4ODg5MlxuICAgICdIeXBlclNDU0knICAgICAgICAgICAgICAgOiAweDg4OUFcbiAgICAnQVRBIG92ZXIgRXRoZXJuZXQnICAgICAgIDogMHg4OEEyXG4gICAgJ0V0aGVyQ0FUJyAgICAgICAgICAgICAgICA6IDB4ODhBNFxuICAgICdJRUVFIDgwMi4xYWQnICAgICAgICAgICAgOiAweDg4QThcbiAgICAnUG93ZXJsaW5rJyAgICAgICAgICAgICAgIDogMHg4OEFCXG4gICAgJ0xMRFAnICAgICAgICAgICAgICAgICAgICA6IDB4ODhDQ1xuICAgICdTRVJDT1MgSUlJJyAgICAgICAgICAgICAgOiAweDg4Q0RcbiAgICAnSG9tZVBsdWcgQVYgTU1FJyAgICAgICAgIDogMHg4OEUxXG4gICAgJ01lZGlhIFJlZHVuZGFuY3knICAgICAgICA6IDB4ODhFM1xuICAgICdJRUVFIDgwMi4xQUUnICAgICAgICAgICAgOiAweDg4RTVcbiAgICAnUFRQIG92ZXIgRXRoZXJuZXQnICAgICAgIDogMHg4OEY3XG4gICAgJ0lFRUUgODAyLjFhZyBDRk0nICAgICAgICA6IDB4ODkwMlxuICAgICdGQ29FJyAgICAgICAgICAgICAgICAgICAgOiAweDg5MDZcbiAgICAnRkNvRSBJbml0aWFsaXphdGlvbicgICAgIDogMHg4OTE0XG4gICAgJ1JvQ0UnICAgICAgICAgICAgICAgICAgICA6IDB4ODkxNVxuICAgICdIU1InICAgICAgICAgICAgICAgICAgICAgOiAweDg5MkZcbiAgICAnRXRoZXJuZXQgQ29uZmlnIFRlc3RpbmcnIDogMHg5MDAwXG4gICAgJ1EtaW4tUScgICAgICAgICAgICAgICAgICA6IDB4OTEwMFxuICAgICdMTFQgZm9yIFZlcml0YXMgQ2x1c3RlcicgOiAweENBRkVcblxuICAjIGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvcHJvdG9jb2wtbnVtYmVycy9wcm90b2NvbC1udW1iZXJzLnhodG1sXG4gIGlwX3Byb3RvY29scyA9IFxuICAgICdIT1BPUFQnICAgICAgICAgIDogMFxuICAgICdJQ01QJyAgICAgICAgICAgIDogMVxuICAgICdJR01QJyAgICAgICAgICAgIDogMlxuICAgICdHR1AnICAgICAgICAgICAgIDogM1xuICAgICdJUHY0JyAgICAgICAgICAgIDogNFxuICAgICdTVCcgICAgICAgICAgICAgIDogNVxuICAgICdUQ1AnICAgICAgICAgICAgIDogNlxuICAgICdDQlQnICAgICAgICAgICAgIDogN1xuICAgICdFR1AnICAgICAgICAgICAgIDogOFxuICAgICdJR1AnICAgICAgICAgICAgIDogOVxuICAgICdCQk4tUkNDLU1PTicgICAgIDogMTBcbiAgICAnTlZQLUlJJyAgICAgICAgICA6IDExXG4gICAgJ1BVUCcgICAgICAgICAgICAgOiAxMlxuICAgICdBUkdVUycgICAgICAgICAgIDogMTNcbiAgICAnRU1DT04nICAgICAgICAgICA6IDE0XG4gICAgJ1hORVQnICAgICAgICAgICAgOiAxNVxuICAgICdDSEFPUycgICAgICAgICAgIDogMTZcbiAgICAnVURQJyAgICAgICAgICAgICA6IDE3XG4gICAgJ01VWCcgICAgICAgICAgICAgOiAxOFxuICAgICdEQ04tTUVBUycgICAgICAgIDogMTlcbiAgICAnSE1QJyAgICAgICAgICAgICA6IDIwXG4gICAgJ1BSTScgICAgICAgICAgICAgOiAyMVxuICAgICdYTlMtSURQJyAgICAgICAgIDogMjJcbiAgICAnVFJVTkstMScgICAgICAgICA6IDIzXG4gICAgJ1RSVU5LLTInICAgICAgICAgOiAyNFxuICAgICdMRUFGLTEnICAgICAgICAgIDogMjVcbiAgICAnTEVBRi0yJyAgICAgICAgICA6IDI2XG4gICAgJ1JEUCcgICAgICAgICAgICAgOiAyN1xuICAgICdJUlRQJyAgICAgICAgICAgIDogMjhcbiAgICAnSVNPLVRQNCcgICAgICAgICA6IDI5XG4gICAgJ05FVEJMVCcgICAgICAgICAgOiAzMFxuICAgICdNRkUtTlNQJyAgICAgICAgIDogMzFcbiAgICAnTUVSSVQtSU5QJyAgICAgICA6IDMyXG4gICAgJ0RDQ1AnICAgICAgICAgICAgOiAzM1xuICAgICczUEMnICAgICAgICAgICAgIDogMzRcbiAgICAnSURQUicgICAgICAgICAgICA6IDM1XG4gICAgJ1hUUCcgICAgICAgICAgICAgOiAzNlxuICAgICdERFAnICAgICAgICAgICAgIDogMzdcbiAgICAnSURQUi1DTVRQJyAgICAgICA6IDM4XG4gICAgJ1RQKysnICAgICAgICAgICAgOiAzOVxuICAgICdJTCcgICAgICAgICAgICAgIDogNDBcbiAgICAnSVB2NicgICAgICAgICAgICA6IDQxXG4gICAgJ1NEUlAnICAgICAgICAgICAgOiA0MlxuICAgICdJUHY2LVJvdXRlJyAgICAgIDogNDNcbiAgICAnSVB2Ni1GcmFnJyAgICAgICA6IDQ0XG4gICAgJ0lEUlAnICAgICAgICAgICAgOiA0NVxuICAgICdSU1ZQJyAgICAgICAgICAgIDogNDZcbiAgICAnR1JFJyAgICAgICAgICAgICA6IDQ3XG4gICAgJ0RTUicgICAgICAgICAgICAgOiA0OFxuICAgICdCTkEnICAgICAgICAgICAgIDogNDlcbiAgICAnRVNQJyAgICAgICAgICAgICA6IDUwXG4gICAgJ0FIJyAgICAgICAgICAgICAgOiA1MVxuICAgICdJLU5MU1AnICAgICAgICAgIDogNTJcbiAgICAnU1dJUEUnICAgICAgICAgICA6IDUzXG4gICAgJ05BUlAnICAgICAgICAgICAgOiA1NFxuICAgICdNT0JJTEUnICAgICAgICAgIDogNTVcbiAgICAnVExTUCcgICAgICAgICAgICA6IDU2XG4gICAgJ1NLSVAnICAgICAgICAgICAgOiA1N1xuICAgICdJUHY2LUlDTVAnICAgICAgIDogNThcbiAgICAnSVB2Ni1Ob054dCcgICAgICA6IDU5XG4gICAgJ0lQdjYtT3B0cycgICAgICAgOiA2MFxuICAgICdDRlRQJyAgICAgICAgICAgIDogNjJcbiAgICAnU0FULUVYUEFLJyAgICAgICA6IDY0XG4gICAgJ0tSWVBUT0xBTicgICAgICAgOiA2NVxuICAgICdSVkQnICAgICAgICAgICAgIDogNjZcbiAgICAnSVBQQycgICAgICAgICAgICA6IDY3XG4gICAgJ1NBVC1NT04nICAgICAgICAgOiA2OVxuICAgICdWSVNBJyAgICAgICAgICAgIDogNzBcbiAgICAnSVBDVicgICAgICAgICAgICA6IDcxXG4gICAgJ0NQTlgnICAgICAgICAgICAgOiA3MlxuICAgICdDUEhCJyAgICAgICAgICAgIDogNzNcbiAgICAnV1NOJyAgICAgICAgICAgICA6IDc0XG4gICAgJ1BWUCcgICAgICAgICAgICAgOiA3NVxuICAgICdCUi1TQVQtTU9OJyAgICAgIDogNzZcbiAgICAnU1VOLU5EJyAgICAgICAgICA6IDc3XG4gICAgJ1dCLU1PTicgICAgICAgICAgOiA3OFxuICAgICdXQi1FWFBBSycgICAgICAgIDogNzlcbiAgICAnSVNPLUlQJyAgICAgICAgICA6IDgwXG4gICAgJ1ZNVFAnICAgICAgICAgICAgOiA4MVxuICAgICdTRUNVUkUtVk1UUCcgICAgIDogODJcbiAgICAnVklORVMnICAgICAgICAgICA6IDgzXG4gICAgJ1RUUCcgICAgICAgICAgICAgOiA4NFxuICAgICdJUFRNJyAgICAgICAgICAgIDogODRcbiAgICAnTlNGTkVULUlHUCcgICAgICA6IDg1XG4gICAgJ0RHUCcgICAgICAgICAgICAgOiA4NlxuICAgICdUQ0YnICAgICAgICAgICAgIDogODdcbiAgICAnRUlHUlAnICAgICAgICAgICA6IDg4XG4gICAgJ09TUEZJR1AnICAgICAgICAgOiA4OVxuICAgICdTcHJpdGUtUlBDJyAgICAgIDogOTBcbiAgICAnTEFSUCcgICAgICAgICAgICA6IDkxXG4gICAgJ01UUCcgICAgICAgICAgICAgOiA5MlxuICAgICdBWC4yNScgICAgICAgICAgIDogOTNcbiAgICAnSVBJUCcgICAgICAgICAgICA6IDk0XG4gICAgJ01JQ1AnICAgICAgICAgICAgOiA5NVxuICAgICdTQ0MtU1AnICAgICAgICAgIDogOTZcbiAgICAnRVRIRVJJUCcgICAgICAgICA6IDk3XG4gICAgJ0VOQ0FQJyAgICAgICAgICAgOiA5OFxuICAgICdHTVRQJyAgICAgICAgICAgIDogMTAwXG4gICAgJ0lGTVAnICAgICAgICAgICAgOiAxMDFcbiAgICAnUE5OSScgICAgICAgICAgICA6IDEwMlxuICAgICdQSU0nICAgICAgICAgICAgIDogMTAzXG4gICAgJ0FSSVMnICAgICAgICAgICAgOiAxMDRcbiAgICAnU0NQUycgICAgICAgICAgICA6IDEwNVxuICAgICdRTlgnICAgICAgICAgICAgIDogMTA2XG4gICAgJ0EvTicgICAgICAgICAgICAgOiAxMDdcbiAgICAnSVBDb21wJyAgICAgICAgICA6IDEwOFxuICAgICdTTlAnICAgICAgICAgICAgIDogMTA5XG4gICAgJ0NvbXBhcS1QZWVyJyAgICAgOiAxMTBcbiAgICAnSVBYLWluLUlQJyAgICAgICA6IDExMVxuICAgICdWUlJQJyAgICAgICAgICAgIDogMTEyXG4gICAgJ1BHTScgICAgICAgICAgICAgOiAxMTNcbiAgICAnTDJUUCcgICAgICAgICAgICA6IDExNVxuICAgICdERFgnICAgICAgICAgICAgIDogMTE2XG4gICAgJ0lBVFAnICAgICAgICAgICAgOiAxMTdcbiAgICAnU1RQJyAgICAgICAgICAgICA6IDExOFxuICAgICdTUlAnICAgICAgICAgICAgIDogMTE5XG4gICAgJ1VUSScgICAgICAgICAgICAgOiAxMjBcbiAgICAnU01QJyAgICAgICAgICAgICA6IDEyMVxuICAgICdTTScgICAgICAgICAgICAgIDogMTIyXG4gICAgJ1BUUCcgICAgICAgICAgICAgOiAxMjNcbiAgICAnSVNJUyBvdmVyIElQdjQnICA6IDEyNFxuICAgICdGSVJFJyAgICAgICAgICAgIDogMTI1XG4gICAgJ0NSVFAnICAgICAgICAgICAgOiAxMjZcbiAgICAnQ1JVRFAnICAgICAgICAgICA6IDEyN1xuICAgICdTU0NPUE1DRScgICAgICAgIDogMTI4XG4gICAgJ0lQTFQnICAgICAgICAgICAgOiAxMjlcbiAgICAnU1BTJyAgICAgICAgICAgICA6IDEzMFxuICAgICdQSVBFJyAgICAgICAgICAgIDogMTMxXG4gICAgJ1NDVFAnICAgICAgICAgICAgOiAxMzJcbiAgICAnRkMnICAgICAgICAgICAgICA6IDEzM1xuICAgICdSU1ZQLUUyRS1JR05PUkUnIDogMTM0XG4gICAgJ01vYmlsaXR5IEhlYWRlcicgOiAxMzVcbiAgICAnVURQTGl0ZScgICAgICAgICA6IDEzNlxuICAgICdNUExTLWluLUlQJyAgICAgIDogMTM3XG4gICAgJ21hbmV0JyAgICAgICAgICAgOiAxMzhcbiAgICAnSElQJyAgICAgICAgICAgICA6IDEzOVxuICAgICdTaGltNicgICAgICAgICAgIDogMTQwXG4gICAgJ1dFU1AnICAgICAgICAgICAgOiAxNDFcbiAgICAnUk9IQycgICAgICAgICAgICA6IDE0MlxuXG4gICMgSVAgc3VibmV0IG1hc2tzXG5cbiAgc3VibmV0X21hc2tfdmFsdWVzID0gKE1hdGgucG93KDIsIDgpIC0gTWF0aC5wb3coMiwgYml0cykgZm9yIGJpdHMgaW4gWzAuLjhdKVxuICBzdWJuZXRfbWFza192YWx1ZXMucmVtb3ZlKDApXG5cbiAgY29tYmluYXRpb25zID0gKGJ5dGVfb3JkZXIpIC0+XG4gICAgY29tYmluYXRpb25zX21haW4gPSBzdWJuZXRfbWFza192YWx1ZXMubWFwICh2YWx1ZSkgLT4gXG4gICAgICByZXN1bHQgPSBpZiBieXRlX29yZGVyID09IDEgdGhlbiBbXSBlbHNlICgwIGZvciBpIGluIFsyLi5ieXRlX29yZGVyXSlcbiAgICAgIHJlc3VsdC51bnNoaWZ0KHZhbHVlKVxuICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgcHJldmlvdXMgPSBbXVxuICAgIGlmIGJ5dGVfb3JkZXIgPiAxXG4gICAgICBjb21iaW5hdGlvbl9zZXQgPSBjb21iaW5hdGlvbnMoYnl0ZV9vcmRlciAtIDEpXG4gICAgICBwcmV2aW91cyA9IGNvbWJpbmF0aW9uX3NldC5tYXAoKGNvbWJpbmF0aW9uKSAtPiBbMjU1XS5jb25jYXQoY29tYmluYXRpb24pKVxuXG4gICAgcmV0dXJuIHByZXZpb3VzLmNvbmNhdChjb21iaW5hdGlvbnNfbWFpbilcblxuICBzdWJuZXRfbWFza3MgPSBjb21iaW5hdGlvbnMoNCkubWFwKChjb21iaW5hdGlvbikgLT4gY29tYmluYXRpb24uam9pbignLicpKVxuXG4gIG1hY19hZGRyZXNzX21hc2sgPSBcbiAgICBiaXRzICAgOiA0OFxuXG4gIGlwX2FkZHJlc3NfbWFzayA9IFxuICAgIGJpdHMgICA6IDMyXG5cbiAgIyBwdWJsaWMgZW51bWVyYXRpb25zXG5cbiAgRW51bXMgPSBcbiAgICBzdWJuZXRfbWFza3M6IHN1Ym5ldF9tYXNrc1xuXG4gICAgZXRoZXJuZXRfcG9ydF9tb2RlczogXG4gICAgICAnMTAwMEJBU0VfS1gnIDogMFxuICAgICAgJzEwMDBCQVNFX1gnICA6IDFcbiAgICAgICcxMEdCQVNFX0NSJyAgOiAyXG4gICAgICAnMTBHQkFTRV9DWDQnIDogM1xuICAgICAgJzEwR0JBU0VfS1g0JyA6IDRcbiAgICAgICcxMEdCQVNFX1NSJyAgOiA1XG4gICAgICAnNDBHQkFTRV9DUjQnIDogNlxuICAgICAgJzQwR0JBU0VfS1I0JyA6IDdcbiAgICAgICc0MEdCQVNFX1NSNCcgOiA4XG4gICAgICAnQU5fNzMnICAgICAgIDogOVxuICAgICAgJ0RJU0FCTEVEJyAgICA6IDEwXG4gICAgICAnU0dNSUknICAgICAgIDogMTFcbiAgICAgICdYQVVJJyAgICAgICAgOiAxMlxuICAgICAgJ1hMQVVJJyAgICAgICA6IDEzXG5cbiAgICBBQ0xfYWN0aW9uczogXG4gICAgICBkcm9wICAgICAgICAgICAgIDogMFxuICAgICAgcGVybWl0ICAgICAgICAgICA6IDFcbiAgICAgIGJhbGFuY2UgICAgICAgICAgOiAyXG4gICAgICByZWRpcmVjdCAgICAgICAgIDogM1xuICAgICAgbWlycm9yICAgICAgICAgICA6IDRcbiAgICAgIHNldF9oYXNoX3Byb2ZpbGUgOiA1XG4gICAgICBkdWJiaW5nICAgICAgICAgIDogNlxuXG4gICAgcG9ydF9wYXJzZXJfbGV2ZWxzOiBcbiAgICAgIEwyOiAyXG4gICAgICBMMzogM1xuICAgICAgTDQ6IDRcblxuICAgIEVycm9yczpcbiAgICAgIGFwaTpcbiAgICAgICAgc2V0X2ludGVyZmFjZV92ZXJzaW9uOiAtMzI1MDBcblxuICAgIEFDTF9GaWx0ZXI6IFxuICAgICAgZXRoZXJuZXRfcHJvdG9jb2w6XG4gICAgICAgIHZhbHVlOiBcbiAgICAgICAgICB0eXBlOiAnc2VsZWN0J1xuICAgICAgICAgIGZyb206IGV0aGVybmV0X3Byb3RvY29sc1xuICAgICAgICAgIGRlZmF1bHQ6IGV0aGVybmV0X3Byb3RvY29scy5JUFxuICAgICAgICBtYXNrOiBcbiAgICAgICAgICBiaXRzICAgOiAxNlxuICAgICAgICAgIGRldmljZSA6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlclxuICAgICAgICAgIG1vZGVsICA6IFV0aWxpdGllcy5udW1iZXJfdG9faGV4X3N0cmluZ1xuICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgdmFsdWUgICAgIDogMVxuICAgICAgICAgIG1hc2sgICAgICA6ICdldGhfdHlwZV9tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiAwXG4gICAgICBzb3VyY2VfTUFDX2FkZHJlc3M6IFxuICAgICAgICB2YWx1ZTogXG4gICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgIG1hc2s6IG1hY19hZGRyZXNzX21hc2tcbiAgICAgICAgZmlsdGVyOlxuICAgICAgICAgIHZhbHVlICAgICA6IDJcbiAgICAgICAgICBtYXNrICAgICAgOiAnc3JjX21hY19tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiAxXG4gICAgICAgIGRpcmVjdGlvbjogJ3NvdXJjZSdcbiAgICAgIGRlc3RpbmF0aW9uX01BQ19hZGRyZXNzOiBcbiAgICAgICAgdmFsdWU6IFxuICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICBtYXNrOiBtYWNfYWRkcmVzc19tYXNrXG4gICAgICAgIGZpbHRlcjpcbiAgICAgICAgICB2YWx1ZSAgICAgOiAzXG4gICAgICAgICAgbWFzayAgICAgIDogJ2RzdF9tYWNfbWFzaydcbiAgICAgICAgY29uZGl0aW9uIDogMlxuICAgICAgICBkaXJlY3Rpb246ICdkZXN0aW5hdGlvbidcblxuICAgICAgc291cmNlX0lQX2FkZHJlc3M6XG4gICAgICAgIHZhbHVlOiBcbiAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgbWFzazogaXBfYWRkcmVzc19tYXNrXG4gICAgICAgIGZpbHRlcjpcbiAgICAgICAgICB2YWx1ZSAgICAgOiA0XG4gICAgICAgICAgbWFzayAgICAgIDogJ3NyY19pcF9tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiAzXG4gICAgICAgIGRpcmVjdGlvbjogJ3NvdXJjZSdcblxuICAgICAgZGVzdGluYXRpb25fSVBfYWRkcmVzczpcbiAgICAgICAgdmFsdWU6XG4gICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgIG1hc2s6IGlwX2FkZHJlc3NfbWFza1xuICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgdmFsdWUgICAgIDogNVxuICAgICAgICAgIG1hc2sgICAgICA6ICdkc3RfaXBfbWFzaydcbiAgICAgICAgY29uZGl0aW9uIDogNFxuICAgICAgICBkaXJlY3Rpb246ICdkZXN0aW5hdGlvbidcblxuICAgICAgbXVsdGlfSVBfYWRkcmVzczpcbiAgICAgICAgdmFsdWU6XG4gICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgIGZpbHRlcjpcbiAgICAgICAgICB2YWx1ZSAgIDogMTRcbiAgICAgICAgY29uZGl0aW9uIDogM1xuXG4gICAgICBJUF9wcm90b2NvbDpcbiAgICAgICAgdmFsdWU6XG4gICAgICAgICAgdHlwZTogJ3NlbGVjdCdcbiAgICAgICAgICBmcm9tOiBpcF9wcm90b2NvbHNcbiAgICAgICAgICBkZWZhdWx0OiBpcF9wcm90b2NvbHMuVENQXG4gICAgICAgIG1hc2s6XG4gICAgICAgICAgYml0cyAgIDogOFxuICAgICAgICAgIGRldmljZSA6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlclxuICAgICAgICAgIG1vZGVsICA6IFV0aWxpdGllcy5udW1iZXJfdG9faGV4X3N0cmluZ1xuICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgdmFsdWUgICAgIDogNlxuICAgICAgICAgIG1hc2sgICAgICA6ICdsNF9wcm90b19tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiA3XG5cbiAgICAgIElQX3Byb3RvY29sX3NvdXJjZTogXG4gICAgICAgIHZhbHVlOiBcbiAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgbWFzazpcbiAgICAgICAgICBiaXRzICAgOiAxNlxuICAgICAgICAgIGRldmljZSA6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlclxuICAgICAgICAgIG1vZGVsICA6IFV0aWxpdGllcy5udW1iZXJfdG9faGV4X3N0cmluZ1xuICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgdmFsdWUgICAgICA6IDdcbiAgICAgICAgICB2YWx1ZV9yYW5nZTogOFxuICAgICAgICAgIG1hc2sgICAgICAgOiAnbDRfc3JjX21hc2snXG4gICAgICAgIGNvbmRpdGlvbiA6IDVcbiAgICAgICAgZGlyZWN0aW9uOiAnc291cmNlJ1xuXG4gICAgICBJUF9wcm90b2NvbF9kZXN0aW5hdGlvbjpcbiAgICAgICAgdmFsdWU6XG4gICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgIG1hc2s6XG4gICAgICAgICAgYml0cyAgIDogMTZcbiAgICAgICAgICBkZXZpY2UgOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXJcbiAgICAgICAgICBtb2RlbCAgOiBVdGlsaXRpZXMubnVtYmVyX3RvX2hleF9zdHJpbmdcbiAgICAgICAgZmlsdGVyOlxuICAgICAgICAgIHZhbHVlICAgICAgOiA5XG4gICAgICAgICAgdmFsdWVfcmFuZ2U6IDEwXG4gICAgICAgICAgbWFzayAgICAgICA6ICdsNF9kc3RfbWFzaydcbiAgICAgICAgY29uZGl0aW9uIDogNlxuICAgICAgICBkaXJlY3Rpb246ICdkZXN0aW5hdGlvbidcblxuICAgICAgVkxBTjpcbiAgICAgICAgdmFsdWU6XG4gICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgIG1hc2s6XG4gICAgICAgICAgYml0cyAgIDogMTZcbiAgICAgICAgICBkZXZpY2UgOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXJcbiAgICAgICAgICBtb2RlbCAgOiBVdGlsaXRpZXMubnVtYmVyX3RvX2hleF9zdHJpbmdcbiAgICAgICAgZmlsdGVyOlxuICAgICAgICAgIHZhbHVlICAgICA6IDExXG4gICAgICAgICAgbWFzayAgICAgIDogJ3ZsYW5fbWFzaydcbiAgICAgICAgY29uZGl0aW9uIDogOFxuICAgICAgVkxBTjI6XG4gICAgICAgIHZhbHVlOlxuICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICBtYXNrOlxuICAgICAgICAgIGJpdHMgICA6IDE2XG4gICAgICAgICAgZGV2aWNlIDogVXRpbGl0aWVzLmhleF9zdHJpbmdfdG9fbnVtYmVyXG4gICAgICAgICAgbW9kZWwgIDogVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nXG4gICAgICAgIGZpbHRlcjpcbiAgICAgICAgICB2YWx1ZSAgICAgOiAxMlxuICAgICAgICAgIG1hc2sgICAgICA6ICd2bGFuMl9tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiA5XG5cbiAgICAgIExldmVsNF9kYXRhOlxuICAgICAgICBtb2RlbDogKHZhbHVlLCBtYXNrKSAtPlxuICAgICAgICAgIG9yaWdpbmFsX3ZhbHVlID0gdmFsdWVcblxuICAgICAgICAgIGkgPSAwXG4gICAgICAgICAgd2hpbGUgaSA8IG1hc2subGVuZ3RoXG4gICAgICAgICAgICBpZiBtYXNrW2ldID09ICcwJ1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2VfYXQoaSwgJ1gnKVxuICAgICAgICAgICAgaSsrXG4gXG4gICAgICAgICAgdmFsdWUgPSBVdGlsaXRpZXMudHJpbV9tYXNrZWRfaGV4KHZhbHVlKVxuXG4gICAgICAgICAgdmFsdWUgPSBVdGlsaXRpZXMuaGV4X3ByZXR0eV9wcmludCh2YWx1ZSwgMClbMF1cbiAgICAgICAgICBtYXNrID0gJydcblxuICAgICAgICAgIHJldHVybiBbdmFsdWUsIG1hc2tdXG5cbiAgICAgICAgZGV2aWNlOiAodmFsdWUsIG1hc2spIC0+XG4gICAgICAgICAgIyDRg9Cx0YDQsNGC0Ywg0LLRgdC1INC/0YDQvtCx0LXQu9GLINC4INC/0LXRgNC10LLQvtC00Ysg0YHRgtGA0L7QutC4XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgJycpXG5cbiAgICAgICAgICAjINC10YHQu9C4INC60L7Qu9C40YfQtdGB0YLQstC+INGB0LjQvNCy0L7Qu9C+0LIg0L3QtdGH0ZHRgtC90L4gLSDQtNC+0L/QvtC70L3QuNGC0YwgWC3QvtC8INGB0L/RgNCw0LLQsFxuICAgICAgICAgIGlmIHZhbHVlLmxlbmd0aCAlIDJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAnWCdcblxuICAgICAgICAgICMg0LfQsNC80LXQvdC40YLRjCDQstGB0LUg0L3QtSBYLdGLIEYt0LDQvNC4INCyINC80LDRgdC60LVcbiAgICAgICAgICBtYXNrID0gdmFsdWUucmVwbGFjZSgvW15YXS9nLCAnRicpXG5cbiAgICAgICAgICAjINC30LDQvNC10L3QuNGC0Ywg0LLRgdC1IFgt0Ysg0L3Rg9C70Y/QvNC4INCyINC80LDRgdC60LVcbiAgICAgICAgICBtYXNrID0gbWFzay5yZXBsYWNlKC9YL2csICcwJylcblxuICAgICAgICAgICMg0LfQsNC80LXQvdC40YLRjCDQstGB0LUgWC3RiyDQvdGD0LvRj9C80Lgg0LIg0LfQvdCw0YfQtdC90LjQuFxuICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWC9nLCAnMCcpXG5cbiAgICAgICAgICByZXR1cm4gW3ZhbHVlLCBtYXNrXVxuXG4gICAgICAgIHZhbHVlOlxuICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgIGRldmljZSA6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlcl9hcnJheVxuICAgICAgICAgIG1vZGVsICA6IFV0aWxpdGllcy5udW1iZXJfYXJyYXlfdG9faGV4X3N0cmluZ1xuICAgICAgICBtYXNrOlxuICAgICAgICAgICMgYml0cyAgIDog0L/RgNC+0YHRgtCw0LLQu9GP0LXRgtGB0Y8g0LTQuNC90LDQvNC40YfQtdGB0LrQuCDQv9GA0Lgg0LfQsNC/0YPRgdC60LUsINC90LAg0L7RgdC90L7QstC1IGNvbmZpZy5qc29uXG4jICAgICAgICAgIGRldmljZSA6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlcl9hcnJheVxuICAgICAgICAgIG1vZGVsICA6IFV0aWxpdGllcy5udW1iZXJfYXJyYXlfdG9faGV4X3N0cmluZ1xuICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgdmFsdWUgICAgIDogMTNcbiAgICAgICAgICBtYXNrICAgICAgOiAnbDRfZGF0YV9tYXNrJ1xuICAgICAgICBjb25kaXRpb24gOiAxMFxuXG4gIEVudW1zLk1hcHBlciA9XG4gICAgZXRoZXJuZXRfcHJvdG9jb2w6XG4gICAgICBpZDogMFxuICAgICAgY29uZGl0aW9uOiAxN1xuICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9ldGhfdHlwZSdcbiAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5ldGhlcm5ldF9wcm90b2NvbFxuICAgICAgbWFwcGVkX3ZhbHVlX2J5dGVzOiAxXG4gICAgSVBfYWRkcmVzczpcbiAgICAgIGlkOiAxXG4gICAgICBzb3VyY2U6XG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfc3JjX2lwJ1xuICAgICAgICBjb25kaXRpb246IDIwXG4gICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5zb3VyY2VfSVBfYWRkcmVzc1xuICAgICAgZGVzdGluYXRpb246XG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfZHN0X2lwJ1xuICAgICAgICBjb25kaXRpb246IDE5XG4gICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5kZXN0aW5hdGlvbl9JUF9hZGRyZXNzXG4gICAgICBtYXBwZWRfdmFsdWVfYnl0ZXM6IDFcbiAgICBJUF9wYWNrZXRfbGVuZ3RoOiBcbiAgICAgIGlkOiAyXG4gICAgICBjb25kaXRpb246IDE4XG4gICAgICBydWxlX3ZhbHVlOiAnbWFwcGVkX2lwX2xlbmd0aCdcbiAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgIEw0X2Rlc3RpbmF0aW9uOlxuICAgICAgaWQgICAgICAgICA6IDNcbiAgICAgIGNvbmRpdGlvbiAgOiAxNFxuICAgICAgcnVsZV92YWx1ZSA6ICdtYXBwZWRfbDRfZHN0J1xuICAgICAgZmlsdGVyICAgICA6IEVudW1zLkFDTF9GaWx0ZXIuSVBfcHJvdG9jb2xfZGVzdGluYXRpb25cbiAgICAgIGZyb20gICAgICAgOiAoXykgLT4gXy5wb3J0X3N0YXJ0XG4gICAgICB0byAgICAgICAgIDogKF8pIC0+IF8ucG9ydF9lbmRcbiAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMlxuICAgIEw0X3NvdXJjZTogXG4gICAgICBpZCAgICAgICAgIDogNFxuICAgICAgY29uZGl0aW9uICA6IDEzXG4gICAgICBydWxlX3ZhbHVlIDogJ21hcHBlZF9sNF9zcmMnXG4gICAgICBmaWx0ZXIgICAgIDogRW51bXMuQUNMX0ZpbHRlci5JUF9wcm90b2NvbF9zb3VyY2VcbiAgICAgIGZyb20gICAgICAgOiAoXykgLT4gXy5wb3J0X3N0YXJ0XG4gICAgICB0byAgICAgICAgIDogKF8pIC0+IF8ucG9ydF9lbmRcbiAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMlxuICAgIE1BQ19hZGRyZXNzOlxuICAgICAgaWQ6IDVcbiAgICAgIHNvdXJjZTogXG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfc3JjX21hYydcbiAgICAgICAgY29uZGl0aW9uOiAxNlxuICAgICAgICBmaWx0ZXI6IEVudW1zLkFDTF9GaWx0ZXIuc291cmNlX01BQ19hZGRyZXNzXG4gICAgICBkZXN0aW5hdGlvbjpcbiAgICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9kc3RfbWFjJ1xuICAgICAgICBjb25kaXRpb246IDE1XG4gICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5kZXN0aW5hdGlvbl9NQUNfYWRkcmVzc1xuICAgICAgbWFwcGVkX3ZhbHVlX2J5dGVzOiAxXG4gICAgSVBfcHJvdG9jb2w6XG4gICAgICBpZDogNlxuICAgICAgY29uZGl0aW9uOiAxMlxuICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9wcm90b2NvbCdcbiAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5JUF9wcm90b2NvbFxuICAgICAgbWFwcGVkX3ZhbHVlX2J5dGVzOiAxXG4gICAgRGV2aWNlX3BvcnQ6XG4gICAgICBpZDogN1xuICAgICAgY29uZGl0aW9uOiAxMVxuICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9zb3VyY2VfcG9ydCdcbiAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgIFZMQU46XG4gICAgICBpZDogOFxuICAgICAgY29uZGl0aW9uOiAyMVxuICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF92bGFuX2lkJ1xuICAgICAgZmlsdGVyOiAnVkxBTidcbiAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMlxuXG4gIHJldHVybiBFbnVtcyIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ0VudW1zJywgZnVuY3Rpb24oVXRpbGl0aWVzKSB7XG4gICAgdmFyIEVudW1zLCBiaXRzLCBjb21iaW5hdGlvbnMsIGV0aGVybmV0X3Byb3RvY29scywgaXBfYWRkcmVzc19tYXNrLCBpcF9wcm90b2NvbHMsIG1hY19hZGRyZXNzX21hc2ssIHN1Ym5ldF9tYXNrX3ZhbHVlcywgc3VibmV0X21hc2tzO1xuICAgIGV0aGVybmV0X3Byb3RvY29scyA9IHtcbiAgICAgICdJUCc6IDB4MDgwMCxcbiAgICAgICdBUlAnOiAweDA4MDYsXG4gICAgICAnVkxBTiAoSUVFRSA4MDIuMVEpJzogMHg4MTAwLFxuICAgICAgJ1dha2Utb24tTEFOJzogMHgwODQyLFxuICAgICAgJ1RSSUxMJzogMHgyMkYzLFxuICAgICAgJ0RFQ25ldCBQaGFzZSBJVic6IDB4NjAwMyxcbiAgICAgICdSZXZlcnNlIEFSUCc6IDB4ODAzNSxcbiAgICAgICdBcHBsZVRhbGsgKEV0aGVydGFsayknOiAweDgwOUIsXG4gICAgICAnQUFSUCc6IDB4ODBGMyxcbiAgICAgICdJUFgnOiAweDgxMzcsXG4gICAgICAnSVBYJzogMHg4MTM4LFxuICAgICAgJ1FOWCBRbmV0JzogMHg4MjA0LFxuICAgICAgJ0lQdjYnOiAweDg2REQsXG4gICAgICAnRXRoZXJuZXQgZmxvdyBjb250cm9sJzogMHg4ODA4LFxuICAgICAgJ0lFRUUgODAyLjMnOiAweDg4MDksXG4gICAgICAnQ29icmFOZXQnOiAweDg4MTksXG4gICAgICAnTVBMUyB1bmljYXN0JzogMHg4ODQ3LFxuICAgICAgJ01QTFMgbXVsdGljYXN0JzogMHg4ODQ4LFxuICAgICAgJ1BQUG9FIERpc2NvdmVyeSc6IDB4ODg2MyxcbiAgICAgICdQUFBvRSBTZXNzaW9uJzogMHg4ODY0LFxuICAgICAgJ0p1bWJvIEZyYW1lJzogMHg4ODcwLFxuICAgICAgJ0hvbWVQbHVnIDEuMCBNTUUnOiAweDg4N0IsXG4gICAgICAnSUVFRSA4MDIuMVgnOiAweDg4OEUsXG4gICAgICAnUFJPRklORVQnOiAweDg4OTIsXG4gICAgICAnSHlwZXJTQ1NJJzogMHg4ODlBLFxuICAgICAgJ0FUQSBvdmVyIEV0aGVybmV0JzogMHg4OEEyLFxuICAgICAgJ0V0aGVyQ0FUJzogMHg4OEE0LFxuICAgICAgJ0lFRUUgODAyLjFhZCc6IDB4ODhBOCxcbiAgICAgICdQb3dlcmxpbmsnOiAweDg4QUIsXG4gICAgICAnTExEUCc6IDB4ODhDQyxcbiAgICAgICdTRVJDT1MgSUlJJzogMHg4OENELFxuICAgICAgJ0hvbWVQbHVnIEFWIE1NRSc6IDB4ODhFMSxcbiAgICAgICdNZWRpYSBSZWR1bmRhbmN5JzogMHg4OEUzLFxuICAgICAgJ0lFRUUgODAyLjFBRSc6IDB4ODhFNSxcbiAgICAgICdQVFAgb3ZlciBFdGhlcm5ldCc6IDB4ODhGNyxcbiAgICAgICdJRUVFIDgwMi4xYWcgQ0ZNJzogMHg4OTAyLFxuICAgICAgJ0ZDb0UnOiAweDg5MDYsXG4gICAgICAnRkNvRSBJbml0aWFsaXphdGlvbic6IDB4ODkxNCxcbiAgICAgICdSb0NFJzogMHg4OTE1LFxuICAgICAgJ0hTUic6IDB4ODkyRixcbiAgICAgICdFdGhlcm5ldCBDb25maWcgVGVzdGluZyc6IDB4OTAwMCxcbiAgICAgICdRLWluLVEnOiAweDkxMDAsXG4gICAgICAnTExUIGZvciBWZXJpdGFzIENsdXN0ZXInOiAweENBRkVcbiAgICB9O1xuICAgIGlwX3Byb3RvY29scyA9IHtcbiAgICAgICdIT1BPUFQnOiAwLFxuICAgICAgJ0lDTVAnOiAxLFxuICAgICAgJ0lHTVAnOiAyLFxuICAgICAgJ0dHUCc6IDMsXG4gICAgICAnSVB2NCc6IDQsXG4gICAgICAnU1QnOiA1LFxuICAgICAgJ1RDUCc6IDYsXG4gICAgICAnQ0JUJzogNyxcbiAgICAgICdFR1AnOiA4LFxuICAgICAgJ0lHUCc6IDksXG4gICAgICAnQkJOLVJDQy1NT04nOiAxMCxcbiAgICAgICdOVlAtSUknOiAxMSxcbiAgICAgICdQVVAnOiAxMixcbiAgICAgICdBUkdVUyc6IDEzLFxuICAgICAgJ0VNQ09OJzogMTQsXG4gICAgICAnWE5FVCc6IDE1LFxuICAgICAgJ0NIQU9TJzogMTYsXG4gICAgICAnVURQJzogMTcsXG4gICAgICAnTVVYJzogMTgsXG4gICAgICAnRENOLU1FQVMnOiAxOSxcbiAgICAgICdITVAnOiAyMCxcbiAgICAgICdQUk0nOiAyMSxcbiAgICAgICdYTlMtSURQJzogMjIsXG4gICAgICAnVFJVTkstMSc6IDIzLFxuICAgICAgJ1RSVU5LLTInOiAyNCxcbiAgICAgICdMRUFGLTEnOiAyNSxcbiAgICAgICdMRUFGLTInOiAyNixcbiAgICAgICdSRFAnOiAyNyxcbiAgICAgICdJUlRQJzogMjgsXG4gICAgICAnSVNPLVRQNCc6IDI5LFxuICAgICAgJ05FVEJMVCc6IDMwLFxuICAgICAgJ01GRS1OU1AnOiAzMSxcbiAgICAgICdNRVJJVC1JTlAnOiAzMixcbiAgICAgICdEQ0NQJzogMzMsXG4gICAgICAnM1BDJzogMzQsXG4gICAgICAnSURQUic6IDM1LFxuICAgICAgJ1hUUCc6IDM2LFxuICAgICAgJ0REUCc6IDM3LFxuICAgICAgJ0lEUFItQ01UUCc6IDM4LFxuICAgICAgJ1RQKysnOiAzOSxcbiAgICAgICdJTCc6IDQwLFxuICAgICAgJ0lQdjYnOiA0MSxcbiAgICAgICdTRFJQJzogNDIsXG4gICAgICAnSVB2Ni1Sb3V0ZSc6IDQzLFxuICAgICAgJ0lQdjYtRnJhZyc6IDQ0LFxuICAgICAgJ0lEUlAnOiA0NSxcbiAgICAgICdSU1ZQJzogNDYsXG4gICAgICAnR1JFJzogNDcsXG4gICAgICAnRFNSJzogNDgsXG4gICAgICAnQk5BJzogNDksXG4gICAgICAnRVNQJzogNTAsXG4gICAgICAnQUgnOiA1MSxcbiAgICAgICdJLU5MU1AnOiA1MixcbiAgICAgICdTV0lQRSc6IDUzLFxuICAgICAgJ05BUlAnOiA1NCxcbiAgICAgICdNT0JJTEUnOiA1NSxcbiAgICAgICdUTFNQJzogNTYsXG4gICAgICAnU0tJUCc6IDU3LFxuICAgICAgJ0lQdjYtSUNNUCc6IDU4LFxuICAgICAgJ0lQdjYtTm9OeHQnOiA1OSxcbiAgICAgICdJUHY2LU9wdHMnOiA2MCxcbiAgICAgICdDRlRQJzogNjIsXG4gICAgICAnU0FULUVYUEFLJzogNjQsXG4gICAgICAnS1JZUFRPTEFOJzogNjUsXG4gICAgICAnUlZEJzogNjYsXG4gICAgICAnSVBQQyc6IDY3LFxuICAgICAgJ1NBVC1NT04nOiA2OSxcbiAgICAgICdWSVNBJzogNzAsXG4gICAgICAnSVBDVic6IDcxLFxuICAgICAgJ0NQTlgnOiA3MixcbiAgICAgICdDUEhCJzogNzMsXG4gICAgICAnV1NOJzogNzQsXG4gICAgICAnUFZQJzogNzUsXG4gICAgICAnQlItU0FULU1PTic6IDc2LFxuICAgICAgJ1NVTi1ORCc6IDc3LFxuICAgICAgJ1dCLU1PTic6IDc4LFxuICAgICAgJ1dCLUVYUEFLJzogNzksXG4gICAgICAnSVNPLUlQJzogODAsXG4gICAgICAnVk1UUCc6IDgxLFxuICAgICAgJ1NFQ1VSRS1WTVRQJzogODIsXG4gICAgICAnVklORVMnOiA4MyxcbiAgICAgICdUVFAnOiA4NCxcbiAgICAgICdJUFRNJzogODQsXG4gICAgICAnTlNGTkVULUlHUCc6IDg1LFxuICAgICAgJ0RHUCc6IDg2LFxuICAgICAgJ1RDRic6IDg3LFxuICAgICAgJ0VJR1JQJzogODgsXG4gICAgICAnT1NQRklHUCc6IDg5LFxuICAgICAgJ1Nwcml0ZS1SUEMnOiA5MCxcbiAgICAgICdMQVJQJzogOTEsXG4gICAgICAnTVRQJzogOTIsXG4gICAgICAnQVguMjUnOiA5MyxcbiAgICAgICdJUElQJzogOTQsXG4gICAgICAnTUlDUCc6IDk1LFxuICAgICAgJ1NDQy1TUCc6IDk2LFxuICAgICAgJ0VUSEVSSVAnOiA5NyxcbiAgICAgICdFTkNBUCc6IDk4LFxuICAgICAgJ0dNVFAnOiAxMDAsXG4gICAgICAnSUZNUCc6IDEwMSxcbiAgICAgICdQTk5JJzogMTAyLFxuICAgICAgJ1BJTSc6IDEwMyxcbiAgICAgICdBUklTJzogMTA0LFxuICAgICAgJ1NDUFMnOiAxMDUsXG4gICAgICAnUU5YJzogMTA2LFxuICAgICAgJ0EvTic6IDEwNyxcbiAgICAgICdJUENvbXAnOiAxMDgsXG4gICAgICAnU05QJzogMTA5LFxuICAgICAgJ0NvbXBhcS1QZWVyJzogMTEwLFxuICAgICAgJ0lQWC1pbi1JUCc6IDExMSxcbiAgICAgICdWUlJQJzogMTEyLFxuICAgICAgJ1BHTSc6IDExMyxcbiAgICAgICdMMlRQJzogMTE1LFxuICAgICAgJ0REWCc6IDExNixcbiAgICAgICdJQVRQJzogMTE3LFxuICAgICAgJ1NUUCc6IDExOCxcbiAgICAgICdTUlAnOiAxMTksXG4gICAgICAnVVRJJzogMTIwLFxuICAgICAgJ1NNUCc6IDEyMSxcbiAgICAgICdTTSc6IDEyMixcbiAgICAgICdQVFAnOiAxMjMsXG4gICAgICAnSVNJUyBvdmVyIElQdjQnOiAxMjQsXG4gICAgICAnRklSRSc6IDEyNSxcbiAgICAgICdDUlRQJzogMTI2LFxuICAgICAgJ0NSVURQJzogMTI3LFxuICAgICAgJ1NTQ09QTUNFJzogMTI4LFxuICAgICAgJ0lQTFQnOiAxMjksXG4gICAgICAnU1BTJzogMTMwLFxuICAgICAgJ1BJUEUnOiAxMzEsXG4gICAgICAnU0NUUCc6IDEzMixcbiAgICAgICdGQyc6IDEzMyxcbiAgICAgICdSU1ZQLUUyRS1JR05PUkUnOiAxMzQsXG4gICAgICAnTW9iaWxpdHkgSGVhZGVyJzogMTM1LFxuICAgICAgJ1VEUExpdGUnOiAxMzYsXG4gICAgICAnTVBMUy1pbi1JUCc6IDEzNyxcbiAgICAgICdtYW5ldCc6IDEzOCxcbiAgICAgICdISVAnOiAxMzksXG4gICAgICAnU2hpbTYnOiAxNDAsXG4gICAgICAnV0VTUCc6IDE0MSxcbiAgICAgICdST0hDJzogMTQyXG4gICAgfTtcbiAgICBzdWJuZXRfbWFza192YWx1ZXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaiwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoYml0cyA9IGogPSAwOyBqIDw9IDg7IGJpdHMgPSArK2opIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKE1hdGgucG93KDIsIDgpIC0gTWF0aC5wb3coMiwgYml0cykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkoKTtcbiAgICBzdWJuZXRfbWFza192YWx1ZXMucmVtb3ZlKDApO1xuICAgIGNvbWJpbmF0aW9ucyA9IGZ1bmN0aW9uKGJ5dGVfb3JkZXIpIHtcbiAgICAgIHZhciBjb21iaW5hdGlvbl9zZXQsIGNvbWJpbmF0aW9uc19tYWluLCBwcmV2aW91cztcbiAgICAgIGNvbWJpbmF0aW9uc19tYWluID0gc3VibmV0X21hc2tfdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaSwgcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBieXRlX29yZGVyID09PSAxID8gW10gOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIHJlZiwgcmVzdWx0cztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChpID0gaiA9IDIsIHJlZiA9IGJ5dGVfb3JkZXI7IDIgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDIgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KSgpO1xuICAgICAgICByZXN1bHQudW5zaGlmdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHByZXZpb3VzID0gW107XG4gICAgICBpZiAoYnl0ZV9vcmRlciA+IDEpIHtcbiAgICAgICAgY29tYmluYXRpb25fc2V0ID0gY29tYmluYXRpb25zKGJ5dGVfb3JkZXIgLSAxKTtcbiAgICAgICAgcHJldmlvdXMgPSBjb21iaW5hdGlvbl9zZXQubWFwKGZ1bmN0aW9uKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFsyNTVdLmNvbmNhdChjb21iaW5hdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXZpb3VzLmNvbmNhdChjb21iaW5hdGlvbnNfbWFpbik7XG4gICAgfTtcbiAgICBzdWJuZXRfbWFza3MgPSBjb21iaW5hdGlvbnMoNCkubWFwKGZ1bmN0aW9uKGNvbWJpbmF0aW9uKSB7XG4gICAgICByZXR1cm4gY29tYmluYXRpb24uam9pbignLicpO1xuICAgIH0pO1xuICAgIG1hY19hZGRyZXNzX21hc2sgPSB7XG4gICAgICBiaXRzOiA0OFxuICAgIH07XG4gICAgaXBfYWRkcmVzc19tYXNrID0ge1xuICAgICAgYml0czogMzJcbiAgICB9O1xuICAgIEVudW1zID0ge1xuICAgICAgc3VibmV0X21hc2tzOiBzdWJuZXRfbWFza3MsXG4gICAgICBldGhlcm5ldF9wb3J0X21vZGVzOiB7XG4gICAgICAgICcxMDAwQkFTRV9LWCc6IDAsXG4gICAgICAgICcxMDAwQkFTRV9YJzogMSxcbiAgICAgICAgJzEwR0JBU0VfQ1InOiAyLFxuICAgICAgICAnMTBHQkFTRV9DWDQnOiAzLFxuICAgICAgICAnMTBHQkFTRV9LWDQnOiA0LFxuICAgICAgICAnMTBHQkFTRV9TUic6IDUsXG4gICAgICAgICc0MEdCQVNFX0NSNCc6IDYsXG4gICAgICAgICc0MEdCQVNFX0tSNCc6IDcsXG4gICAgICAgICc0MEdCQVNFX1NSNCc6IDgsXG4gICAgICAgICdBTl83Myc6IDksXG4gICAgICAgICdESVNBQkxFRCc6IDEwLFxuICAgICAgICAnU0dNSUknOiAxMSxcbiAgICAgICAgJ1hBVUknOiAxMixcbiAgICAgICAgJ1hMQVVJJzogMTNcbiAgICAgIH0sXG4gICAgICBBQ0xfYWN0aW9uczoge1xuICAgICAgICBkcm9wOiAwLFxuICAgICAgICBwZXJtaXQ6IDEsXG4gICAgICAgIGJhbGFuY2U6IDIsXG4gICAgICAgIHJlZGlyZWN0OiAzLFxuICAgICAgICBtaXJyb3I6IDQsXG4gICAgICAgIHNldF9oYXNoX3Byb2ZpbGU6IDUsXG4gICAgICAgIGR1YmJpbmc6IDZcbiAgICAgIH0sXG4gICAgICBwb3J0X3BhcnNlcl9sZXZlbHM6IHtcbiAgICAgICAgTDI6IDIsXG4gICAgICAgIEwzOiAzLFxuICAgICAgICBMNDogNFxuICAgICAgfSxcbiAgICAgIEVycm9yczoge1xuICAgICAgICBhcGk6IHtcbiAgICAgICAgICBzZXRfaW50ZXJmYWNlX3ZlcnNpb246IC0zMjUwMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgQUNMX0ZpbHRlcjoge1xuICAgICAgICBldGhlcm5ldF9wcm90b2NvbDoge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgIGZyb206IGV0aGVybmV0X3Byb3RvY29scyxcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBldGhlcm5ldF9wcm90b2NvbHMuSVBcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2s6IHtcbiAgICAgICAgICAgIGJpdHM6IDE2LFxuICAgICAgICAgICAgZGV2aWNlOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXIsXG4gICAgICAgICAgICBtb2RlbDogVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICAgICAgbWFzazogJ2V0aF90eXBlX21hc2snXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25kaXRpb246IDBcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlX01BQ19hZGRyZXNzOiB7XG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFzazogbWFjX2FkZHJlc3NfbWFzayxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiAyLFxuICAgICAgICAgICAgbWFzazogJ3NyY19tYWNfbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogMSxcbiAgICAgICAgICBkaXJlY3Rpb246ICdzb3VyY2UnXG4gICAgICAgIH0sXG4gICAgICAgIGRlc3RpbmF0aW9uX01BQ19hZGRyZXNzOiB7XG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFzazogbWFjX2FkZHJlc3NfbWFzayxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiAzLFxuICAgICAgICAgICAgbWFzazogJ2RzdF9tYWNfbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogMixcbiAgICAgICAgICBkaXJlY3Rpb246ICdkZXN0aW5hdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlX0lQX2FkZHJlc3M6IHtcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXNrOiBpcF9hZGRyZXNzX21hc2ssXG4gICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICB2YWx1ZTogNCxcbiAgICAgICAgICAgIG1hc2s6ICdzcmNfaXBfbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogMyxcbiAgICAgICAgICBkaXJlY3Rpb246ICdzb3VyY2UnXG4gICAgICAgIH0sXG4gICAgICAgIGRlc3RpbmF0aW9uX0lQX2FkZHJlc3M6IHtcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtYXNrOiBpcF9hZGRyZXNzX21hc2ssXG4gICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICB2YWx1ZTogNSxcbiAgICAgICAgICAgIG1hc2s6ICdkc3RfaXBfbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogNCxcbiAgICAgICAgICBkaXJlY3Rpb246ICdkZXN0aW5hdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgbXVsdGlfSVBfYWRkcmVzczoge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgdmFsdWU6IDE0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25kaXRpb246IDNcbiAgICAgICAgfSxcbiAgICAgICAgSVBfcHJvdG9jb2w6IHtcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICBmcm9tOiBpcF9wcm90b2NvbHMsXG4gICAgICAgICAgICBcImRlZmF1bHRcIjogaXBfcHJvdG9jb2xzLlRDUFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFzazoge1xuICAgICAgICAgICAgYml0czogOCxcbiAgICAgICAgICAgIGRldmljZTogVXRpbGl0aWVzLmhleF9zdHJpbmdfdG9fbnVtYmVyLFxuICAgICAgICAgICAgbW9kZWw6IFV0aWxpdGllcy5udW1iZXJfdG9faGV4X3N0cmluZ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICB2YWx1ZTogNixcbiAgICAgICAgICAgIG1hc2s6ICdsNF9wcm90b19tYXNrJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZGl0aW9uOiA3XG4gICAgICAgIH0sXG4gICAgICAgIElQX3Byb3RvY29sX3NvdXJjZToge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2s6IHtcbiAgICAgICAgICAgIGJpdHM6IDE2LFxuICAgICAgICAgICAgZGV2aWNlOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXIsXG4gICAgICAgICAgICBtb2RlbDogVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiA3LFxuICAgICAgICAgICAgdmFsdWVfcmFuZ2U6IDgsXG4gICAgICAgICAgICBtYXNrOiAnbDRfc3JjX21hc2snXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25kaXRpb246IDUsXG4gICAgICAgICAgZGlyZWN0aW9uOiAnc291cmNlJ1xuICAgICAgICB9LFxuICAgICAgICBJUF9wcm90b2NvbF9kZXN0aW5hdGlvbjoge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2s6IHtcbiAgICAgICAgICAgIGJpdHM6IDE2LFxuICAgICAgICAgICAgZGV2aWNlOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXIsXG4gICAgICAgICAgICBtb2RlbDogVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiA5LFxuICAgICAgICAgICAgdmFsdWVfcmFuZ2U6IDEwLFxuICAgICAgICAgICAgbWFzazogJ2w0X2RzdF9tYXNrJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZGl0aW9uOiA2LFxuICAgICAgICAgIGRpcmVjdGlvbjogJ2Rlc3RpbmF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICBWTEFOOiB7XG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFzazoge1xuICAgICAgICAgICAgYml0czogMTYsXG4gICAgICAgICAgICBkZXZpY2U6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlcixcbiAgICAgICAgICAgIG1vZGVsOiBVdGlsaXRpZXMubnVtYmVyX3RvX2hleF9zdHJpbmdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgdmFsdWU6IDExLFxuICAgICAgICAgICAgbWFzazogJ3ZsYW5fbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogOFxuICAgICAgICB9LFxuICAgICAgICBWTEFOMjoge1xuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2s6IHtcbiAgICAgICAgICAgIGJpdHM6IDE2LFxuICAgICAgICAgICAgZGV2aWNlOiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXIsXG4gICAgICAgICAgICBtb2RlbDogVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiAxMixcbiAgICAgICAgICAgIG1hc2s6ICd2bGFuMl9tYXNrJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZGl0aW9uOiA5XG4gICAgICAgIH0sXG4gICAgICAgIExldmVsNF9kYXRhOiB7XG4gICAgICAgICAgbW9kZWw6IGZ1bmN0aW9uKHZhbHVlLCBtYXNrKSB7XG4gICAgICAgICAgICB2YXIgaSwgb3JpZ2luYWxfdmFsdWU7XG4gICAgICAgICAgICBvcmlnaW5hbF92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IG1hc2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChtYXNrW2ldID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2VfYXQoaSwgJ1gnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IFV0aWxpdGllcy50cmltX21hc2tlZF9oZXgodmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUgPSBVdGlsaXRpZXMuaGV4X3ByZXR0eV9wcmludCh2YWx1ZSwgMClbMF07XG4gICAgICAgICAgICBtYXNrID0gJyc7XG4gICAgICAgICAgICByZXR1cm4gW3ZhbHVlLCBtYXNrXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRldmljZTogZnVuY3Rpb24odmFsdWUsIG1hc2spIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAnWCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNrID0gdmFsdWUucmVwbGFjZSgvW15YXS9nLCAnRicpO1xuICAgICAgICAgICAgbWFzayA9IG1hc2sucmVwbGFjZSgvWC9nLCAnMCcpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9YL2csICcwJyk7XG4gICAgICAgICAgICByZXR1cm4gW3ZhbHVlLCBtYXNrXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBkZXZpY2U6IFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlcl9hcnJheSxcbiAgICAgICAgICAgIG1vZGVsOiBVdGlsaXRpZXMubnVtYmVyX2FycmF5X3RvX2hleF9zdHJpbmdcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1hc2s6IHtcbiAgICAgICAgICAgIG1vZGVsOiBVdGlsaXRpZXMubnVtYmVyX2FycmF5X3RvX2hleF9zdHJpbmdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgdmFsdWU6IDEzLFxuICAgICAgICAgICAgbWFzazogJ2w0X2RhdGFfbWFzaydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmRpdGlvbjogMTBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgRW51bXMuTWFwcGVyID0ge1xuICAgICAgZXRoZXJuZXRfcHJvdG9jb2w6IHtcbiAgICAgICAgaWQ6IDAsXG4gICAgICAgIGNvbmRpdGlvbjogMTcsXG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfZXRoX3R5cGUnLFxuICAgICAgICBmaWx0ZXI6IEVudW1zLkFDTF9GaWx0ZXIuZXRoZXJuZXRfcHJvdG9jb2wsXG4gICAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgICAgfSxcbiAgICAgIElQX2FkZHJlc3M6IHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfc3JjX2lwJyxcbiAgICAgICAgICBjb25kaXRpb246IDIwLFxuICAgICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5zb3VyY2VfSVBfYWRkcmVzc1xuICAgICAgICB9LFxuICAgICAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfZHN0X2lwJyxcbiAgICAgICAgICBjb25kaXRpb246IDE5LFxuICAgICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5kZXN0aW5hdGlvbl9JUF9hZGRyZXNzXG4gICAgICAgIH0sXG4gICAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgICAgfSxcbiAgICAgIElQX3BhY2tldF9sZW5ndGg6IHtcbiAgICAgICAgaWQ6IDIsXG4gICAgICAgIGNvbmRpdGlvbjogMTgsXG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfaXBfbGVuZ3RoJyxcbiAgICAgICAgbWFwcGVkX3ZhbHVlX2J5dGVzOiAxXG4gICAgICB9LFxuICAgICAgTDRfZGVzdGluYXRpb246IHtcbiAgICAgICAgaWQ6IDMsXG4gICAgICAgIGNvbmRpdGlvbjogMTQsXG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfbDRfZHN0JyxcbiAgICAgICAgZmlsdGVyOiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sX2Rlc3RpbmF0aW9uLFxuICAgICAgICBmcm9tOiBmdW5jdGlvbihfKSB7XG4gICAgICAgICAgcmV0dXJuIF8ucG9ydF9zdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgdG86IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgICByZXR1cm4gXy5wb3J0X2VuZDtcbiAgICAgICAgfSxcbiAgICAgICAgbWFwcGVkX3ZhbHVlX2J5dGVzOiAyXG4gICAgICB9LFxuICAgICAgTDRfc291cmNlOiB7XG4gICAgICAgIGlkOiA0LFxuICAgICAgICBjb25kaXRpb246IDEzLFxuICAgICAgICBydWxlX3ZhbHVlOiAnbWFwcGVkX2w0X3NyYycsXG4gICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5JUF9wcm90b2NvbF9zb3VyY2UsXG4gICAgICAgIGZyb206IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgICByZXR1cm4gXy5wb3J0X3N0YXJ0O1xuICAgICAgICB9LFxuICAgICAgICB0bzogZnVuY3Rpb24oXykge1xuICAgICAgICAgIHJldHVybiBfLnBvcnRfZW5kO1xuICAgICAgICB9LFxuICAgICAgICBtYXBwZWRfdmFsdWVfYnl0ZXM6IDJcbiAgICAgIH0sXG4gICAgICBNQUNfYWRkcmVzczoge1xuICAgICAgICBpZDogNSxcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9zcmNfbWFjJyxcbiAgICAgICAgICBjb25kaXRpb246IDE2LFxuICAgICAgICAgIGZpbHRlcjogRW51bXMuQUNMX0ZpbHRlci5zb3VyY2VfTUFDX2FkZHJlc3NcbiAgICAgICAgfSxcbiAgICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgICBydWxlX3ZhbHVlOiAnbWFwcGVkX2RzdF9tYWMnLFxuICAgICAgICAgIGNvbmRpdGlvbjogMTUsXG4gICAgICAgICAgZmlsdGVyOiBFbnVtcy5BQ0xfRmlsdGVyLmRlc3RpbmF0aW9uX01BQ19hZGRyZXNzXG4gICAgICAgIH0sXG4gICAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgICAgfSxcbiAgICAgIElQX3Byb3RvY29sOiB7XG4gICAgICAgIGlkOiA2LFxuICAgICAgICBjb25kaXRpb246IDEyLFxuICAgICAgICBydWxlX3ZhbHVlOiAnbWFwcGVkX3Byb3RvY29sJyxcbiAgICAgICAgZmlsdGVyOiBFbnVtcy5BQ0xfRmlsdGVyLklQX3Byb3RvY29sLFxuICAgICAgICBtYXBwZWRfdmFsdWVfYnl0ZXM6IDFcbiAgICAgIH0sXG4gICAgICBEZXZpY2VfcG9ydDoge1xuICAgICAgICBpZDogNyxcbiAgICAgICAgY29uZGl0aW9uOiAxMSxcbiAgICAgICAgcnVsZV92YWx1ZTogJ21hcHBlZF9zb3VyY2VfcG9ydCcsXG4gICAgICAgIG1hcHBlZF92YWx1ZV9ieXRlczogMVxuICAgICAgfSxcbiAgICAgIFZMQU46IHtcbiAgICAgICAgaWQ6IDgsXG4gICAgICAgIGNvbmRpdGlvbjogMjEsXG4gICAgICAgIHJ1bGVfdmFsdWU6ICdtYXBwZWRfdmxhbl9pZCcsXG4gICAgICAgIGZpbHRlcjogJ1ZMQU4nLFxuICAgICAgICBtYXBwZWRfdmFsdWVfYnl0ZXM6IDJcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFbnVtcztcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnRmlsZURCJywgKGFwaSkgLT5cblxuICAjINC/0YDQtdCy0YDQsNGJ0LDQtdGCINC/0YPRgtGMINCy0LjQtNCwIFwi0LHQsNC30LBf0LTQsNC90L3Ri9GFL9GE0LDQudC7XCIg0LIg0LzQsNGB0YHQuNCyIFvQsdCw0LfQsF/QtNCw0L3QvdGL0YUsINGE0LDQudC7XVxuICBwYXJzZV9wYXRoID0gKGZpbGUpIC0+XG4gICAgZGF0YWJhc2UgPSBudWxsXG5cbiAgICBpZiBmaWxlLmhhcyAnLydcbiAgICAgIGRhdGFiYXNlID0gZmlsZS5iZWZvcmUoJy8nKVxuICAgICAgZmlsZSA9IGZpbGUuYWZ0ZXIoJy8nKVxuXG4gICAgcmV0dXJuIFtkYXRhYmFzZSwgZmlsZV1cblxuICBGaWxlREIgPVxuICAgICMg0YHQvtGF0YDQsNC90LjRgtGMINC00LDQvdC90YvQtSDQsiDQsdCw0LfRgyDQtNCw0L3QvdGL0YVcbiAgICBzYXZlOiAocGF0aCwgZGF0YSkgLT5cbiAgICAgIFtkYXRhYmFzZSwgZmlsZV0gPSBwYXJzZV9wYXRoKHBhdGgpXG4gICAgICBhcGkuY2FsbCgnZmlsZWRiLnNhdmUnLCB7IGRhdGFiYXNlOiBkYXRhYmFzZSwgZmlsZTogZmlsZSArICcuanNvbicsIGRhdGE6IGRhdGEgfSlcblxuICAgICMg0YHRh9C40YLQsNGC0Ywg0LTQsNC90L3Ri9C1INC40Lcg0LHQsNC30Ysg0LTQsNC90L3Ri9GFXG4gICAgbG9hZDogKHBhdGgpIC0+XG4gICAgICBbZGF0YWJhc2UsIGZpbGVdID0gcGFyc2VfcGF0aChwYXRoKVxuICAgICAgYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywgeyBkYXRhYmFzZTogZGF0YWJhc2UsIGZpbGU6IGZpbGUgKyAnLmpzb24nIH0pXG5cbiAgICAjINC+0LHQvdC+0LLQuNGC0Ywg0LTQsNC90L3Ri9C1INCyINCx0LDQt9C1INC00LDQvdC90YvRhVxuICAgICMgKNC+0LHQvdC+0LLQu9C10L3QviDQsdGD0LTQtdGCINGC0L7Qu9GM0LrQviDQt9Cw0LTQsNC90L3QvtC1INC/0L7Qu9C1KVxuICAgICMgKNC80LXRgtC+0LQg0L3QtSDRgtGA0LDQvdC30LDQutGG0LjQvtC90LXQvSlcbiAgICB1cGRhdGU6IChwYXRoLCBmaWVsZCwgZGF0YSkgLT5cbiAgICAgIEZpbGVEQi5sb2FkKHBhdGgpLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgYW5ndWxhci5leHRlbmQocmVzdWx0W2ZpZWxkXSwgZGF0YSlcbiAgICAgICAgRmlsZURCLnNhdmUocGF0aCwgcmVzdWx0KSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ0ZpbGVEQicsIGZ1bmN0aW9uKGFwaSkge1xuICAgIHZhciBGaWxlREIsIHBhcnNlX3BhdGg7XG4gICAgcGFyc2VfcGF0aCA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIHZhciBkYXRhYmFzZTtcbiAgICAgIGRhdGFiYXNlID0gbnVsbDtcbiAgICAgIGlmIChmaWxlLmhhcygnLycpKSB7XG4gICAgICAgIGRhdGFiYXNlID0gZmlsZS5iZWZvcmUoJy8nKTtcbiAgICAgICAgZmlsZSA9IGZpbGUuYWZ0ZXIoJy8nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbZGF0YWJhc2UsIGZpbGVdO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbGVEQiA9IHtcbiAgICAgIHNhdmU6IGZ1bmN0aW9uKHBhdGgsIGRhdGEpIHtcbiAgICAgICAgdmFyIGRhdGFiYXNlLCBmaWxlLCByZWY7XG4gICAgICAgIHJlZiA9IHBhcnNlX3BhdGgocGF0aCksIGRhdGFiYXNlID0gcmVmWzBdLCBmaWxlID0gcmVmWzFdO1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2ZpbGVkYi5zYXZlJywge1xuICAgICAgICAgIGRhdGFiYXNlOiBkYXRhYmFzZSxcbiAgICAgICAgICBmaWxlOiBmaWxlICsgJy5qc29uJyxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgdmFyIGRhdGFiYXNlLCBmaWxlLCByZWY7XG4gICAgICAgIHJlZiA9IHBhcnNlX3BhdGgocGF0aCksIGRhdGFiYXNlID0gcmVmWzBdLCBmaWxlID0gcmVmWzFdO1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2ZpbGVkYi5sb2FkJywge1xuICAgICAgICAgIGRhdGFiYXNlOiBkYXRhYmFzZSxcbiAgICAgICAgICBmaWxlOiBmaWxlICsgJy5qc29uJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uKHBhdGgsIGZpZWxkLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBGaWxlREIubG9hZChwYXRoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHJlc3VsdFtmaWVsZF0sIGRhdGEpO1xuICAgICAgICAgIHJldHVybiBGaWxlREIuc2F2ZShwYXRoLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdHcmFwaCcsICgkcm9vdFNjb3BlLCAkdGltZW91dCwgbG9nLCB0cmFuc2xhdGUsIFBvcnQpIC0+XG5cbiAgIyAjINCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdCw0Y8g0L7QsdGA0LDQsdC+0YLQutCwINC30L3QsNGH0LXQvdC40Lkg0LPRgNCw0YTQuNC60LAg0L/QtdGA0LXQtCDQtdCz0L4g0L/QvtC60LDQt9C+0LxcbiAgIyBncmFwaF92YWx1ZV9kZWNvcmF0b3JzID1cbiAgIyAgIG5ldHdvcmtfcmF0ZTogKHZhbHVlKSAtPlxuICAjICAgICBwcmVjaXNpb24gPSAyXG4gICMgICAgIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKVxuICAjICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXJcbiAgIyAgICAgaWYgdmFsdWUgPT0gMFxuICAjICAgICAgIHJldHVybiAwXG4gICMgICAgIHJldHVybiB2YWx1ZVxuXG4gICMg0LPRgNCw0YTQuNC60Lgg0YDQsNCx0L7RgtCw0Y7RgiDRgdC+0LLQvNC10YHRgtC+INGBIFwidGltZSBzZXJpZXNcIiDQsdCw0LfQvtC5INC00LDQvdC90YvRhSBJbmZsdXhEQi5cbiAgIyDQutCw0LbQtNCw0Y8gdGltZSBzZXJpZXMgKNC60LDQuiDQsdGLINGC0LDQsdC70LjRhtCwIFNRTCkg0YHQvtGB0YLQvtC40YIg0LjQtyBwb2ludCfQvtCyICjQutCw0Log0LHRiyDRgdGC0YDQvtC6IFNRTCkuXG4gICNcbiAgIyBcInJvbGx1cFwiICjQvtC9INC20LUgXCJyb2xsLXVwXCIpIC0g0Y3RgtC+INC60LDQuiDQsdGLIFwi0YHQstGR0YDRgtC60LBcIiDQvdC10LrQvtC10LkgdGltZSBzZXJpZXMg0L/QviDQstGA0LXQvNC10L3QuFxuICAjINGBINC/0L7QvNC+0YnRjNGOINGE0YPQvdC60YbQuNC4IFwi0LDQs9GA0LXQs9Cw0YLQvtGA0LBcIiAobWF4LCBtaW4sIGF2ZywgLi4uKS5cbiAgIyDRjdGC0L4g0L7RgtC00LXQu9GM0L3QsNGPIHRpbWUgc2VyaWVzLCDRgdC+0LfQtNCw0LLQsNC10LzQsNGPINGB0LDQvNC+0YHRgtC+0Y/RgtC10LvRjNC90L4g0LHQsNC30L7QuSDQtNCw0L3QvdGL0YUsXG4gICMg0LrQvtCz0LTQsCDQsiDQvdC10Lkg0YHQvtC30LTQsNGR0YLRgdGPIGNvbnRpbnVvdXMgcXVlcnkuXG4gICMg0LIg0Y3RgtGDIHRpbWUgc2VyaWVzINC/0LjRiNGD0YLRgdGPLCDQvdCw0L/RgNC40LzQtdGALCDRgdGD0LzQvNCw0YDQvdGL0LUg0LfQvdCw0YfQtdC90LjRjyDQt9CwINC/0LXRgNC40L7QtCwg0YPQutCw0LfQsNC90L3Ri9C5INCyIGNvbnRpbnVvdXMgcXVlcnkuXG4gICMgKNC90LDQv9GA0LjQvNC10YAsINGB0YPQvNC80LDRgNC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQstGB0LXRhSDRgdC10YLQtdCy0YvRhSDQv9Cw0LrQtdGC0L7QsiDQt9CwINGH0LDRgSwg0LDQs9GA0LXQs9C40YDQvtCy0LDQvdC90L7QtSDQuNC3INGC0LDQsdC70LjRhtGLINC10LbQtdGB0LXQutGD0L3QtNC90L7Qs9C+INGC0YDQsNGE0LjQutCwKVxuICAjXG4gICMgcm9sbC11cCfRiyDQv9C+0LfQstC+0LvRj9GO0YIg0YLQsNC60LbQtSDQuNC80LXRgtGMINC/0YDQtdC00YHRgtCw0LLQu9C10L3QuNC1INC+INC00LDQvdC90YvRhSDQsiDRg9C00LDQu9GR0L3QvdGL0LUg0LzQvtC80LXQvdGC0Ysg0LLRgNC10LzQtdC90Lgg0LIg0L/RgNC+0YjQu9C+0LwsXG4gICMg0LTQsNC20LUg0LXRgdC70Lgg0YHQsNC80Lgg0L/QtdGA0LLQuNGH0L3Ri9C1INC00LDQvdC90YvQtSAo0L3QsNC/0YDQuNC80LXRgCwg0L/QsNC60LXRgtGLINCyINC60LDQttC00YPRjiDRgdC10LrRg9C90LTRgykg0YPQttC1INCx0YvQu9C4INCy0YvRgtC10YHQvdC10L3RiyDQuNC3INCx0LDQt9GLINC00LDQvdC90YvRhVxuICAjICjRgyDQutCw0LbQtNC+0LkgdGltZSBzZXJpZXMg0YHRgtC+0LjRgiDQvtCz0YDQsNC90LjRh9C10L3QuNC1INC90LAg0YHRgNC+0Log0LbQuNC30L3QuCDQutCw0LbQtNC+0LPQviBwb2ludCfQsCDQsiDRjdGC0L7QuSB0aW1lIHNlcmllcyxcbiAgIyAg0LTQu9GPINGC0L7Qs9C+LCDRh9GC0L7QsdGLINC90LUg0LfQsNCx0LjRgtGMINCy0YHRkSDQtNC40YHQutC+0LLQvtC1INC/0YDQvtGB0YLRgNCw0L3RgdGC0LLQviDQtNCw0L3QvdGL0LzQuCDRjdGC0L7QuSB0aW1lIHNlcmllcztcbiAgIyAg0L/QvtGN0YLQvtC80YMgcG9pbnQn0Ysg0LIgdGltZSBzZXJpZXMg0L/QvtGB0YLQtdC/0LXQvdC90L4g0LLRi9Cx0YvQstCw0Y7RgiDRgSDQtNGA0YPQs9C+0LPQviDQutC+0L3RhtCwKVxuICAjXG4gICMgc3VtbWFyaXplIC0g0Y3RgtC+INGE0LvQsNCzINC00LvRjyDQs9GA0LDRhNC40LrQvtCyINC/0YDQsNCy0LjQu9CwOyDQtdGB0LvQuCDQvtC9INCy0LrQu9GO0YfQtdC9LFxuICAjINGC0L4g0LLRgdC10YHRjCDRgtGA0LDRhNC40Log0L/QviDQstGF0L7QtNCw0LwgKNC+0YLQtNC10LvRjNC90L4pINC4INCy0YvRhdC+0LTQsNC8ICjQvtGC0LTQtdC70YzQvdC+KSDQsdGD0LTQtdGCINC/0YDQvtGB0YPQvNC80LjRgNC+0LLQsNC9INC90LAg0LPRgNCw0YTQuNC60LUuXG5cbiAgR3JhcGggPVxuICAgIHRzZyAgICAgICA6IG5vXG4gICAgcnVsZSAgICAgIDogbm9cbiAgICBzdW1tYXJpemUgOiBub1xuICAgIGRhdGEgICAgICA6IFtdXG4gICAgcG9ydHMgICAgIDoge31cblxuICAgICMgcm9sbC11cCfRizog0L/QviDRh9Cw0YHQsNC8LCDQv9C+INC00L3Rj9C8LCDQv9C+INC80LXRgdGP0YbQsNC8XG4gICAgIyAo0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQuNC1INC60L3QvtC/0LrQuCDQsdGD0LTRg9GCINC90LDQtCDQs9GA0LDRhNC40LrQvtC8KVxuICAgICNcbiAgICAjIHByZWZpeCAtINC/0YDQtdGE0LjQutGBLCDQtNC+0LHQsNCy0LvRj9C10LzRi9C5INC6INC90LDQt9Cy0LDQvdC40Y4g0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQtdC5IHRpbWUgc2VyaWVzLFxuICAgICMgICAgICAgICAg0L/QvtGB0LvQtSDRh9C10LPQviDQv9C+0LvRg9GH0LDQtdGC0YHRjyDQvdCw0LfQstCw0L3QuNC1IHRpbWUgc2VyaWVzINC00LvRjyDQtNCw0L3QvdC+0LPQviByb2xsLXVwJ9CwXG4gICAgIyB0aXRsZSAtINC90LDQt9Cy0LDQvdC40LUgcm9sbC11cCfQsCwg0LrQvtGC0L7RgNC+0LUg0LHRg9C00LXRgiDQvdCw0L/QuNGB0LDQvdC+INC90LAg0LrQvdC+0L/QutC1INC90LDQtCDQs9GA0LDRhNC40LrQvtC8XG4gICAgcm9sbHVwczogW1xuICAgICAgcHJlZml4IDogJzEwcy4nXG4gICAgICB0aXRsZSAgOiB0cmFuc2xhdGUoJ2dyYXBoLnRpbWUubWludXRlcycpXG4gICAgLFxuICAgICAgcHJlZml4IDogJzFoLidcbiAgICAgIHRpdGxlICA6IHRyYW5zbGF0ZSgnZ3JhcGgudGltZS5ob3VycycpXG4gICAgLFxuICAgICAgcHJlZml4IDogJzFkLjFoLidcbiAgICAgIHRpdGxlICA6IHRyYW5zbGF0ZSgnZ3JhcGgudGltZS5kYXlzJylcbiAgICBdXG5cbiAgICAjINGC0LjQv9GLINC30L3QsNGH0LXQvdC40LksINCy0YvQstC+0LTQuNC80YvRhSDQvdCwINCz0YDQsNGE0LjQutCw0YVcbiAgICAjXG4gICAgIyB0eXBlICAgIC0gaWRcbiAgICAjIHRpdGxlICAgLSDQvdCw0LfQstCw0L3QuNC1LCDQstGL0LLQvtC00LjQvNC+0LUg0L3QsCDRjdC60YDQsNC9INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjlxuICAgICMgdW5pdCAgICAtINC10LTQuNC90LjRhtCwINC40LfQvNC10YDQtdC90LjRjywg0LLRi9Cy0L7QtNC40LzQsNGPINC90LAg0L7RgdC4INC30L3QsNGH0LXQvdC40LlcbiAgICAjIGZvcm11bGEgLSDQutCw0Log0YHRh9C40YLQsNGC0Ywg0Y3RgtC+INC30L3QsNGH0LXQvdC40LVcbiAgICBydWxlX2dyYXBoX3R5cGVzOiBbXG4gICAgICB2YWx1ZV90eXBlIDogJ3JhdGUnXG4gICAgICB0aXRsZSAgICAgIDogdHJhbnNsYXRlKCdncmFwaC52YWx1ZS50eXBlLnJhdGUnKVxuICAgICAgdW5pdHMgICAgICA6IHRyYW5zbGF0ZSgnbmV0d29yay5yYXRlLk1icHMnKVxuICAgICAgZm9ybXVsYSAgICA6ICdyeF9zcGVlZCAvICgxMDAwICogMTAwMCksIC0xICogdHhfc3BlZWQgLyAoMTAwMCAqIDEwMDApJ1xuICAgICAgIyBkZWNvcmF0b3IgIDogZ3JhcGhfdmFsdWVfZGVjb3JhdG9ycy5uZXR3b3JrX3JhdGVcbiAgICAsXG4gICAgICB2YWx1ZV90eXBlIDogJ2NyYydcbiAgICAgIHRpdGxlICAgICAgOiB0cmFuc2xhdGUoJ2dyYXBoLnZhbHVlLnR5cGUuY3JjJylcbiAgICAsXG4gICAgICB2YWx1ZV90eXBlIDogJ2Ryb3BzJ1xuICAgICAgdGl0bGUgICAgICA6IHRyYW5zbGF0ZSgnZ3JhcGgudmFsdWUudHlwZS5kcm9wcycpXG4gICAgXVxuXG4gICAgIyDQvdCw0LHQvtGAINCz0YDQsNGE0LjQutC+0LIgKNC00LvRjyDQv9C+0YDRgtC+0LIg0Lgg0L/RgNCw0LLQuNC7KSwg0LrQvtGC0L7RgNGL0LUg0LzQvtC20L3QviDQv9C+0LrQsNC30YvQstCw0YLRjFxuICAgICMgKNGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQtSDQutC90L7Qv9C60Lgg0LHRg9C00YPRgiDQvdCw0LQg0LPRgNCw0YTQuNC60L7QvClcbiAgICAjXG4gICAgIyDRgdC60L7RgNC+0YHRgtGMINCy0YXQvtC00Y/RidC10LPQviDRgtGA0LDRhNC40LrQsCxcbiAgICAjINGB0LrQvtGA0L7RgdGC0Ywg0LjRgdGF0L7QtNGP0YnQtdCz0L4g0YLRgNCw0YTQuNC60LAsXG4gICAgIyDQutC+0LvQuNGH0LXRgdGC0LLQviDQvtGI0LjQsdC+0LogQ1JDLFxuICAgICMg0LrQvtC70LjRh9C10YHRgtCy0L4gZHJvcHBlZCBmcmFtZXNcbiAgICBwb3J0X2dyYXBoX3R5cGVzOiBbXG4gICAgICB2YWx1ZV90eXBlIDogJ3J4L3R4J1xuICAgICAgdGl0bGUgICAgICA6IHRyYW5zbGF0ZSgnZ3JhcGgudmFsdWUudHlwZS5yYXRlJylcbiAgICAgIHVuaXRzICAgICAgOiB0cmFuc2xhdGUoJ25ldHdvcmsucmF0ZS5NYnBzJylcbiAgICAgIGZvcm11bGEgICAgOiAncnhfc3BlZWQgLyAoMTAwMCAqIDEwMDApLCAtMSAqIHR4X3NwZWVkIC8gKDEwMDAgKiAxMDAwKSdcbiAgICAgICMgZGVjb3JhdG9yICA6IGdyYXBoX3ZhbHVlX2RlY29yYXRvcnMubmV0d29ya19yYXRlXG4gICAgLFxuICAgICAgdmFsdWVfdHlwZSA6ICdjcmMnXG4gICAgICB0aXRsZSAgICAgIDogdHJhbnNsYXRlKCdncmFwaC52YWx1ZS50eXBlLmNyYycpXG4gICAgLFxuICAgICAgdmFsdWVfdHlwZSA6ICdkcm9wcydcbiAgICAgIHRpdGxlICAgICAgOiB0cmFuc2xhdGUoJ2dyYXBoLnZhbHVlLnR5cGUuZHJvcHMnKVxuICAgIF1cblxuICAgICMg0YLQuNC/INCz0YDQsNGE0LjQutCwINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgIyAo0YLQtdC+0YDQtdGC0LjRh9C10YHQutC4INGC0LDQutC+0LUg0LzQvtC20L3QviDRhdGA0LDQvdC40YLRjCDQsiBsb2NhbFN0b3JhZ2UpXG4gICAgcG9ydF9ncmFwaF90eXBlOiAwXG4gICAgcnVsZV9ncmFwaF90eXBlOiAwXG5cbiAgICAjINC90LDRgdGC0YDQvtC50LrQuCDQstC90LXRiNC90LXQs9C+INCy0LjQtNCwINCz0YDQsNGE0LjQutCwICjQvtGC0YHRgtGD0L/RiylcbiAgICBvcHRpb25zOlxuICAgICAgbWFyZ2luOlxuICAgICAgICB0b3AgICAgOiAyMFxuICAgICAgICByaWdodCAgOiA1MFxuICAgICAgICBib3R0b20gOiAzMFxuICAgICAgICBsZWZ0ICAgOiAxNDBcblxuICAgICMg0YLQtdC60YPRidC40Lkgcm9sbC11cFxuICAgIHJvbGx1cDogMFxuXG4gICAgIyDQstC60LvRjtGH0LjRgtGMINCz0YDQsNGE0LjQuiwg0YXQtywg0YfRgtC+INGC0LDQutC+0LVcbiAgICBlbmFibGU6IHllc1xuXG4gICAgIyDQv9C+0LrQsNC30YvQstCw0YLRjCDQu9C4INCz0YDQsNGE0LjQulxuICAgIHNob3c6IG5vXG5cbiAgICAjINCz0YDQsNGE0LjQuiDQtNC70Y8g0L/RgNCw0LLQuNC70LAgKNC90LAg0Y3QutGA0LDQvdC1INC/0YDQsNCy0LjQuylcbiAgICBmb3JfcnVsZTogKGNvbnRhaW5lciwgcnVsZSkgLT5cbiAgICAgIEdyYXBoLnJ1bGUgPSBydWxlXG5cbiAgICAgICMg0LfQsNC/0L7Qu9C90LjRgtGMINC/0L7RgNGC0YssINC/0L7QutCw0LfRi9Cy0LDQtdC80YvQtSDQvdCwINGN0YLQvtC8INCz0YDQsNGE0LjQutC1XG4gICAgICBHcmFwaC5wb3J0cyA9IHt9XG5cbiAgICAgICMgIyDQv9C+0LrQsNC30YvQstCw0YLRjCDQvdCwINCz0YDQsNGE0LjQutC1INCy0YXQvtC00L3Ri9C1INC/0L7RgNGC0Ysg0L/RgNCw0LLQuNC70LBcbiAgICAgICMgZm9yIHBvcnQgaW4gcnVsZS5pbnB1dHNcbiAgICAgICMgICBHcmFwaC5wb3J0c1twb3J0LmlkXSA9IHNob3c6IHllc1xuXG4gICAgICAjICMg0L/QvtC60LDQt9GL0LLQsNGC0Ywg0L3QsCDQs9GA0LDRhNC40LrQtSDQstGL0YXQvtC00L3Ri9C1INC/0L7RgNGC0Ysg0L/RgNCw0LLQuNC70LBcbiAgICAgICMgZm9yIHBvcnQgaW4gcnVsZS5vdXRwdXRzXG4gICAgICAjICAgR3JhcGgucG9ydHNbcG9ydC5pZF0gPSBzaG93OiB5ZXNcblxuICAgICAgIyDQutCw0LrQuNC1INC/0L7RgNGC0Ysg0YLQtdC+0YDQtdGC0LjRh9C10YHQutC4INCy0L7Qt9C80L7QttC90L4g0LLRi9Cy0LXRgdGC0Lgg0L3QsCDRjdGC0L7QvCDQs9GA0LDRhNC40LrQtSAtINCy0YHQtVxuICAgICAgR3JhcGgucG9ydHMgPSB7fVxuICAgICAgZm9yIHBvcnRfaWQgaW4gWzEuLlBvcnQuY291bnRdXG4gICAgICAgIEdyYXBoLnBvcnRzW3BvcnRfaWRdID0gXG4gICAgICAgICAgc2hvd19pbjogISEocnVsZS5pbnB1dHMuZmlsdGVyKChpbnB1dCkgLT4gaW5wdXQuaWQgPT0gcG9ydF9pZCkubGVuZ3RoKVxuICAgICAgICAgIHNob3dfb3V0OiAhIShydWxlLm91dHB1dHMuZmlsdGVyKChvdXRwdXQpIC0+IG91dHB1dC5pZCA9PSBwb3J0X2lkKS5sZW5ndGgpXG5cbiAgICAgICMg0L/QvtC60LDQt9GL0LLQsNGC0Ywg0LPRgNCw0YTQuNC6XG4gICAgICBHcmFwaC5zaG93ID0geWVzXG4gICAgICAjINGB0YPQvNC80LjRgNC+0LLQsNGC0Ywg0LvQuCDQstGF0L7QtNGP0YnQuNC5INC4INC40YHRhdC+0LTRj9GJ0LjQuSDRgtGA0LDRhNC40Log0L/QviDQstGB0LXQvCDQv9C+0YDRgtCw0LxcbiAgICAgIEdyYXBoLnN1bW1hcml6ZSA9IG5vXG5cbiAgICAgICMg0YXQtywg0LfQsNGH0LXQvCDQt9C00LXRgdGMINC/0YDQuNGB0LLQsNC40LLQsNC90LjQtSBudWxsJ9CwICjQv9C+0LrQsCDQvtGB0YLQsNCy0LvRjilcbiAgICAgIEdyYXBoLnRzZyA9IG51bGxcbiAgICAgICMgdGltZSBzZXJpZXMgZ3JhcGggKNGA0LjRgdC+0LLQsNC70LrQsCDQs9GA0LDRhNC40LrQsClcbiAgICAgIEdyYXBoLnRzZyA9IG5ldyBUU0coY29udGFpbmVyLCBHcmFwaC5vcHRpb25zKVxuXG4gICAgICAjINC+0L/RgNC10LTQtdC70LjRgtGMINGG0LLQtdGC0L7QstGD0Y4g0YHRhdC10LzRgyAo0LrQvtC70LjRh9C10YHRgtCy0L4g0YDQsNC30L3Ri9GFINGG0LLQtdGC0L7QsiksXG4gICAgICAjINC/0YDQuNCy0Y/Qt9Cw0LIg0LrQsNC20LTRi9C5INGG0LLQtdGCINC6INC+0L/RgNC10LTQtdC70ZHQvdC90L7QvNGDINC90L7QvNC10YDRgyDQv9C+0YDRgtCwICjQvdCwINC/0L7RgdGC0L7Rj9C90L3QvtC5INC+0YHQvdC+0LLQtSlcbiAgICAgIGNvbG9yX2RvbWFpbiA9IE9iamVjdC5rZXlzKEdyYXBoLnBvcnRzKS5tYXAoKGlkKSAtPiBcInBvcnQje2lkfVwiKVxuICAgICAgY29sb3JfZG9tYWluLnB1c2goJ0luJylcbiAgICAgIGNvbG9yX2RvbWFpbi5wdXNoKCdPdXQnKVxuICAgICAgR3JhcGgudHNnLmNvbG9yRG9tYWluID0gY29sb3JfZG9tYWluXG5cbiAgICAgICMgY29uc29sZS5sb2coJyYmIENvbG9yIGRvbWFpbicsIGNvbG9yX2RvbWFpbilcblxuICAgICAgIyDQvdCw0YDQuNGB0L7QstCw0YLRjCDQs9GA0LDRhNC40LpcbiAgICAgIEdyYXBoLmRyYXcoKVxuXG4gICAgIyDQs9GA0LDRhNC40Log0LTQu9GPINC/0L7RgNGC0L7QsiAo0L3QsCDRjdC60YDQsNC90LUg0L/QvtGA0YLQvtCyKVxuICAgIGZvcl9wb3J0czogKGNvbnRhaW5lcikgLT5cbiAgICAgICMg0L3QtSDQtNC70Y8g0L/RgNCw0LLQuNC70LBcbiAgICAgIEdyYXBoLnJ1bGUgPSBub1xuICAgICAgIyDQvdC1INCz0YDQsNGE0LjQuiDQv9GA0LDQstC40LvQsCwg0L/QvtGN0YLQvtC80YMg0L3QtSDRgdGD0LzQvNC40YDQvtCy0LDRgtGMINC/0L4g0LLRgdC10Lwg0L/QvtGA0YLQsNC8XG4gICAgICBHcmFwaC5zdW1tYXJpemUgPSBub1xuICAgICAgIyDRhdC3XG4gICAgICBHcmFwaC5lbmFibGUgPSB5ZXNcbiAgICAgICMg0L3QtSDQv9C+0LrQsNC30YvQstCw0YLRjCDQs9GA0LDRhNC40LpcbiAgICAgIEdyYXBoLnNob3cgPSBub1xuXG4gICAgICAjINC60LDQutC40LUg0L/QvtGA0YLRiyDRgtC10L7RgNC10YLQuNGH0LXRgdC60Lgg0LLQvtC30LzQvtC20L3QviDQstGL0LLQtdGB0YLQuCDQvdCwINGN0YLQvtC8INCz0YDQsNGE0LjQutC1IC0g0LLRgdC1XG4gICAgICBHcmFwaC5wb3J0cyA9IHt9XG4gICAgICBmb3IgcG9ydF9pZCBpbiBbMS4uUG9ydC5jb3VudF1cbiAgICAgICAgR3JhcGgucG9ydHNbcG9ydF9pZF0gPSBzaG93OiBub1xuXG4gICAgICAjIHRpbWUgc2VyaWVzIGdyYXBoICjRgNC40YHQvtCy0LDQu9C60LAg0LPRgNCw0YTQuNC60LApXG4gICAgICBHcmFwaC50c2cgPSBuZXcgVFNHKGNvbnRhaW5lciwgR3JhcGgub3B0aW9ucylcblxuICAgICAgIyDQvtC/0YDQtdC00LXQu9C40YLRjCDRhtCy0LXRgtC+0LLRg9GOINGB0YXQtdC80YMgKNC60L7Qu9C40YfQtdGB0YLQstC+INGA0LDQt9C90YvRhSDRhtCy0LXRgtC+0LIpLFxuICAgICAgIyDQv9GA0LjQstGP0LfQsNCyINC60LDQttC00YvQuSDRhtCy0LXRgiDQuiDQvtC/0YDQtdC00LXQu9GR0L3QvdC+0LzRgyDQvdC+0LzQtdGA0YMg0L/QvtGA0YLQsCAo0L3QsCDQv9C+0YHRgtC+0Y/QvdC90L7QuSDQvtGB0L3QvtCy0LUpXG4gICAgICBHcmFwaC50c2cuY29sb3JEb21haW4gPSBPYmplY3Qua2V5cyhHcmFwaC5wb3J0cykubWFwKChpZCkgLT4gXCJwb3J0I3tpZH1cIilcblxuICAgICMg0YDQuNGB0YPQtdGCINCz0YDQsNGE0LjQuiDRgSDQvdGD0LbQvdGL0Lwg0LfQsNCz0L7Qu9C+0LLQutC+0LxcbiAgICBkcmF3OiAodGl0bGUpIC0+XG4gICAgICBHcmFwaC50c2cuY2xlYXIoKVxuICAgICAgIyDQvdCw0LHQvtGAINC40LcgaWQg0LLRgdC10YUg0L/QvtGA0YLQvtCyLCDQv9C+0LrQsNC30YvQstCw0LXQvNGL0YUg0L3QsCDRjdGC0L7QvCDQs9GA0LDRhNC40LrQtVxuICAgICAgcG9ydF9pZHMgPSBbXVxuICAgICAgZm9yIHBvcnRfaWQsIHZhbHVlIG9mIEdyYXBoLnBvcnRzXG4gICAgICAgIGlmIHZhbHVlLnNob3cgfHwgdmFsdWUuc2hvd19pbiB8fCB2YWx1ZS5zaG93X291dFxuICAgICAgICAgIHBvcnRfaWRzLnB1c2gocG9ydF9pZClcblxuICAgICAgIyDQstGL0LHRgNCw0L3QvdGL0LkgKNCz0LvQvtCx0LDQu9GM0L3Ri9C5INC00LvRjyDQstGB0LXQs9C+INC/0YDQuNC70L7QttC10L3QuNGPKSDRgtC40L8g0LPRgNCw0YTQuNC60LAsINC60L7RgtC+0YDRi9C5INC90LDRgNC40YHQvtCy0LDRgtGMXG4gICAgICAjICjRgtC10L7RgNC10YLQuNGH0LXRgdC60Lgg0YLQsNC60L7QtSDQvNC+0LbQvdC+INGF0YDQsNC90LjRgtGMINCyIGxvY2FsU3RvcmFnZSlcbiAgICAgIGdyYXBoX3R5cGUgPSBpZiBHcmFwaC5ydWxlXG4gICAgICAgIEdyYXBoLnJ1bGVfZ3JhcGhfdHlwZXNbR3JhcGgucnVsZV9ncmFwaF90eXBlXVxuICAgICAgZWxzZVxuICAgICAgICBHcmFwaC5wb3J0X2dyYXBoX3R5cGVzW0dyYXBoLnBvcnRfZ3JhcGhfdHlwZV1cblxuICAgICAgIyDQv9GA0LXRhNC40LrRgSDQvdCw0LfQstCw0L3QuNGPIHRpbWUgc2VyaWVzINCy0YvQsdGA0LDQvdC90L7Qs9C+IHJvbGwtdXAn0LBcbiAgICAgIHJvbGx1cF9wcmVmaXggPSBHcmFwaC5yb2xsdXBzW0dyYXBoLnJvbGx1cF0ucHJlZml4XG5cbiAgICAgICMg0LvQuNCx0L4g0LLRi9GB0YfQuNGC0YvQstCw0YLRjCDQt9C90LDRh9C10L3QuNGPINCz0YDQsNGE0LjQutCwINC/0L4g0YTQvtGA0LzRg9C70LUg0LjQtyDQt9C90LDRh9C10L3QuNC5IHBvaW50J9C+0LIsXG4gICAgICAjINC70LjQsdC+INCx0YDQsNGC0Ywg0LIg0LrQsNGH0LXRgdGC0LLQtSDQt9C90LDRh9C10L3QuNGPINCz0YDQsNGE0LjQutCwINC+0LTQvdC+INC40Lcg0L/QvtC70LXQuSBwb2ludCfQsFxuICAgICAgdmFsdWVfdHlwZSA9IGlmIGdyYXBoX3R5cGUuZm9ybXVsYVxuICAgICAgICBncmFwaF90eXBlLmZvcm11bGFcbiAgICAgIGVsc2VcbiAgICAgICAgZ3JhcGhfdHlwZS52YWx1ZV90eXBlXG5cbiAgICAgICMgY29uc29sZS5sb2coJystLScsIHBvcnRfaWRzLCBHcmFwaC5wb3J0cylcbiAgICAgICMgY29uc29sZS5sb2cgJHJvb3RTY29wZS5jb25maWd1cmF0aW9uXG5cbiAgICAgICMg0LXRgdC70Lgg0LfQsNC00LDQvSDQt9Cw0LPQvtC70L7QstC+0Log0LPRgNCw0YTQuNC60LAsINGC0L4g0LLRi9Cy0LXRgdGC0Lgg0LXQs9C+INC90LAg0LPRgNCw0YTQuNC60LVcbiAgICAgIEdyYXBoLnRzZy50aXRsZSA9IHRpdGxlIHx8IGdyYXBoX3R5cGUudW5pdHMgfHwgJyAnXG5cbiAgICAgICMg0LTQsNC90L3Ri9C1INC00L7RgdGC0YPQv9CwINC6IEluZmx1eERCICjQvdCw0LfQstCw0L3QuNC1IHRpbWUgc2VyaWVzLCDQuNC80Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDQv9Cw0YDQvtC70YwsIC4uLilcbiAgICAgIGNvbmZpZyA9ICRyb290U2NvcGUuY29uZmlndXJhdGlvbi5JbmZsdXhEQlxuXG4gICAgICAjINC10YHQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8INC90LUg0LLRi9Cx0YDQsNC9INC90Lgg0L7QtNC40L0g0L/QvtGA0YIg0LTQu9GPINC/0L7QutCw0LfQsCAtINC90LjRh9C10LPQviDQvdC1INGA0LjRgdC+0LLQsNGC0Ywg0L3QsCDQs9GA0LDRhNC40LrQtVxuICAgICAgaWYgcG9ydF9pZHMuaXNfZW1wdHkoKVxuICAgICAgICByZXR1cm4gR3JhcGgudHNnLmNsZWFyKClcblxuICAgICAgIyDQt9Cw0L/RgNC+0YEg0Log0LHQsNC30LUg0LTQsNC90L3Ri9GFIEluZmx1eERCXG4gICAgICBxdWVyeSA9IFwiU0VMRUNUICN7dmFsdWVfdHlwZX0gZnJvbSAje3JvbGx1cF9wcmVmaXh9cG9ydCN7cG9ydF9pZHMuam9pbignLCAnICsgcm9sbHVwX3ByZWZpeCArICdwb3J0Jyl9IExJTUlUIDUwMFwiXG4gICAgICAjIGQzLmpzb24gXCJodHRwczovLyN7d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lfToje2NvbmZpZy5zc2xfcG9ydH0vZGIvI3tjb25maWcuZGF0YWJhc2V9L3Nlcmllcz91PSN7Y29uZmlnLnVzZXJzLnJlYWRfb25seS51c2VybmFtZX0mcD0je2NvbmZpZy51c2Vycy5yZWFkX29ubHkucGFzc3dvcmR9JnE9I3tlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfVwiLCAoZXJyLCBkYXRhKSAtPlxuICAgICAgIyBmb3IgSW5mbHV4REIgMC45OlxuICAgICAgIyBkMy5qc29uIFwiL2luZmx1eGRiL3F1ZXJ5P2RiPSN7Y29uZmlnLmRhdGFiYXNlfSZ1PSN7Y29uZmlnLnVzZXJzLnJlYWRfb25seS51c2VybmFtZX0mcD0je2NvbmZpZy51c2Vycy5yZWFkX29ubHkucGFzc3dvcmR9JnE9I3tlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfVwiLCAoZXJyb3IsIHJlc3VsdCkgLT5cbiAgICAgIGQzLmpzb24gXCIvaW5mbHV4ZGIvZGIvI3tjb25maWcuZGF0YWJhc2V9L3Nlcmllcz91PSN7Y29uZmlnLnVzZXJzLnJlYWRfb25seS51c2VybmFtZX0mcD0je2NvbmZpZy51c2Vycy5yZWFkX29ubHkucGFzc3dvcmR9JnE9I3tlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfVwiLCAoZXJyb3IsIHJlc3VsdCkgLT5cbiAgICAgICAgIyBodHRwczovL2luZmx1eGRiLmNvbS9kb2NzL3YwLjkvZ3VpZGVzL3F1ZXJ5aW5nX2RhdGEuaHRtbFxuICAgICAgICAjICjQtNC70Y8gMC44KSByZXN1bHQgLSDRjdGC0L4g0LzQsNGB0YHQuNCyICjQv9C+INC+0LTQvdC+0LzRgyDRjdC70LXQvNC10L3RgtGDINC00LvRjyDQutCw0LbQtNC+0LkgdGltZSBzZXJpZXMpINC+0LHRitC10LrRgtC+0LIg0LLQuNC00LA6XG4gICAgICAgICMgeyBuYW1lOiBcInRpbWUgc2VyaWVzIG5hbWVcIiwgY29sdW1uczogW3RpbWUsIHNlcXVlbmNlIG51bWJlciwgdmFsdWVdLCBwb2ludHM6IFtbXSwgW10sIC4uLl0gfVxuICAgICAgICBsb2cuaW5mbygncG9ydHMnLCBwb3J0X2lkcywgJ3Jlc3VsdCcsIHJlc3VsdClcblxuICAgICAgICBpZiBlcnJvclxuICAgICAgICAgIGxvZy5lcnJvcignRXJyb3IgcXVlcnlpbmcgSW5mbHV4REInLCBlcnJvcilcbiAgICAgICAgICBHcmFwaC50c2cuY2xlYXIoKVxuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBpZiBHcmFwaC5ydWxlXG4gICAgICAgICAgICAjINCy0LfRj9GC0Ywg0LTQsNC90L3Ri9C1INGC0L7Qu9GM0LrQviDQtNC70Y8g0LLRi9Cx0YDQsNC90L3Ri9GFINCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7QslxuICAgICAgICAgICAgaW5wdXRzID0gR3JhcGgucnVsZS5pbnB1dHMuZmlsdGVyIChwb3J0KSAtPiBHcmFwaC5wb3J0c1twb3J0LmlkXS5zaG93X2luXG4gICAgICAgICAgICAjINCy0LfRj9GC0YwgaWQg0Y3RgtC40YUg0L/QvtGA0YLQvtCyXG4gICAgICAgICAgICBpbnB1dHMgPSBpbnB1dHMubWFwIChwb3J0KSAtPiBwb3J0LmlkXG5cbiAgICAgICAgICAgICMg0LLQt9GP0YLRjCDQtNCw0L3QvdGL0LUg0YLQvtC70YzQutC+INC00LvRjyDQstGL0LHRgNCw0L3QvdGL0YUg0LLRi9GF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LJcbiAgICAgICAgICAgIG91dHB1dHMgPSBHcmFwaC5ydWxlLm91dHB1dHMuZmlsdGVyIChwb3J0KSAtPiBHcmFwaC5wb3J0c1twb3J0LmlkXS5zaG93X291dFxuICAgICAgICAgICAgIyDQstC30Y/RgtGMIGlkINGN0YLQuNGFINC/0L7RgNGC0L7QslxuICAgICAgICAgICAgb3V0cHV0cyA9IG91dHB1dHMubWFwIChwb3J0KSAtPiBwb3J0LmlkXG5cbiAgICAgICAgICAgICMg0LLRi9GH0LvQtdC90LjRgtGMIGlkINC/0L7RgNGC0LAg0LjQtyDQvdCw0LfQstCw0L3QuNGPIHNlcmllc1xuICAgICAgICAgICAgZ2V0X3Nlcmllc19wb3J0X2lkID0gKHNlcmllcykgLT4gcGFyc2VJbnQoc2VyaWVzLm5hbWUucmVwbGFjZShyb2xsdXBfcHJlZml4LCAnJykucmVwbGFjZSgncG9ydCcsICcnKSlcblxuICAgICAgICAgICAgIyDRgtC1IHNlcmllcyDQtNC70Y8g0LLRhdC+0LTRj9GJ0LjRhSDQv9C+0YDRgtC+0LIsINC60L7RgtC+0YDRi9C1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQstGL0LHRgNCw0LtcbiAgICAgICAgICAgIGlucHV0ID0gcmVzdWx0LmZpbHRlciAoc2VyaWVzKSAtPlxuICAgICAgICAgICAgICAjINC10YHQu9C4INC/0L7RgNGCINCy0YvQsdGA0LDQvSDRgtC+0LvRjNC60L4g0L3QsCDQstGF0L7QtFxuICAgICAgICAgICAgICBpZiBpbnB1dHMuaGFzKGdldF9zZXJpZXNfcG9ydF9pZChzZXJpZXMpKSAmJiAhb3V0cHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpICYmIGdyYXBoX3R5cGUudmFsdWVfdHlwZSA9PSAncmF0ZSdcbiAgICAgICAgICAgICAgICBmb3IgcG9pbnQgaW4gc2VyaWVzLnBvaW50c1xuICAgICAgICAgICAgICAgICAgIyDRg9C00LDQu9GP0LXQvCDQs9GA0LDRhNC40LogVFhcbiAgICAgICAgICAgICAgICAgIHBvaW50LnNwbGljZShzZXJpZXMuY29sdW1ucy5pbmRleE9mKCdleHByMScpLDEpXG4gICAgICAgICAgICAgICAgIyDRg9C00LDQu9GP0LXQvCDQu9C40YjQvdGO0Y4g0LrQvtC70L7QvdC60YNcbiAgICAgICAgICAgICAgICBzZXJpZXMuY29sdW1ucy5zcGxpY2Uoc2VyaWVzLmNvbHVtbnMuaW5kZXhPZignZXhwcjEnKSwxKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgIGlucHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpXG5cbiAgICAgICAgICAgICMg0YLQtSBzZXJpZXMg0LTQu9GPINC40YHRhdC+0LTRj9GJ0LjRhSDQv9C+0YDRgtC+0LIsINC60L7RgtC+0YDRi9C1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQstGL0LHRgNCw0LtcbiAgICAgICAgICAgIG91dHB1dCA9IHJlc3VsdC5maWx0ZXIgKHNlcmllcykgLT5cbiAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQv9C+0YDRgiDQstGL0LHRgNCw0L0g0YLQvtC70YzQutC+INC90LAg0LLRi9GF0L7QtFxuICAgICAgICAgICAgICBpZiBvdXRwdXRzLmhhcyhnZXRfc2VyaWVzX3BvcnRfaWQoc2VyaWVzKSkgJiYgIWlucHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpICYmIGdyYXBoX3R5cGUudmFsdWVfdHlwZSA9PSAncmF0ZSdcbiAgICAgICAgICAgICAgICBmb3IgcG9pbnQgaW4gc2VyaWVzLnBvaW50c1xuICAgICAgICAgICAgICAgICAgIyDRg9C00LDQu9GP0LXQvCDQs9GA0LDRhNC40LogUlhcbiAgICAgICAgICAgICAgICAgIHBvaW50LnNwbGljZShzZXJpZXMuY29sdW1ucy5pbmRleE9mKCdleHByMCcpLDEpXG4gICAgICAgICAgICAgICAgIyDRg9C00LDQu9GP0LXQvCDQu9C40YjQvdGO0Y4g0LrQvtC70L7QvdC60YNcbiAgICAgICAgICAgICAgICBzZXJpZXMuY29sdW1ucy5zcGxpY2Uoc2VyaWVzLmNvbHVtbnMuaW5kZXhPZignZXhwcjAnKSwxKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgIG91dHB1dHMuaGFzKGdldF9zZXJpZXNfcG9ydF9pZChzZXJpZXMpKVxuXG4gICAgICAgICAgICBpZiBHcmFwaC5zdW1tYXJpemVcblxuICAgICAgICAgICAgICAjINC+0LHRidC40Lkg0LLRhdC+0LTRj9GJ0LjQuSDRgtGA0LDRhNC40LpcbiAgICAgICAgICAgICAgIyAo0LzQsNGB0YHQuNCyINC00LvRjyBEMywg0YHQvtGB0YLQvtGP0YnQuNC5INC40Lcg0LzQsNGB0YHQuNCy0L7QsiDQstC40LTQsCBbdGltZXN0YW1wLCAwLCBzdW0odmFsdWVzKV0pXG4gICAgICAgICAgICAgIHRvdGFsX2lucHV0ID0gR3JhcGgudHNnLnN1bVBvaW50cyhpbnB1dCxpZiBncmFwaF90eXBlLnZhbHVlX3R5cGUgPT0gJ3JhdGUnIHRoZW4gJ2V4cHIwJyBlbHNlIGdyYXBoX3R5cGUudmFsdWVfdHlwZSlcblxuICAgICAgICAgICAgICAjINC+0LHRidC40Lkg0LjRgdGF0L7QtNGP0YnQuNC5INGC0YDQsNGE0LjQulxuICAgICAgICAgICAgICAjICjQvNCw0YHRgdC40LIg0LTQu9GPIEQzLCDRgdC+0YHRgtC+0Y/RidC40Lkg0LjQtyDQvNCw0YHRgdC40LLQvtCyINCy0LjQtNCwIFt0aW1lc3RhbXAsIDAsIHN1bSh2YWx1ZXMpXSlcbiAgICAgICAgICAgICAgdG90YWxfb3V0cHV0ID0gR3JhcGgudHNnLnN1bVBvaW50cyhvdXRwdXQsaWYgZ3JhcGhfdHlwZS52YWx1ZV90eXBlID09ICdyYXRlJyB0aGVuICdleHByMScgZWxzZSBncmFwaF90eXBlLnZhbHVlX3R5cGUpXG5cbiAgICAgICAgICAgICAgIyAjINC10YHQu9C4INC10YHRgtGMINC60LDQutC+0Lkt0L3QuNCx0YPQtNGMIFwi0L/QvtGB0YIg0L/RgNC+0YbQtdGB0YHQuNC90LNcIiDQtNCw0L3QvdGL0YUgKNC90LDQv9GA0LjQvNC10YAsINC+0LrRgNGD0LPQu9C10L3QuNC1KVxuICAgICAgICAgICAgICAjIGlmIGdyYXBoX3R5cGUuZGVjb3JhdG9yXG5cbiAgICAgICAgICAgICAgIyAgIGZvciBlbGVtZW50IGluIHRvdGFsX2lucHV0XG4gICAgICAgICAgICAgICMgICAgICMgZWxlbWVudFsyXSA9XG4gICAgICAgICAgICAgICMgICAgIGdyYXBoX3R5cGUuZGVjb3JhdG9yKGVsZW1lbnRbMl0pXG5cbiAgICAgICAgICAgICAgIyAgIGZvciBlbGVtZW50IGluIHRvdGFsX291dHB1dFxuICAgICAgICAgICAgICAjICAgICAjIGVsZW1lbnRbMl0gPVxuICAgICAgICAgICAgICAjICAgICBncmFwaF90eXBlLmRlY29yYXRvcihlbGVtZW50WzJdKVxuXG4gICAgICAgICAgICAgICMg0LrQsNC60LjQtSDQs9GA0LDRhNC40LrQuCDQvdCw0YDQuNGB0L7QstCw0YLRjFxuICAgICAgICAgICAgICBncmFwaHMgPSBbXVxuXG4gICAgICAgICAgICAgICMg0LXRgdC70Lgg0LXRgdGC0Ywg0LLRhdC+0LTRj9GJ0LjQuSDRgtGA0LDRhNC40LpcbiAgICAgICAgICAgICAgaWYgdG90YWxfaW5wdXRcbiAgICAgICAgICAgICAgICBncmFwaHMucHVzaFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ0luJ1xuICAgICAgICAgICAgICAgICAgcG9pbnRzOiB0b3RhbF9pbnB1dFxuXG4gICAgICAgICAgICAgICMg0LXRgdC70Lgg0LXRgdGC0Ywg0LjRgdGF0L7QtNGP0YnQuNC5INGC0YDQsNGE0LjQulxuICAgICAgICAgICAgICBpZiB0b3RhbF9vdXRwdXRcbiAgICAgICAgICAgICAgICBncmFwaHMucHVzaFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ091dCdcbiAgICAgICAgICAgICAgICAgIHBvaW50czogdG90YWxfb3V0cHV0XG5cbiAgICAgICAgICAgICAgIyDQvdCw0YDQuNGB0L7QstCw0YLRjCDQs9GA0LDRhNC40LrQuFxuICAgICAgICAgICAgICBHcmFwaC50c2cuYmluZChncmFwaHMpXG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgIyAjINC10YHQu9C4INC10YHRgtGMINC60LDQutC+0Lkt0L3QuNCx0YPQtNGMIFwi0L/QvtGB0YIg0L/RgNC+0YbQtdGB0YHQuNC90LNcIiDQtNCw0L3QvdGL0YUgKNC90LDQv9GA0LjQvNC10YAsINC+0LrRgNGD0LPQu9C10L3QuNC1KVxuICAgICAgICAgICAgICAjIGlmIGdyYXBoX3R5cGUuZGVjb3JhdG9yXG4gICAgICAgICAgICAgICMgICBmb3Igc2VyaWVzIGluIHJlc3VsdFxuICAgICAgICAgICAgICAjICAgICBmb3IgcG9pbnQgaW4gc2VyaWVzLnBvaW50c1xuICAgICAgICAgICAgICAjICAgICAgICMgcG9pbnRbMl0gPVxuICAgICAgICAgICAgICAjICAgICAgIGdyYXBoX3R5cGUuZGVjb3JhdG9yKHBvaW50WzJdKVxuXG4gICAgICAgICAgICAgICMg0L3QsNGA0LjRgdC+0LLQsNGC0Ywg0LPRgNCw0YTQuNC60LhcbiAgICAgICAgICAgICAgR3JhcGgudHNnLmJpbmQocmVzdWx0KVxuXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgIyAjINC10YHQu9C4INC10YHRgtGMINC60LDQutC+0Lkt0L3QuNCx0YPQtNGMIFwi0L/QvtGB0YIg0L/RgNC+0YbQtdGB0YHQuNC90LNcIiDQtNCw0L3QvdGL0YUgKNC90LDQv9GA0LjQvNC10YAsINC+0LrRgNGD0LPQu9C10L3QuNC1KVxuICAgICAgICAgICAgIyBpZiBncmFwaF90eXBlLmRlY29yYXRvclxuICAgICAgICAgICAgIyAgIGZvciBzZXJpZXMgaW4gcmVzdWx0XG4gICAgICAgICAgICAjICAgICBmb3IgcG9pbnQgaW4gc2VyaWVzLnBvaW50c1xuICAgICAgICAgICAgIyAgICAgICAjIHBvaW50WzJdID1cbiAgICAgICAgICAgICMgICAgICAgZ3JhcGhfdHlwZS5kZWNvcmF0b3IocG9pbnRbMl0pXG5cbiAgICAgICAgICAgICMg0L3QsNGA0LjRgdC+0LLQsNGC0Ywg0LPRgNCw0YTQuNC60LhcbiAgICAgICAgICAgIEdyYXBoLnRzZy5iaW5kKHJlc3VsdClcblxuICAgICAgICAjINC/0YDQvtC60YDRg9GC0LjRgtGMINC90LAg0L3QsNGH0LDQu9C+INGB0YLRgNCw0L3QuNGG0YssINC10YHQu9C4INC/0YDQvtC60YDRg9GH0LXQvdC+INCx0L7Qu9C10LUgNTAwINC/0LjQutGB0LXQu9C10Lkg0L/QviDQstGL0YHQvtGC0LUsXG4gICAgICAgICMg0Lgg0LXRgdC70Lgg0Y3RgtC+INCz0YDQsNGE0LjQuiwg0L3QsNGA0LjRgdC+0LLQsNC90L3Ri9C5INC00LvRjyDQv9GA0LDQstC40LvQsCAo0L3QsCDRgdGC0YDQsNC90LjRhtC1INC/0YDQsNCy0LjQuylcbiAgICAgICAgI1xuICAgICAgICAjICg1MDAg0L/QuNC60YHQtdC70LXQuSAtINGN0YLQviwg0LLQuNC00LjQvNC+LCDQv9GA0LjQvNC10YDQvdCw0Y8g0LLRi9GB0L7RgtCwINCz0YDQsNGE0LjQutCwKVxuICAgICAgICBzY3JvbGxfdG9wID0gKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5zY3JvbGxUb3ApIC0gKGRvY3VtZW50LmNsaWVudFRvcCB8fCAwKVxuICAgICAgICBpZiBHcmFwaC5ydWxlICYmIHNjcm9sbF90b3AgPiA1MDBcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMClcblxuICAgICMg0L/RgNC4INC90LDQttCw0YLQuNC4INC90LAg0LrQvdC+0L/QutGDINC+0LHQvdC+0LLQu9C10L3QuNGPINCz0YDQsNGE0LjQutCwXG4gICAgcmVmcmVzaDogLT5cbiAgICAgICMg0LfQsNC/0YPRgdGC0LjRgtGMINC60YDRg9GC0LjQu9C60YNcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVmcmVzaCBpJylcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9ICcgc3BpbidcblxuICAgICAgIyDRh9C10YDQtdC3INGB0LXQutGD0L3QtNGDINGD0LHRgNCw0YLRjCDRjdGC0YMg0LrRgNGD0YLQuNC70LrRg1xuICAgICAgdGltZXIgPSAkdGltZW91dCgtPlxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoLyBzcGluL2csICcnKVxuICAgICAgLCA1MDApXG5cbiAgICAgICMg0L/QtdGA0LXRgNC40YHQvtCy0LDRgtGMINCz0YDQsNGE0LjQuiDRgSDQvdC+0LLRi9C80Lgg0LTQsNC90L3Ri9C80LggKNC30LDQs9C+0LvQvtCy0L7QuiDQs9GA0LDRhNC40LrQsCDQvtGB0YLQsNCy0LjRgtGMINGC0LXQvCDQttC1KVxuICAgICAgR3JhcGguZHJhdygpIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnR3JhcGgnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkdGltZW91dCwgbG9nLCB0cmFuc2xhdGUsIFBvcnQpIHtcbiAgICB2YXIgR3JhcGg7XG4gICAgcmV0dXJuIEdyYXBoID0ge1xuICAgICAgdHNnOiBmYWxzZSxcbiAgICAgIHJ1bGU6IGZhbHNlLFxuICAgICAgc3VtbWFyaXplOiBmYWxzZSxcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgcG9ydHM6IHt9LFxuICAgICAgcm9sbHVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJlZml4OiAnMTBzLicsXG4gICAgICAgICAgdGl0bGU6IHRyYW5zbGF0ZSgnZ3JhcGgudGltZS5taW51dGVzJylcbiAgICAgICAgfSwge1xuICAgICAgICAgIHByZWZpeDogJzFoLicsXG4gICAgICAgICAgdGl0bGU6IHRyYW5zbGF0ZSgnZ3JhcGgudGltZS5ob3VycycpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBwcmVmaXg6ICcxZC4xaC4nLFxuICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2dyYXBoLnRpbWUuZGF5cycpXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBydWxlX2dyYXBoX3R5cGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZV90eXBlOiAncmF0ZScsXG4gICAgICAgICAgdGl0bGU6IHRyYW5zbGF0ZSgnZ3JhcGgudmFsdWUudHlwZS5yYXRlJyksXG4gICAgICAgICAgdW5pdHM6IHRyYW5zbGF0ZSgnbmV0d29yay5yYXRlLk1icHMnKSxcbiAgICAgICAgICBmb3JtdWxhOiAncnhfc3BlZWQgLyAoMTAwMCAqIDEwMDApLCAtMSAqIHR4X3NwZWVkIC8gKDEwMDAgKiAxMDAwKSdcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlX3R5cGU6ICdjcmMnLFxuICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2dyYXBoLnZhbHVlLnR5cGUuY3JjJylcbiAgICAgICAgfSwge1xuICAgICAgICAgIHZhbHVlX3R5cGU6ICdkcm9wcycsXG4gICAgICAgICAgdGl0bGU6IHRyYW5zbGF0ZSgnZ3JhcGgudmFsdWUudHlwZS5kcm9wcycpXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBwb3J0X2dyYXBoX3R5cGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZV90eXBlOiAncngvdHgnLFxuICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2dyYXBoLnZhbHVlLnR5cGUucmF0ZScpLFxuICAgICAgICAgIHVuaXRzOiB0cmFuc2xhdGUoJ25ldHdvcmsucmF0ZS5NYnBzJyksXG4gICAgICAgICAgZm9ybXVsYTogJ3J4X3NwZWVkIC8gKDEwMDAgKiAxMDAwKSwgLTEgKiB0eF9zcGVlZCAvICgxMDAwICogMTAwMCknXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZV90eXBlOiAnY3JjJyxcbiAgICAgICAgICB0aXRsZTogdHJhbnNsYXRlKCdncmFwaC52YWx1ZS50eXBlLmNyYycpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB2YWx1ZV90eXBlOiAnZHJvcHMnLFxuICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2dyYXBoLnZhbHVlLnR5cGUuZHJvcHMnKVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgcG9ydF9ncmFwaF90eXBlOiAwLFxuICAgICAgcnVsZV9ncmFwaF90eXBlOiAwLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBtYXJnaW46IHtcbiAgICAgICAgICB0b3A6IDIwLFxuICAgICAgICAgIHJpZ2h0OiA1MCxcbiAgICAgICAgICBib3R0b206IDMwLFxuICAgICAgICAgIGxlZnQ6IDE0MFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sbHVwOiAwLFxuICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgc2hvdzogZmFsc2UsXG4gICAgICBmb3JfcnVsZTogZnVuY3Rpb24oY29udGFpbmVyLCBydWxlKSB7XG4gICAgICAgIHZhciBjb2xvcl9kb21haW4sIGksIHBvcnRfaWQsIHJlZjtcbiAgICAgICAgR3JhcGgucnVsZSA9IHJ1bGU7XG4gICAgICAgIEdyYXBoLnBvcnRzID0ge307XG4gICAgICAgIEdyYXBoLnBvcnRzID0ge307XG4gICAgICAgIGZvciAocG9ydF9pZCA9IGkgPSAxLCByZWYgPSBQb3J0LmNvdW50OyAxIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IHBvcnRfaWQgPSAxIDw9IHJlZiA/ICsraSA6IC0taSkge1xuICAgICAgICAgIEdyYXBoLnBvcnRzW3BvcnRfaWRdID0ge1xuICAgICAgICAgICAgc2hvd19pbjogISEocnVsZS5pbnB1dHMuZmlsdGVyKGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBpbnB1dC5pZCA9PT0gcG9ydF9pZDtcbiAgICAgICAgICAgIH0pLmxlbmd0aCksXG4gICAgICAgICAgICBzaG93X291dDogISEocnVsZS5vdXRwdXRzLmZpbHRlcihmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5pZCA9PT0gcG9ydF9pZDtcbiAgICAgICAgICAgIH0pLmxlbmd0aClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIEdyYXBoLnNob3cgPSB0cnVlO1xuICAgICAgICBHcmFwaC5zdW1tYXJpemUgPSBmYWxzZTtcbiAgICAgICAgR3JhcGgudHNnID0gbnVsbDtcbiAgICAgICAgR3JhcGgudHNnID0gbmV3IFRTRyhjb250YWluZXIsIEdyYXBoLm9wdGlvbnMpO1xuICAgICAgICBjb2xvcl9kb21haW4gPSBPYmplY3Qua2V5cyhHcmFwaC5wb3J0cykubWFwKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIFwicG9ydFwiICsgaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBjb2xvcl9kb21haW4ucHVzaCgnSW4nKTtcbiAgICAgICAgY29sb3JfZG9tYWluLnB1c2goJ091dCcpO1xuICAgICAgICBHcmFwaC50c2cuY29sb3JEb21haW4gPSBjb2xvcl9kb21haW47XG4gICAgICAgIHJldHVybiBHcmFwaC5kcmF3KCk7XG4gICAgICB9LFxuICAgICAgZm9yX3BvcnRzOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICAgICAgdmFyIGksIHBvcnRfaWQsIHJlZjtcbiAgICAgICAgR3JhcGgucnVsZSA9IGZhbHNlO1xuICAgICAgICBHcmFwaC5zdW1tYXJpemUgPSBmYWxzZTtcbiAgICAgICAgR3JhcGguZW5hYmxlID0gdHJ1ZTtcbiAgICAgICAgR3JhcGguc2hvdyA9IGZhbHNlO1xuICAgICAgICBHcmFwaC5wb3J0cyA9IHt9O1xuICAgICAgICBmb3IgKHBvcnRfaWQgPSBpID0gMSwgcmVmID0gUG9ydC5jb3VudDsgMSA8PSByZWYgPyBpIDw9IHJlZiA6IGkgPj0gcmVmOyBwb3J0X2lkID0gMSA8PSByZWYgPyArK2kgOiAtLWkpIHtcbiAgICAgICAgICBHcmFwaC5wb3J0c1twb3J0X2lkXSA9IHtcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBHcmFwaC50c2cgPSBuZXcgVFNHKGNvbnRhaW5lciwgR3JhcGgub3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBHcmFwaC50c2cuY29sb3JEb21haW4gPSBPYmplY3Qua2V5cyhHcmFwaC5wb3J0cykubWFwKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgcmV0dXJuIFwicG9ydFwiICsgaWQ7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGRyYXc6IGZ1bmN0aW9uKHRpdGxlKSB7XG4gICAgICAgIHZhciBjb25maWcsIGdyYXBoX3R5cGUsIHBvcnRfaWQsIHBvcnRfaWRzLCBxdWVyeSwgcmVmLCByb2xsdXBfcHJlZml4LCB2YWx1ZSwgdmFsdWVfdHlwZTtcbiAgICAgICAgR3JhcGgudHNnLmNsZWFyKCk7XG4gICAgICAgIHBvcnRfaWRzID0gW107XG4gICAgICAgIHJlZiA9IEdyYXBoLnBvcnRzO1xuICAgICAgICBmb3IgKHBvcnRfaWQgaW4gcmVmKSB7XG4gICAgICAgICAgdmFsdWUgPSByZWZbcG9ydF9pZF07XG4gICAgICAgICAgaWYgKHZhbHVlLnNob3cgfHwgdmFsdWUuc2hvd19pbiB8fCB2YWx1ZS5zaG93X291dCkge1xuICAgICAgICAgICAgcG9ydF9pZHMucHVzaChwb3J0X2lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGhfdHlwZSA9IEdyYXBoLnJ1bGUgPyBHcmFwaC5ydWxlX2dyYXBoX3R5cGVzW0dyYXBoLnJ1bGVfZ3JhcGhfdHlwZV0gOiBHcmFwaC5wb3J0X2dyYXBoX3R5cGVzW0dyYXBoLnBvcnRfZ3JhcGhfdHlwZV07XG4gICAgICAgIHJvbGx1cF9wcmVmaXggPSBHcmFwaC5yb2xsdXBzW0dyYXBoLnJvbGx1cF0ucHJlZml4O1xuICAgICAgICB2YWx1ZV90eXBlID0gZ3JhcGhfdHlwZS5mb3JtdWxhID8gZ3JhcGhfdHlwZS5mb3JtdWxhIDogZ3JhcGhfdHlwZS52YWx1ZV90eXBlO1xuICAgICAgICBHcmFwaC50c2cudGl0bGUgPSB0aXRsZSB8fCBncmFwaF90eXBlLnVuaXRzIHx8ICcgJztcbiAgICAgICAgY29uZmlnID0gJHJvb3RTY29wZS5jb25maWd1cmF0aW9uLkluZmx1eERCO1xuICAgICAgICBpZiAocG9ydF9pZHMuaXNfZW1wdHkoKSkge1xuICAgICAgICAgIHJldHVybiBHcmFwaC50c2cuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBxdWVyeSA9IFwiU0VMRUNUIFwiICsgdmFsdWVfdHlwZSArIFwiIGZyb20gXCIgKyByb2xsdXBfcHJlZml4ICsgXCJwb3J0XCIgKyAocG9ydF9pZHMuam9pbignLCAnICsgcm9sbHVwX3ByZWZpeCArICdwb3J0JykpICsgXCIgTElNSVQgNTAwXCI7XG4gICAgICAgIHJldHVybiBkMy5qc29uKFwiL2luZmx1eGRiL2RiL1wiICsgY29uZmlnLmRhdGFiYXNlICsgXCIvc2VyaWVzP3U9XCIgKyBjb25maWcudXNlcnMucmVhZF9vbmx5LnVzZXJuYW1lICsgXCImcD1cIiArIGNvbmZpZy51c2Vycy5yZWFkX29ubHkucGFzc3dvcmQgKyBcIiZxPVwiICsgKGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSkpLCBmdW5jdGlvbihlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgdmFyIGdldF9zZXJpZXNfcG9ydF9pZCwgZ3JhcGhzLCBpbnB1dCwgaW5wdXRzLCBvdXRwdXQsIG91dHB1dHMsIHNjcm9sbF90b3AsIHRvdGFsX2lucHV0LCB0b3RhbF9vdXRwdXQ7XG4gICAgICAgICAgbG9nLmluZm8oJ3BvcnRzJywgcG9ydF9pZHMsICdyZXN1bHQnLCByZXN1bHQpO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgbG9nLmVycm9yKCdFcnJvciBxdWVyeWluZyBJbmZsdXhEQicsIGVycm9yKTtcbiAgICAgICAgICAgIEdyYXBoLnRzZy5jbGVhcigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoR3JhcGgucnVsZSkge1xuICAgICAgICAgICAgICBpbnB1dHMgPSBHcmFwaC5ydWxlLmlucHV0cy5maWx0ZXIoZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBHcmFwaC5wb3J0c1twb3J0LmlkXS5zaG93X2luO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaW5wdXRzID0gaW5wdXRzLm1hcChmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnQuaWQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBvdXRwdXRzID0gR3JhcGgucnVsZS5vdXRwdXRzLmZpbHRlcihmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdyYXBoLnBvcnRzW3BvcnQuaWRdLnNob3dfb3V0O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgb3V0cHV0cyA9IG91dHB1dHMubWFwKGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9ydC5pZDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGdldF9zZXJpZXNfcG9ydF9pZCA9IGZ1bmN0aW9uKHNlcmllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChzZXJpZXMubmFtZS5yZXBsYWNlKHJvbGx1cF9wcmVmaXgsICcnKS5yZXBsYWNlKCdwb3J0JywgJycpKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaW5wdXQgPSByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uKHNlcmllcykge1xuICAgICAgICAgICAgICAgIHZhciBpLCBsZW4sIHBvaW50LCByZWYxO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dHMuaGFzKGdldF9zZXJpZXNfcG9ydF9pZChzZXJpZXMpKSAmJiAhb3V0cHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpICYmIGdyYXBoX3R5cGUudmFsdWVfdHlwZSA9PT0gJ3JhdGUnKSB7XG4gICAgICAgICAgICAgICAgICByZWYxID0gc2VyaWVzLnBvaW50cztcbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSByZWYxW2ldO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5zcGxpY2Uoc2VyaWVzLmNvbHVtbnMuaW5kZXhPZignZXhwcjEnKSwgMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzZXJpZXMuY29sdW1ucy5zcGxpY2Uoc2VyaWVzLmNvbHVtbnMuaW5kZXhPZignZXhwcjEnKSwgMSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgb3V0cHV0ID0gcmVzdWx0LmZpbHRlcihmdW5jdGlvbihzZXJpZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgbGVuLCBwb2ludCwgcmVmMTtcbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0cy5oYXMoZ2V0X3Nlcmllc19wb3J0X2lkKHNlcmllcykpICYmICFpbnB1dHMuaGFzKGdldF9zZXJpZXNfcG9ydF9pZChzZXJpZXMpKSAmJiBncmFwaF90eXBlLnZhbHVlX3R5cGUgPT09ICdyYXRlJykge1xuICAgICAgICAgICAgICAgICAgcmVmMSA9IHNlcmllcy5wb2ludHM7XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ID0gcmVmMVtpXTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQuc3BsaWNlKHNlcmllcy5jb2x1bW5zLmluZGV4T2YoJ2V4cHIwJyksIDEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc2VyaWVzLmNvbHVtbnMuc3BsaWNlKHNlcmllcy5jb2x1bW5zLmluZGV4T2YoJ2V4cHIwJyksIDEpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXRzLmhhcyhnZXRfc2VyaWVzX3BvcnRfaWQoc2VyaWVzKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoR3JhcGguc3VtbWFyaXplKSB7XG4gICAgICAgICAgICAgICAgdG90YWxfaW5wdXQgPSBHcmFwaC50c2cuc3VtUG9pbnRzKGlucHV0LCBncmFwaF90eXBlLnZhbHVlX3R5cGUgPT09ICdyYXRlJyA/ICdleHByMCcgOiBncmFwaF90eXBlLnZhbHVlX3R5cGUpO1xuICAgICAgICAgICAgICAgIHRvdGFsX291dHB1dCA9IEdyYXBoLnRzZy5zdW1Qb2ludHMob3V0cHV0LCBncmFwaF90eXBlLnZhbHVlX3R5cGUgPT09ICdyYXRlJyA/ICdleHByMScgOiBncmFwaF90eXBlLnZhbHVlX3R5cGUpO1xuICAgICAgICAgICAgICAgIGdyYXBocyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICh0b3RhbF9pbnB1dCkge1xuICAgICAgICAgICAgICAgICAgZ3JhcGhzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSW4nLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IHRvdGFsX2lucHV0XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRvdGFsX291dHB1dCkge1xuICAgICAgICAgICAgICAgICAgZ3JhcGhzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnT3V0JyxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiB0b3RhbF9vdXRwdXRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBHcmFwaC50c2cuYmluZChncmFwaHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEdyYXBoLnRzZy5iaW5kKHJlc3VsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIEdyYXBoLnRzZy5iaW5kKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjcm9sbF90b3AgPSAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LnNjcm9sbFRvcCkgLSAoZG9jdW1lbnQuY2xpZW50VG9wIHx8IDApO1xuICAgICAgICAgIGlmIChHcmFwaC5ydWxlICYmIHNjcm9sbF90b3AgPiA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZWZyZXNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQsIHRpbWVyO1xuICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlZnJlc2ggaScpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnIHNwaW4nO1xuICAgICAgICB0aW1lciA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoLyBzcGluL2csICcnKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgcmV0dXJuIEdyYXBoLmRyYXcoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdHVUknLCAoJHJvb3RTY29wZSwgYXBpLCBTdGF0dXMsIHRyYW5zbGF0ZSwgUnVsZSwgUG9ydF92aWV3KSAtPlxuICBHVUkgPSBcbiAgICAjINCf0L7QutCw0LfRi9Cy0LDQtdGCINCyINGB0YLQsNGC0YPRgdC1INC60YDRg9Cz0LvRi9C5IFwi0L/RgNC+0LPRgNC10YHRgSDQsdCw0YBcIiDRgSDQvtGC0YHRh9GR0YLQvtC8INCy0YDQtdC80LXQvdC4INC00L4g0YHQvtC10LTQuNC90LXQvdC40Y8g0YEg0YPRgdGC0YDQvtC50YHRgtCy0L7QvC5cbiAgICAjINCi0LDQutC20LUg0LrQsNC20LTRg9GOINGB0LXQutGD0L3QtNGDINC/0YDQvtCx0YPQtdGCINGB0L7QtdC00LjQvdC40YLRjNGB0Y8g0YEg0YPRgdGC0YDQvtC50YHRgtCy0L7QvFxuICAgIHdhaXRfZm9yX2Nvbm5lY3Rpb246IChlc3RpbWF0ZWRfdGltZSwgbWVzc2FnZSwgb3B0aW9ucykgLT5cbiAgICAgIFxuICAgICAgaWYgbm90IGVzdGltYXRlZF90aW1lP1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlZmluZSBlc3RpbWF0ZWQgdGltZSBmb3IgcHJvZ3Jlc3MgYmFyJylcblxuICAgICAgaW5maW5pdGUgPSBlc3RpbWF0ZWRfdGltZSA9PSAwXG5cbiAgICAgIGNoZWNrX2ludGVydmFsID0gMSAjIGluIHNlY29uZHNcblxuICAgICAgJHJvb3RTY29wZS5vZmZsaW5lID0geWVzXG5cbiAgICAgICRyb290U2NvcGUud2FpdGluZ19mb3JfY29ubmVjdGlvbl9lbGFwc2VkID0gMFxuXG4gICAgICBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXBfdGltZW91dCA9IG51bGxcblxuICAgICAgaWYgaW5maW5pdGVcbiAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2VzdGltYXRlZCA9IEluZmluaXR5XG4gICAgICAgICRyb290U2NvcGUud2FpdGluZ19mb3JfY29ubmVjdGlvbl9sZWZ0ICAgICAgPSBJbmZpbml0eVxuICAgICAgZWxzZVxuICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fZXN0aW1hdGVkID0gZXN0aW1hdGVkX3RpbWVcbiAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2xlZnQgICAgICA9IGVzdGltYXRlZF90aW1lXG5cbiAgICAgICAgJHJvb3RTY29wZS5jb3VudGRvd24gPSB5ZXNcblxuICAgICAgICBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXAgPSAtPlxuICAgICAgICAgICRyb290U2NvcGUuY291bnRkb3duID0gbm9cbiAgICAgICAgICBTdGF0dXMuYnVzeSh0cmFuc2xhdGUoJ2RldmljZS5zdGF0dXMuY29ubmVjdGluZycpLCB7IHN0aWNreTogeWVzIH0pXG5cbiAgICAgICAgc2hvdWxkX2hhdmVfYWxyZWFkeV9iZWVuX3VwX3RpbWVvdXQgPSBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXAuZGVsYXkoZXN0aW1hdGVkX3RpbWUgKiAxMDAwKVxuXG4gICAgICAjINC/0YDQvtCy0LXRgNC60LAg0YHQvtC10LTQuNC90LXQvdC40Y9cbiAgICAgIHRlc3RfY29ubmVjdGlvbiA9IC0+XG4gICAgICAgICMgZm9yIHRlc3Rpbmc6XG4gICAgICAgICMgcmV0dXJuIG5ldyBQcm9taXNlIChyZXNvbHZlLCByZWplY3QpIC0+XG4gICAgICAgICMgICByZWplY3QoKVxuXG4gICAgICAgIGNvbW1hbmQgPSBzd2l0Y2ggb3B0aW9ucy50b1xuICAgICAgICAgIHdoZW4gJ2RldmljZScgdGhlbiAnZ2V0U3dpdGNoSW5mbydcbiAgICAgICAgICB3aGVuICdndWknICAgIHRoZW4gJ3V0aWxpdGllcy5waW5nJ1xuXG4gICAgICAgIGFwaS5jYWxsKGNvbW1hbmQpLnRoZW4gLT5cbiAgICAgICAgICAjINC10YHQu9C4INGB0L7QtdC00LjQvdC10L3QuNC1INGD0YHRgtCw0L3QvtCy0LvQtdC90L5cbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2hvdWxkX2hhdmVfYWxyZWFkeV9iZWVuX3VwX3RpbWVvdXQpIGlmIG5vdCBpbmZpbml0ZVxuICAgICAgICAgIFN0YXR1cy5pZGxlKClcbiAgICAgICAgICAkcm9vdFNjb3BlLmNvdW50ZG93biA9IG5vXG4gICAgICAgICAgJHJvb3RTY29wZS5vZmZsaW5lID0gbm9cblxuICAgICAgICAgICMg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQuNGC0Ywg0YHRgtGA0LDQvdC40YbRg1xuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG5cbiAgICAgICMg0L/RgNC+0LHQvtCy0LDRgtGMINGB0L7QtdC00LjQvdGP0YLRjNGB0Y8sINC/0L7QutCwINC90LUg0YHQvtC10LTQuNC90LjRgtGB0Y9cbiAgICAgIHRyeV91bnRpbF9zdWNjZWVkZWQgPSAoYWN0aW9uLCBwZXJpb2QpIC0+XG4gICAgICAgICMg0L/QvtC/0YDQvtCx0L7QstCw0YLRjCDQtdGJ0ZEg0YDQsNC3XG4gICAgICAgIHRyeV9hZ2FpbiA9ICh0cmllZF9hdCkgLT4gXG4gICAgICAgICAgZmFpbGVkX2F0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgICAgICB0aWNrLmRlbGF5KHBlcmlvZCAtIChmYWlsZWRfYXQgLSB0cmllZF9hdCkpXG5cbiAgICAgICAgIyDQv9C+0L/Ri9GC0LrQsCDRgdC+0LXQtNC40L3QtdC90LjRj1xuICAgICAgICB0aWNrID0gLT4gXG4gICAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2VsYXBzZWQgKz0gY2hlY2tfaW50ZXJ2YWxcblxuICAgICAgICAgICMg0L7QsdC90L7QstC40YLRjCDQvdCwINGN0LrRgNCw0L3QtSDQvtC20LjQtNCw0LXQvNC+0LUg0LLRgNC10LzRjyDRgdC+0LXQtNC40L3QtdC90LjRj1xuICAgICAgICAgIGlmIG5vdCBpbmZpbml0ZVxuICAgICAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2xlZnQgLT0gY2hlY2tfaW50ZXJ2YWxcbiAgICAgICAgICAgIGlmICRyb290U2NvcGUud2FpdGluZ19mb3JfY29ubmVjdGlvbl9sZWZ0IDwgMFxuICAgICAgICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fbGVmdCA9IC0xXG5cbiAgICAgICAgICAjINC/0L7Qv9GL0YLQutCwINGB0L7QtdC00LjQvdC10L3QuNGPXG4gICAgICAgICAgdHJpZWRfYXQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgIGFjdGlvbigpLmNhdGNoKC0+IHRyeV9hZ2Fpbih0cmllZF9hdCkpXG5cbiAgICAgICAgdGljaygpXG5cbiAgICAgIGlmIGluZmluaXRlXG4gICAgICAgIFN0YXR1cy5idXN5KG1lc3NhZ2UsIHsgc3RpY2t5OiB5ZXMgfSlcbiAgICAgIGVsc2VcbiAgICAgICAgU3RhdHVzLnByb2dyZXNzKG1lc3NhZ2UpXG5cbiAgICAgIGxhdW5jaCA9IC0+XG4gICAgICAgIHRyeV91bnRpbF9zdWNjZWVkZWQodGVzdF9jb25uZWN0aW9uLCBjaGVja19pbnRlcnZhbCAqIDEwMDApXG5cbiAgICAgICMg0L3QsCDQstGB0Y/QutC40Lkg0YHQu9GD0YfQsNC5LCDQt9Cw0LTQtdGA0LbQutCwXG4gICAgICBsYXVuY2guZGVsYXkoKG9wdGlvbnMuZGVsYXkgfHwgMSkgKiAxMDAwKVxuICAgICAgICBcbiAgICAgICMgdGVzdCA9IC0+XG4gICAgICAjICAgICBEZXZpY2Uud2FpdF9mb3JfY29ubmVjdGlvbigxMCwgJ1Rlc3QnLCB7IHRvOiAnZGV2aWNlJyB9KVxuICAgICAgIyB0ZXN0LmRlbGF5KDEwMDApXG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSAtPiApLmNhbmNlbGxhYmxlKClcblxuICAgICMg0JrQvtCz0LTQsCDQv9C+0YDRgiBcItCy0YvRgtCw0YnQtdC9XCIg0LjQtyBcItC60L7QvdGC0LXQudC90LXRgNCwXCIg0LggXCLQsdGA0L7RiNC10L1cIiDQstC+0LLQvdC1IC0gXG4gICAgIyDQvtC9INGD0LTQsNC70Y/QtdGC0YHRjyDQuNC3INGB0L/QuNGB0LrQsFxuICAgICMgKNC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQsiBpbmRleC5odG1sKVxuICAgIHJlbW92ZV9wb3J0OiAoZWxlbWVudHMpIC0+XG4gICAgICAgICMg0L7Qv9GA0LXQtNC10LvQuNGC0YwgaWQg0LLRi9GC0LDRidC10L3QvdC+0LPQviDQv9C+0YDRgtCwXG4gICAgICAgIHBvcnRfaWQgPSArYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzLmRyYWdnZWQpLmF0dHIoJ2RhdGEtcG9ydC1pZCcpXG4gICAgICAgIHJldHVybiBpZiBpc05hTihwb3J0X2lkKVxuXG4gICAgICAgICMg0L7Qv9GA0LXQtNC10LvQuNGC0Ywg0YLQuNC/INCy0YvRgtCw0YnQtdC90L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICBwb3J0X3R5cGUgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudHMuZHJhZ2dlZCkuYXR0cignZGF0YS1wb3J0LXR5cGUnKVxuXG4gICAgICAgICRyb290U2NvcGUuc2FmZUFwcGx5IC0+XG4gICAgICAgICAgcnVsZSA9IFJ1bGUucmVtb3ZlX3BvcnQocG9ydF9pZCwgcG9ydF90eXBlKVxuICAgICAgICAgIHJldHVybiBpZiBub3QgcnVsZVxuXG4gICAgICAgICAgIyDQtdGB0LvQuCDRjdGC0L4g0YHRgtGA0LDQvdC40YbQsCBcItCf0YDQsNCy0LjQu9CwXCIsINGC0L4g0L/RgNC+0LLQtdGA0LjRgtGMLFxuICAgICAgICAgICMg0L3Rg9C20L3QviDQu9C4INGD0LHRgNCw0YLRjCBoYXNoaW5nX3Byb2ZpbGUg0YMg0Y3RgtC+0LPQviDQv9GA0LDQstC40LvQsFxuICAgICAgICAgICMgKNGCLtC6LiBhY3Rpb24g0LzQvtC20LXRgiDQuNC30LzQtdC90LjRgtGM0YHRjyDRgSBiYWxhbmNlINC90LAgcmVkaXJlY3QpXG4gICAgICAgICAgaWYgJHJvb3RTY29wZS50aGlzX3BhZ2UucGFnZSA9PSAncm91dGluZydcbiAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncG9ydF9yZW1vdmVkJywgeyBydWxlOiBydWxlIH0pXG5cbiAgICAgICAgICAjINGA0LDQt9Cy0YvQsdGA0LDRgtGMINGN0YLQvtGCINC/0L7RgNGCXG4gICAgICAgICAgUG9ydF92aWV3LmRlc2VsZWN0KHBvcnRfaWQpIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnR1VJJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgYXBpLCBTdGF0dXMsIHRyYW5zbGF0ZSwgUnVsZSwgUG9ydF92aWV3KSB7XG4gICAgdmFyIEdVSTtcbiAgICByZXR1cm4gR1VJID0ge1xuICAgICAgd2FpdF9mb3JfY29ubmVjdGlvbjogZnVuY3Rpb24oZXN0aW1hdGVkX3RpbWUsIG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoZWNrX2ludGVydmFsLCBpbmZpbml0ZSwgbGF1bmNoLCBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXAsIHNob3VsZF9oYXZlX2FscmVhZHlfYmVlbl91cF90aW1lb3V0LCB0ZXN0X2Nvbm5lY3Rpb24sIHRyeV91bnRpbF9zdWNjZWVkZWQ7XG4gICAgICAgIGlmIChlc3RpbWF0ZWRfdGltZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWZpbmUgZXN0aW1hdGVkIHRpbWUgZm9yIHByb2dyZXNzIGJhcicpO1xuICAgICAgICB9XG4gICAgICAgIGluZmluaXRlID0gZXN0aW1hdGVkX3RpbWUgPT09IDA7XG4gICAgICAgIGNoZWNrX2ludGVydmFsID0gMTtcbiAgICAgICAgJHJvb3RTY29wZS5vZmZsaW5lID0gdHJ1ZTtcbiAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2VsYXBzZWQgPSAwO1xuICAgICAgICBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXBfdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmIChpbmZpbml0ZSkge1xuICAgICAgICAgICRyb290U2NvcGUud2FpdGluZ19mb3JfY29ubmVjdGlvbl9lc3RpbWF0ZWQgPSBJbmZpbml0eTtcbiAgICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fbGVmdCA9IEluZmluaXR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRyb290U2NvcGUud2FpdGluZ19mb3JfY29ubmVjdGlvbl9lc3RpbWF0ZWQgPSBlc3RpbWF0ZWRfdGltZTtcbiAgICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fbGVmdCA9IGVzdGltYXRlZF90aW1lO1xuICAgICAgICAgICRyb290U2NvcGUuY291bnRkb3duID0gdHJ1ZTtcbiAgICAgICAgICBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuY291bnRkb3duID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLmJ1c3kodHJhbnNsYXRlKCdkZXZpY2Uuc3RhdHVzLmNvbm5lY3RpbmcnKSwge1xuICAgICAgICAgICAgICBzdGlja3k6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgc2hvdWxkX2hhdmVfYWxyZWFkeV9iZWVuX3VwX3RpbWVvdXQgPSBzaG91bGRfaGF2ZV9hbHJlYWR5X2JlZW5fdXAuZGVsYXkoZXN0aW1hdGVkX3RpbWUgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXN0X2Nvbm5lY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY29tbWFuZDtcbiAgICAgICAgICBjb21tYW5kID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2RldmljZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZXRTd2l0Y2hJbmZvJztcbiAgICAgICAgICAgICAgY2FzZSAnZ3VpJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3V0aWxpdGllcy5waW5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSgpO1xuICAgICAgICAgIHJldHVybiBhcGkuY2FsbChjb21tYW5kKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFpbmZpbml0ZSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2hvdWxkX2hhdmVfYWxyZWFkeV9iZWVuX3VwX3RpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3RhdHVzLmlkbGUoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuY291bnRkb3duID0gZmFsc2U7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLm9mZmxpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5X3VudGlsX3N1Y2NlZWRlZCA9IGZ1bmN0aW9uKGFjdGlvbiwgcGVyaW9kKSB7XG4gICAgICAgICAgdmFyIHRpY2ssIHRyeV9hZ2FpbjtcbiAgICAgICAgICB0cnlfYWdhaW4gPSBmdW5jdGlvbih0cmllZF9hdCkge1xuICAgICAgICAgICAgdmFyIGZhaWxlZF9hdDtcbiAgICAgICAgICAgIGZhaWxlZF9hdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRpY2suZGVsYXkocGVyaW9kIC0gKGZhaWxlZF9hdCAtIHRyaWVkX2F0KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdHJpZWRfYXQ7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fZWxhcHNlZCArPSBjaGVja19pbnRlcnZhbDtcbiAgICAgICAgICAgIGlmICghaW5maW5pdGUpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS53YWl0aW5nX2Zvcl9jb25uZWN0aW9uX2xlZnQgLT0gY2hlY2tfaW50ZXJ2YWw7XG4gICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fbGVmdCA8IDApIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLndhaXRpbmdfZm9yX2Nvbm5lY3Rpb25fbGVmdCA9IC0xO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmllZF9hdCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbigpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cnlfYWdhaW4odHJpZWRfYXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gdGljaygpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoaW5maW5pdGUpIHtcbiAgICAgICAgICBTdGF0dXMuYnVzeShtZXNzYWdlLCB7XG4gICAgICAgICAgICBzdGlja3k6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBTdGF0dXMucHJvZ3Jlc3MobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGF1bmNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRyeV91bnRpbF9zdWNjZWVkZWQodGVzdF9jb25uZWN0aW9uLCBjaGVja19pbnRlcnZhbCAqIDEwMDApO1xuICAgICAgICB9O1xuICAgICAgICBsYXVuY2guZGVsYXkoKG9wdGlvbnMuZGVsYXkgfHwgMSkgKiAxMDAwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge30pLmNhbmNlbGxhYmxlKCk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlX3BvcnQ6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBwb3J0X2lkLCBwb3J0X3R5cGU7XG4gICAgICAgIHBvcnRfaWQgPSArYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzLmRyYWdnZWQpLmF0dHIoJ2RhdGEtcG9ydC1pZCcpO1xuICAgICAgICBpZiAoaXNOYU4ocG9ydF9pZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcG9ydF90eXBlID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzLmRyYWdnZWQpLmF0dHIoJ2RhdGEtcG9ydC10eXBlJyk7XG4gICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcnVsZTtcbiAgICAgICAgICBydWxlID0gUnVsZS5yZW1vdmVfcG9ydChwb3J0X2lkLCBwb3J0X3R5cGUpO1xuICAgICAgICAgIGlmICghcnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHJvb3RTY29wZS50aGlzX3BhZ2UucGFnZSA9PT0gJ3JvdXRpbmcnKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3BvcnRfcmVtb3ZlZCcsIHtcbiAgICAgICAgICAgICAgcnVsZTogcnVsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBQb3J0X3ZpZXcuZGVzZWxlY3QocG9ydF9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiIyDQn9C40YjQtdGCINC60LDQuiDQsiDQutC+0L3RgdC+0LvRjCwg0YLQsNC6INC4INCy0L4g0LLQvdGD0YLRgNC10L3QvdC40Lkg0LrQvtC70YzRhtC10LLQvtC5INCx0YPRhNC10YAg0LIg0L7Qv9C10YDQsNGC0LjQstC90L7QuSDQv9Cw0LzRj9GC0LhcbmFwcC5mYWN0b3J5ICdsb2cnLCAtPlxuXG5cdF9jb25zb2xlID0gXG5cdFx0aW5mbyAgICA6IGNvbnNvbGUubG9nXG5cdFx0d2FybmluZyA6IGNvbnNvbGUud2FybiB8fCBjb25zb2xlLmxvZ1xuXHRcdGVycm9yICAgOiBjb25zb2xlLmVycm9yXG5cblx0aWYgY29uc29sZS5sb2cuYmluZFxuXHRcdGZvciBrZXksIHZhbHVlIG9mIF9jb25zb2xlXG5cdFx0XHRfY29uc29sZVtrZXldID0gdmFsdWUuYmluZChjb25zb2xlKVxuXG5cdCMg0LrQvtC70YzRhtC10LLQvtC5INCx0YPRhNC10YAgKNC+0LTQuNC9INCz0LvQvtCx0LDQu9GM0L3Ri9C5INC90LAg0LLRgdGRINC/0YDQuNC70L7QttC10L3QuNC1KVxuXHRidWZmZXIgPVxuXHRcdCMg0LzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INGA0LDQt9C80LXRgCDQsdGD0YTQtdGA0LBcblx0XHQjICjQvdCwINGC0YvRgdGP0YfRgyDQt9Cw0L/QuNGB0LXQuSDRg9GF0L7QtNC40YIg0LPQtNC1LdGC0L4gMTAwINCa0LjQu9C+0JHQsNC50YLQvtCyKVxuXHRcdHNpemU6IDUwMDBcblxuXHRcdCMg0LHRg9GE0LXRgFxuXHRcdHN0b3JlOiBbXVxuXG5cdFx0IyDQtNC+0LHQsNCy0LjRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQsiDQsdGD0YTQtdGAXG5cdFx0YWRkOiAobGV2ZWwsIG1lc3NhZ2UpIC0+XG5cdFx0XHQjINC10YHQu9C4INCx0YPRhNC10YAg0L/QvtC70L7QvVxuXHRcdFx0aWYgYnVmZmVyLnN0b3JlLmxlbmd0aCA9PSBidWZmZXIuc2l6ZVxuXHRcdFx0XHQjINGD0LHRgNCw0YLRjCDRgdCw0LzQvtC1INGB0YLQsNGA0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LUg0LjQtyDQsdGD0YTQtdGA0LBcblx0XHRcdFx0YnVmZmVyLnN0b3JlLnNoaWZ0KClcblxuXHRcdFx0IyDQtNC+0LHQsNCy0LjRgtGMINC90L7QstC+0LUg0YHQvtC+0LHRidC10L3QuNC1INCyINCx0YPRhNC10YBcblx0XHRcdGJ1ZmZlci5zdG9yZS5wdXNoKHsgbGV2ZWw6IGxldmVsLCBtZXNzYWdlOiBtZXNzYWdlLCBkYXRlOiBuZXcgRGF0ZSgpIH0pXG5cdGxvZyA9XG5cdFx0aW5mbzogLT5cblx0XHRcdCMg0LDRgNCz0YPQvNC10L3RgtGLINCy0YvQt9C+0LLQsCDRhNGD0L3QutGG0LjQuFxuXHRcdFx0cGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblxuXHRcdFx0IyDQstGL0LLQtdGB0YLQuCDRgdC+0L7QsdGJ0LXQvdC40LUg0L3QsCDQutC+0L3RgdC+0LvRjFxuXHRcdFx0X2NvbnNvbGUuaW5mby5hcHBseShALCBwYXJhbWV0ZXJzKVxuXG5cdFx0XHQjINC00L7QsdCw0LLQuNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INCyINCx0YPRhNC10YBcblx0XHRcdGJ1ZmZlci5hZGQoJ2luZm8nLCBsb2cubWVzc2FnZS5hcHBseShALCBwYXJhbWV0ZXJzKSlcblxuXHRcdGRlYnVnOiAtPlxuXHRcdFx0IyDQsNGA0LPRg9C80LXQvdGC0Ysg0LLRi9C30L7QstCwINGE0YPQvdC60YbQuNC4XG5cdFx0XHRwYXJhbWV0ZXJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuXG5cdFx0XHQjINCy0YvQstC10YHRgtC4INGB0L7QvtCx0YnQtdC90LjQtSDQvdCwINC60L7QvdGB0L7Qu9GMXG5cdFx0XHRfY29uc29sZS5kZWJ1Zy5hcHBseShALCBwYXJhbWV0ZXJzKVxuXG5cdFx0d2FybmluZzogLT5cblx0XHRcdCMg0LDRgNCz0YPQvNC10L3RgtGLINCy0YvQt9C+0LLQsCDRhNGD0L3QutGG0LjQuFxuXHRcdFx0cGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblxuXHRcdFx0IyDQstGL0LLQtdGB0YLQuCDRgdC+0L7QsdGJ0LXQvdC40LUg0L3QsCDQutC+0L3RgdC+0LvRjFxuXHRcdFx0X2NvbnNvbGUud2FybmluZy5hcHBseShALCBwYXJhbWV0ZXJzKVxuXG5cdFx0XHQjINC00L7QsdCw0LLQuNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INCyINCx0YPRhNC10YBcblx0XHRcdGJ1ZmZlci5hZGQoJ3dhcm5pbmcnLCBsb2cubWVzc2FnZS5hcHBseShALCBwYXJhbWV0ZXJzKSlcblxuXHRcdGVycm9yOiAtPlxuXHRcdFx0IyDQsNGA0LPRg9C80LXQvdGC0Ysg0LLRi9C30L7QstCwINGE0YPQvdC60YbQuNC4XG5cdFx0XHRwYXJhbWV0ZXJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuXG5cdFx0XHQjINCy0YvQstC10YHRgtC4INGB0L7QvtCx0YnQtdC90LjQtSDQvdCwINC60L7QvdGB0L7Qu9GMXG5cdFx0XHRfY29uc29sZS5lcnJvci5hcHBseShALCBwYXJhbWV0ZXJzKVxuXG5cdFx0XHQjINC00L7QsdCw0LLQuNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INCyINCx0YPRhNC10YBcblx0XHRcdGJ1ZmZlci5hZGQoJ2Vycm9yJywgbG9nLm1lc3NhZ2UuYXBwbHkoQCwgcGFyYW1ldGVycykpXG5cblx0XHQjINC/0YDQtdC+0LHRgNCw0LfRg9C10YIg0LDRgNCz0YPQvNC10L3RgtGLINGE0YPQvdC60YbQuNC4INCyINGB0L7QvtCx0YnQtdC90LjQtVxuXHRcdG1lc3NhZ2U6IC0+XG5cdFx0XHQjINCw0YDQs9GD0LzQtdC90YLRiyDQstGL0LfQvtCy0LAg0YTRg9C90LrRhtC40Lhcblx0XHRcdHBhcmFtZXRlcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cblx0XHRcdCMg0L/RgNC10L7QsdGA0LDQt9C+0LLQsNGC0Ywg0LLRgdC1INCw0YDQs9GD0LzQtdC90YLRiyDRhNGD0L3QutGG0LjQuCDQsiDRgtC10LrRgdGC0L7QstGL0Lkg0LLQuNC0XG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCAoYXJndW1lbnQpIC0+XG5cdFx0XHRcdCMg0L/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtSDQvtCx0YrQtdC60YLQvtCyINCyINGB0YLRgNC+0LrRg1xuXHRcdFx0XHRpZiB0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCdcblx0XHRcdFx0XHQjINC00LvRjyDQvtGI0LjQsdC+0LogLSDRgNCw0YHQv9C10YfQsNGC0YvQstCw0YLRjCDRgdGC0LXQuiDQstGL0LfQvtCy0L7QslxuXHRcdFx0XHRcdGlmIGFyZ3VtZW50IGluc3RhbmNlb2YgRXJyb3Jcblx0XHRcdFx0XHRcdHJldHVybiBhcmd1bWVudC5zdGFja1xuXHRcdFx0XHRcdCMg0LTQu9GPINC+0YHRgtCw0LvRjNC90YvRhSDQvtCx0YrQtdC60YLQvtCyINCy0YvQt9GL0LLQsNGC0YwgSlNPTi5zdHJpbmdpZnkoKVxuXHRcdFx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShhcmd1bWVudCwgbnVsbCwgMilcblx0XHRcdFx0IyDQv9GA0L7Rh9C40LUg0L/QtdGA0LXQvNC10L3QvdGL0LUgLSDQv9GA0L7RgdGC0L4gLnRvU3RyaW5nKClcblx0XHRcdFx0cmV0dXJuIGlmIGFyZ3VtZW50LnRvU3RyaW5nIHRoZW4gYXJndW1lbnQudG9TdHJpbmcoKSBlbHNlIFN0cmluZyhhcmd1bWVudClcblxuXHRcdFx0IyAjINGB0L7QsdGA0LDRgtGMINCy0YHRkSDRjdGC0L4g0LIg0L7QtNC90YMg0YHRgtGA0L7QutGDINGH0LXRgNC10Lcg0L/RgNC+0LHQtdC7XG5cdFx0XHQjIC5yZWR1Y2UoKChtZXNzYWdlLCBhcmd1bWVudCkgLT5cblx0XHRcdCMgXHRpZiBtZXNzYWdlLm5vdF9lbXB0eSgpXG5cdFx0XHQjIFx0XHRtZXNzYWdlICs9ICcgJ1xuXHRcdFx0IyBcdG1lc3NhZ2UgKz0gYXJndW1lbnRcblx0XHRcdCMgKSwgJycpXG5cblx0XHQjINC/0L7Qu9GD0YfQsNC10YIg0YHQvtC+0LHRidC10L3QuNGPLCDQt9Cw0L/QsNGB0ZHQvdC90YvQtSDQsiDQsdGD0YTQtdGA0LVcblx0XHRtZXNzYWdlczogLT4gYnVmZmVyLnN0b3JlXG5cblx0XHQjINC/0L7Qu9GD0YfQsNC10YIg0YHQvtC+0LHRidC10L3QuNGPLCDQt9Cw0L/QsNGB0ZHQvdC90YvQtSDQsiDQsdGD0YTQtdGA0LVcblx0XHRwcmludF9tZXNzYWdlczogLT5cblx0XHRcdGxvZy5tZXNzYWdlcygpXG5cblx0XHRcdCMg0L/QtdGA0LXQstC10YHRgtC4INGB0L7QvtCx0YnQtdC90LjRjyDQu9C+0LPQsCDQsiDRgdGC0YDQvtC60Lhcblx0XHRcdC5tYXAgKG1lc3NhZ2UpIC0+XG5cdFx0XHRcdCMg0LTQsNGC0LAg0YHQvtC+0LHRidC10L3QuNGPXG5cdFx0XHRcdGRhdGUgPSBtb21lbnQobWVzc2FnZS5kYXRlKS5mb3JtYXQoJ01NTU0gRG8gWVlZWSwgSEg6bW06c3MnKVxuXHRcdFx0XHRcblx0XHRcdFx0IyDRgdGC0LDRgtGD0YEg0YHQvtC+0LHRidC10L3QuNGPXG5cdFx0XHRcdHN0YXR1cyA9IHN3aXRjaCBtZXNzYWdlLmxldmVsXG5cdFx0XHRcdFx0d2hlbiAnaW5mbycgdGhlbiAnJ1xuXHRcdFx0XHRcdGVsc2UgXCIgWyN7bWVzc2FnZS5sZXZlbH1dXCJcblx0XHRcdFx0XG5cdFx0XHRcdCMgKNC00LDRgtCwICsg0YHRgtCw0YLRg9GBKSDRgdC+0L7QsdGJ0LXQvdC40Y9cblx0XHRcdFx0cHJlYW1ibGUgPSBcIiN7ZGF0ZX0je3N0YXR1c30gXCJcblxuXHRcdFx0XHQjINGB0L7QsdGA0LDRgtGMINC80LDRgdGB0LjQsiBtZXNzYWdlINCyINC+0LTQvdGDINGB0YLRgNC+0LrRgyDRh9C10YDQtdC3INC/0YDQvtCx0LXQu1xuXHRcdFx0XHRtZXNzYWdlX3RleHQgPSBtZXNzYWdlLm1lc3NhZ2UucmVkdWNlKCgobWVzc2FnZSwgYXJndW1lbnQpIC0+XG5cdFx0XHRcdFx0XHQjINC10YHQu9C4INGN0YLQviDQvdC1INC/0LXRgNCy0YvQuSDRjdC70LXQvNC10L3RgiDQvNCw0YHRgdC40LLQsCAtINC+0YLRgdGC0YPQv9C40YLRjCDQv9GA0L7QsdC10LvQvtC8XG5cdFx0XHRcdFx0XHRpZiBtZXNzYWdlLm5vdF9lbXB0eSgpXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2UgKz0gJyAnXG5cblx0XHRcdFx0XHRcdCMg0L7RgtGB0YLRg9C/INCx0YPQtNC10YIg0YHRh9C40YLQsNGC0YzRgdGPINC+0YIg0L/QvtGB0LvQtdC00L3QtdCz0L4g0L/QtdGA0LXQvdC+0YHQsCDRgdGC0YDQvtC60LgsXG5cdFx0XHRcdFx0XHQjINC10YHQu9C4INC+0L0g0L/RgNC40YHRg9GC0YHRgtCy0YPQtdGCICjQu9C40LHQviDQvtGCINC90LDRh9Cw0LvQsClcblx0XHRcdFx0XHRcdGxhc3RfbmV3X2xpbmUgPSBtZXNzYWdlLmxhc3RJbmRleE9mKCdcXG4nKVxuXHRcdFx0XHRcdFx0c3BhY2luZyA9IGlmIGxhc3RfbmV3X2xpbmUgPj0gMFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlLnN1YnN0cmluZyhsYXN0X25ld19saW5lICsgMSlcblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdFx0bWVzc2FnZVxuXG5cdFx0XHRcdFx0XHQjINC10YHQu9C4INCx0YvQu9C4INC/0LXRgNC10L3QvtGB0Ysg0YHRgtGA0L7QuiAtINC+0YLQsdC40YLRjCDQvdGD0LbQvdGL0Lwg0LrQvtC70LjRh9C10YHRgtCy0L7QvCDQv9GA0L7QsdC10LvQvtCyXG5cdFx0XHRcdFx0XHRhcmd1bWVudCA9IGFyZ3VtZW50LnJlcGxhY2UoL1xcbi9nLCBcIlxcbiN7JyAnLnJlcGVhdChzcGFjaW5nLmxlbmd0aCl9XCIpXG5cblx0XHRcdFx0XHRcdCMg0YHQvtC10LTQuNC90LjRgtGMINGBINC+0LHRidC40Lwg0YLQtdC60YHRgtC+0Lxcblx0XHRcdFx0XHRcdG1lc3NhZ2UgKz0gYXJndW1lbnRcblx0XHRcdFx0XHQpLCAnJylcblxuXHRcdFx0XHQjINC+0YLQsdC40LLQutCwINC/0YDQvtCx0LXQu9Cw0LzQuCDQtNC70Y8gKNC00LDRgtGLICsg0YHRgtCw0YLRg9GB0LApXG5cdFx0XHRcdHByZWFtYmxlX3NwYWNpbmcgPSAnICcucmVwZWF0KHByZWFtYmxlLmxlbmd0aClcblx0XHRcdFx0IyDQvtGC0LHQuNGC0Ywg0L/RgNC+0LHQtdC70LDQvNC4ICjQtNCw0YLRgyArINGB0YLQsNGC0YPRgSlcblx0XHRcdFx0bWVzc2FnZV90ZXh0ID0gbWVzc2FnZV90ZXh0LnJlcGxhY2UoL1xcbi9nLCBcIlxcbiN7cHJlYW1ibGVfc3BhY2luZ31cIilcblxuXHRcdFx0XHQjINC40YLQvtCz0L7QstCw0Y8g0YHRgtGA0L7QutCwINC70L7Qs9CwXG5cdFx0XHRcdHJldHVybiBcIiN7cHJlYW1ibGV9I3ttZXNzYWdlX3RleHR9XCJcblxuXHRcdFx0IyDRgdC+0LXQtNC40L3QuNGC0Ywg0LLRgdC1INGB0YLRgNC+0LrQuCDQsiDQvtC00LjQvSDQsdC+0LvRjNGI0L7QuSDRgtC10LrRgdGCXG5cdFx0XHQucmVkdWNlICh0ZXh0LCBtZXNzYWdlKSAtPlxuXHRcdFx0XHRpZiB0ZXh0XG5cdFx0XHRcdFx0dGV4dCArPSAnXFxuJ1xuXHRcdFx0XHRyZXR1cm4gdGV4dCArIG1lc3NhZ2VcblxuXHRcdCMg0YHQutCw0YfQuNCy0LDQtdGCINGE0LDQudC7INGBINGB0L7QtNC10YDQttC40LzRi9C8INC70L7Qs9CwXG5cdFx0ZG93bmxvYWQ6IC0+IGRvd25sb2FkX2ZpbGUobG9nLnByaW50X21lc3NhZ2VzKCksICdsb2cudHh0JykiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdsb2cnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgX2NvbnNvbGUsIGJ1ZmZlciwga2V5LCBsb2csIHZhbHVlO1xuICAgIF9jb25zb2xlID0ge1xuICAgICAgaW5mbzogY29uc29sZS5sb2csXG4gICAgICB3YXJuaW5nOiBjb25zb2xlLndhcm4gfHwgY29uc29sZS5sb2csXG4gICAgICBlcnJvcjogY29uc29sZS5lcnJvclxuICAgIH07XG4gICAgaWYgKGNvbnNvbGUubG9nLmJpbmQpIHtcbiAgICAgIGZvciAoa2V5IGluIF9jb25zb2xlKSB7XG4gICAgICAgIHZhbHVlID0gX2NvbnNvbGVba2V5XTtcbiAgICAgICAgX2NvbnNvbGVba2V5XSA9IHZhbHVlLmJpbmQoY29uc29sZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGJ1ZmZlciA9IHtcbiAgICAgIHNpemU6IDUwMDAsXG4gICAgICBzdG9yZTogW10sXG4gICAgICBhZGQ6IGZ1bmN0aW9uKGxldmVsLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmIChidWZmZXIuc3RvcmUubGVuZ3RoID09PSBidWZmZXIuc2l6ZSkge1xuICAgICAgICAgIGJ1ZmZlci5zdG9yZS5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXIuc3RvcmUucHVzaCh7XG4gICAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgZGF0ZTogbmV3IERhdGUoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBsb2cgPSB7XG4gICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhcmFtZXRlcnM7XG4gICAgICAgIHBhcmFtZXRlcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBfY29uc29sZS5pbmZvLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpO1xuICAgICAgICByZXR1cm4gYnVmZmVyLmFkZCgnaW5mbycsIGxvZy5tZXNzYWdlLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpKTtcbiAgICAgIH0sXG4gICAgICBkZWJ1ZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXJhbWV0ZXJzO1xuICAgICAgICBwYXJhbWV0ZXJzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIF9jb25zb2xlLmRlYnVnLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpO1xuICAgICAgfSxcbiAgICAgIHdhcm5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW1ldGVycztcbiAgICAgICAgcGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIF9jb25zb2xlLndhcm5pbmcuYXBwbHkodGhpcywgcGFyYW1ldGVycyk7XG4gICAgICAgIHJldHVybiBidWZmZXIuYWRkKCd3YXJuaW5nJywgbG9nLm1lc3NhZ2UuYXBwbHkodGhpcywgcGFyYW1ldGVycykpO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhcmFtZXRlcnM7XG4gICAgICAgIHBhcmFtZXRlcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBfY29uc29sZS5lcnJvci5hcHBseSh0aGlzLCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5hZGQoJ2Vycm9yJywgbG9nLm1lc3NhZ2UuYXBwbHkodGhpcywgcGFyYW1ldGVycykpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFyYW1ldGVycztcbiAgICAgICAgcGFyYW1ldGVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLm1hcChmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnQuc3RhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJndW1lbnQsIG51bGwsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXJndW1lbnQudG9TdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudC50b1N0cmluZygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3VtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zdG9yZTtcbiAgICAgIH0sXG4gICAgICBwcmludF9tZXNzYWdlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBsb2cubWVzc2FnZXMoKS5tYXAoZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgIHZhciBkYXRlLCBtZXNzYWdlX3RleHQsIHByZWFtYmxlLCBwcmVhbWJsZV9zcGFjaW5nLCBzdGF0dXM7XG4gICAgICAgICAgZGF0ZSA9IG1vbWVudChtZXNzYWdlLmRhdGUpLmZvcm1hdCgnTU1NTSBEbyBZWVlZLCBISDptbTpzcycpO1xuICAgICAgICAgIHN0YXR1cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS5sZXZlbCkge1xuICAgICAgICAgICAgICBjYXNlICdpbmZvJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiIFtcIiArIG1lc3NhZ2UubGV2ZWwgKyBcIl1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSgpO1xuICAgICAgICAgIHByZWFtYmxlID0gXCJcIiArIGRhdGUgKyBzdGF0dXMgKyBcIiBcIjtcbiAgICAgICAgICBtZXNzYWdlX3RleHQgPSBtZXNzYWdlLm1lc3NhZ2UucmVkdWNlKChmdW5jdGlvbihtZXNzYWdlLCBhcmd1bWVudCkge1xuICAgICAgICAgICAgdmFyIGxhc3RfbmV3X2xpbmUsIHNwYWNpbmc7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5ub3RfZW1wdHkoKSkge1xuICAgICAgICAgICAgICBtZXNzYWdlICs9ICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RfbmV3X2xpbmUgPSBtZXNzYWdlLmxhc3RJbmRleE9mKCdcXG4nKTtcbiAgICAgICAgICAgIHNwYWNpbmcgPSBsYXN0X25ld19saW5lID49IDAgPyBtZXNzYWdlLnN1YnN0cmluZyhsYXN0X25ld19saW5lICsgMSkgOiBtZXNzYWdlO1xuICAgICAgICAgICAgYXJndW1lbnQgPSBhcmd1bWVudC5yZXBsYWNlKC9cXG4vZywgXCJcXG5cIiArICgnICcucmVwZWF0KHNwYWNpbmcubGVuZ3RoKSkpO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKz0gYXJndW1lbnQ7XG4gICAgICAgICAgfSksICcnKTtcbiAgICAgICAgICBwcmVhbWJsZV9zcGFjaW5nID0gJyAnLnJlcGVhdChwcmVhbWJsZS5sZW5ndGgpO1xuICAgICAgICAgIG1lc3NhZ2VfdGV4dCA9IG1lc3NhZ2VfdGV4dC5yZXBsYWNlKC9cXG4vZywgXCJcXG5cIiArIHByZWFtYmxlX3NwYWNpbmcpO1xuICAgICAgICAgIHJldHVybiBcIlwiICsgcHJlYW1ibGUgKyBtZXNzYWdlX3RleHQ7XG4gICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbih0ZXh0LCBtZXNzYWdlKSB7XG4gICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHRleHQgKz0gJ1xcbic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0ZXh0ICsgbWVzc2FnZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZG93bmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZG93bmxvYWRfZmlsZShsb2cucHJpbnRfbWVzc2FnZXMoKSwgJ2xvZy50eHQnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdMb2dpbicsICgkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJGZpbHRlciwgJHdpbmRvdywgJHRpbWVvdXQsIGFwaSwgbG9nLCBTdGF0dXMsIFJvdXRpbmdfbW9kZWxfYXBwbGllcikgLT5cblxuICAjINGD0L/RgNCw0LLQu9GP0LXRgiDQstGF0L7QtNC+0LwgLyDQstGL0YXQvtC00L7QvCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LIg0YHQuNGB0YLQtdC80YMgLyDQuNC3INGB0LjRgdGC0LXQvNGLXG4gIExvZ2luID0gXG5cbiAgICAjINC40LfQvdCw0YfQsNC70YzQvdC+INC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvdC1IGZhbHNlIChubyksIFxuICAgICMg0YfRgtC+0LHRiyDQsdGL0LvQsCDQsNC90LjQvNCw0YbQuNGPINGB0L/Rg9GB0LrQsNC90LjRjyDQvtC60L3QsCDQstGF0L7QtNCwXG4gICAgaXNfYXV0aGVudGljYXRlZDogbnVsbFxuXG4gICAgIyDQv9GA0L7QstC10YDRj9C10YIg0L/RgNCw0LLQuNC70YzQvdC+0YHRgtGMINCy0LLQtdC00ZHQvdC90YvRhSDQtNCw0L3QvdGL0YUg0LIg0YTQvtGA0LzQtSDQstGF0L7QtNCwXG4gICAgdmFsaWRhdGU6IChmb3JtKSAtPlxuICAgICAgZmllbGRzID0gWydwYXNzd29yZCddXG5cbiAgICAgIGZvciBmaWVsZCBpbiBmaWVsZHNcbiAgICAgICAgaWYgZm9ybVtmaWVsZF0uJGludmFsaWRcbiAgICAgICAgICBmb3JtLmluZGljYXRlX2ludmFsaWQoZmllbGQpXG5cbiAgICAgIHJldHVybiBub3QgZm9ybS4kaW52YWxpZFxuXG4gICAgIyDQstGL0L/QvtC70L3Rj9C10YIg0LLRhdC+0LQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC/0L4g0L7RgtC/0YDQsNCy0LrQtSDRhNC+0YDQvNGLINCy0YXQvtC00LBcbiAgICBsb2dpbjogKGZvcm0pIC0+XG4gICAgICAjINC10YHQu9C4INCyINGE0L7RgNC80LUg0LXRgdGC0Ywg0L7RiNC40LHQutC4IC0g0L/RgNC10YDQstCw0YLRjCDQtdGRINC+0YLQv9GA0LDQstC60YNcbiAgICAgIHJldHVybiBpZiBub3QgTG9naW4udmFsaWRhdGUoZm9ybSlcblxuICAgICAgIyDQtNCw0L3QvdGL0LUg0LTQu9GPINCy0YXQvtC00LBcbiAgICAgIGNyZWRlbnRpYWxzID0gXG4gICAgICAgIHVzZXJuYW1lOiAnYWRtaW4nXG4gICAgICAgIHBhc3N3b3JkOiBmb3JtLnBhc3N3b3JkLiRtb2RlbFZhbHVlXG5cbiAgICAgICMg0L/QvtC/0YDQvtCx0L7QstCw0YLRjCDQstC+0LnRgtC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQstCy0LXQtNGR0L3QvdGL0LzQuCDQtNCw0L3QvdGL0LzQuFxuICAgICAgYXBpLmNhbGwoJ2F1dGgubG9naW4nLCBjcmVkZW50aWFscykudGhlbiAodXNlcikgLT5cblxuICAgICAgICAjINGB0LHRgNC+0YHQuNGC0Ywg0L/QvtC70LUg0LLQstC+0LTQsCDQv9Cw0YDQvtC70Y9cbiAgICAgICAgZm9ybS5wYXNzd29yZC4kc2V0Vmlld1ZhbHVlKCcnKVxuICAgICAgICBmb3JtLnBhc3N3b3JkLiRyZW5kZXIoKVxuXG4gICAgICAgICMg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0L7RiNGR0LtcbiAgICAgICAgIyDRgSjQutGA0YvRgtGMINGE0L7RgNC80YMg0LLRhdC+0LTQsClcbiAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICBMb2dpbi5hdXRoZW50aWNhdGVkKClcbiAgICAgICAgICBSb3V0aW5nX21vZGVsX2FwcGxpZXIuc2V0X2ludGVyZmFjZV92ZXJzaW9uKGFwaSlcbiAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyXG4gICAgICAgICAgXG4gICAgICAgICMg0L/QvtGH0LjQvdC40YLRjCDRgdGK0LXRhdCw0LLRiNC40LUgc3RpY2t5LXllYWhcbiAgICAgICAgIyAo0L7QvdC4INGB0YrQtdC30LbQsNGO0YIsINC60L7Qs9C00LAg0YHRgtGA0LDQvdC40YbQtSDQv9GA0L7RgdGC0LDQstC70Y/QtdGC0YHRjyBcImRpc3BsYXk6IG5vbmVcIiAobmctc2hvdy9uZy1oaWRlKSlcbiAgICAgICAgJC5zdGlja3llYWgoKVxuXG4gICAgICAgICMg0LXRgdC70Lgg0LfQsNCz0YDRg9C30LrQsCDQv9GA0LjQu9C+0LbQtdC90LjRjyDQsdGL0LvQsCDQv9GA0LXRgNCy0LDQvdCwINC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtGM0Y4g0LLRhdC+0LTQsCxcbiAgICAgICAgIyDRgtC+INC/0YDQvtC00L7Qu9C20LjRgtGMINC30LDQs9GA0YPQt9C60YMg0L/RgNC40LvQvtC20LXQvdC40Y8g0YEg0YLQvtCz0L4g0LzQtdGB0YLQsFxuICAgICAgICAjICjRgSDQvNC10YHRgtCwINCy0YvQt9C+0LLQsCDRhNGD0L3QutGG0LjQuCBpbml0aWFsaXplX2FwcGxpY2F0aW9uKCkpXG4gICAgICAgIGlmIG5vdCAkcm9vdFNjb3BlLnN0YXRlLmlzX2FwcGxpY2F0aW9uX2xvYWRlZFxuICAgICAgICAgICRyb290U2NvcGUuaW5pdGlhbGl6ZV9hcHBsaWNhdGlvbigpXG5cbiAgICAgICAgIyDQtdGB0LvQuCDQt9Cw0LPRgNGD0LfQutCwINC90LXQutC+0YLQvtGA0L7QuSDRgdGC0YDQsNC90LjRhtGLINC/0YDQuNC70L7QttC10L3QuNGPXG4gICAgICAgICMg0LHRi9C70LAg0L/RgNC10YDQstCw0L3QsCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLRjNGOINCy0YXQvtC00LAsXG4gICAgICAgICMg0YLQviDQv9GA0L7QtNC+0LvQttC40YLRjCDQt9Cw0LPRgNGD0LfQutGDINGN0YLQvtC5INGB0YLRgNCw0L3QuNGG0Ysg0YEg0YLQvtCz0L4g0LzQtdGB0YLQsFxuICAgICAgICAjICjRgSDQvNC10YHRgtCwINCy0YvQt9C+0LLQsCDRhNGD0L3QutGG0LjQuCAkc2NvcGUud2hlbl9sb2FkZWQpXG4gICAgICAgIGVsc2UgaWYgJHJvb3RTY29wZS5sb2FkaW5nX3BhZ2VcbiAgICAgICAgICAkcm9vdFNjb3BlLmluaXRpYWxpemVfcGFnZSgpXG5cbiAgICAgICMg0LXRgdC70Lgg0L/RgNC4INC/0L7Qv9GL0YLQutC1INCy0YXQvtC00LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC/0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LBcbiAgICAgICwgKGVycm9yKSAtPlxuICAgICAgICAjINCy0YvQstC10YHRgtC4INC10ZEg0L3QsCDQutC+0L3RgdC+0LvRjFxuICAgICAgICBsb2cuZXJyb3IoZXJyb3IpXG5cbiAgICAgICAgIyDQtdGB0LvQuCDRjdGC0L4g0LHRi9C70LAg0L7RiNC40LHQutCwIFwi0L3QtdCy0LXRgNC90YvQuSDQv9Cw0YDQvtC70YxcIixcbiAgICAgICAgIyDQv9GA0L7QuNC30LLQtdGB0YLQuCDQuNC90LTQuNC60LDRhtC40Y4g0Y3RgtC+0LPQviDQsiBHdWlcbiAgICAgICAgaWYgZXJyb3IgaW5zdGFuY2VvZiBhcGkuZXJyb3IuZ2VuZXJpYyAmJiBlcnJvci5jb2RlID09IDQwM1xuICAgICAgICAgIGZvcm0uZXJyb3JzID0gZm9ybS5lcnJvcnMgfHwge31cbiAgICAgICAgICBmb3JtLmVycm9ycy53cm9uZ19jcmVkZW50aWFscyA9IHllc1xuXG4gICAgICAgICAgZm9ybS5pbmRpY2F0ZV9pbnZhbGlkKCdwYXNzd29yZCcpXG5cbiAgICAjINCy0YvRhdC+0LTQuNGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQuNC3INGB0LjRgdGC0LXQvNGLXG4gICAgbG9nb3V0OiAtPlxuICAgICAgYXBpLmNhbGwoJ2F1dGgubG9nb3V0Jywge30pXG4gICAgICAudGhlbiAtPlxuICAgICAgICAjINC/0LXRgNC10L3QsNC/0YDQsNCy0LjRgtGMINC90LAg0Y3QutGA0LDQvSDQu9C+0LPQuNC90LBcbiAgICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgICBMb2dpbi5ub3RfYXV0aGVudGljYXRlZCgpXG5cbiAgICAjINC/0YDQvtCy0LXRgNGP0LXRgiwg0LLQvtGI0ZHQuyDQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQsiDRgdC40YHRgtC10LzRg1xuICAgIGF1dGhlbnRpY2F0ZTogLT5cbiAgICAgICMg0LLQvtC50YLQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvFxuICAgICAgYXBpLmNhbGwoJ2F1dGguYXV0aCcpLnRoZW4gKHVzZXIpIC0+XG4gICAgICAgIExvZ2luLmF1dGhlbnRpY2F0ZWQoKVxuICAgICAgICByZXR1cm4gdXNlclxuXG4gICAgIyDQvNCw0L3QuNGE0LXRgdGC0LDRhtC40Y8g0YTQsNC60YLQsCDQstGF0L7QtNCwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQsiDRgdC40YHRgtC10LzRg1xuICAgIGF1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICBTdGF0dXMucGxhY2UoKVxuICAgICAgTG9naW4uaXNfYXV0aGVudGljYXRlZCA9IHllc1xuXG4gICAgIyDQvNCw0L3QuNGE0LXRgdGC0LDRhtC40Y8g0YTQsNC60YLQsCDQvdC10LLRhdC+0LTQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LIg0YHQuNGB0YLQtdC80YNcbiAgICBub3RfYXV0aGVudGljYXRlZDogLT5cbiAgICAgIFN0YXR1cy5wbGFjZSgnbG9naW4nKVxuICAgICAgTG9naW4uaXNfYXV0aGVudGljYXRlZCA9IG5vXG4iLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdMb2dpbicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkZmlsdGVyLCAkd2luZG93LCAkdGltZW91dCwgYXBpLCBsb2csIFN0YXR1cywgUm91dGluZ19tb2RlbF9hcHBsaWVyKSB7XG4gICAgdmFyIExvZ2luO1xuICAgIHJldHVybiBMb2dpbiA9IHtcbiAgICAgIGlzX2F1dGhlbnRpY2F0ZWQ6IG51bGwsXG4gICAgICB2YWxpZGF0ZTogZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICB2YXIgZmllbGQsIGZpZWxkcywgaSwgbGVuO1xuICAgICAgICBmaWVsZHMgPSBbJ3Bhc3N3b3JkJ107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGZpZWxkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgICAgIGlmIChmb3JtW2ZpZWxkXS4kaW52YWxpZCkge1xuICAgICAgICAgICAgZm9ybS5pbmRpY2F0ZV9pbnZhbGlkKGZpZWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFmb3JtLiRpbnZhbGlkO1xuICAgICAgfSxcbiAgICAgIGxvZ2luOiBmdW5jdGlvbihmb3JtKSB7XG4gICAgICAgIHZhciBjcmVkZW50aWFscztcbiAgICAgICAgaWYgKCFMb2dpbi52YWxpZGF0ZShmb3JtKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjcmVkZW50aWFscyA9IHtcbiAgICAgICAgICB1c2VybmFtZTogJ2FkbWluJyxcbiAgICAgICAgICBwYXNzd29yZDogZm9ybS5wYXNzd29yZC4kbW9kZWxWYWx1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2F1dGgubG9naW4nLCBjcmVkZW50aWFscykudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgZm9ybS5wYXNzd29yZC4kc2V0Vmlld1ZhbHVlKCcnKTtcbiAgICAgICAgICBmb3JtLnBhc3N3b3JkLiRyZW5kZXIoKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIExvZ2luLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgICAgICAgIFJvdXRpbmdfbW9kZWxfYXBwbGllci5zZXRfaW50ZXJmYWNlX3ZlcnNpb24oYXBpKTtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnVzZXIgPSB1c2VyO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQuc3RpY2t5ZWFoKCk7XG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLnN0YXRlLmlzX2FwcGxpY2F0aW9uX2xvYWRlZCkge1xuICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuaW5pdGlhbGl6ZV9hcHBsaWNhdGlvbigpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS5sb2FkaW5nX3BhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmluaXRpYWxpemVfcGFnZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGFwaS5lcnJvci5nZW5lcmljICYmIGVycm9yLmNvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgZm9ybS5lcnJvcnMgPSBmb3JtLmVycm9ycyB8fCB7fTtcbiAgICAgICAgICAgIGZvcm0uZXJyb3JzLndyb25nX2NyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtLmluZGljYXRlX2ludmFsaWQoJ3Bhc3N3b3JkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBsb2dvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2F1dGgubG9nb3V0Jywge30pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuc2FmZUFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIExvZ2luLm5vdF9hdXRoZW50aWNhdGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGF1dGhlbnRpY2F0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbCgnYXV0aC5hdXRoJykudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgTG9naW4uYXV0aGVudGljYXRlZCgpO1xuICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBhdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgU3RhdHVzLnBsYWNlKCk7XG4gICAgICAgIHJldHVybiBMb2dpbi5pc19hdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBub3RfYXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIFN0YXR1cy5wbGFjZSgnbG9naW4nKTtcbiAgICAgICAgcmV0dXJuIExvZ2luLmlzX2F1dGhlbnRpY2F0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIiMgTW9kZWxfc2VydmljZSDRgdC+0LfQtNCw0L0g0LTQu9GPINGC0L7Qs9C+LCDRh9GC0L7QsdGLINGF0YDQsNC90LjRgtGMINCyINGB0LXQsdC1INC80LXRgtC+0LTRiyDRgNCw0LHQvtGC0Ysg0YEg0LzQvtC00LXQu9GM0Y4uXG4jIE1vZGVsIC0g0Y3RgtC+INGH0LjRgdGC0L4g0LTQsNC90L3Ri9C1LlxuYXBwLmZhY3RvcnkgJ01vZGVsX3NlcnZpY2UnLCAoRGV2aWNlX3NldHRpbmdzKSAtPlxuICBNb2RlbF9zZXJ2aWNlID1cblxuIyDQoNCw0YHRh9GR0YIg0YHQtNCy0LjQs9CwINC90L7QvNC10YDQsCDQv9C+0YDRgtCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQuNC90LTQtdC60YHQsCDQvNCw0YHRgdC40LLQsCDQv9GA0Lgg0YHRgtCw0L3QtNCw0YDRgtC90L7QuSDQuCDQvdC10YHRgtCw0L3QtNCw0YDRgtC90L7QuSDQttC10LvQtdC30LrQsNGFXG4gICAgZ2V0X3BvcnRfaWRfd2l0aF9vZmZzZXQ6IChwb3J0X2lkKSAtPlxuICAgICAgcG9ydF9pZF93aXRoX29mZnNldCA9IHN3aXRjaCBEZXZpY2Vfc2V0dGluZ3MuZ2V0X3BsYXRmb3JtKClcbiAgICAgICAgd2hlbiBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejEgdGhlbiBwb3J0X2lkIC0gMVxuXG4gICAgICAgIHdoZW4gRGV2aWNlX3NldHRpbmdzLmRldmljZXMuaXoxZiwgRGV2aWNlX3NldHRpbmdzLmRldmljZXMudW5rbm93blxuICAgICAgICAgIHBvcnRfaWQgLSAoaWYgcG9ydF9pZCAlIDIgPT0gMCB0aGVuIDIgZWxzZSAwKVxuXG4gICAgICByZXR1cm4gcG9ydF9pZF93aXRoX29mZnNldFxuXG4gICAgZ2V0X2pvaW50X3BvcnRfd2l0aF9vZmZzZXQ6IChNb2RlbCwgcG9ydF9pZCkgLT5cbiAgICAgIHJldHVybiBNb2RlbC5qb2ludF9wb3J0c1tNb2RlbF9zZXJ2aWNlLmdldF9wb3J0X2lkX3dpdGhfb2Zmc2V0KHBvcnRfaWQpXVxuICAgIGdldF9wb3J0X3dpdGhfb2Zmc2V0OiAoTW9kZWwsIHBvcnRfaWQpIC0+XG4gICAgICByZXR1cm4gTW9kZWwucG9ydHNbTW9kZWxfc2VydmljZS5nZXRfcG9ydF9pZF93aXRoX29mZnNldChwb3J0X2lkKV1cblxuICAgIHVwZGF0ZTogKE1vZGVsLCBtb2RlbCkgLT5cbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKE1vZGVsLCBtb2RlbClcblxuICAgIHJlc2V0OiAobW9kZWwpIC0+XG4gICAgICBNb2RlbF9zZXJ2aWNlLnVwZGF0ZShNb2RlbCwgTW9kZWxfc2VydmljZS5jcmVhdGUoKSlcblxuICAgIHBvcnRzX2xvY2s6IFtdXG5cbiAgICBpc19wb3J0c19sb2NrX2VtcHR5OiAtPlxuICAgICAgTW9kZWxfc2VydmljZS5wb3J0c19sb2NrLmxlbmd0aCA9PSAwXG5cbiAgICBsb2NrX3BvcnRzOiAtPlxuICAgICAgbG9jayA9IG5ldyBPYmplY3QoKVxuICAgICAgTW9kZWxfc2VydmljZS5wb3J0c19sb2NrLnB1c2gobG9jaylcbiAgICAgIHJldHVybiBsb2NrXG5cbiAgICB1bmxvY2tfcG9ydHM6IChsb2NrKSAtPlxuICAgICAgaWYgbm90IE1vZGVsX3NlcnZpY2UucG9ydHNfbG9jay5oYXMobG9jaylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3J0IGxvY2sgbm90IGZvdW5kJylcblxuICAgICAgTW9kZWxfc2VydmljZS5wb3J0c19sb2NrLnJlbW92ZShsb2NrKVxuXG4gICAgZW5zdXJlX3BvcnRzX2xvY2s6IC0+XG4gICAgICBpZiBNb2RlbF9zZXJ2aWNlLnBvcnRzX2xvY2suaXNfZW1wdHkoKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHBvcnRzIG11c3QgYmUgbG9ja2VkIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCcpXG5cbiAgICBkb193aXRoX3BvcnRfbG9jazogKGFjdGlvbikgLT5cbiAgICAgIGxvY2sgPSBNb2RlbF9zZXJ2aWNlLmxvY2tfcG9ydHMoKVxuICAgICAgcmVzdWx0ID0gYWN0aW9uKClcbiAgICAgIGlmIHJlc3VsdD8gJiYgcmVzdWx0LmZpbmFsbHlcbiAgICAgICAgcmVzdWx0LmZpbmFsbHkoLT4gTW9kZWxfc2VydmljZS51bmxvY2tfcG9ydHMobG9jaykpXG4gICAgICBlbHNlXG4gICAgICAgIE1vZGVsX3NlcnZpY2UudW5sb2NrX3BvcnRzKGxvY2spXG4gICAgICAgIGR1bW15X3Byb21pc2UoKSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ01vZGVsX3NlcnZpY2UnLCBmdW5jdGlvbihEZXZpY2Vfc2V0dGluZ3MpIHtcbiAgICB2YXIgTW9kZWxfc2VydmljZTtcbiAgICByZXR1cm4gTW9kZWxfc2VydmljZSA9IHtcbiAgICAgIGdldF9wb3J0X2lkX3dpdGhfb2Zmc2V0OiBmdW5jdGlvbihwb3J0X2lkKSB7XG4gICAgICAgIHZhciBwb3J0X2lkX3dpdGhfb2Zmc2V0O1xuICAgICAgICBwb3J0X2lkX3dpdGhfb2Zmc2V0ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN3aXRjaCAoRGV2aWNlX3NldHRpbmdzLmdldF9wbGF0Zm9ybSgpKSB7XG4gICAgICAgICAgICBjYXNlIERldmljZV9zZXR0aW5ncy5kZXZpY2VzLml6MTpcbiAgICAgICAgICAgICAgcmV0dXJuIHBvcnRfaWQgLSAxO1xuICAgICAgICAgICAgY2FzZSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy5pejFmOlxuICAgICAgICAgICAgY2FzZSBEZXZpY2Vfc2V0dGluZ3MuZGV2aWNlcy51bmtub3duOlxuICAgICAgICAgICAgICByZXR1cm4gcG9ydF9pZCAtIChwb3J0X2lkICUgMiA9PT0gMCA/IDIgOiAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiBwb3J0X2lkX3dpdGhfb2Zmc2V0O1xuICAgICAgfSxcbiAgICAgIGdldF9qb2ludF9wb3J0X3dpdGhfb2Zmc2V0OiBmdW5jdGlvbihNb2RlbCwgcG9ydF9pZCkge1xuICAgICAgICByZXR1cm4gTW9kZWwuam9pbnRfcG9ydHNbTW9kZWxfc2VydmljZS5nZXRfcG9ydF9pZF93aXRoX29mZnNldChwb3J0X2lkKV07XG4gICAgICB9LFxuICAgICAgZ2V0X3BvcnRfd2l0aF9vZmZzZXQ6IGZ1bmN0aW9uKE1vZGVsLCBwb3J0X2lkKSB7XG4gICAgICAgIHJldHVybiBNb2RlbC5wb3J0c1tNb2RlbF9zZXJ2aWNlLmdldF9wb3J0X2lkX3dpdGhfb2Zmc2V0KHBvcnRfaWQpXTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uKE1vZGVsLCBtb2RlbCkge1xuICAgICAgICByZXR1cm4gYW5ndWxhci5leHRlbmQoTW9kZWwsIG1vZGVsKTtcbiAgICAgIH0sXG4gICAgICByZXNldDogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgcmV0dXJuIE1vZGVsX3NlcnZpY2UudXBkYXRlKE1vZGVsLCBNb2RlbF9zZXJ2aWNlLmNyZWF0ZSgpKTtcbiAgICAgIH0sXG4gICAgICBwb3J0c19sb2NrOiBbXSxcbiAgICAgIGlzX3BvcnRzX2xvY2tfZW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTW9kZWxfc2VydmljZS5wb3J0c19sb2NrLmxlbmd0aCA9PT0gMDtcbiAgICAgIH0sXG4gICAgICBsb2NrX3BvcnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxvY2s7XG4gICAgICAgIGxvY2sgPSBuZXcgT2JqZWN0KCk7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UucG9ydHNfbG9jay5wdXNoKGxvY2spO1xuICAgICAgICByZXR1cm4gbG9jaztcbiAgICAgIH0sXG4gICAgICB1bmxvY2tfcG9ydHM6IGZ1bmN0aW9uKGxvY2spIHtcbiAgICAgICAgaWYgKCFNb2RlbF9zZXJ2aWNlLnBvcnRzX2xvY2suaGFzKGxvY2spKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3J0IGxvY2sgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1vZGVsX3NlcnZpY2UucG9ydHNfbG9jay5yZW1vdmUobG9jayk7XG4gICAgICB9LFxuICAgICAgZW5zdXJlX3BvcnRzX2xvY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoTW9kZWxfc2VydmljZS5wb3J0c19sb2NrLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGVsIHBvcnRzIG11c3QgYmUgbG9ja2VkIHdoZW4gY2FsbGluZyB0aGlzIG1ldGhvZCcpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZG9fd2l0aF9wb3J0X2xvY2s6IGZ1bmN0aW9uKGFjdGlvbikge1xuICAgICAgICB2YXIgbG9jaywgcmVzdWx0O1xuICAgICAgICBsb2NrID0gTW9kZWxfc2VydmljZS5sb2NrX3BvcnRzKCk7XG4gICAgICAgIHJlc3VsdCA9IGFjdGlvbigpO1xuICAgICAgICBpZiAoKHJlc3VsdCAhPSBudWxsKSAmJiByZXN1bHRbXCJmaW5hbGx5XCJdKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFtcImZpbmFsbHlcIl0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9kZWxfc2VydmljZS51bmxvY2tfcG9ydHMobG9jayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgTW9kZWxfc2VydmljZS51bmxvY2tfcG9ydHMobG9jayk7XG4gICAgICAgICAgcmV0dXJuIGR1bW15X3Byb21pc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiIyBNb2RlbF9zZXJ2aWNlINGB0L7Qt9C00LDQvSDQtNC70Y8g0YLQvtCz0L4sINGH0YLQvtCx0Ysg0YXRgNCw0L3QuNGC0Ywg0LIg0YHQtdCx0LUg0LzQtdGC0L7QtNGLINGA0LDQsdC+0YLRiyDRgSDQvNC+0LTQtdC70YzRji5cbiMgTW9kZWwgLSDRjdGC0L4g0YfQuNGB0YLQviDQtNCw0L3QvdGL0LUuXG4jICjRjdGC0L4g0L3QtSBcItC80L7QtNC10LvRjCDRgNC+0YPRgtC40L3Qs9CwXCIgLSDQvtC90LAg0LvQtdC20LjRgiDQsiDRgdC10YDQstC40YHQtSByb3V0aW5nIG1vZGVsLmNvZmZlZSlcbmFwcC5mYWN0b3J5ICdNb2RlbCcsIChNb2RlbF9zZXJ2aWNlKSAtPlxuICBNb2RlbCA9IHt9ICMgTW9kZWxfc2VydmljZS5jcmVhdGUoKSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ01vZGVsJywgZnVuY3Rpb24oTW9kZWxfc2VydmljZSkge1xuICAgIHZhciBNb2RlbDtcbiAgICByZXR1cm4gTW9kZWwgPSB7fTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnTmV0d29yaycsIChNb2RlbCwgYXBpKSAtPlxuXHROZXR3b3JrID0gXG5cdFx0c2F2ZTogLT5cblx0XHRcdG5ldHdvcmsgPSBhbmd1bGFyLmNvcHkoTW9kZWwubmV0d29yaylcblxuXHRcdFx0bmV0d29yay5kaGNwID0gaWYgbmV0d29yay5kaGNwID09IHllcyB0aGVuICcxJyBlbHNlICcwJ1xuXG5cdFx0XHRhcGkuY2FsbCgnc2V0TmV0Q29uZmlnJywgbmV0d29yaylcblxuXHRcdGxvYWQ6IC0+XG5cdFx0XHRhcGkuY2FsbCgnZ2V0TmV0Q29uZmlnJykudGhlbiAocmVzdWx0KSAtPlxuXHRcdFx0XHRNb2RlbC5uZXR3b3JrID1cblx0XHRcdFx0XHRkaGNwICAgIDogaWYgcmVzdWx0LmRoY3AgPT0gJzEnIHRoZW4geWVzIGVsc2Ugbm9cblx0XHRcdFx0XHRpcCAgICAgIDogcmVzdWx0LmlwXG5cdFx0XHRcdFx0bWFzayAgICA6IHJlc3VsdC5tYXNrXG5cdFx0XHRcdFx0Z2F0ZXdheSA6IHJlc3VsdC5nYXRld2F5XG5cdFx0XHRcdFx0ZG5zMSAgICA6IHJlc3VsdC5kbnMxIHx8ICcnXG5cdFx0XHRcdFx0ZG5zMiAgICA6IHJlc3VsdC5kbnMyIHx8ICcnXG5cblx0XHRcdFx0IyBNb2RlbC5uZXR3b3JrLnR5cGUgPSAnTWFudWFsJ1xuIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnTmV0d29yaycsIGZ1bmN0aW9uKE1vZGVsLCBhcGkpIHtcbiAgICB2YXIgTmV0d29yaztcbiAgICByZXR1cm4gTmV0d29yayA9IHtcbiAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmV0d29yaztcbiAgICAgICAgbmV0d29yayA9IGFuZ3VsYXIuY29weShNb2RlbC5uZXR3b3JrKTtcbiAgICAgICAgbmV0d29yay5kaGNwID0gbmV0d29yay5kaGNwID09PSB0cnVlID8gJzEnIDogJzAnO1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ3NldE5ldENvbmZpZycsIG5ldHdvcmspO1xuICAgICAgfSxcbiAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoJ2dldE5ldENvbmZpZycpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIE1vZGVsLm5ldHdvcmsgPSB7XG4gICAgICAgICAgICBkaGNwOiByZXN1bHQuZGhjcCA9PT0gJzEnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgaXA6IHJlc3VsdC5pcCxcbiAgICAgICAgICAgIG1hc2s6IHJlc3VsdC5tYXNrLFxuICAgICAgICAgICAgZ2F0ZXdheTogcmVzdWx0LmdhdGV3YXksXG4gICAgICAgICAgICBkbnMxOiByZXN1bHQuZG5zMSB8fCAnJyxcbiAgICAgICAgICAgIGRuczI6IHJlc3VsdC5kbnMyIHx8ICcnXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnUG9ydF9udW1lcmF0aW9uJywgKCRyb290U2NvcGUsIGFwaSwgTW9kZWwsIE1vZGVsX3NlcnZpY2UsIERldmljZV9zZXR0aW5ncywgUG9ydCkgLT5cbiAgUG9ydF9udW1lcmF0aW9uID1cbiAgICAjINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINGG0LjRhNGA0L7QstC+0LUg0L7QsdC+0LfQvdCw0YfQtdC90LjQtSDQsiBHdWkg0LTQu9GPIDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgIGpvaW50X3BvcnRfY2xpZW50X251bWJlcjogKGpvaW50X3BvcnRfaWQpIC0+XG4gICAgICBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50ICsgam9pbnRfcG9ydF9pZFxuXG4gICAgIyDQktC+0LfQstGA0LDRidCw0LXRgiDRhtC40YTRgNC+0LLQvtC1INC+0LHQvtC30L3QsNGH0LXQvdC40LUg0LIgR3VpINC00LvRjyDQstGB0LXQs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCDQv9C+IGlkINC/0L7RgNGC0LAuXG4gICAgIyAo0LzQvtC20LXRgiDQv9GA0LjQvdC40LzQsNGC0Ywg0LrQsNC6IGlkINC/0L7RgNGC0LAsINGC0LDQuiDQuCDQvtCx0YrQtdC60YIgam9pbnQgcG9ydClcbiAgICAjINCf0YDQuNC80LXRgNGLOiA0OSAtPiA0OSwgNDkgLT4gNTIsIDUzIC0+IDUwXG4gICAgcG9ydF9pZF9mcm9tX2NsaWVudF9udW1iZXI6IChjbGllbnRfbnVtYmVyKSAtPlxuICAgICAgRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCArIChjbGllbnRfbnVtYmVyIC0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCAtIDEpICogRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQgKyAxXG5cbiAgICAjINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCINC/0L7RgNGCINC/0L4g0LLQstC10LTRkdC90L3QvtC80YMg0L3QsNC30LLQsNC90LjRjiDQv9C+0YDRgtCwLlxuICAgICMgKNGB0LwuINGE0YPQvdC60YbQuNGOIGJ5X25hbWUpXG4gICAgYnlfbmFtZTogKG5hbWUpIC0+IFBvcnQuYnlfaWQoUG9ydF9udW1lcmF0aW9uLmlkX2J5X25hbWUobmFtZSkpXG5cbiAgICAjINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCIGlkINC/0L7RgNGC0LAg0L/QviDQstCy0LXQtNGR0L3QvdC+0LzRgyDQvdCw0LfQstCw0L3QuNGOINC/0L7RgNGC0LAuXG4gICAgIyDQn9GA0LjQvNC10YDRizogXCI0OFwiIC0+IDQ4LCBcIjUwLjFcIiAtPiA1MywgXCI1MVwiIC0+IDU3XG4gICAgIyDQldGB0LvQuCDQv9C+0YDRgiDQsiDRgNC10LbQuNC80LUgNDBnLCDRgtC+INC00L7Qu9C20L3QviDQsdGL0YLRjCDQsdC10Lcg0YLQvtGH0LrQuC5cbiAgICAjINCV0YHQu9C4INGBINGC0L7Rh9C60L7QuSAtINCy0YvQtNCw0YHRgiBFcnJvciAo0Lgg0L3QsNC+0LHQvtGA0L7RgilcbiAgICBpZF9ieV9uYW1lOiAobmFtZSkgLT5cbiAgICAgIHBhcnRzID0gbmFtZS5tYXRjaCgvKFxcZCspKFxcLihcXGQrKSk/LylcblxuICAgICAgbWFpbiAgICA9IHBhcnNlSW50KHBhcnRzWzFdKVxuICAgICAgc3VicG9ydCA9IGlmIHBhcnRzWzNdIHRoZW4gcGFyc2VJbnQocGFydHNbM10pIGVsc2UgbnVsbFxuXG4gICAgICAjINC+0L/RgNC10LTQtdC70LjRgtGMINGC0LjQvyDQv9C+0YDRgtCwINC/0L4g0L3QvtC80LXRgNGDXG4gICAgICBwb3J0X2lkID0gUG9ydF9udW1lcmF0aW9uLnBvcnRfaWRfZnJvbV9jbGllbnRfbnVtYmVyKG1haW4pXG4gICAgICBwb3J0ID0gUG9ydF9udW1lcmF0aW9uLmNhdGVnb3JpemVfcG9ydChwb3J0X2lkKVxuXG4gICAgICAjINC10YHQu9C4INC90LDQt9Cy0LDQvdC40LUg0L/QvtGA0YLQsCDQsdGL0LvQviDRh9C10YDQtdC3INGC0L7Rh9C60YMgLSDRgtC+INGN0YLQviA0MC3Qs9C40LPQsNCx0LjRgtC90YvQuSDQv9C+0YDRgiDQsiDRgNC10LbQuNC80LUgNHgxMEdcbiAgICAgIGlkID0gaWYgc3VicG9ydFxuICAgICAgICAjINC10YHQu9C4INGN0YLQviDQvtCx0YvRh9C90YvQuSDQv9C+0YDRgiAtINCy0YvQtNCw0YLRjCDQvtGI0LjQsdC60YNcbiAgICAgICAgaWYgcG9ydC50eXBlID09ICdnZW5lcmljJ1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvcnQgI3ttYWlufSBpcyBub3QgYSBwYXJ0IG9mIGpvaW50IHBvcnRcIilcblxuICAgICAgICAjINC10YHQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINC90LUg0LIg0YDQtdC20LjQvNC1IDR4MTBHIC0g0LLRi9C00LDRgtGMINC+0YjQuNCx0LrRg1xuICAgICAgICBpZiBwb3J0LmpvaW50X3BvcnQubW9kZSAhPSAnNHgxMEcnXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSm9pbnQgcG9ydCAje3BvcnQuam9pbnRfcG9ydC5pZH0gaXNuJ3QgaW4gNHgxMEcgbW9kZVwiKVxuXG4gICAgICAgICMg0LLQtdGA0L3Rg9GC0YwgaWQg0L3Rg9C20L3QvtCz0L4g0L/QvtC00L/QvtGA0YLQsCDRjdGC0L7Qs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfdG9fcG9ydF9pZChwb3J0LmpvaW50X3BvcnQuaWQsIHN1YnBvcnQpXG5cbiAgICAgICMg0LXRgdC70Lgg0L3QsNC30LLQsNC90LjQtSDQv9C+0YDRgtCwINCx0YvQu9C+INC90LUg0YfQtdGA0LXQtyDRgtC+0YfQutGDXG4gICAgICBlbHNlXG4gICAgICAgICMg0LXRgdC70Lgg0Y3RgtC+INC+0LHRi9GH0L3Ri9C5INC/0L7RgNGCLCDQtdCz0L4g0LbQtSDRhtC40YTRgNGDINC4INCy0LXRgNC90YPRgtGMXG4gICAgICAgIGlmIHBvcnQudHlwZSA9PSAnZ2VuZXJpYydcbiAgICAgICAgICBtYWluXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAjINC10YHQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINC90LUg0LIg0YDQtdC20LjQvNC1IDQwRyAtINCy0YvQtNCw0YLRjCDQvtGI0LjQsdC60YNcbiAgICAgICAgICBpZiBwb3J0LmpvaW50X3BvcnQubW9kZSAhPSAnNDBHJ1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSm9pbnQgcG9ydCAje3BvcnQuam9pbnRfcG9ydC5pZH0gaXNuJ3QgaW4gNDBHIG1vZGVcIilcblxuICAgICAgICAgICMg0LLQtdGA0L3Rg9GC0YwgaWQg0L/QtdGA0LLQvtCz0L4g0L/QvtC00L/QvtGA0YLQsCDRjdGC0L7Qs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgICAgICAgIFBvcnRfbnVtZXJhdGlvbi5qb2luZWRfcG9ydF9pZF90b19wb3J0X2lkKHBvcnQuam9pbnRfcG9ydC5pZClcblxuICAgICMg0J/QviBpZCDQv9C+0YDRgtCwINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC90LDQt9Cy0LDQvdC40LUg0L/QvtGA0YLQsC5cbiAgICAjINCf0YDQuNC80LXRgNGLOiA0OCAtPiBcIjQ4XCIsIDUzIC0+IFwiNTAuMVwiLCA1NyAtPiBcIjUxXCJcbiAgICBuYW1lX2J5X2lkOiAocG9ydF9pZCkgLT5cbiAgICAgIHJldHVybiBTdHJpbmcocG9ydF9pZCkgaWYgUG9ydC5pc19nZW5lcmljKHBvcnRfaWQpXG5cbiAgICAgIFtqb2ludF9wb3J0X2lkLCBzdWJwb3J0X2lkXSA9IFBvcnRfbnVtZXJhdGlvbi5qb2luZWRfcG9ydF9pZF9mcm9tX3BvcnRfaWQocG9ydF9pZClcbiAgICAgICMg0LXRgdC70LggNDAt0LPQuNCz0LDQsdC40YLQvdGL0Lkg0L/QvtGA0YIg0LIg0YDQtdC20LjQvNC1IDQwR1xuICAgICAgaWYgTW9kZWxfc2VydmljZS5nZXRfam9pbnRfcG9ydF93aXRoX29mZnNldChNb2RlbCwgam9pbnRfcG9ydF9pZCkubW9kZSA9PSAnNDBHJyAmJiBzdWJwb3J0X2lkID09IDFcbiAgICAgICAgcmV0dXJuIFN0cmluZyhQb3J0X251bWVyYXRpb24uam9pbnRfcG9ydF9jbGllbnRfbnVtYmVyKGpvaW50X3BvcnRfaWQpKVxuXG4gICAgICAjINC10YHQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINCyINGA0LXQttC40LzQtSA0eDEwR1xuICAgICAgcmV0dXJuIFwiI3tQb3J0X251bWVyYXRpb24uam9pbnRfcG9ydF9jbGllbnRfbnVtYmVyKGpvaW50X3BvcnRfaWQpfS4je3N1YnBvcnRfaWR9XCJcblxuICAgICMg0JLQvtC30LLRgNCw0YnQsNC10YIg0LzQsNGB0YHQuNCyINC40Lcg0LTQstGD0YUg0LfQvdCw0YfQtdC90LjQuTogXG4gICAgIyBbMF0gLSDQv9C+0YDRj9C00LrQvtCy0YvQuSDQvdC+0LzQtdGAIDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCAo0L3QsNGH0LjQvdCw0Y8g0YEg0LXQtNC40L3QuNGG0YspXG4gICAgIyBbMV0gLSDQv9C+0YDRj9C00LrQvtCy0YvQuSDQvdC+0LzQtdGAINC/0L7QtNC/0L7RgNGC0LAg0LLQvdGD0YLRgNC4IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCAo0L3QsNGH0LjQvdCw0Y8g0YEg0LXQtNC40L3QuNGG0YspXG4gICAgI1xuICAgICMg0J/RgNC40LzQtdGA0Ys6IDQ5IC0+IFsxLCAxXSwgNTQgLT4gWzIsIDJdXG4gICAgam9pbmVkX3BvcnRfaWRfZnJvbV9wb3J0X2lkOiAocG9ydF9pZCkgLT4gXG4gICAgICBpZiBwb3J0X2lkID4gUG9ydC5jb3VudFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3J0ICN7cG9ydF9pZH0gaXMgb3V0IG9mIGJvdW5kc1wiKVxuXG4gICAgICBpZiBwb3J0X2lkIDw9IERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnRcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUG9ydCAje3BvcnRfaWR9IGlzbid0IGEgcGFydCBvZiBhIGpvaW50IHBvcnRcIilcblxuICAgICAgcG9ydF9pZCAtPSBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50XG4gICAgICBcbiAgICAgIGpvaW50X3BvcnRfaWQgPSAxXG4gICAgICB3aGlsZSBwb3J0X2lkID4gRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnRcbiAgICAgICAgcG9ydF9pZCAtPSBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydFxuICAgICAgICBqb2ludF9wb3J0X2lkKytcblxuICAgICAgcmV0dXJuIFtqb2ludF9wb3J0X2lkLCBwb3J0X2lkXVxuXG4gICAgIyDQkdC10YDRkdGCINC00LLQsCDQt9C90LDRh9C10L3QuNGPOiBcbiAgICAjIGpvaW50X3BvcnRfaWQgLSDQv9C+0YDRj9C00LrQvtCy0YvQuSDQvdC+0LzQtdGAIDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCAo0L3QsNGH0LjQvdCw0Y8g0YEg0LXQtNC40L3QuNGG0YspXG4gICAgIyBzdWJwb3J0X2lkIC0g0L/QvtGA0Y/QtNC60L7QstGL0Lkg0L3QvtC80LXRgCDQv9C+0LTQv9C+0YDRgtCwINCy0L3Rg9GC0YDQuCA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LAgKNC90LDRh9C40L3QsNGPINGBINC10LTQuNC90LjRhtGLKVxuICAgICNcbiAgICAjINCf0YDQuNC80LXRgNGLOiAoMSwgMSkgLT4gNDksICgyLCAyKSAtPiA1NFxuICAgIGpvaW5lZF9wb3J0X2lkX3RvX3BvcnRfaWQ6IChqb2ludF9wb3J0X2lkLCBzdWJwb3J0X2lkKSAtPlxuICAgICAgaWYgam9pbnRfcG9ydF9pZCA8IDAgfHwgam9pbnRfcG9ydF9pZCA+IFBvcnQuam9pbnRfcG9ydF9jb3VudCgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgam9pbnQgcG9ydCBpZCAje2pvaW50X3BvcnRfaWR9XCIpXG5cbiAgICAgIGlmIHN1YnBvcnRfaWQgPiBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnBvcnQgaWQgI3tzdWJwb3J0X2lkfVwiKVxuXG4gICAgICBpZiBub3Qgc3VicG9ydF9pZD9cbiAgICAgICAgc3VicG9ydF9pZCA9IDFcblxuICAgICAgRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCArIChqb2ludF9wb3J0X2lkIC0gMSkgKiBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydCArIHN1YnBvcnRfaWRcblxuICAgICMg0L/QviBpZCDQv9C+0YDRgtCwINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC+0L/QuNGB0LDQvdC40LUg0Y3RgtC+0LPQviDQv9C+0YDRgtCwLCDRg9C60LDQt9GL0LLQsNGPINC10LPQviDRgtC40L86IGdlbmVyaWMg0LvQuNCx0L4gam9pbmFibGUuXG4gICAgIyDQtdGB0LvQuCDRjdGC0L7RgiDQv9C+0YDRgiBnZW5lcmljIC0g0YLQviDRjdGC0L4g0L/RgNC+0YHRgtC+INC+0LHRi9GH0L3Ri9C5INC/0L7RgNGCLlxuICAgICMg0LXRgdC70Lgg0L/QvtGA0YIg0YPRh9Cw0YHRgtCy0YPQtdGCINCyINGB0L7RgdGC0LDQstC1IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCwg0YLQviDQvtC9IC0gam9pbmFibGUsINC4INGE0YPQvdC60YbQuNGPINCy0LXRgNC90ZHRgiBcbiAgICAjINC+0LHRitC10LrRgiDRjdGC0L7Qs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCArINGE0LvQsNCzINGC0L7Qs9C+LCDRj9Cy0LvRj9C10YLRgdGPINC70Lgg0Y3RgtC+0YIg0L/QvtGA0YIg0L/QtdGA0LLRi9C8INGB0YDQtdC00Lgg0L/QvtC00L/QvtGA0YLQvtCyLlxuICAgIGNhdGVnb3JpemVfcG9ydDogKHBvcnRfaWQpIC0+XG4gICAgICBpZiBQb3J0LmlzX2dlbmVyaWMocG9ydF9pZCkgdGhlbiByZXR1cm4geyB0eXBlOiAnZ2VuZXJpYycgfVxuXG4gICAgICBbam9pbnRfcG9ydF9pZCwgcG9ydF9pZF0gPSBQb3J0X251bWVyYXRpb24uam9pbmVkX3BvcnRfaWRfZnJvbV9wb3J0X2lkKHBvcnRfaWQpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUgICAgICAgICAgICAgIDogJ2pvaW5hYmxlJ1xuICAgICAgICBqb2ludF9wb3J0ICAgICAgICA6IE1vZGVsX3NlcnZpY2UuZ2V0X2pvaW50X3BvcnRfd2l0aF9vZmZzZXQoTW9kZWwsIGpvaW50X3BvcnRfaWQpXG4gICAgICAgIGlzX2ZpcnN0X2luX2pvaW50IDogcG9ydF9pZCA9PSAxXG4gICAgICB9IiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnUG9ydF9udW1lcmF0aW9uJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgYXBpLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgRGV2aWNlX3NldHRpbmdzLCBQb3J0KSB7XG4gICAgdmFyIFBvcnRfbnVtZXJhdGlvbjtcbiAgICByZXR1cm4gUG9ydF9udW1lcmF0aW9uID0ge1xuICAgICAgam9pbnRfcG9ydF9jbGllbnRfbnVtYmVyOiBmdW5jdGlvbihqb2ludF9wb3J0X2lkKSB7XG4gICAgICAgIHJldHVybiBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50ICsgam9pbnRfcG9ydF9pZDtcbiAgICAgIH0sXG4gICAgICBwb3J0X2lkX2Zyb21fY2xpZW50X251bWJlcjogZnVuY3Rpb24oY2xpZW50X251bWJlcikge1xuICAgICAgICByZXR1cm4gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCArIChjbGllbnRfbnVtYmVyIC0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCAtIDEpICogRGV2aWNlX3NldHRpbmdzLnBvcnRzX2luX2pvaW50X3BvcnQgKyAxO1xuICAgICAgfSxcbiAgICAgIGJ5X25hbWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFBvcnQuYnlfaWQoUG9ydF9udW1lcmF0aW9uLmlkX2J5X25hbWUobmFtZSkpO1xuICAgICAgfSxcbiAgICAgIGlkX2J5X25hbWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIGlkLCBtYWluLCBwYXJ0cywgcG9ydCwgcG9ydF9pZCwgc3VicG9ydDtcbiAgICAgICAgcGFydHMgPSBuYW1lLm1hdGNoKC8oXFxkKykoXFwuKFxcZCspKT8vKTtcbiAgICAgICAgbWFpbiA9IHBhcnNlSW50KHBhcnRzWzFdKTtcbiAgICAgICAgc3VicG9ydCA9IHBhcnRzWzNdID8gcGFyc2VJbnQocGFydHNbM10pIDogbnVsbDtcbiAgICAgICAgcG9ydF9pZCA9IFBvcnRfbnVtZXJhdGlvbi5wb3J0X2lkX2Zyb21fY2xpZW50X251bWJlcihtYWluKTtcbiAgICAgICAgcG9ydCA9IFBvcnRfbnVtZXJhdGlvbi5jYXRlZ29yaXplX3BvcnQocG9ydF9pZCk7XG4gICAgICAgIHJldHVybiBpZCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoc3VicG9ydCkge1xuICAgICAgICAgICAgaWYgKHBvcnQudHlwZSA9PT0gJ2dlbmVyaWMnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvcnQgXCIgKyBtYWluICsgXCIgaXMgbm90IGEgcGFydCBvZiBqb2ludCBwb3J0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvcnQuam9pbnRfcG9ydC5tb2RlICE9PSAnNHgxMEcnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkpvaW50IHBvcnQgXCIgKyBwb3J0LmpvaW50X3BvcnQuaWQgKyBcIiBpc24ndCBpbiA0eDEwRyBtb2RlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFBvcnRfbnVtZXJhdGlvbi5qb2luZWRfcG9ydF9pZF90b19wb3J0X2lkKHBvcnQuam9pbnRfcG9ydC5pZCwgc3VicG9ydCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwb3J0LnR5cGUgPT09ICdnZW5lcmljJykge1xuICAgICAgICAgICAgICByZXR1cm4gbWFpbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChwb3J0LmpvaW50X3BvcnQubW9kZSAhPT0gJzQwRycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKb2ludCBwb3J0IFwiICsgcG9ydC5qb2ludF9wb3J0LmlkICsgXCIgaXNuJ3QgaW4gNDBHIG1vZGVcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIFBvcnRfbnVtZXJhdGlvbi5qb2luZWRfcG9ydF9pZF90b19wb3J0X2lkKHBvcnQuam9pbnRfcG9ydC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgfSxcbiAgICAgIG5hbWVfYnlfaWQ6IGZ1bmN0aW9uKHBvcnRfaWQpIHtcbiAgICAgICAgdmFyIGpvaW50X3BvcnRfaWQsIHJlZiwgc3VicG9ydF9pZDtcbiAgICAgICAgaWYgKFBvcnQuaXNfZ2VuZXJpYyhwb3J0X2lkKSkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcocG9ydF9pZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVmID0gUG9ydF9udW1lcmF0aW9uLmpvaW5lZF9wb3J0X2lkX2Zyb21fcG9ydF9pZChwb3J0X2lkKSwgam9pbnRfcG9ydF9pZCA9IHJlZlswXSwgc3VicG9ydF9pZCA9IHJlZlsxXTtcbiAgICAgICAgaWYgKE1vZGVsX3NlcnZpY2UuZ2V0X2pvaW50X3BvcnRfd2l0aF9vZmZzZXQoTW9kZWwsIGpvaW50X3BvcnRfaWQpLm1vZGUgPT09ICc0MEcnICYmIHN1YnBvcnRfaWQgPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKFBvcnRfbnVtZXJhdGlvbi5qb2ludF9wb3J0X2NsaWVudF9udW1iZXIoam9pbnRfcG9ydF9pZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUG9ydF9udW1lcmF0aW9uLmpvaW50X3BvcnRfY2xpZW50X251bWJlcihqb2ludF9wb3J0X2lkKSkgKyBcIi5cIiArIHN1YnBvcnRfaWQ7XG4gICAgICB9LFxuICAgICAgam9pbmVkX3BvcnRfaWRfZnJvbV9wb3J0X2lkOiBmdW5jdGlvbihwb3J0X2lkKSB7XG4gICAgICAgIHZhciBqb2ludF9wb3J0X2lkO1xuICAgICAgICBpZiAocG9ydF9pZCA+IFBvcnQuY291bnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3J0IFwiICsgcG9ydF9pZCArIFwiIGlzIG91dCBvZiBib3VuZHNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcnRfaWQgPD0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvcnQgXCIgKyBwb3J0X2lkICsgXCIgaXNuJ3QgYSBwYXJ0IG9mIGEgam9pbnQgcG9ydFwiKTtcbiAgICAgICAgfVxuICAgICAgICBwb3J0X2lkIC09IERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnQ7XG4gICAgICAgIGpvaW50X3BvcnRfaWQgPSAxO1xuICAgICAgICB3aGlsZSAocG9ydF9pZCA+IERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0KSB7XG4gICAgICAgICAgcG9ydF9pZCAtPSBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydDtcbiAgICAgICAgICBqb2ludF9wb3J0X2lkKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtqb2ludF9wb3J0X2lkLCBwb3J0X2lkXTtcbiAgICAgIH0sXG4gICAgICBqb2luZWRfcG9ydF9pZF90b19wb3J0X2lkOiBmdW5jdGlvbihqb2ludF9wb3J0X2lkLCBzdWJwb3J0X2lkKSB7XG4gICAgICAgIGlmIChqb2ludF9wb3J0X2lkIDwgMCB8fCBqb2ludF9wb3J0X2lkID4gUG9ydC5qb2ludF9wb3J0X2NvdW50KCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGpvaW50IHBvcnQgaWQgXCIgKyBqb2ludF9wb3J0X2lkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VicG9ydF9pZCA+IERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdWJwb3J0IGlkIFwiICsgc3VicG9ydF9pZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnBvcnRfaWQgPT0gbnVsbCkge1xuICAgICAgICAgIHN1YnBvcnRfaWQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50ICsgKGpvaW50X3BvcnRfaWQgLSAxKSAqIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0ICsgc3VicG9ydF9pZDtcbiAgICAgIH0sXG4gICAgICBjYXRlZ29yaXplX3BvcnQ6IGZ1bmN0aW9uKHBvcnRfaWQpIHtcbiAgICAgICAgdmFyIGpvaW50X3BvcnRfaWQsIHJlZjtcbiAgICAgICAgaWYgKFBvcnQuaXNfZ2VuZXJpYyhwb3J0X2lkKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZ2VuZXJpYydcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJlZiA9IFBvcnRfbnVtZXJhdGlvbi5qb2luZWRfcG9ydF9pZF9mcm9tX3BvcnRfaWQocG9ydF9pZCksIGpvaW50X3BvcnRfaWQgPSByZWZbMF0sIHBvcnRfaWQgPSByZWZbMV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2pvaW5hYmxlJyxcbiAgICAgICAgICBqb2ludF9wb3J0OiBNb2RlbF9zZXJ2aWNlLmdldF9qb2ludF9wb3J0X3dpdGhfb2Zmc2V0KE1vZGVsLCBqb2ludF9wb3J0X2lkKSxcbiAgICAgICAgICBpc19maXJzdF9pbl9qb2ludDogcG9ydF9pZCA9PT0gMVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiYXBwLmZhY3RvcnkgJ1BvcnRfdmlldycsICgkcm9vdFNjb3BlLCBhcGksIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBEZXZpY2Vfc2V0dGluZ3MpIC0+XG4gIFBvcnRfdmlldyA9XG4gICAgIyDQktGL0LTQtdC70Y/QtdGCINC/0L7RgNGCINCyIEd1aVxuICAgIHNlbGVjdDogKHBvcnRfaWQsIGRpc2NhcmRfc2VsZWN0aW9uKSAtPlxuICAgICAgaWYgdHlwZW9mIHBvcnRfaWQgPT0gJ29iamVjdCdcbiAgICAgICAgcG9ydF9pZCA9IHBvcnRfaWQuaWRcblxuICAgICAgaWYgZGlzY2FyZF9zZWxlY3Rpb24gIT0gbm9cbiAgICAgICAgUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpXG5cbiAgICAgIE9iamVjdC5zZXQoJHJvb3RTY29wZS52aWV3LnBvcnRzLCBwb3J0X2lkLCAnc2VsZWN0ZWQnLCB5ZXMpXG5cbiAgICAjINCh0L3QuNC80LDQtdGCINCy0YvQtNC10LvQtdC90LjQtSDRgSDQv9C+0YDRgtCwINCyIEd1aVxuICAgIGRlc2VsZWN0OiAocG9ydF9pZCkgLT5cbiAgICAgIGlmIHR5cGVvZiBwb3J0X2lkID09ICdvYmplY3QnXG4gICAgICAgIHBvcnRfaWQgPSBwb3J0X2lkLmlkXG4gICAgICAgIFxuICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnRfaWQsICdzZWxlY3RlZCcsIG5vKVxuXG4gICAgIyDQmNC90LLQtdGA0YLQuNGA0YPQtdGCINCy0YvQtNC10LvQtdC90LjQtSDQv9C+0YDRgtCwINCyIEd1aVxuICAgIHRvZ2dsZV9zZWxlY3Rpb246IChwb3J0KSAtPlxuICAgICAgaWYgbm90IEBpc19zZWxlY3RlZChwb3J0KVxuICAgICAgICBAc2VsZWN0KHBvcnQsIG5vKVxuICAgICAgZWxzZVxuICAgICAgICBAZGVzZWxlY3QocG9ydClcblxuICAgICMg0JLRi9C00LXQu9C10L0g0LvQuCDRjdGC0L7RgiDQv9C+0YDRgiDQsiBHdWlcbiAgICBpc19zZWxlY3RlZDogKHBvcnQpIC0+XG4gICAgICBPYmplY3QuZ2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkJylcblxuICAgICMg0KHQvdC40LzQsNC10YIg0LLRi9C00LXQu9C10L3QuNC1INGB0L4g0LLRgdC10YUg0L/QvtGA0YLQvtCyINCyIEd1aVxuICAgIGRlc2VsZWN0X2FsbDogLT5cbiAgICAgIHJldHVybiBpZiBub3QgTW9kZWwucG9ydHNcblxuICAgICAgZm9yIHBvcnQgaW4gTW9kZWwucG9ydHNcbiAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZCcsIG5vKVxuXG4gICAgIyDQmtC+0LvQuNGH0LXRgdGC0LLQviDQstGL0LTQtdC70LXQvdC90YvRhSDQv9C+0YDRgtC+0LIg0LIgR3VpXG4gICAgc2VsZWN0ZWRfY291bnQ6IC0+XG4gICAgICBjb3VudCA9IDBcblxuICAgICAgZm9yIHBvcnQgaW4gTW9kZWwucG9ydHNcbiAgICAgICAgaWYgUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpXG4gICAgICAgICAgY291bnQrK1xuXG4gICAgICByZXR1cm4gY291bnRcblxuICAgICMg0J7Qv9GA0LXQtNC10LvRj9C10YIsINC90LDRhdC+0LTQuNGC0YHRjyDQu9C4INGN0YLQvtGCIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C5INC/0L7RgNGCINCyINGB0L7RgdGC0L7Rj9C90LjQuCB1cCDQuNC70LggZG93bi5cbiAgICAjINCd0LAg0LLRhdC+0LQg0L/QvtC00LDRkdGC0YHRjyDQvtCx0YrQtdC60YIgNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwLlxuICAgIGlzX2pvaW50X3BvcnRfdXA6IChqb2ludF9wb3J0KSAtPlxuICAgICAgKHBvcnQgZm9yIHBvcnQgaW4gam9pbnRfcG9ydC5wb3J0cyB3aGVuIFBvcnRfdmlldy5pc191cChwb3J0KSkubm90X2VtcHR5KClcblxuICAgICMg0J7Qv9GA0LXQtNC10LvRj9C10YIsINC90LDRhdC+0LTQuNGC0YHRjyDQu9C4INGN0YLQvtGCINC+0LHRi9GH0L3Ri9C5INC/0L7RgNGCINCyINGB0L7RgdGC0L7Rj9C90LjQuCB1cCDQuNC70LggZG93bi5cbiAgICBpc191cDogKHBvcnQpIC0+ICRyb290U2NvcGUuc3RhdHMucG9ydHNbcG9ydC5pZF0uc3RhdGUiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdQb3J0X3ZpZXcnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCBhcGksIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBEZXZpY2Vfc2V0dGluZ3MpIHtcbiAgICB2YXIgUG9ydF92aWV3O1xuICAgIHJldHVybiBQb3J0X3ZpZXcgPSB7XG4gICAgICBzZWxlY3Q6IGZ1bmN0aW9uKHBvcnRfaWQsIGRpc2NhcmRfc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9ydF9pZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBwb3J0X2lkID0gcG9ydF9pZC5pZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzY2FyZF9zZWxlY3Rpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgUG9ydF92aWV3LmRlc2VsZWN0X2FsbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydF9pZCwgJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9LFxuICAgICAgZGVzZWxlY3Q6IGZ1bmN0aW9uKHBvcnRfaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3J0X2lkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHBvcnRfaWQgPSBwb3J0X2lkLmlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydF9pZCwgJ3NlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZV9zZWxlY3Rpb246IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzX3NlbGVjdGVkKHBvcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0KHBvcnQsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kZXNlbGVjdChwb3J0KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlzX3NlbGVjdGVkOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkJyk7XG4gICAgICB9LFxuICAgICAgZGVzZWxlY3RfYWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcG9ydCwgcmVmLCByZXN1bHRzO1xuICAgICAgICBpZiAoIU1vZGVsLnBvcnRzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlZiA9IE1vZGVsLnBvcnRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHBvcnQgPSByZWZbaV07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKE9iamVjdC5zZXQoJHJvb3RTY29wZS52aWV3LnBvcnRzLCBwb3J0LmlkLCAnc2VsZWN0ZWQnLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkX2NvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvdW50LCBpLCBsZW4sIHBvcnQsIHJlZjtcbiAgICAgICAgY291bnQgPSAwO1xuICAgICAgICByZWYgPSBNb2RlbC5wb3J0cztcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICBpZiAoUG9ydF92aWV3LmlzX3NlbGVjdGVkKHBvcnQpKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICB9LFxuICAgICAgaXNfam9pbnRfcG9ydF91cDogZnVuY3Rpb24oam9pbnRfcG9ydCkge1xuICAgICAgICB2YXIgcG9ydDtcbiAgICAgICAgcmV0dXJuICgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlZiA9IGpvaW50X3BvcnQucG9ydHM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICAgIGlmIChQb3J0X3ZpZXcuaXNfdXAocG9ydCkpIHtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHBvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkoKSkubm90X2VtcHR5KCk7XG4gICAgICB9LFxuICAgICAgaXNfdXA6IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgcmV0dXJuICRyb290U2NvcGUuc3RhdHMucG9ydHNbcG9ydC5pZF0uc3RhdGU7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIjIGZhY3Rvcnkg0LLRi9C90LXRgdC10L3QsCDQsiDQvtGC0LTQtdC70YzQvdGD0Y4g0LjQvNC10L3QvtCy0LDQvdC90YPRjiDQs9C70L7QsdCw0LvRjNC90YPRjiDRhNGD0L3QutGG0LjRjiwg0YfRgtC+0LHRiyDQsdGL0LvQsCDQstC+0LfQvNC+0LbQvdC+0YHRgtGMINGB0L7Qt9C00LDRgtGMXG4jINGB0LLQvtC5IFwi0L7RgdC+0LHQtdC90L3Ri9C5XCIg0YHQtdGA0LLQuNGBINGN0YLQvtCz0L4g0YLQuNC/0LAsINCyINC60L7RgtC+0YDQvtC8INC+0LTQvdCwINC40Lcg0LfQsNCy0LjRgdC40LzQvtGB0YLQtdC5INC/0L7QtNC80LXQvdC10L3QsCDQvdCwINC90YPQttC90YPRjiDQvdCw0LxcbiNcbiMg0L/RgNC4INC40LfQvNC10L3QtdC90LjQuCDQsNGA0LPRg9C80LXQvdGC0L7QsiDRjdGC0L7QuSDRhNGD0L3QutGG0LjQuCAtINCy0L3QvtGB0LjRgtC1INC40LfQvNC10L3QtdC90LjRjyDRgtCw0LrQttC1INCyINC80LDRgdGB0LjQslxuaW5qZWN0ZWQgPSBbJyRyb290U2NvcGUnLCAnYXBpJywgJ01vZGVsJywgJ01vZGVsX3NlcnZpY2UnLCAnRGV2aWNlX3NldHRpbmdzJywgJ0VudW1zJ11cbkBQb3J0X3NlcnZpY2VfY29uc3RydWN0b3IgPSAoJHJvb3RTY29wZSwgYXBpLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgRGV2aWNlX3NldHRpbmdzLCBFbnVtcykgLT5cbiAgUG9ydCA9XG4gICAgIyDQntCx0YnQtdC1INC60L7Qu9C40YfQtdGB0YLQstC+INC/0L7RgNGC0L7QsiAo0LHRg9C00LXRgiDQt9Cw0L/QvtC70L3QtdC90L4g0L/QviBhamF4J9GDINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCBHdWkpXG4gICAgY291bnQ6IDBcblxuICAgICMg0JLQvtC30LLRgNCw0YnQsNC10YIg0L7QsdGK0LXQutGCINC/0L7RgNGC0LAg0L/QviDQtdCz0L4gaWRcbiAgICBieV9pZDogKGlkKSAtPlxuICAgICAgaWYgaWQgPiBNb2RlbC5wb3J0cy5sZW5ndGhcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUG9ydCAje2lkfSBub3QgZm91bmRcIilcbiAgICAgIE1vZGVsLnBvcnRzW2lkIC0gMV1cblxuICAgICMg0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIgZXRoZXJuZXQgbW9kZSDQv9C+0YDRgtCwXG4gICAgc2V0X2V0aF9tb2RlOiAocG9ydCkgLT5cbiAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKVxuXG4gICAgICBhcGkuY2FsbChcInNldFBvcnRFdGhNb2RlXCIsIHsgaWQ6IHBvcnQuaWQsIGV0aF9tb2RlOiBwb3J0LmV0aF9tb2RlIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgIyBTdGF0dXMuaW5mbygn0KHQutC+0YDQvtGB0YLRjCDQv9C+0YDRgtCwINC40LfQvNC10L3QtdC90LAnKVxuXG4gICAgIyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiBwYXJzZXIgbGV2ZWwg0L/QvtGA0YLQsFxuICAgIHNldF9wYXJzZXJfbGV2ZWw6IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIGFwaS5jYWxsKFwic2V0UG9ydFBhcnNlckxldmVsXCIsIHsgaWQ6IHBvcnQuaWQsIGxldmVsOiBwb3J0LnBhcnNlcl9sZXZlbCB9KS50aGVuIChyZXN1bHQpIC0+XG4gICAgICAgICMgU3RhdHVzLmluZm8oJ9Cj0YDQvtCy0LXQvdGMINC/0LDRgNGB0LXRgNCwINC/0L7RgNGC0LAg0LjQt9C80LXQvdGR0L0nKVxuXG4gICAgIyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDRhNC70LDQsyBEUEkg0L/QvtGA0YLQsFxuICAgIHNldF9kZWVwX2luc3BlY3Rpb246IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIGFwaS5jYWxsKFwic2V0UG9ydERJUGFyc2luZ1wiLCB7IGlkOiBwb3J0LmlkLCBlbmFibGU6IHBvcnQuZGVlcF9pbnNwZWN0aW9uIH0pXG5cbiAgICAjINCS0LrQu9GO0YfQsNC10YIg0L/QvtGA0YJcbiAgICBlbmFibGU6IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIFBvcnQuc2V0X2VuYWJsZWQoeyBpZDogcG9ydC5pZCwgZW5hYmxlZDogeWVzIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgcG9ydC5lbmFibGVkID0geWVzXG5cbiAgICAjINCS0YvQutC70Y7Rh9Cw0LXRgiDQv9C+0YDRglxuICAgIGRpc2FibGU6IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIFBvcnQuc2V0X2VuYWJsZWQoeyBpZDogcG9ydC5pZCwgZW5hYmxlZDogbm8gfSkudGhlbiAocmVzdWx0KSAtPlxuICAgICAgICBwb3J0LmVuYWJsZWQgPSBub1xuXG4gICAgIyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDRgdC+0YHRgtC+0Y/QvdC40LUg0LLQutC70Y7Rh9C10L3QvdC+0YHRgtC4L9Cy0YvQutC70Y7Rh9C10L3QvdC+0YHRgtC4INC/0L7RgNGC0LBcbiAgICBzZXRfZW5hYmxlZDogKHBvcnQpIC0+XG4gICAgICBNb2RlbF9zZXJ2aWNlLmVuc3VyZV9wb3J0c19sb2NrKClcblxuICAgICAgYXBpLmNhbGwoXCJzZXRQb3J0RW5hYmxlZFwiLCB7IGlkOiBwb3J0LmlkLCBlbmFibGU6IGlmIHBvcnQuZW5hYmxlZCB0aGVuIDEgZWxzZSAwIH0pXG5cbiAgICAjINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINGE0LvQsNCzINGD0YfQsNGB0YLQuNGPINC00LDQvdC90L7Qs9C+INC/0L7RgNGC0LAg0LIg0YLQsNCx0LvQuNGG0LUgTUFDINCw0LTRgNC10YHQvtCyXG4gICAgc2V0X21hY19sZWFybmluZzogKHBvcnQpIC0+XG4gICAgICBNb2RlbF9zZXJ2aWNlLmVuc3VyZV9wb3J0c19sb2NrKClcblxuICAgICAgYXBpLmNhbGwoXCJzZXRQb3J0TGVhcm5pbmdcIiwgeyBpZDogcG9ydC5pZCwgZW5hYmxlOiAwIH0pLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgIyBTdGF0dXMuaW5mbygn0J3QsNGB0YLRgNC+0LnQutC4IE1BQyDRgtCw0LHQu9C40YbRiyDQvdCwINC/0L7RgNGC0YMg0LjQt9C80LXQvdC10L3RiycpXG5cbiAgICAjINCS0LrQu9GO0YfQsNC10YIv0LLRi9C60LvRjtGH0LDQtdGCINGA0LXQttC40LwgZm9yY2UgdXAg0L/QvtGA0YLQsFxuICAgIHNldF9mb3JjZV91cF9zaW1wbGU6IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIGFwaS5jYWxsKFwic2V0UG9ydEZvcmNlVXBcIiwgeyBpZDogcG9ydC5pZCwgZW5hYmxlOiBpZiBwb3J0LmZvcmNlX3VwIHRoZW4gMSBlbHNlIDAgfSlcblxuICAgICMg0JLQutC70Y7Rh9Cw0LXRgi/QstGL0LrQu9GO0YfQsNC10YIg0YDQtdC20LjQvCBmb3JjZSB1cCDQv9C+0YDRgtCwLFxuICAgICMg0YHQv9GA0LDQstC70Y/Rj9GB0Ywg0YEg0L/QvtCx0L7Rh9C90YvQvNC4INGN0YTRhNC10LrRgtCw0LzQuCDRjdGC0L7QuSDQvtC/0LXRgNCw0YbQuNC4LlxuICAgIHNldF9mb3JjZV91cDogKHBvcnQpIC0+XG4gICAgICAjINC10YHQu9C4INCy0YvQutC70Y7Rh9C40YLRjCBmb3JjZSB1cCDRgyDQv9C+0YDRgtCwLCDRgtC+INC90LAg0LbQtdC70LXQt9C60LUg0L7QvSDQv9C10YDQtdC60LvRjtGH0LDQtdGC0YHRjyDQsiBkaXNhYmxlZC5cbiAgICAgICMg0LTQsNC90L3Ri9C5INC60L7QtCDQuNGB0L/RgNCw0LLQu9GP0LXRgiDRjdGC0L4sINC/0L7RgdGL0LvQsNGPINGB0YDQsNC30YMg0L/QvtGB0LvQtSDQutC+0LzQsNC90LTRiyBzZXRQb3J0Rm9yY2VVcCDQutC+0LzQsNC90LTRgyBzZXRQb3J0RW5hYmxlZFxuXG4gICAgICBhcGkuYmVnaW4oKVxuXG4gICAgICBQb3J0LnNldF9mb3JjZV91cF9zaW1wbGUocG9ydClcblxuICAgICAgaWYgbm90IHBvcnQuZW5hYmxlZD9cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXRQb3J0Rm9yY2VVcCBjYWxsZWQgd2l0aG91dCBrbm93biBwb3J0IGVuYWJsZWQvZGlzYWJsZWQgc3RhdGUnKVxuXG4gICAgICBQb3J0LnNldF9lbmFibGVkKHBvcnQpXG5cbiAgICAgIGFwaS5lbmQoKVxuXG4gICAgIyDQktC60LvRjtGH0LDQtdGCL9Cy0YvQutC70Y7Rh9Cw0LXRgiDRgNC10LbQuNC8IGxvb3BiYWNrINC/0L7RgNGC0LAgKNGB0LDQvCDRgdC10LHRjylcbiAgICBzZXRfbG9vcGJhY2s6IChwb3J0KSAtPlxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgIGFwaS5jYWxsKFwic2V0UG9ydExvb3BiYWNrXCIsIHsgaWQ6IHBvcnQuaWQsIGVuYWJsZTogaWYgcG9ydC5sb29wYmFjayB0aGVuIDEgZWxzZSAwIH0pXG5cbiAgICAjINCh0LHRgNCw0YHRi9Cy0LDQtdGCINGB0YLQsNGC0LjRgdGC0LjQutGDINC90LAg0Y3RgtC+0Lwg0L/QvtGA0YLRg1xuICAgIHJlc2V0X3BvcnRfc3RhdHM6IChwb3J0KSAtPlxuICAgICAgYXBpLmNhbGwoXCJyZXNldFBvcnRTdGF0XCIsIHsgaWQ6IHBvcnQuaWQgfSlcblxuICAgICMg0KHQsdGA0LDRgdGL0LLQsNC10YIg0YHRgtCw0YLQuNGB0YLQuNC60YMg0L3QsCDQstGB0LXRhSDQv9C+0YDRgtCw0YVcbiAgICByZXNldF9zdGF0czogKHBvcnQpIC0+XG4gICAgICBpZiBwb3J0P1xuICAgICAgICByZXR1cm4gUG9ydC5yZXNldF9wb3J0X3N0YXRzKHBvcnQpXG5cbiAgICAgIGFwaS5iZWdpbigpXG5cbiAgICAgIGZvciBwb3J0IGluIE1vZGVsLnBvcnRzXG4gICAgICAgIFBvcnQucmVzZXRfcG9ydF9zdGF0cyhwb3J0KVxuXG4gICAgICBhcGkuZW5kKClcblxuICAgICMg0J7QsdC90L7QstC70Y/QtdGCINCyINC80L7QtNC10LvQuCDQtNCw0L3QvdGL0LUg0Y3RgtC+0LPQviDQv9C+0YDRgtCwXG4gICAgdXBkYXRlOiAoZGF0YSkgLT5cbiAgICAgIGRldmljZV9wb3J0ID0gUG9ydC5ieV9pZChkYXRhLmlkKVxuICAgICAgYW5ndWxhci5leHRlbmQoZGV2aWNlX3BvcnQsIGRhdGEpXG5cbiAgICAjINCSINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDRgtC+0LPQviwg0LrQsNC60LjQtSDQv9C10YDQtdC00LDQvdGLINGB0LLQvtC50YHRgtCy0LAg0LTQu9GPINC/0L7RgNGC0LAsXG4gICAgIyDQstGL0LfRi9Cy0LDQtdGCINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQtSDQvNC10YLQvtC00YsgYXBpINC00LvRjyDQv9GA0LjQvNC10L3QtdC90LjRjyDRjdGC0LjRhSDRgdCy0L7QudGB0YLQsiDQvdCwINC00LDQvdC90L7QvCDQv9C+0YDRgtGDLlxuICAgIGNvbmZpZ3VyZTogKHBvcnQpIC0+XG4gICAgICBpZiBwb3J0LmVuYWJsZWQ/XG4gICAgICAgIFBvcnQuc2V0X2VuYWJsZWQocG9ydClcblxuICAgICAgaWYgcG9ydC5ldGhfbW9kZT9cbiAgICAgICAgUG9ydC5zZXRfZXRoX21vZGUocG9ydClcblxuICAgICAgUG9ydC5zZXRfbWFjX2xlYXJuaW5nKHBvcnQpXG5cbiAgICAgIGlmIHBvcnQucGFyc2VyX2xldmVsP1xuICAgICAgICBQb3J0LnNldF9wYXJzZXJfbGV2ZWwocG9ydClcblxuICAgICAgaWYgcG9ydC5kZWVwX2luc3BlY3Rpb24/XG4gICAgICAgIFBvcnQuc2V0X2RlZXBfaW5zcGVjdGlvbihwb3J0KVxuXG4gICAgICBpZiBwb3J0Lmxvb3BiYWNrP1xuICAgICAgICBQb3J0LnNldF9sb29wYmFjayhwb3J0KVxuXG4gICAgICBpZiBwb3J0LmZvcmNlX3VwP1xuICAgICAgICBQb3J0LnNldF9mb3JjZV91cF9zaW1wbGUocG9ydClcbiAgICAgICAgUG9ydC5zZXRfZW5hYmxlZChwb3J0KVxuXG4gICAgIyDQntCx0YvRh9C90YvQuSDQu9C4INGN0YLQviDQv9C+0YDRgiwg0LjQu9C4INC+0L0g0LIg0YHQvtGB0YLQsNCy0LUgNDAt0LPQuNCz0LDQsdC40YLQvdC+0LPQviDQv9C+0YDRgtCwXG4gICAgaXNfZ2VuZXJpYzogKHBvcnRfaWQpIC0+IHBvcnRfaWQgPD0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudFxuXG4gICAgIyDQldGB0YLRjCDQu9C4IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C1INC/0L7RgNGC0Ysg0L3QsCDRjdGC0L7QvCDRgdCy0LjRh9C1ICjQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LTQu9GPINGA0LjRgdC+0LLQsNC90LjRjyDRgdCy0LjRh9CwINCyIEd1aSlcbiAgICBoYXNfam9pbnRfcG9ydHM6IC0+IFBvcnQuY291bnQgPiBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50XG5cbiAgICAjINCh0LrQvtC70YzQutC+IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINC/0L7RgNGC0L7QsiDQtdGB0YLRjCDRgyDRjdGC0L7Qs9C+INGB0LLQuNGH0LBcbiAgICBqb2ludF9wb3J0X2NvdW50OiAtPlxuICAgICAgTWF0aC5jZWlsKChQb3J0LmNvdW50IC0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudCkgLyBEZXZpY2Vfc2V0dGluZ3MucG9ydHNfaW5fam9pbnRfcG9ydClcblxuICAgICMg0KPQtNCw0LvRj9C10YIg0LvQuNGI0L3QtdC1INC40Lcg0L7QsdGK0LXQutGC0LAg0L/QvtGA0YLQsCAo0LLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3Ri9C1INGB0LLQvtC50YHRgtCy0LAgQW5ndWxhci5qcylcbiAgICBzYW5pdGl6ZTogKHBvcnQpIC0+XG4gICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBwb3J0XG4gICAgICAgIGlmIGtleS5zdGFydHNfd2l0aCgnJCQnKVxuICAgICAgICAgIGRlbGV0ZSBwb3J0W2tleV1cblxuICAgICAgcmV0dXJuIHBvcnRcblxuICAgICMg0J/RgNC+0YHRgtCw0LLQu9GP0LXRgiBldGhlcm5ldCBtb2RlINGDINC/0L7QtNC/0L7RgNGC0L7QsiA0MC3Qs9C40LPQsNCx0LjRgtC90L7Qs9C+INC/0L7RgNGC0LBcbiAgICAjINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDQstGL0LHRgNCw0L3QvdC+0LPQviDRgNC10LbQuNC80LAg0YDQsNCx0L7RgtGLIDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsFxuICAgIHNldF9zdWJwb3J0X21vZGVzOiAoam9pbnRfcG9ydCkgLT5cbiAgICAgIGZvciBzdWJwb3J0IGluIGpvaW50X3BvcnQucG9ydHNcbiAgICAgICAgc3VicG9ydC5ldGhfbW9kZSA9IGlmIGpvaW50X3BvcnQubW9kZSA9PSAnNDBHJ1xuICAgICAgICAgIGlmIHN1YnBvcnQgPT0gam9pbnRfcG9ydC5wb3J0c1swXVxuICAgICAgICAgICAgRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlc1snNDBHQkFTRV9TUjQnXVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJ0RJU0FCTEVEJ11cbiAgICAgICAgZWxzZVxuICAgICAgICAgIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwR0JBU0VfQ1InXVxuXG4gICAgbG9hZF9jb21tZW50czogLT5cbiAgICAgIGZpbGVkYi5sb2FkKCdwb3J0cycpLnRoZW4gKHJlc3VsdCkgLT5cbiAgICAgICAgcmVzdWx0LmNvbW1lbnRzXG5cbiAgICBzZXRfY29tbWVudDogKHBvcnQpIC0+XG4gICAgICBkYXRhID0gW11cbiAgICAgIGRhdGFbcG9ydC5pZF0gPSBwb3J0LmNvbW1lbnRcbiAgICAgIGZpbGVkYi51cGRhdGUoJ3BvcnRzJywgJ2NvbW1lbnRzJywgZGF0YSlcblxuQFBvcnRfc2VydmljZV9jb25zdHJ1Y3Rvci4kaW5qZWN0ID0gaW5qZWN0ZWRcblxuYXBwLmZhY3RvcnkgJ1BvcnQnLCBAUG9ydF9zZXJ2aWNlX2NvbnN0cnVjdG9yIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgaW5qZWN0ZWQ7XG5cbiAgaW5qZWN0ZWQgPSBbJyRyb290U2NvcGUnLCAnYXBpJywgJ01vZGVsJywgJ01vZGVsX3NlcnZpY2UnLCAnRGV2aWNlX3NldHRpbmdzJywgJ0VudW1zJ107XG5cbiAgdGhpcy5Qb3J0X3NlcnZpY2VfY29uc3RydWN0b3IgPSBmdW5jdGlvbigkcm9vdFNjb3BlLCBhcGksIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBEZXZpY2Vfc2V0dGluZ3MsIEVudW1zKSB7XG4gICAgdmFyIFBvcnQ7XG4gICAgcmV0dXJuIFBvcnQgPSB7XG4gICAgICBjb3VudDogMCxcbiAgICAgIGJ5X2lkOiBmdW5jdGlvbihpZCkge1xuICAgICAgICBpZiAoaWQgPiBNb2RlbC5wb3J0cy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3J0IFwiICsgaWQgKyBcIiBub3QgZm91bmRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1vZGVsLnBvcnRzW2lkIC0gMV07XG4gICAgICB9LFxuICAgICAgc2V0X2V0aF9tb2RlOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKTtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKFwic2V0UG9ydEV0aE1vZGVcIiwge1xuICAgICAgICAgIGlkOiBwb3J0LmlkLFxuICAgICAgICAgIGV0aF9tb2RlOiBwb3J0LmV0aF9tb2RlXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7fSk7XG4gICAgICB9LFxuICAgICAgc2V0X3BhcnNlcl9sZXZlbDogZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICBNb2RlbF9zZXJ2aWNlLmVuc3VyZV9wb3J0c19sb2NrKCk7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcInNldFBvcnRQYXJzZXJMZXZlbFwiLCB7XG4gICAgICAgICAgaWQ6IHBvcnQuaWQsXG4gICAgICAgICAgbGV2ZWw6IHBvcnQucGFyc2VyX2xldmVsXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7fSk7XG4gICAgICB9LFxuICAgICAgc2V0X2RlZXBfaW5zcGVjdGlvbjogZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICBNb2RlbF9zZXJ2aWNlLmVuc3VyZV9wb3J0c19sb2NrKCk7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcInNldFBvcnRESVBhcnNpbmdcIiwge1xuICAgICAgICAgIGlkOiBwb3J0LmlkLFxuICAgICAgICAgIGVuYWJsZTogcG9ydC5kZWVwX2luc3BlY3Rpb25cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZW5hYmxlOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKTtcbiAgICAgICAgcmV0dXJuIFBvcnQuc2V0X2VuYWJsZWQoe1xuICAgICAgICAgIGlkOiBwb3J0LmlkLFxuICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcG9ydC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZTogZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICBNb2RlbF9zZXJ2aWNlLmVuc3VyZV9wb3J0c19sb2NrKCk7XG4gICAgICAgIHJldHVybiBQb3J0LnNldF9lbmFibGVkKHtcbiAgICAgICAgICBpZDogcG9ydC5pZCxcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBwb3J0LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0X2VuYWJsZWQ6IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpO1xuICAgICAgICByZXR1cm4gYXBpLmNhbGwoXCJzZXRQb3J0RW5hYmxlZFwiLCB7XG4gICAgICAgICAgaWQ6IHBvcnQuaWQsXG4gICAgICAgICAgZW5hYmxlOiBwb3J0LmVuYWJsZWQgPyAxIDogMFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzZXRfbWFjX2xlYXJuaW5nOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKTtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKFwic2V0UG9ydExlYXJuaW5nXCIsIHtcbiAgICAgICAgICBpZDogcG9ydC5pZCxcbiAgICAgICAgICBlbmFibGU6IDBcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHt9KTtcbiAgICAgIH0sXG4gICAgICBzZXRfZm9yY2VfdXBfc2ltcGxlOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKTtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKFwic2V0UG9ydEZvcmNlVXBcIiwge1xuICAgICAgICAgIGlkOiBwb3J0LmlkLFxuICAgICAgICAgIGVuYWJsZTogcG9ydC5mb3JjZV91cCA/IDEgOiAwXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNldF9mb3JjZV91cDogZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICBhcGkuYmVnaW4oKTtcbiAgICAgICAgUG9ydC5zZXRfZm9yY2VfdXBfc2ltcGxlKHBvcnQpO1xuICAgICAgICBpZiAocG9ydC5lbmFibGVkID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFBvcnRGb3JjZVVwIGNhbGxlZCB3aXRob3V0IGtub3duIHBvcnQgZW5hYmxlZC9kaXNhYmxlZCBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIFBvcnQuc2V0X2VuYWJsZWQocG9ydCk7XG4gICAgICAgIHJldHVybiBhcGkuZW5kKCk7XG4gICAgICB9LFxuICAgICAgc2V0X2xvb3BiYWNrOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIE1vZGVsX3NlcnZpY2UuZW5zdXJlX3BvcnRzX2xvY2soKTtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKFwic2V0UG9ydExvb3BiYWNrXCIsIHtcbiAgICAgICAgICBpZDogcG9ydC5pZCxcbiAgICAgICAgICBlbmFibGU6IHBvcnQubG9vcGJhY2sgPyAxIDogMFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXNldF9wb3J0X3N0YXRzOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIHJldHVybiBhcGkuY2FsbChcInJlc2V0UG9ydFN0YXRcIiwge1xuICAgICAgICAgIGlkOiBwb3J0LmlkXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJlc2V0X3N0YXRzOiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHJlZjtcbiAgICAgICAgaWYgKHBvcnQgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBQb3J0LnJlc2V0X3BvcnRfc3RhdHMocG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgYXBpLmJlZ2luKCk7XG4gICAgICAgIHJlZiA9IE1vZGVsLnBvcnRzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBwb3J0ID0gcmVmW2ldO1xuICAgICAgICAgIFBvcnQucmVzZXRfcG9ydF9zdGF0cyhwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgZGV2aWNlX3BvcnQ7XG4gICAgICAgIGRldmljZV9wb3J0ID0gUG9ydC5ieV9pZChkYXRhLmlkKTtcbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZXh0ZW5kKGRldmljZV9wb3J0LCBkYXRhKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmU6IGZ1bmN0aW9uKHBvcnQpIHtcbiAgICAgICAgaWYgKHBvcnQuZW5hYmxlZCAhPSBudWxsKSB7XG4gICAgICAgICAgUG9ydC5zZXRfZW5hYmxlZChwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9ydC5ldGhfbW9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgUG9ydC5zZXRfZXRoX21vZGUocG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgUG9ydC5zZXRfbWFjX2xlYXJuaW5nKHBvcnQpO1xuICAgICAgICBpZiAocG9ydC5wYXJzZXJfbGV2ZWwgIT0gbnVsbCkge1xuICAgICAgICAgIFBvcnQuc2V0X3BhcnNlcl9sZXZlbChwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9ydC5kZWVwX2luc3BlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICAgIFBvcnQuc2V0X2RlZXBfaW5zcGVjdGlvbihwb3J0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9ydC5sb29wYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgUG9ydC5zZXRfbG9vcGJhY2socG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcnQuZm9yY2VfdXAgIT0gbnVsbCkge1xuICAgICAgICAgIFBvcnQuc2V0X2ZvcmNlX3VwX3NpbXBsZShwb3J0KTtcbiAgICAgICAgICByZXR1cm4gUG9ydC5zZXRfZW5hYmxlZChwb3J0KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlzX2dlbmVyaWM6IGZ1bmN0aW9uKHBvcnRfaWQpIHtcbiAgICAgICAgcmV0dXJuIHBvcnRfaWQgPD0gRGV2aWNlX3NldHRpbmdzLmdlbmVyaWNfcG9ydF9jb3VudDtcbiAgICAgIH0sXG4gICAgICBoYXNfam9pbnRfcG9ydHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUG9ydC5jb3VudCA+IERldmljZV9zZXR0aW5ncy5nZW5lcmljX3BvcnRfY291bnQ7XG4gICAgICB9LFxuICAgICAgam9pbnRfcG9ydF9jb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoKFBvcnQuY291bnQgLSBEZXZpY2Vfc2V0dGluZ3MuZ2VuZXJpY19wb3J0X2NvdW50KSAvIERldmljZV9zZXR0aW5ncy5wb3J0c19pbl9qb2ludF9wb3J0KTtcbiAgICAgIH0sXG4gICAgICBzYW5pdGl6ZTogZnVuY3Rpb24ocG9ydCkge1xuICAgICAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICAgICAgZm9yIChrZXkgaW4gcG9ydCkge1xuICAgICAgICAgIHZhbHVlID0gcG9ydFtrZXldO1xuICAgICAgICAgIGlmIChrZXkuc3RhcnRzX3dpdGgoJyQkJykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwb3J0W2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3J0O1xuICAgICAgfSxcbiAgICAgIHNldF9zdWJwb3J0X21vZGVzOiBmdW5jdGlvbihqb2ludF9wb3J0KSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cywgc3VicG9ydDtcbiAgICAgICAgcmVmID0gam9pbnRfcG9ydC5wb3J0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBzdWJwb3J0ID0gcmVmW2ldO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChzdWJwb3J0LmV0aF9tb2RlID0gam9pbnRfcG9ydC5tb2RlID09PSAnNDBHJyA/IHN1YnBvcnQgPT09IGpvaW50X3BvcnQucG9ydHNbMF0gPyBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddIDogRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlc1snRElTQUJMRUQnXSA6IEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXNbJzEwR0JBU0VfQ1InXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9LFxuICAgICAgbG9hZF9jb21tZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBmaWxlZGIubG9hZCgncG9ydHMnKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuY29tbWVudHM7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNldF9jb21tZW50OiBmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBkYXRhID0gW107XG4gICAgICAgIGRhdGFbcG9ydC5pZF0gPSBwb3J0LmNvbW1lbnQ7XG4gICAgICAgIHJldHVybiBmaWxlZGIudXBkYXRlKCdwb3J0cycsICdjb21tZW50cycsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdGhpcy5Qb3J0X3NlcnZpY2VfY29uc3RydWN0b3IuJGluamVjdCA9IGluamVjdGVkO1xuXG4gIGFwcC5mYWN0b3J5KCdQb3J0JywgdGhpcy5Qb3J0X3NlcnZpY2VfY29uc3RydWN0b3IpO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiIyDQktGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdGL0LUg0YTRg9C90LrRhtC40Lgg0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPIFByb21pc2Un0L7QslxuYXBwLmZhY3RvcnkgJ1Byb21pc2VzJywgKCRyb290U2NvcGUsIGxvZykgLT5cblxuXHQjINGB0LvRg9GI0LDRgtC10LvQuCDQstGL0L/QvtC70L3QtdC90L3QvtGB0YLQuCDQstGB0LXRhSDRhtC10L/QvtGH0LXQuiBQcm9taXNlJ9C+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG5cdGRvbmVfbGlzdGVuZXJzID0gW11cblxuXHRQcm9taXNlcyA9IFxuXHRcdCMg0Y3RgtC+0Lkg0YTRg9C90LrRhtC40LXQuSDQtNC+0LvQttC90Ysg0L7QsdC+0YDQsNGH0LjQstCw0YLRjNGB0Y8g0LLRgdC1INCw0YHQuNC90YXRgNC+0L3QvdGL0LUgUHJvbWlzZSDQvdCwINGB0YLRgNCw0L3QuNGG0LDRhVxuXHRcdCMgKNGB0LwuIHJlYWRtZS50eHQpXG5cdFx0I1xuXHRcdCMg0L3QtSDRgdC70LXQtNGD0LXRgiDQstGL0LfRi9Cy0LDRgtGMINGA0LDQt9C70LjRh9C90YvQtSAudGhlbigpLCAuY2F0Y2goKSwgLmZpbmFsbHkoKSBcblx0XHQjINC90LAgcHJvbWlzZSwg0LLQvtC30LLRgNCw0YnQsNC10LzQvtC8INGN0YLQvtC5INGE0YPQvdC60YbQuNC10Llcblx0XHRwcm9taXNlOiAocHJvbWlzZXIpIC0+XG5cdFx0XHQjINGG0LXQv9C+0YfQutCwIFByb21pc2Un0L7QslxuXHRcdFx0cHJvbWlzZSA9IGR1bW15X3Byb21pc2UoKS50aGVuKHByb21pc2VyKVxuXG5cdFx0XHQjINC00L7QsdCw0LLQuNGC0Ywg0Y3RgtC+0YIg0LrQvtGA0L3QtdCy0L7QuSBwcm9taXNlINCyINC+0YfQtdGA0LXQtNGMINC90LAg0L7Rh9C40YHRgtC60YMg0L/RgNC4INC/0LXRgNC10YXQvtC00LUg0YHQviDRgdGC0YDQsNC90LjRhtGLXG5cdFx0XHQkcm9vdFNjb3BlLnByb21pc2VzLnB1c2gocHJvbWlzZSlcblxuXHRcdFx0IyDRg9Cx0YDQsNGC0Ywg0Y3RgtC+0YIg0LrQvtGA0L3QtdCy0L7QuSBwcm9taXNlINC40Lcg0L7Rh9C10YDQtdC00Lgg0L3QsCDQvtGH0LjRgdGC0LrRgyDQv9GA0Lgg0L/QtdGA0LXRhdC+0LTQtSDRgdC+INGB0YLRgNCw0L3QuNGG0YssXG5cdFx0XHQjINC60L7Qs9C00LAg0L7QvSDQt9Cw0LLQtdGA0YjQuNGC0YHRjyAo0LvQuNCx0L4g0L3QvtGA0LzQsNC70YzQvdC+LCDQu9C40LHQviDRgSDQvtGI0LjQsdC60L7QuSlcblx0XHRcdHJldHVybiBwcm9taXNlLmNhdGNoKFByb21pc2VzLkNhbmNlbGxhdGlvbl9lcnJvciwgKGVycm9yKSAtPlxuXHRcdFx0XHRsb2cuaW5mbygnQSBwcm9taXNlIHdhcyBjYW5jZWxsZWQgZHVlIHRvIHVzZXIgbmF2aWdhdGluZyBhd2F5IGZyb20gdGhlIHBhZ2UnKVxuXHRcdFx0KVxuXHRcdFx0LmZpbmFsbHkgLT5cblx0XHRcdFx0IyBQcm9taXNlINCy0YvQv9C+0LvQvdC10L0sINC80L7QttC90L4g0LXQs9C+INGD0LHRgNCw0YLRjCDQuNC3INGB0L/QuNGB0LrQsFxuXHRcdFx0XHQkcm9vdFNjb3BlLnByb21pc2VzLnJlbW92ZShwcm9taXNlKVxuXHRcdFx0XHQjINC+0YHRgtCw0LvQuNGB0Ywg0LvQuCDQtdGJ0ZEg0L3QtSDQstGL0L/QvtC70L3QtdC90L3Ri9C1IFByb21pc2Un0Ysg0L3QsCDRgtC10LrRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG5cdFx0XHRcdFByb21pc2VzLmNoZWNrX2Zvcl9wZW5kaW5nX3Byb21pc2VzKClcblxuXHRcdCMgQmx1ZWJpcmQgcHJvbWlzZSBDYW5jZWxsYXRpb25FcnJvclxuXHRcdENhbmNlbGxhdGlvbl9lcnJvcjogUHJvbWlzZV9jYW5jZWxsYXRpb25fZXJyb3JcblxuXHRcdCMg0LLRgdC1IHByb21pc2Ug0L3QsCDRgdGC0YDQsNC90LjRhtCw0YUg0LrQu9Cw0YHRgtGMINCyINC/0LXRgNC10LzQtdC90L3Rg9GOINCyICRyb290U2NvcGUgXG5cdFx0IyAo0LHRg9C00YPRgiDRgdCw0LzQvtC+0YLQvNC10L3Rj9GC0YzRgdGPINC4INGB0LDQvNC+0L7Rh9C40YnQsNGC0YzRgdGPINC/0YDQuCDQv9C10YDQtdGF0L7QtNC1INC/0L4g0YHRgtGA0LDQvdC40YbQsNC8KVxuXHRcdHJlc2V0OiAtPiAkcm9vdFNjb3BlLnByb21pc2VzID0gW11cblxuXHRcdCMg0LXRgdGC0Ywg0LvQuCDQsiDQtNCw0L3QvdGL0Lkg0LzQvtC80LXQvdGCINCy0YDQtdC80LXQvdC4INCy0YvQv9C+0LvQvdGP0LXQvNGL0LUgUHJvbWlzZSfRiyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcblx0XHRwZW5kaW5nOiAtPiAkcm9vdFNjb3BlLnByb21pc2VzLm5vdF9lbXB0eSgpXG5cblx0XHQjINC+0YLQvNC10L3QuNGC0Ywg0LLRgdC1IFByb21pc2Un0Ysg0L3QsCDRgtC10LrRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG5cdFx0Y2FuY2VsOiAtPlxuXHRcdFx0Zm9yIHByb21pc2UgaW4gJHJvb3RTY29wZS5wcm9taXNlc1xuXHRcdFx0XHRsb2cuaW5mbygnQ2FuY2VsbGluZyBwcm9taXNlJylcblx0XHRcdFx0cHJvbWlzZS5jYW5jZWwobmV3IFByb21pc2VzLkNhbmNlbGxhdGlvbl9lcnJvcigpKVxuXG5cdFx0IyDQstC+0LfQstGA0LDRidCw0LXRgiB0cnVlLCDQtdGB0LvQuCDRjdGC0LAg0L7RiNC40LHQutCwIFByb21pc2Ug0LLRi9C30LLQsNC90LAg0L/QtdGA0LXRhdC+0LTQvtC8INGB0L4g0YHRgtGA0LDQvdC40YbRi1xuXHRcdGlzX25hdmlnYXRpbmdfYXdheTogKGVycm9yKSAtPiBlcnJvciBpbnN0YW5jZW9mIFByb21pc2VzLkNhbmNlbGxhdGlvbl9lcnJvclxuXG5cdFx0IyDQstC+0LfQstGA0LDRidCw0LXRgiB0cnVlLCDQtdGB0LvQuCDRjdGC0LAg0L7RiNC40LHQutCwIFByb21pc2Ug0L3QtSDQstGL0LfQstCw0L3QsCDQv9C10YDQtdGF0L7QtNC+0Lwg0YHQviDRgdGC0YDQsNC90LjRhtGLXG5cdFx0bm90X25hdmlnYXRpbmdfYXdheTogKGVycm9yKSAtPiAhUHJvbWlzZXMuaXNfbmF2aWdhdGluZ19hd2F5KGVycm9yKVxuXG5cdFx0IyDQv9GA0L7QstC10YDRj9C10YIsINC+0YHRgtCw0LvQuNGB0Ywg0LvQuCDQtdGJ0ZEg0L3QtSDQstGL0L/QvtC70L3QtdC90L3Ri9C1IFByb21pc2Un0Ysg0L3QsCDRgtC10LrRg9GJ0LXQuSDRgdGC0YDQsNC90LjRhtC1XG5cdFx0Y2hlY2tfZm9yX3BlbmRpbmdfcHJvbWlzZXM6IC0+XG5cdFx0XHQjINC10YHQu9C4INC10YnRkSDQtdGB0YLRjCDQvdC1INCy0YvQv9C+0LvQvdC10L3QvdGL0LUsINC90LjRh9C10LPQviDQvdC1INC00LXQu9Cw0YLRjFxuXHRcdFx0cmV0dXJuIGlmIFByb21pc2VzLnBlbmRpbmcoKVxuXG5cdFx0XHQjINCy0YHQtSBQcm9taXNlJ9GLINC90LAg0Y3RgtC+0Lkg0YHRgtGA0LDQvdC40YbQtSDQstGL0L/QvtC70L3QtdC90YsgLSDQvtC/0L7QstC10YHRgtC40YLRjCDRgdC70YPRiNCw0YLQtdC70LXQuSDQvtCxINGN0YLQvtC8XG5cdFx0XHRmb3IgbGlzdGVuZXIgaW4gZG9uZV9saXN0ZW5lcnNcblx0XHRcdFx0bGlzdGVuZXIoKVxuXG5cdFx0XHRkb25lX2xpc3RlbmVycyA9IFtdXG5cblx0XHQjINC00L7QsdCw0LLQu9GP0LXRgiDRgdC70YPRiNCw0YLQtdC70Y8g0L3QsCDRgdC+0LHRi9GC0LjQtSDQstGL0L/QvtC70L3QtdC90L3QvtGB0YLQuCDQstGB0LXRhSBQcm9taXNlJ9C+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG5cdFx0d2hlbl9kb25lOiAobGlzdGVuZXIpIC0+IGRvbmVfbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpXG5cblx0XHQjINC90LDRh9C40L3QsNC10YIg0L7QttC40LTQsNC90LjQtSDQt9Cw0LLQtdGA0YjQtdC90LjRjyDQstGB0LXRhSBQcm9taXNlJ9C+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG5cdFx0d2FpdDogLT5cblx0XHRcdGRvbmVfbGlzdGVuZXJzID0gW10iLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdQcm9taXNlcycsIGZ1bmN0aW9uKCRyb290U2NvcGUsIGxvZykge1xuICAgIHZhciBQcm9taXNlcywgZG9uZV9saXN0ZW5lcnM7XG4gICAgZG9uZV9saXN0ZW5lcnMgPSBbXTtcbiAgICByZXR1cm4gUHJvbWlzZXMgPSB7XG4gICAgICBwcm9taXNlOiBmdW5jdGlvbihwcm9taXNlcikge1xuICAgICAgICB2YXIgcHJvbWlzZTtcbiAgICAgICAgcHJvbWlzZSA9IGR1bW15X3Byb21pc2UoKS50aGVuKHByb21pc2VyKTtcbiAgICAgICAgJHJvb3RTY29wZS5wcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZVtcImNhdGNoXCJdKFByb21pc2VzLkNhbmNlbGxhdGlvbl9lcnJvciwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gbG9nLmluZm8oJ0EgcHJvbWlzZSB3YXMgY2FuY2VsbGVkIGR1ZSB0byB1c2VyIG5hdmlnYXRpbmcgYXdheSBmcm9tIHRoZSBwYWdlJyk7XG4gICAgICAgIH0pW1wiZmluYWxseVwiXShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLnByb21pc2VzLnJlbW92ZShwcm9taXNlKTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZXMuY2hlY2tfZm9yX3BlbmRpbmdfcHJvbWlzZXMoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgQ2FuY2VsbGF0aW9uX2Vycm9yOiBQcm9taXNlX2NhbmNlbGxhdGlvbl9lcnJvcixcbiAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRyb290U2NvcGUucHJvbWlzZXMgPSBbXTtcbiAgICAgIH0sXG4gICAgICBwZW5kaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRyb290U2NvcGUucHJvbWlzZXMubm90X2VtcHR5KCk7XG4gICAgICB9LFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcHJvbWlzZSwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSAkcm9vdFNjb3BlLnByb21pc2VzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHByb21pc2UgPSByZWZbaV07XG4gICAgICAgICAgbG9nLmluZm8oJ0NhbmNlbGxpbmcgcHJvbWlzZScpO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChwcm9taXNlLmNhbmNlbChuZXcgUHJvbWlzZXMuQ2FuY2VsbGF0aW9uX2Vycm9yKCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0sXG4gICAgICBpc19uYXZpZ2F0aW5nX2F3YXk6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFByb21pc2VzLkNhbmNlbGxhdGlvbl9lcnJvcjtcbiAgICAgIH0sXG4gICAgICBub3RfbmF2aWdhdGluZ19hd2F5OiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gIVByb21pc2VzLmlzX25hdmlnYXRpbmdfYXdheShlcnJvcik7XG4gICAgICB9LFxuICAgICAgY2hlY2tfZm9yX3BlbmRpbmdfcHJvbWlzZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSwgbGVuLCBsaXN0ZW5lcjtcbiAgICAgICAgaWYgKFByb21pc2VzLnBlbmRpbmcoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBkb25lX2xpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGxpc3RlbmVyID0gZG9uZV9saXN0ZW5lcnNbaV07XG4gICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9uZV9saXN0ZW5lcnMgPSBbXTtcbiAgICAgIH0sXG4gICAgICB3aGVuX2RvbmU6IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiBkb25lX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH0sXG4gICAgICB3YWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRvbmVfbGlzdGVuZXJzID0gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnUm91dGluZ19tb2RlbF9hcHBsaWVyJywgKCRpbmplY3RvciwgYXBpLCBsb2csIFBvcnQsIFJ1bGUsIERldmljZV9yb3V0aW5nLCBNb2RlbCwgTW9kZWxfc2VydmljZSwgRGV2aWNlX3NldHRpbmdzLCBFbnVtcykgLT5cblxuIyBcItC/0YDQuNCy0LDRgtC90YvQtVwiINC80LXRgtC+0LTRizpcbiMg0YHQtNC10LvQsNGC0YwgbW9jayB1cCDQtNC70Y8gYXBpXG4jICjQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LTQu9GPINGB0L7RhdGA0LDQvdC10L3QuNGPINC60L7QvNCw0L3QtCDQv9GA0LjQvNC10L3QtdC90LjRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0L3QsCDQttC10LvQtdC30LrQtSlcbiAgYXBpX3N0dWIgPSAtPlxuIyAgICMg0KDQtdGI0LDQtdGCINC+0YjQuNCx0LrRgzpcbiAgICAjIFR5cGVFcnJvcjogJ3VuZGVmaW5lZCcgaXMgbm90IGEgZnVuY3Rpb25cbiAgICAjIChldmFsdWF0aW5nICd0aGlzLnJlcXVlc3RfanNvbihtZXRob2QsIHBhcmFtZXRlcnMpXG4gICAgcmVxdWVzdF9qc29uID0gYXBpLnJlcXVlc3RfanNvbi5iaW5kKGFwaSlcblxuICAgICMg0LfQsNCz0LvRg9GI0LrQsCDQtNC70Y8g0YHQtdGA0LLQuNGB0LAgYXBpLFxuICAgICMg0LrQvtGC0L7RgNCw0Y8g0L/RgNC+0YHRgtC+INC30LDQv9C40YHRi9Cy0LDQtdGCINCy0YHQtSDQstGL0LfQstCw0L3QvdGL0LUg0LrQvtC80LDQvdC00YssXG4gICAgIyDQuCDQsiDQutC+0L3RhtC1INC+0YLQtNCw0ZHRgiDQuNGFINGB0L/QuNGB0LrQvtC8XG4gICAgc3R1YiA9XG4jINGB0L/QuNGB0L7QuiDQstGL0LfQstCw0L3QvdGL0YUg0LrQvtC80LDQvdC0XG4gICAgICBiYXRjaDogW11cblxuIyDQt9Cw0LPQu9GD0YjQutCwINC90LDRh9Cw0LvQsCBiYXRjaCfQsFxuICAgICAgYmVnaW46IC0+XG4jINC30LDQs9C70YPRiNC60LAg0LrQvtC90YbQsCBiYXRjaCfQsFxuICAgICAgZW5kOiAtPlxuIyDQstC10YDQvdGD0YLRjCDQstGL0L/QvtC70L3QtdC90L3Ri9C5IFByb21pc2VcbiAgICAgICAgcmV0dXJuIGR1bW15X3Byb21pc2UoQGJhdGNoKVxuXG4jINC30LDQs9C70YPRiNC60LAg0LLRi9C30L7QstCwINC80LXRgtC+0LTQsCBKc29uIFJwY1xuICAgICAgY2FsbDogKG1ldGhvZCwgcGFyYW1ldGVycykgLT5cbiMg0LfQsNC/0LjRgdCw0YLRjCDQstGL0LfQstCw0L3QvdGD0Y4g0LrQvtC80LDQvdC00YMg0LIg0YHQv9C40YHQvtC6XG4gICAgICAgIEBiYXRjaC5wdXNoKHJlcXVlc3RfanNvbihtZXRob2QsIHBhcmFtZXRlcnMpKVxuICAgICAgICAjINCy0LXRgNC90YPRgtGMINCy0YvQv9C+0LvQvdC10L3QvdGL0LkgUHJvbWlzZVxuICAgICAgICByZXR1cm4gZHVtbXlfcHJvbWlzZSh5ZXMpXG5cbiAgIyDQstGB0LXQvCDQv9C+0LTQv9C+0YDRgtCw0LwgNDAt0LPQuNCz0LDQsdC40YLQvdGL0YUg0L/QvtGA0YLQvtCyINCy0YvRgdGC0LDQstC40YLRjCDQv9GA0LDQstC40LvRjNC90YvQuSDRgNC10LbQuNC8IChldGhfbW9kZSlcbiAgc2V0X2pvaW50X3BvcnRzX3N1YnBvcnRzX2V0aF9tb2RlcyA9IChqb2ludF9wb3J0cykgLT5cbiMg0LTQu9GPINC60LDQttC00L7Qs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCwg0LrQvtGC0L7RgNGL0Lkg0LLRi9GB0YLQsNCy0LvQtdC9INCyINGA0LXQttC40LwgXCLQtdC00LjQvdC+0LUg0YbQtdC70L7QtVwiXG4gICAgZm9yIGpvaW50X3BvcnQgaW4gam9pbnRfcG9ydHMgd2hlbiBqb2ludF9wb3J0Lm1vZGUgPT0gJzQwRydcbiMg0LLRi9GB0YLQsNCy0LjRgtGMINC/0YDQsNCy0LjQu9GM0L3Ri9C1IGV0aGVybmV0IG1vZGVzXG4jICjQv9C10YDQstC+0LzRgyAtIDQwZywg0L7RgdGC0LDQu9GM0L3Ri9C8IC0gZGlzYWJsZWQpXG4gICAgICBmb3IgcG9ydCBpbiBqb2ludF9wb3J0LnBvcnRzXG4gICAgICAgIHBvcnQuZXRoX21vZGUgPSBpZiBwb3J0ID09IGpvaW50X3BvcnQucG9ydHNbMF1cbiAgICAgICAgICBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddXG4jINC10YnRkSDQstC+0LfQvNC+0LbQtdC9IEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXMuWExBVUlcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEVudW1zLmV0aGVybmV0X3BvcnRfbW9kZXMuRElTQUJMRURcblxuICAjINCy0YvQtNC10LvRj9C10YIg0L/QvtGA0YLRiyDRg9GH0LDQstGB0YLQstGD0Y7RidC40LUg0LIg0L/RgNCw0LLQuNC70LDRhVxuICBfZXh0cmFjdF9wb3J0cyA9IChydWxlcykgLT5cbiAgICBwb3J0cyA9XG4gICAgICBhbGw6IFtdXG5cbiAgICBmb3IgcnVsZSBpbiBydWxlc1xuICAgICAgZm9yIHBvcnQgaW4gcnVsZS5pbnB1dHNcbiAgICAgICAgcG9ydHMuYWxsLnB1c2gocG9ydC5pZCkgaWYgbm90IHBvcnRzLmFsbC5oYXMocG9ydC5pZClcbiAgICAgIGZvciBwb3J0IGluIHJ1bGUub3V0cHV0c1xuICAgICAgICBwb3J0cy5hbGwucHVzaChwb3J0LmlkKSBpZiBub3QgcG9ydHMuYWxsLmhhcyhwb3J0LmlkKVxuXG4gICAgcG9ydHMuYWxsLnNvcnQgKGEsIGIpIC0+IGEgLSBiXG5cbiAgICByZXR1cm4gcG9ydHNcblxuIyDQv9C+INCy0YHQtdC8IDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9C8INC/0L7RgNGC0LDQvCDQv9GA0L7QstC10YDRj9C10YIsXG4jINC90LUg0LjRgdC/0L7Qu9GM0LfRg9GO0YLRgdGPINC70Lgg0LjRhSDQv9C+0LTQv9C+0YDRgtGLINCyINC/0YDQsNCy0LjQu9Cw0YVcbiMgKNC60YDQvtC80LUg0L/QtdGA0LLQvtCz0L4g0L/QvtC00L/QvtGA0YLQsCAtINC10LzRgyDQvNC+0LbQvdC+KVxuICB2YWxpZGF0ZV9qb2ludF9wb3J0X3JvdXRpbmcgPSAoam9pbnRfcG9ydHMsIHJvdXRlZF9wb3J0cykgLT5cbiMg0LTQu9GPINC60LDQttC00L7Qs9C+IDQwLdCz0LjQs9Cw0LHQuNGC0L3QvtCz0L4g0L/QvtGA0YLQsCwg0LrQvtGC0L7RgNGL0Lkg0LLRi9GB0YLQsNCy0LvQtdC9INCyINGA0LXQttC40LwgXCLQtdC00LjQvdC+0LUg0YbQtdC70L7QtVwiXG4gICAgZm9yIGpvaW50X3BvcnQgaW4gam9pbnRfcG9ydHMgd2hlbiBqb2ludF9wb3J0Lm1vZGUgPT0gJzQwRydcbiMg0LTQu9GPINC60LDQttC00L7Qs9C+INC90LXQv9C10YDQstC+0LPQviDQv9C+0LTQv9C+0YDRgtCwXG4gICAgICBmb3IgcG9ydCBpbiBqb2ludF9wb3J0LnBvcnRzIHdoZW4gcG9ydCAhPSBqb2ludF9wb3J0LnBvcnRzWzBdXG4jINC10YHQu9C4INGN0YLQvtGCINC/0L7QtNC/0L7RgNGCINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQsiDQv9GA0LDQstC40LvQsNGFIC0g0L7RiNC40LHQutCwXG4gICAgICAgIGlmIHJvdXRlZF9wb3J0cy5hbGwuaGFzKHBvcnQuaWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSm9pbnQgcG9ydCAje2pvaW50X3BvcnQuaWR9IGlzIHNldCB0byA0MEcgbW9kZSwgYnV0IHBvcnQgI3twb3J0LmlkfSBpcyBiZWluZyB1c2VkIGluIHJ1bGVzXCIpXG5cbiAgdXBkYXRlX3BvcnRzID0gKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpIC0+XG4jINCy0YvRj9GB0L3QuNGC0Ywg0L/QvtGA0YLRiywg0YPRh9Cw0YHRgtCy0YPRjtGJ0LjQtSDQsiDQv9GA0LDQstC40LvQsNGFXG4gICAgcm91dGVkX3BvcnRzID0gX2V4dHJhY3RfcG9ydHMocnVsZXMpXG5cbiAgICAjINC/0L4g0LLRgdC10LwgNDAt0LPQuNCz0LDQsdC40YLQvdGL0Lwg0L/QvtGA0YLQsNC8INC/0YDQvtCy0LXRgNC40YLRjCxcbiAgICAjINC90LUg0LjRgdC/0L7Qu9GM0LfRg9GO0YLRgdGPINC70Lgg0LjRhSDQv9C+0LTQv9C+0YDRgtGLINCyINC/0YDQsNCy0LjQu9Cw0YVcbiAgICAjICjQutGA0L7QvNC1INC/0LXRgNCy0L7Qs9C+INC/0L7QtNC/0L7RgNGC0LAgLSDQtdC80YMg0LzQvtC20L3QvilcbiAgICB2YWxpZGF0ZV9qb2ludF9wb3J0X3JvdXRpbmcoam9pbnRfcG9ydHMsIHJvdXRlZF9wb3J0cylcblxuICAgIGFwaS5iZWdpbigpXG4gICAgIyDQtNC70Y8g0LLRgdC10YUg0L/QvtGA0YLQvtCyXG4gICAgZm9yIHBvcnQgaW4gcG9ydHNcbiMg0LLQutC70Y7Rh9C40YLRjCDQv9C+0YDRgtGLLCDRg9GH0LDRgdGC0LLRg9GO0YnQuNC1INCyINC/0YDQsNCy0LjQu9Cw0YUsINC10YHQu9C4INC+0L3QuCDQstGL0LrQu9GO0YfQtdC90YtcbiAgICAgIGlmIHJvdXRlZF9wb3J0cy5hbGwuaGFzKHBvcnQuaWQpXG4gICAgICAgIHBvcnQuZW5hYmxlZCA9IHllc1xuICAgICAgICBQb3J0LmNvbmZpZ3VyZShwb3J0KVxuXG4gICAgYXBpLmVuZCgpXG5cbiAgIyDQtNC10LvQsNC10YIgc2F2ZUNvbmZpZyDRgSDQv9C+0LvRg9GH0LXQvdC90YvQvCDQv9C+0LvQvdGL0LwgYmF0Y2gn0LXQvCDQvNC+0LTQtdC70Lgg0YDQvtGD0YLQuNC90LPQsFxuICAjICjQtNC70Y8g0YLQvtCz0L4sINGH0YLQvtCx0YssINC60L7Qs9C00LAg0YPRgdGC0YDQvtC50YHRgtCy0L4g0LHRg9C00LXRgiDQv9C10YDQtdC30LDQs9GA0YPQttC10L3QvixcbiAgIyAg0L7QvdC+INC30LDQvdC+0LLQviDQv9GA0LjQvNC10L3QuNC70L4g0L3QsCDRgdC10LHQtSDQstC10YHRjCDRjdGC0L7RgiBiYXRjaClcbiAgc2F2ZV9jb25maWd1cmF0aW9uX2JhdGNoID0gKGJhdGNoKSAtPlxuICAgIGFwaS5jYWxsKCdzYXZlQ29uZmlnJywge2NvbmZpZzogSlNPTi5zdHJpbmdpZnkoYmF0Y2gpfSlcblxuICAjINC/0YDQvtCz0YDRg9C20LDQtdGCINC80L7QtNC10LvRjCDRgNC+0YPRgtC40L3Qs9CwINCyINGD0YHRgtGA0L7QudGB0YLQstC+XG4gICNcbiAgIyDQtdGB0LvQuCDQv9GA0L7RgdGC0LDQstC70LXQvSDRhNC70LDQsyBvcHRpb25zLm9mZmxpbmVfYmF0Y2gsINGC0L4g0Y3RgtC+INC+0LfQvdCw0YfQsNC10YIsINGH0YLQviDQvdCwINGB0LDQvNC+0Lwg0LTQtdC70LVcbiAgIyDQvdC1INC90YPQttC90L4g0LLRi9C30YvQstCw0YLRjCDQutC+0LzQsNC90LTRiyBhcGksINCwINGB0LvQtdC00YPQtdGCINC/0YDQvtGB0YLQviDQt9Cw0L/QuNGB0LDRgtGMINGB0L/QuNGB0L7QuiDQstGB0LXRhSDQutC+0LzQsNC90LQsXG4gICMg0LrQvtGC0L7RgNGL0LUg0LHRg9C00YPRgiDQstGL0LfQstCw0L3Riy5cbiAgI1xuICAjINC00LvRjyDRjdGC0L7Qs9C+INC/0L7QtNC80LXQvdGP0LXRgtGB0Y8g0YHQtdGA0LLQuNGBIGFwaSAo0LIg0L/RgNC10LTQtdC70LDRhSDRjdGC0L7Qs9C+INC80LXRgtC+0LTQsClcbiAgc2V0X3VwX3J1bGVzID0gKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMsIG9wdGlvbnMpIC0+XG4jINC+0LHRkdGA0YLQutCwIFByb21pc2UsINGH0YLQvtCx0Ysg0LvQvtCy0LjRgtGMIEV4Y2VwdGlvbifRi1xuICAgIGR1bW15X3Byb21pc2UoKS50aGVuIC0+XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gICAgICAjINGD0LTQvtGB0YLQvtCy0LXRgNC40YLRjNGB0Y8sINGH0YLQviDQv9C+0YDRgtGLINC90LUg0L7QsdC90L7QstC70Y/RjtGC0YHRjyDQuNC3IGdldFN3aXRjaEluZm9cbiAgICAgICMg0LLQviDQstGA0LXQvNGPINGA0LDQsdC+0YLRiyDRjdGC0L7QuSDRhNGD0L3QutGG0LjQuFxuICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpXG5cbiAgICAgICMg0L/QvtC00LzQtdC90Y/QtdC8IGFwaSDQvdCwINC/0YHQtdCy0LTQvi1hcGkg0LIg0YHQu9GD0YfQsNC1INGBIG9wdGlvbnMub2ZmbGluZV9iYXRjaC5cbiAgICAgICNcbiAgICAgICMg0YLQsNC60LbQtSDQv9C+0LTQvNC10L3Rj9C10Lwg0YHQtdGA0LLQuNGBIGFwaSDQsiDRgdC10YDQstC40YHQtSBQb3J0LFxuICAgICAgIyDRh9GC0L7QsdGLINCyINC90ZHQvCDQsdGL0Lsg0L/RgdC10LLQtNC+LWFwaSDQsiDRgdC70YPRh9Cw0LUg0YEgb3B0aW9ucy5vZmZsaW5lX2JhdGNoLlxuICAgICAgI1xuICAgICAgIyBcImRvICguLikgLT5cIiDQvdGD0LbQvdC+INC00LvRjyDRgtC+0LPQviwg0YfRgtC+0LHRiyDQvdC1INC30LDQs9GA0Y/Qt9C90Y/RgtGMXG4gICAgICAjINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQtSDQs9C70L7QsdCw0LvRjNC90YvQtSDQv9C10YDQtdC80LXQvdC90YvQtVxuICAgICAgIyAo0LjQvdCw0YfQtSDQvtC90Lgg0LzQvtCz0YPRgiDQv9C+0LTQvNC10L3QuNGC0YzRgdGPINCy0L4g0LLRgdGR0Lwg0Y3RgtC+0Lwg0YHQtdGA0LLQuNGB0LUpXG4gICAgICBkbyAoYXBpLCBQb3J0KSAtPlxuICAgICAgICBpZiBvcHRpb25zLm9mZmxpbmVfYmF0Y2hcbiMg0YHQtNC10LvQsNGC0YwgbW9jayB1cCDQtNC70Y8gYXBpXG4gICAgICAgICAgYXBpID0gYXBpX3N0dWIoKVxuXG4gICAgICAgICAgIyDRgdC+0LfQtNCw0ZHQvCDRgdCy0L7QuSDRgdC10YDQstC40YEgUG9ydCwg0LIg0LrQvtGC0L7RgNC+0LwgYXBpINC/0L7QtNC80LXQvdGR0L0g0L3QsCDQvdGD0LbQvdGL0Lkg0L3QsNC8XG4gICAgICAgICAgUG9ydCA9ICRpbmplY3Rvci5pbnZva2UoUG9ydF9zZXJ2aWNlX2NvbnN0cnVjdG9yLCBALCB7YXBpOiBhcGl9KVxuXG4gICAgICAgICMg0L/QvtGI0LvQuCDQstGL0LfQvtCy0Ysg0LrQvtC80LDQvdC0IGFwaVxuICAgICAgICBhcGkuYmVnaW4oKVxuICAgICAgICBSb3V0aW5nX21vZGVsX2FwcGxpZXIuc2V0X2ludGVyZmFjZV92ZXJzaW9uKGFwaSlcbiAgICAgICAgX3NldF91cF9ydWxlcyhydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzLCBvcHRpb25zLCBhcGksIFBvcnQpXG4gICAgICAgIGFwaS5lbmQoKVxuXG4gICMg0KPRgdGC0LDQvdC+0LLQutCwINGA0YPQu9GB0L7QsiDQvdCwINC20LXQu9C10LfQutGDXG4gIF9zZXRfcnVsZXNfY29uZmlnID0gKGFwaSwgcnVsZXMpIC0+XG4gICAgcnVsZXMgPSBEZXZpY2Vfcm91dGluZy5jb252ZXJ0X3RvX2RldmljZV9ydWxlcyhydWxlcylcbiAgICBhcGkuY2FsbCgnc2V0UnVsZXNMaXN0Jywge3J1bGVzOiBydWxlc30pXG5cbiAgIyDQv9GA0L7Qs9GA0YPQttCw0LXRgiDQvNC+0LTQtdC70Ywg0YDQvtGD0YLQuNC90LPQsCDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvlxuICBfc2V0X3VwX3J1bGVzID0gKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMsIG9wdGlvbnMsIGFwaSwgUG9ydCkgLT5cbiAgICAjINCy0YHQtdC8INC/0L7QtNC/0L7RgNGC0LDQvCA0MC3Qs9C40LPQsNCx0LjRgtC90YvRhSDQv9C+0YDRgtC+0LIg0LLRi9GB0YLQsNCy0LjRgtGMINC/0YDQsNCy0LjQu9GM0L3Ri9C5INGA0LXQttC40LwgKGV0aF9tb2RlKVxuICAgIHNldF9qb2ludF9wb3J0c19zdWJwb3J0c19ldGhfbW9kZXMoam9pbnRfcG9ydHMpXG5cbiAgICAjINC90LDRgdGC0YDQvtC40YLRjCDQutCw0LbQtNGL0Lkg0L/QvtGA0YIg0LIg0L3Rg9C20L3QvtC8INC+0LHRitGR0LzQtVxuICAgIGZvciBwb3J0IGluIHBvcnRzXG4gICAgICBQb3J0LmNvbmZpZ3VyZShwb3J0KVxuXG4gICAgX3NldF9ydWxlc19jb25maWcoYXBpLCBydWxlcylcblxuICAjIFwi0L/Rg9Cx0LvQuNGH0L3Ri9C1XCIg0LzQtdGC0L7QtNGLXG5cbiAgIyDQv9GA0LjQvNC10L3Rj9C10YIg0LzQvtC00LXQu9GMINGA0L7Rg9GC0LjQvdCz0LAg0L3QsCDQttC10LvQtdC30LrQtSAoXCLQv9GA0LjQvNC10L3QuNGC0LXQu9GMXCIpXG4gIFJvdXRpbmdfbW9kZWxfYXBwbGllciA9XG5cbiMg0YHQvtGF0YDQsNC90Y/QtdGCINC90LAg0LbQtdC70LXQt9C60LUg0L/QvtC70L3Rg9GOINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRgNC+0YPRgtC40L3Qs9CwINGD0YHRgtGA0L7QudGB0YLQstCwICjQv9GA0LDQstC40LvQsCwg0L/QvtGA0YLRiywgLi4uKVxuIyAo0LTQu9GPINGC0L7Qs9C+LCDRh9GC0L7QsdGLLCDQutC+0LPQtNCwINGD0YHRgtGA0L7QudGB0YLQstC+INCx0YPQtNC10YIg0L/QtdGA0LXQt9Cw0LPRgNGD0LbQtdC90L4sXG4jICDQvtC90L4g0LfQsNC90L7QstC+INC/0YDQuNC80LXQvdC40LvQviDQvdCwINGB0LXQsdC1INCy0LXRgdGMINGN0YLQvtGCIGJhdGNoKVxuICAgIHNhdmVfY29uZmlndXJhdGlvbjogKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpIC0+XG4jINGB0LPQtdC90LXRgNC40YDQvtCy0LDRgtGMINC/0L7Qu9C90YPRjiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0YDQvtGD0YLQuNC90LPQsCDRg9GB0YLRgNC+0LnRgdGC0LLQsFxuICAgICAgUm91dGluZ19tb2RlbF9hcHBsaWVyLmdlbmVyYXRlX2NvbmZpZ3VyYXRpb25fYmF0Y2gocnVsZXMsIHBvcnRzLCBqb2ludF9wb3J0cylcblxuICAgICAgLnRoZW4gKGJhdGNoKSAtPlxuIyDRgdC+0YXRgNCw0L3QuNGC0Ywg0L/QvtC70L3Rg9GOINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRgNC+0YPRgtC40L3Qs9CwINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICAgICAgIHNhdmVfY29uZmlndXJhdGlvbl9iYXRjaChiYXRjaClcblxuIyDRgdC+0YHRgtCw0LLQu9GP0LXRgiDQv9C+0LvQvdGL0LkgYmF0Y2gg0LrQvtC80LDQvdC0INC00LvRjyDQv9GA0LjQvNC10L3QtdC90LjRjyDQtNCw0L3QvdC+0Lkg0LzQvtC00LXQu9C4INGA0L7Rg9GC0LjQvdCz0LAg0L3QsCDQttC10LvQtdC30LrQtVxuICAgIGdlbmVyYXRlX2NvbmZpZ3VyYXRpb25fYmF0Y2g6IChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKSAtPlxuICAgICAgIyDRgdC60L7Qv9C40YDQvtCy0LDRgtGMINC/0L7RgNGC0YssINGH0YLQvtCx0Ysg0L3QtSDQstC90LXRgdGC0Lgg0LIg0L3QuNGFINC/0LDRgNCw0LfQuNGC0L3Ri9GFINC40LfQvNC10L3QtdC90LjQuVxuICAgICAgIyDQstC+INCy0YDQtdC80Y8g0LPQtdC90LXRgNCw0YbQuNC4INCx0LDRgtGH0LAg0L/QvtC70L3QvtC5INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDRgNC+0YPRgtC40L3Qs9CwINGD0YHRgtGA0L7QudGB0YLQstCwXG4gICAgICAjXG4gICAgICAjICjQstC+INCy0YDQtdC80Y8g0LPQtdC90LXRgNCw0YbQuNC4INCx0LDRgtGH0LAg0L/QvtGA0YLRiyDQuNC3INC/0LXRgNC10LTQsNC90L3QvtCz0L4g0LzQsNGB0YHQuNCy0LAg0L/QvtGA0YLQvtCyXG4gICAgICAjICDQv9C+0LTQstC10YDQs9Cw0Y7RgtGB0Y8g0LjQt9C80LXQvdC10L3QuNGP0Lw6INC40Lwg0L/RgNC+0YHRgtCw0LLQu9GP0Y7RgtGB0Y8g0L3Rg9C20L3Ri9C1INC/0LDRgNCw0LzQtdGC0YDRiylcbiAgICAgIHBvcnRzX2NvcHkgPSBhbmd1bGFyLmNvcHkocG9ydHMpXG4gICAgICAjXG4gICAgICAjINC/0LXRgNC10LLQtdGB0YLQuCDRgdGB0YvQu9C60LggKNGD0LrQsNC30LDRgtC10LvQuCkg0L/QvtC00L/QvtGA0YLQvtCyINCyIDQwLdCz0LjQs9Cw0LHQuNGC0L3Ri9GFINGB0L7RgdGC0LDQstC90YvRhSDQv9C+0YDRgtCw0YVcbiAgICAgICMg0L3QsCDRgtC+0LvRjNC60L4g0YfRgtC+INGB0LrQvtC/0LjRgNC+0LLQsNC90L3Ri9C1INCy0YvRiNC1INC/0L7RgNGC0YtcbiAgICAgIGpvaW50X3BvcnRzX2NvcHkgPSBhbmd1bGFyLmNvcHkoam9pbnRfcG9ydHMpXG4gICAgICBmb3Igam9pbnRfcG9ydCBpbiBqb2ludF9wb3J0c19jb3B5XG4gICAgICAgIGpvaW50X3BvcnQucG9ydHMgPSBqb2ludF9wb3J0LnBvcnRzLm1hcCgob3JpZ2luYWxfcG9ydCkgLT4gcG9ydHNfY29weS5maWx0ZXIoKHBvcnQpIC0+IHBvcnQuaWQgPT0gb3JpZ2luYWxfcG9ydC5pZClbMF0pXG5cbiAgICAgICMg0YHQs9C10L3QtdGA0LjRgNC+0LLQsNGC0Ywg0L/QvtC70L3Ri9C5IGJhdGNoINC60L7QvNCw0L3QtCDQtNC70Y8g0L/RgNC40LzQtdC90LXQvdC40Y8g0Y3RgtC+0Lkg0LzQvtC00LXQu9C4INGA0L7Rg9GC0LjQvdCz0LBcbiAgICAgIHNldF91cF9ydWxlcyhydWxlcywgcG9ydHNfY29weSwgam9pbnRfcG9ydHNfY29weSwge29mZmxpbmVfYmF0Y2g6IHllc30pXG5cbiAgICBzZXRfaW50ZXJmYWNlX3ZlcnNpb246IChhcGksIHZlcnNpb24pIC0+XG4gICAgICBhcGkuY2FsbCgnc2V0SW50ZXJmYWNlVmVyc2lvbicsIHt2ZXI6IHZlcnNpb24gfHwgRGV2aWNlX3NldHRpbmdzLmludGVyZmFjZV92ZXJzaW9ufSlcblxuIyDQv9GA0L7Qs9GA0YPQttCw0LXRgiDQvNC+0LTQtdC70Ywg0YDQvtGD0YLQuNC90LPQsCDQsiDRg9GB0YLRgNC+0LnRgdGC0LLQvixcbiMg0Lgg0L/QvtGB0LvQtSDRjdGC0L7Qs9C+INGB0L7RhdGA0LDQvdGP0LXRgiDQv9C+0LvRg9GH0LXQvdC90YvQuSDQv9C+0LvQvdGL0LkgYmF0Y2gg0LrQvtC80LDQvdC0INCyINC20LXQu9C10LfQutC1LFxuIyDRh9GC0L7QsdGLINC+0L3QsCDQvNC+0LPQu9CwINC30LDQvdC+0LLQviDQv9C10YDQtdC/0YDQuNC80LXQvdC40YLRjCDRgdCy0L7RjiDRgdGF0LXQvNGDINC80LDRgNGI0YDRg9GC0LjQt9Cw0YbQuNC4INC/0L7RgdC70LUg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQutC4LlxuI1xuIyDRjdGC0L7RgiDQvNC10YLQvtC0INGB0L3QsNGH0LDQu9CwINGB0L7RgdGC0LDQstC70Y/QtdGCINC/0L7Qu9C90YvQuSBiYXRjaCDQstGB0LXRhSDQutC+0LzQsNC90LQsXG4jINC60L7RgtC+0YDRi9C1INCx0YPQtNGD0YIg0LLRi9C30LLQsNC90Ysg0LTQu9GPINC/0YDQuNC80LXQvdC10L3QuNGPINC80L7QtNC10LvQuCDRgNC+0YPRgtC40L3Qs9CwLFxuIyDQsCDQt9Cw0YLQtdC8INC/0YDQuNC80LXQvdGP0LXRgiDRjdGC0YMg0LzQvtC00LXQu9GMINGA0L7Rg9GC0LjQvdCz0LAg0L3QsCDQttC10LvQtdC30LrQtSxcbiMg0Lgg0LIg0LrQvtC90YbQtSDQtNC10LvQsNC10YIgc2F2ZUNvbmZpZyDRgSDQv9C+0LvRg9GH0LXQvdC90YvQvCBiYXRjaCfQtdC8XG4jICjQtNC70Y8g0YLQvtCz0L4sINGH0YLQvtCx0YssINC60L7Qs9C00LAg0LbQtdC70LXQt9C60LAg0LHRg9C00LXRgiDQv9C10YDQtdC30LDQs9GA0YPQttC10L3QsCxcbiMgINC+0L3QsCDQt9Cw0L3QvtCy0L4g0L/RgNC40LzQtdC90LjQu9CwINC90LAg0YHQtdCx0LUg0LLQtdGB0Ywg0Y3RgtC+0YIgYmF0Y2gpXG4gICAgc2V0X3VwX3JvdXRpbmc6IChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKSAtPlxuIyDRgdCz0LXQvdC10YDQuNGA0L7QstCw0YLRjCDQv9C+0LvQvdGL0LkgYmF0Y2gg0LTQu9GPINC00LDQvdC90L7QuSDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0YDQvtGD0YLQuNC90LPQsFxuICAgICAgdXBkYXRlX3BvcnRzKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpXG4gICAgICAudGhlbiAtPlxuICAgICAgICBSb3V0aW5nX21vZGVsX2FwcGxpZXIuZ2VuZXJhdGVfY29uZmlndXJhdGlvbl9iYXRjaChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKVxuXG4jINC80L7QttC90L4g0YHQutC70LDQtNGL0LLQsNGC0Ywg0L/QtdGA0LXQvNC10L3QvdGL0LUg0LLQviDQstGA0LXQvNC10L3QvdGL0Lkg0L7QsdGK0LXQutGCINGH0LXRgNC10LcgQFxuICAgICAgLmJpbmQoe30pXG5cbiAgICAgIC50aGVuIChiYXRjaCkgLT5cbiAgICAgICAgQGJhdGNoID0gYmF0Y2hcblxuIyDRgdC+0YXRgNCw0L3QuNGC0Ywg0YHQs9C10L3QtdGA0LjRgNC+0LLQsNC90L3Ri9C5INCyINC90LDRh9Cw0LvQtSBiYXRjaCDQsiDQttC10LvQtdC30LrQtVxuICAgICAgLnRoZW4gLT5cbiAgICAgICAgc2F2ZV9jb25maWd1cmF0aW9uX2JhdGNoKEBiYXRjaClcblxuIyDQs9C+0YLQvtCy0L5cbiAgICAgIC50aGVuIC0+XG4gICAgICAgIF9zZXRfcnVsZXNfY29uZmlnKGFwaSwgcnVsZXMpIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnUm91dGluZ19tb2RlbF9hcHBsaWVyJywgZnVuY3Rpb24oJGluamVjdG9yLCBhcGksIGxvZywgUG9ydCwgUnVsZSwgRGV2aWNlX3JvdXRpbmcsIE1vZGVsLCBNb2RlbF9zZXJ2aWNlLCBEZXZpY2Vfc2V0dGluZ3MsIEVudW1zKSB7XG4gICAgdmFyIFJvdXRpbmdfbW9kZWxfYXBwbGllciwgX2V4dHJhY3RfcG9ydHMsIF9zZXRfcnVsZXNfY29uZmlnLCBfc2V0X3VwX3J1bGVzLCBhcGlfc3R1Yiwgc2F2ZV9jb25maWd1cmF0aW9uX2JhdGNoLCBzZXRfam9pbnRfcG9ydHNfc3VicG9ydHNfZXRoX21vZGVzLCBzZXRfdXBfcnVsZXMsIHVwZGF0ZV9wb3J0cywgdmFsaWRhdGVfam9pbnRfcG9ydF9yb3V0aW5nO1xuICAgIGFwaV9zdHViID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVxdWVzdF9qc29uLCBzdHViO1xuICAgICAgcmVxdWVzdF9qc29uID0gYXBpLnJlcXVlc3RfanNvbi5iaW5kKGFwaSk7XG4gICAgICByZXR1cm4gc3R1YiA9IHtcbiAgICAgICAgYmF0Y2g6IFtdLFxuICAgICAgICBiZWdpbjogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZHVtbXlfcHJvbWlzZSh0aGlzLmJhdGNoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbDogZnVuY3Rpb24obWV0aG9kLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgdGhpcy5iYXRjaC5wdXNoKHJlcXVlc3RfanNvbihtZXRob2QsIHBhcmFtZXRlcnMpKTtcbiAgICAgICAgICByZXR1cm4gZHVtbXlfcHJvbWlzZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIHNldF9qb2ludF9wb3J0c19zdWJwb3J0c19ldGhfbW9kZXMgPSBmdW5jdGlvbihqb2ludF9wb3J0cykge1xuICAgICAgdmFyIGksIGpvaW50X3BvcnQsIGxlbiwgcG9ydCwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGpvaW50X3BvcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGpvaW50X3BvcnQgPSBqb2ludF9wb3J0c1tpXTtcbiAgICAgICAgaWYgKGpvaW50X3BvcnQubW9kZSA9PT0gJzQwRycpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGosIGxlbjEsIHJlZiwgcmVzdWx0czE7XG4gICAgICAgICAgICByZWYgPSBqb2ludF9wb3J0LnBvcnRzO1xuICAgICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgICAgIHJlc3VsdHMxLnB1c2gocG9ydC5ldGhfbW9kZSA9IHBvcnQgPT09IGpvaW50X3BvcnQucG9ydHNbMF0gPyBFbnVtcy5ldGhlcm5ldF9wb3J0X21vZGVzWyc0MEdCQVNFX1NSNCddIDogRW51bXMuZXRoZXJuZXRfcG9ydF9tb2Rlcy5ESVNBQkxFRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICAgICAgfSkoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG4gICAgX2V4dHJhY3RfcG9ydHMgPSBmdW5jdGlvbihydWxlcykge1xuICAgICAgdmFyIGksIGosIGssIGxlbiwgbGVuMSwgbGVuMiwgcG9ydCwgcG9ydHMsIHJlZiwgcmVmMSwgcnVsZTtcbiAgICAgIHBvcnRzID0ge1xuICAgICAgICBhbGw6IFtdXG4gICAgICB9O1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcnVsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcnVsZSA9IHJ1bGVzW2ldO1xuICAgICAgICByZWYgPSBydWxlLmlucHV0cztcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBwb3J0ID0gcmVmW2pdO1xuICAgICAgICAgIGlmICghcG9ydHMuYWxsLmhhcyhwb3J0LmlkKSkge1xuICAgICAgICAgICAgcG9ydHMuYWxsLnB1c2gocG9ydC5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlZjEgPSBydWxlLm91dHB1dHM7XG4gICAgICAgIGZvciAoayA9IDAsIGxlbjIgPSByZWYxLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xuICAgICAgICAgIHBvcnQgPSByZWYxW2tdO1xuICAgICAgICAgIGlmICghcG9ydHMuYWxsLmhhcyhwb3J0LmlkKSkge1xuICAgICAgICAgICAgcG9ydHMuYWxsLnB1c2gocG9ydC5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3J0cy5hbGwuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvcnRzO1xuICAgIH07XG4gICAgdmFsaWRhdGVfam9pbnRfcG9ydF9yb3V0aW5nID0gZnVuY3Rpb24oam9pbnRfcG9ydHMsIHJvdXRlZF9wb3J0cykge1xuICAgICAgdmFyIGksIGpvaW50X3BvcnQsIGxlbiwgcG9ydCwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGpvaW50X3BvcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGpvaW50X3BvcnQgPSBqb2ludF9wb3J0c1tpXTtcbiAgICAgICAgaWYgKGpvaW50X3BvcnQubW9kZSA9PT0gJzQwRycpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGosIGxlbjEsIHJlZiwgcmVzdWx0czE7XG4gICAgICAgICAgICByZWYgPSBqb2ludF9wb3J0LnBvcnRzO1xuICAgICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICAgIHBvcnQgPSByZWZbal07XG4gICAgICAgICAgICAgIGlmIChwb3J0ICE9PSBqb2ludF9wb3J0LnBvcnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlZF9wb3J0cy5hbGwuaGFzKHBvcnQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKb2ludCBwb3J0IFwiICsgam9pbnRfcG9ydC5pZCArIFwiIGlzIHNldCB0byA0MEcgbW9kZSwgYnV0IHBvcnQgXCIgKyBwb3J0LmlkICsgXCIgaXMgYmVpbmcgdXNlZCBpbiBydWxlc1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0czEucHVzaCh2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9O1xuICAgIHVwZGF0ZV9wb3J0cyA9IGZ1bmN0aW9uKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpIHtcbiAgICAgIHZhciBpLCBsZW4sIHBvcnQsIHJvdXRlZF9wb3J0cztcbiAgICAgIHJvdXRlZF9wb3J0cyA9IF9leHRyYWN0X3BvcnRzKHJ1bGVzKTtcbiAgICAgIHZhbGlkYXRlX2pvaW50X3BvcnRfcm91dGluZyhqb2ludF9wb3J0cywgcm91dGVkX3BvcnRzKTtcbiAgICAgIGFwaS5iZWdpbigpO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcG9ydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcG9ydCA9IHBvcnRzW2ldO1xuICAgICAgICBpZiAocm91dGVkX3BvcnRzLmFsbC5oYXMocG9ydC5pZCkpIHtcbiAgICAgICAgICBwb3J0LmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIFBvcnQuY29uZmlndXJlKHBvcnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXBpLmVuZCgpO1xuICAgIH07XG4gICAgc2F2ZV9jb25maWd1cmF0aW9uX2JhdGNoID0gZnVuY3Rpb24oYmF0Y2gpIHtcbiAgICAgIHJldHVybiBhcGkuY2FsbCgnc2F2ZUNvbmZpZycsIHtcbiAgICAgICAgY29uZmlnOiBKU09OLnN0cmluZ2lmeShiYXRjaClcbiAgICAgIH0pO1xuICAgIH07XG4gICAgc2V0X3VwX3J1bGVzID0gZnVuY3Rpb24ocnVsZXMsIHBvcnRzLCBqb2ludF9wb3J0cywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGR1bW15X3Byb21pc2UoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgTW9kZWxfc2VydmljZS5lbnN1cmVfcG9ydHNfbG9jaygpO1xuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKGFwaSwgUG9ydCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLm9mZmxpbmVfYmF0Y2gpIHtcbiAgICAgICAgICAgIGFwaSA9IGFwaV9zdHViKCk7XG4gICAgICAgICAgICBQb3J0ID0gJGluamVjdG9yLmludm9rZShQb3J0X3NlcnZpY2VfY29uc3RydWN0b3IsIHRoaXMsIHtcbiAgICAgICAgICAgICAgYXBpOiBhcGlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhcGkuYmVnaW4oKTtcbiAgICAgICAgICBSb3V0aW5nX21vZGVsX2FwcGxpZXIuc2V0X2ludGVyZmFjZV92ZXJzaW9uKGFwaSk7XG4gICAgICAgICAgX3NldF91cF9ydWxlcyhydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzLCBvcHRpb25zLCBhcGksIFBvcnQpO1xuICAgICAgICAgIHJldHVybiBhcGkuZW5kKCk7XG4gICAgICAgIH0pKGFwaSwgUG9ydCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9zZXRfcnVsZXNfY29uZmlnID0gZnVuY3Rpb24oYXBpLCBydWxlcykge1xuICAgICAgcnVsZXMgPSBEZXZpY2Vfcm91dGluZy5jb252ZXJ0X3RvX2RldmljZV9ydWxlcyhydWxlcyk7XG4gICAgICByZXR1cm4gYXBpLmNhbGwoJ3NldFJ1bGVzTGlzdCcsIHtcbiAgICAgICAgcnVsZXM6IHJ1bGVzXG4gICAgICB9KTtcbiAgICB9O1xuICAgIF9zZXRfdXBfcnVsZXMgPSBmdW5jdGlvbihydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzLCBvcHRpb25zLCBhcGksIFBvcnQpIHtcbiAgICAgIHZhciBpLCBsZW4sIHBvcnQ7XG4gICAgICBzZXRfam9pbnRfcG9ydHNfc3VicG9ydHNfZXRoX21vZGVzKGpvaW50X3BvcnRzKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHBvcnQgPSBwb3J0c1tpXTtcbiAgICAgICAgUG9ydC5jb25maWd1cmUocG9ydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3NldF9ydWxlc19jb25maWcoYXBpLCBydWxlcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUm91dGluZ19tb2RlbF9hcHBsaWVyID0ge1xuICAgICAgc2F2ZV9jb25maWd1cmF0aW9uOiBmdW5jdGlvbihydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKSB7XG4gICAgICAgIHJldHVybiBSb3V0aW5nX21vZGVsX2FwcGxpZXIuZ2VuZXJhdGVfY29uZmlndXJhdGlvbl9iYXRjaChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKS50aGVuKGZ1bmN0aW9uKGJhdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIHNhdmVfY29uZmlndXJhdGlvbl9iYXRjaChiYXRjaCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRlX2NvbmZpZ3VyYXRpb25fYmF0Y2g6IGZ1bmN0aW9uKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpIHtcbiAgICAgICAgdmFyIGksIGpvaW50X3BvcnQsIGpvaW50X3BvcnRzX2NvcHksIGxlbiwgcG9ydHNfY29weTtcbiAgICAgICAgcG9ydHNfY29weSA9IGFuZ3VsYXIuY29weShwb3J0cyk7XG4gICAgICAgIGpvaW50X3BvcnRzX2NvcHkgPSBhbmd1bGFyLmNvcHkoam9pbnRfcG9ydHMpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBqb2ludF9wb3J0c19jb3B5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgam9pbnRfcG9ydCA9IGpvaW50X3BvcnRzX2NvcHlbaV07XG4gICAgICAgICAgam9pbnRfcG9ydC5wb3J0cyA9IGpvaW50X3BvcnQucG9ydHMubWFwKGZ1bmN0aW9uKG9yaWdpbmFsX3BvcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3J0c19jb3B5LmZpbHRlcihmdW5jdGlvbihwb3J0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBwb3J0LmlkID09PSBvcmlnaW5hbF9wb3J0LmlkO1xuICAgICAgICAgICAgfSlbMF07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldF91cF9ydWxlcyhydWxlcywgcG9ydHNfY29weSwgam9pbnRfcG9ydHNfY29weSwge1xuICAgICAgICAgIG9mZmxpbmVfYmF0Y2g6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0X2ludGVyZmFjZV92ZXJzaW9uOiBmdW5jdGlvbihhcGksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIGFwaS5jYWxsKCdzZXRJbnRlcmZhY2VWZXJzaW9uJywge1xuICAgICAgICAgIHZlcjogdmVyc2lvbiB8fCBEZXZpY2Vfc2V0dGluZ3MuaW50ZXJmYWNlX3ZlcnNpb25cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0X3VwX3JvdXRpbmc6IGZ1bmN0aW9uKHJ1bGVzLCBwb3J0cywgam9pbnRfcG9ydHMpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZV9wb3J0cyhydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBSb3V0aW5nX21vZGVsX2FwcGxpZXIuZ2VuZXJhdGVfY29uZmlndXJhdGlvbl9iYXRjaChydWxlcywgcG9ydHMsIGpvaW50X3BvcnRzKTtcbiAgICAgICAgfSkuYmluZCh7fSkudGhlbihmdW5jdGlvbihiYXRjaCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJhdGNoID0gYmF0Y2g7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHNhdmVfY29uZmlndXJhdGlvbl9iYXRjaCh0aGlzLmJhdGNoKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3NldF9ydWxlc19jb25maWcoYXBpLCBydWxlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiYXBwLmZhY3RvcnkgJ1JvdXRpbmdfbW9kZWxfZXJyb3JzJywgKHRyYW5zbGF0ZSwgRGV2aWNlX3NldHRpbmdzKSAtPlxuXG5cdFJvdXRpbmdfbW9kZWxfZXJyb3JzID0gXG5cdFx0TWF4aW11bV9udW1iZXJfb2ZfbWFwcGVyX3ZhbHVlc19leGNlZWRlZDogY3VzdG9tX2Vycm9yKCdNYXhpbXVtX251bWJlcl9vZl9tYXBwZXJfdmFsdWVzX2V4Y2VlZGVkJylcblx0XHRNYXhpbXVtX251bWJlcl9vZl9taXJyb3JpbmdfZ3JvdXBzX2V4Y2VlZGVkOiBjdXN0b21fZXJyb3IoJ01heGltdW1fbnVtYmVyX29mX21pcnJvcmluZ19ncm91cHNfZXhjZWVkZWQnKVxuXHRcdE1heGltdW1fbnVtYmVyX29mX2FjY2Vzc19jb250cm9sX2xpc3RzX2V4Y2VlZGVkOiBjdXN0b21fZXJyb3IoJ01heGltdW1fbnVtYmVyX29mX2FjY2Vzc19jb250cm9sX2xpc3RzX2V4Y2VlZGVkJylcblxuXHRcdGlzOiAoZXJyb3IpIC0+XG5cdFx0XHRmb3IgbmFtZSwgZXJyb3JfY2xhc3Mgb2YgUm91dGluZ19tb2RlbF9lcnJvcnMgd2hlbiBlcnJvcl9jbGFzcy5pc19jdXN0b21fZXJyb3Jcblx0XHRcdFx0aWYgZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl9jbGFzc1xuXHRcdFx0XHRcdHJldHVybiB5ZXNcblxuXHRcdG1lc3NhZ2U6IChlcnJvcikgLT5cblx0XHRcdGlmIGVycm9yIGluc3RhbmNlb2YgUm91dGluZ19tb2RlbF9lcnJvcnMuTWF4aW11bV9udW1iZXJfb2ZfbWFwcGVyX3ZhbHVlc19leGNlZWRlZFxuXHRcdFx0XHRyZXR1cm4gdHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLnRvb19tYW55X2ludGVydmFsc19pbl9maWx0ZXJzJylcblxuXHRcdFx0aWYgZXJyb3IgaW5zdGFuY2VvZiBSb3V0aW5nX21vZGVsX2Vycm9ycy5NYXhpbXVtX251bWJlcl9vZl9taXJyb3JpbmdfZ3JvdXBzX2V4Y2VlZGVkXG5cdFx0XHRcdHJldHVybiB0cmFuc2xhdGUoJ2NvbmZpZ3VyYXRpb24uZXJyb3IubWF4X21pcnJvcmluZ19wb3J0cycsIHsgbWF4OiBEZXZpY2Vfc2V0dGluZ3MubWF4X21pcnJvcl9ncm91cHMgfSlcblxuXHRcdFx0aWYgZXJyb3IgaW5zdGFuY2VvZiBSb3V0aW5nX21vZGVsX2Vycm9ycy5NYXhpbXVtX251bWJlcl9vZl9hY2Nlc3NfY29udHJvbF9saXN0c19leGNlZWRlZFxuXHRcdFx0XHRyZXR1cm4gdHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLm1heF9hY2xzJywgeyBtYXg6IERldmljZV9zZXR0aW5ncy5tYXhfYWNscyB9KVxuXG5cdFx0IyBkZXRlY3Q6IChlcnJvcikgLT5cblx0XHQjIFx0Zm9yIGtleSwgdmFsdWUgb2YgUm91dGluZ19tb2RlbF9lcnJvcnNcblx0XHQjIFx0XHRpZiBlcnJvciBpbnN0YW5jZW9mIHZhbHVlICMg0LXRidGRINC80L7QttC90L4g0YTQuNC70YzRgtGA0L7QstCw0YLRjCDQv9C+INC60LvQsNGB0YHQsNC8LCDQvdC+INGPINGF0Lcg0LrQsNC6XG5cdFx0IyBcdFx0XHRyZXR1cm4gdmFsdWUiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdSb3V0aW5nX21vZGVsX2Vycm9ycycsIGZ1bmN0aW9uKHRyYW5zbGF0ZSwgRGV2aWNlX3NldHRpbmdzKSB7XG4gICAgdmFyIFJvdXRpbmdfbW9kZWxfZXJyb3JzO1xuICAgIHJldHVybiBSb3V0aW5nX21vZGVsX2Vycm9ycyA9IHtcbiAgICAgIE1heGltdW1fbnVtYmVyX29mX21hcHBlcl92YWx1ZXNfZXhjZWVkZWQ6IGN1c3RvbV9lcnJvcignTWF4aW11bV9udW1iZXJfb2ZfbWFwcGVyX3ZhbHVlc19leGNlZWRlZCcpLFxuICAgICAgTWF4aW11bV9udW1iZXJfb2ZfbWlycm9yaW5nX2dyb3Vwc19leGNlZWRlZDogY3VzdG9tX2Vycm9yKCdNYXhpbXVtX251bWJlcl9vZl9taXJyb3JpbmdfZ3JvdXBzX2V4Y2VlZGVkJyksXG4gICAgICBNYXhpbXVtX251bWJlcl9vZl9hY2Nlc3NfY29udHJvbF9saXN0c19leGNlZWRlZDogY3VzdG9tX2Vycm9yKCdNYXhpbXVtX251bWJlcl9vZl9hY2Nlc3NfY29udHJvbF9saXN0c19leGNlZWRlZCcpLFxuICAgICAgaXM6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvcl9jbGFzcywgbmFtZTtcbiAgICAgICAgZm9yIChuYW1lIGluIFJvdXRpbmdfbW9kZWxfZXJyb3JzKSB7XG4gICAgICAgICAgZXJyb3JfY2xhc3MgPSBSb3V0aW5nX21vZGVsX2Vycm9yc1tuYW1lXTtcbiAgICAgICAgICBpZiAoZXJyb3JfY2xhc3MuaXNfY3VzdG9tX2Vycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl9jbGFzcykge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSb3V0aW5nX21vZGVsX2Vycm9ycy5NYXhpbXVtX251bWJlcl9vZl9tYXBwZXJfdmFsdWVzX2V4Y2VlZGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci50b29fbWFueV9pbnRlcnZhbHNfaW5fZmlsdGVycycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJvdXRpbmdfbW9kZWxfZXJyb3JzLk1heGltdW1fbnVtYmVyX29mX21pcnJvcmluZ19ncm91cHNfZXhjZWVkZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlKCdjb25maWd1cmF0aW9uLmVycm9yLm1heF9taXJyb3JpbmdfcG9ydHMnLCB7XG4gICAgICAgICAgICBtYXg6IERldmljZV9zZXR0aW5ncy5tYXhfbWlycm9yX2dyb3Vwc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJvdXRpbmdfbW9kZWxfZXJyb3JzLk1heGltdW1fbnVtYmVyX29mX2FjY2Vzc19jb250cm9sX2xpc3RzX2V4Y2VlZGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgnY29uZmlndXJhdGlvbi5lcnJvci5tYXhfYWNscycsIHtcbiAgICAgICAgICAgIG1heDogRGV2aWNlX3NldHRpbmdzLm1heF9hY2xzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsImFwcC5mYWN0b3J5ICdSdWxlJywgKCRyb290U2NvcGUsIGFwaSwgUG9ydCwgRGV2aWNlX3JvdXRpbmcpIC0+XG4gICAgUnVsZSA9IFxuICAgICAgICAjINC10YHQu9C4INCy0YvQt9Cy0LDQvdC+INCx0LXQtyDQsNGA0LPRg9C80LXQvdGC0LAsINGC0L4g0L7Qv9GA0LXQtNC10LvQuNGC0YwgXG4gICAgICAgICMgXCLRgtC10LrRg9GJ0LXQtVwiINC/0YDQsNCy0LjQu9C+INC90LAg0YHRgtGA0LDQvdC40YbQtSDQv9GA0LDQstC40LtcbiAgICAgICAgIyAo0L3QsNC/0YDQuNC80LXRgCwg0YLQviwg0LjQtyDQutC+0YLQvtGA0L7Qs9C+INC/0L7RgtCw0YnQuNC70Lgg0L/QvtGA0YIsXG4gICAgICAgICMgINGH0YLQvtCx0Ysg0LfQvdCw0YLRjCwg0LjQtyDQutCw0LrQvtCz0L4g0L/RgNCw0LLQuNC70LAg0L/QvtGC0L7QvCDRg9Cx0YDQsNGC0Ywg0L/QvtGA0YIsXG4gICAgICAgICMgINC60L7Qs9C00LAg0Y3RgtC+0YIg0L/QvtGA0YIg0LHRg9C00LXRgiBcItCy0YvRgtCw0YnQtdC9XCIpXG4gICAgICAgICNcbiAgICAgICAgIyDQtdGB0LvQuCDQstGL0LfQstCw0L3QviDRgSDQsNGA0LPRg9C80LXQvdGC0L7QvCxcbiAgICAgICAgIyDRgtC+INGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCIFwi0YLQtdC60YPRidC10LVcIiDQv9GA0LDQstC40LvQvlxuICAgICAgICAjICjQvdCw0L/RgNC40LzQtdGALCDQutC+0LPQtNCwINC/0L7RgtCw0YnQuNC70Lgg0L/QvtGA0YIg0LjQtyDQvdC10LPQvilcbiAgICAgICAgY3VycmVudDogKHJ1bGUpIC0+XG4gICAgICAgICAgICAjINCy0LXRgNC90YPRgtGMIFwi0YLQtdC60YPRidC10LVcIiDQv9GA0LDQstC40LvQviwg0LXRgdC70Lgg0LDRgNCz0YPQvNC10L3RgiAtIG51bGwg0LjQu9C4IHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgbm90IHJ1bGU/XG4gICAgICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuY3VycmVudF9ydWxlXG5cbiAgICAgICAgICAgICMg0YPRgdGC0LDQvdC+0LLQuNGC0YwgXCLRgtC10LrRg9GJ0LXQtVwiINC/0YDQsNCy0LjQu9C+XG4gICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRfcnVsZSA9IHJ1bGVcblxuICAgICAgICAjINC00YPQsdC70LjRgNGD0LXRgiDQv9GA0LDQstC40LvQvlxuICAgICAgICBjb3B5OiAocnVsZSkgLT5cbiAgICAgICAgICAgICMg0L7RgtC60YHQtdGA0LjRgtGMXG4gICAgICAgICAgICBjb3B5ID0gYW5ndWxhci5jb3B5KHJ1bGUpXG5cbiAgICAgICAgICAgICMg0L/QtdGA0LXQt9Cw0L/QuNGB0YvQstCw0LXRgiDQstGF0L7QtNGLLFxuICAgICAgICAgICAgIyDRgi7Qui4gYW5ndWxhci5jb3B5INGB0L7Qt9C00LDQuyDQutC+0L/QuNC4INC+0LHRitC10LrRgtC+0LIg0L/QvtGA0YLQvtCyLFxuICAgICAgICAgICAgIyDQsCDQtNC+0LvQttC90Ysg0YHQvtGF0YDQsNC90LjRgtGM0YHRjyDRg9C60LDQt9Cw0YLQtdC70Lgg0L3QsCDQvtGA0LjQs9C40L3QsNC70YzQvdGL0LUg0L7QsdGK0LXQutGC0Ysg0L/QvtGA0YLQvtCyXG4gICAgICAgICAgICBjb3B5LmlucHV0cyA9IFtdXG4gICAgICAgICAgICBmb3IgcG9ydCBpbiBydWxlLmlucHV0c1xuICAgICAgICAgICAgICAgIGNvcHkuaW5wdXRzLnB1c2gocG9ydClcblxuICAgICAgICAgICAgIyDQv9C10YDQtdC30LDQv9C40YHRi9Cy0LDQtdGCINCy0YvRhdC+0LTRiyxcbiAgICAgICAgICAgICMg0YIu0LouIGFuZ3VsYXIuY29weSDRgdC+0LfQtNCw0Lsg0LrQvtC/0LjQuCDQvtCx0YrQtdC60YLQvtCyINC/0L7RgNGC0L7QsixcbiAgICAgICAgICAgICMg0LAg0LTQvtC70LbQvdGLINGB0L7RhdGA0LDQvdC40YLRjNGB0Y8g0YPQutCw0LfQsNGC0LXQu9C4INC90LAg0L7RgNC40LPQuNC90LDQu9GM0L3Ri9C1INC+0LHRitC10LrRgtGLINC/0L7RgNGC0L7QslxuICAgICAgICAgICAgY29weS5vdXRwdXRzID0gW11cbiAgICAgICAgICAgIGZvciBwb3J0IGluIHJ1bGUub3V0cHV0c1xuICAgICAgICAgICAgICAgIGNvcHkub3V0cHV0cy5wdXNoKHBvcnQpXG5cbiAgICAgICAgICAgIHJldHVybiBjb3B5XG5cbiAgICAgICAgIyDQv9GA0LjQstC10YHRgtC4INC/0YDQsNCy0LjQu9C+INCyIFwi0LrQsNC90L7QvdC40YfQtdGB0LrQuNC5INCy0LjQtFwiLlxuICAgICAgICAjINGN0YLQvtGCINC80LXRgtC+0LQg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPLCDQvdCw0L/RgNC40LzQtdGALCDQtNC70Y8g0L7Rh9C40YnQtdC90LjRjyDQv9GA0LDQstC40LvQsCDQvtGCINC/0YPRgdGC0YvRhSDRhNC40LvRjNGC0YDQvtCyXG4gICAgICAgIHNhbml0aXplOiAocnVsZSkgLT5cbiAgICAgICAgICAgICMg0YPQtNCw0LvQuNGC0Ywg0Y/QstC90L4g0LvQuNGI0L3QtdC1ICjQstGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdGL0LUg0YHQstC+0LnRgdGC0LLQsCBBbmd1bGFyLmpzINC4INGCLtC/LilcblxuICAgICAgICAgICAgZGVsZXRlIHJ1bGUuJCRoYXNoS2V5XG5cbiAgICAgICAgICAgIGZvciBmaWx0ZXIgaW4gcnVsZS5maWx0ZXJzXG4gICAgICAgICAgICAgICAgZGVsZXRlIGZpbHRlci4kJHNob3dfbWFza1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWx0ZXIuJCRpbnRlcnZhbFxuXG4gICAgICAgICAgICAjINGD0LHRgNCw0YLRjCDQv9GD0YHRgtGL0LUg0YTQuNC70YzRgtGA0YtcbiAgICAgICAgICAgIHJ1bGUuZmlsdGVycyA9IChmaWx0ZXIgZm9yIGZpbHRlciBpbiBydWxlLmZpbHRlcnMgd2hlbiBub3QgRGV2aWNlX3JvdXRpbmcuRmlsdGVyLmlzX2VtcHR5KGZpbHRlcikpXG5cbiAgICAgICAgIyDQv9GA0LXQvtCx0YDQsNC30YPQtdGCINC/0YDQsNCy0LjQu9C+INC40Lcg0JzQvtC00LXQu9C4INCyINGF0YDQsNC90LjQvNGL0Lkg0YTQvtGA0LzQsNGCXG4gICAgICAgIHNlcmlhbGl6ZTogKHJ1bGUpIC0+XG4gICAgICAgICAgICAjINC+0YLQutGB0LXRgNC40YLRjFxuICAgICAgICAgICAgcnVsZSA9IGFuZ3VsYXIuY29weShydWxlKVxuXG4gICAgICAgICAgICAjINCy0YXQvtC00Ysg0Lgg0LLRi9GF0L7QtNGLINC30LDQvNC10L3QuNGC0Ywg0YEg0L7QsdGK0LXQutGC0L7QsiDQv9C+0YDRgtC+0LIg0L3QsCBpZCDQv9C+0YDRgtC+0LJcbiAgICAgICAgICAgIHJ1bGUuaW5wdXRzICA9IChwb3J0LmlkIGZvciBwb3J0IGluIHJ1bGUuaW5wdXRzKVxuICAgICAgICAgICAgcnVsZS5vdXRwdXRzID0gKHBvcnQuaWQgZm9yIHBvcnQgaW4gcnVsZS5vdXRwdXRzKVxuXG4gICAgICAgICAgICAjINC/0YDQuNCy0LXRgdGC0Lgg0L/RgNCw0LLQuNC70L4g0LIgXCLQutCw0L3QvtC90LjRh9C10YHQutC40Lkg0LLQuNC0XCIuXG4gICAgICAgICAgICBSdWxlLnNhbml0aXplKHJ1bGUpXG5cbiAgICAgICAgICAgIHJldHVybiBydWxlXG5cbiAgICAgICAgIyDQv9GA0LXQvtCx0YDQsNC30YPQtdGCINC/0YDQsNCy0LjQu9C+INC40Lcg0YXRgNCw0L3QuNC80L7Qs9C+INGE0L7RgNC80LDRgtCwINCyINCc0L7QtNC10LvRjFxuICAgICAgICBkZXNlcmlhbGl6ZTogKHJ1bGUpIC0+XG4gICAgICAgICAgICAjINC+0YLQutGB0LXRgNC40YLRjFxuICAgICAgICAgICAgcnVsZSA9IGFuZ3VsYXIuY29weShydWxlKVxuXG4gICAgICAgICAgICAjINCy0YXQvtC00Ysg0Lgg0LLRi9GF0L7QtNGLINC30LDQvNC10L3QuNGC0Ywg0YEgaWQg0L/QvtGA0YLQvtCyINC90LAg0L7QsdGK0LXQutGC0Ysg0L/QvtGA0YLQvtCyXG4gICAgICAgICAgICBydWxlLmlucHV0cyAgPSAoUG9ydC5ieV9pZChwb3J0X2lkKSBmb3IgcG9ydF9pZCBpbiBydWxlLmlucHV0cylcbiAgICAgICAgICAgIHJ1bGUub3V0cHV0cyA9IChQb3J0LmJ5X2lkKHBvcnRfaWQpIGZvciBwb3J0X2lkIGluIHJ1bGUub3V0cHV0cylcblxuICAgICAgICAgICAgcmV0dXJuIHJ1bGVcblxuICAgICAgICAjINC/0YDQsNCy0LjQu9CwINCz0YDRg9C/0L/QuNGA0YPRjtGC0YHRjzog0LHQtdGA0ZHRgtGB0Y8g0L/RgNCw0LLQuNC70L4sINC4INC40LTRkdGC0YHRjyDQv9C+INGB0L/QuNGB0LrRgyDQv9GA0LDQstC40Lsg0LTQsNC70YzRiNC1LCBcbiAgICAgICAgIyDQuNGJ0LXRgiDRgtCw0LrQuNC1INC20LUg0L/RgNCw0LLQuNC70LAsINC00LvRjyDRgdC+0LLRgdC10Lwg0LTRgNGD0LPQuNGFINC/0L7RgNGC0L7Qsiwg0Lgg0YLQtSDQv9C+0YDRgtGLINCy0YLQvtGA0L7Qs9C+INC/0YDQsNCy0LjQu9CwLFxuICAgICAgICAjINC60L7RgtC+0YDRi9C1INC90LUg0L/RgNC40YHRg9GC0YHRgtCy0YPRjtGCINCyINC/0YDQvtC80LXQttGD0YLQvtGH0L3Ri9GFINC/0YDQsNCy0LjQu9Cw0YUgLSDQvtCx0YrQtdC00LjQvdGP0Y7RgtGB0Y8g0LIg0L/QtdGA0LLQvtC1INC/0YDQsNCy0LjQu9C+XG4gICAgICAgICNcbiAgICAgICAgIyAo0Y3RgtC+INCx0YvQu9C+INC+0L/QuNGB0LDQvdC40LUg0YfQsNGB0YLQvdC+0LPQviDRgdC70YPRh9Cw0Y8sINC00LvRjyDQv9GA0LjQvNC10YDQsClcbiAgICAgICAgbWVyZ2U6IChydWxlcywgc3RhcnRfZnJvbSkgLT5cbiAgICAgICAgICAgIHJldHVybiBbXSBpZiBydWxlcy5pc19lbXB0eSgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIG5vdCBzdGFydF9mcm9tP1xuICAgICAgICAgICAgICAgIHN0YXJ0X2Zyb20gPSAxXG5cbiAgICAgICAgICAgICMg0LjQtNGC0Lgg0L/QviDQstGB0LXQvCDQv9GA0LDQstC40LvQsNC8LCDQvdCw0YfQuNC90LDRjyDRgSDQt9Cw0LTQsNC90L3QvtCz0L4sINC00L4g0LrQvtC90YbQsFxuICAgICAgICAgICAgZm9yIGluZGV4IGluIFtzdGFydF9mcm9tLi5ydWxlcy5sZW5ndGhdXG4gICAgICAgICAgICAgICAgcnVsZSA9IHJ1bGVzW2luZGV4IC0gMV1cblxuICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZV9ydWxlcyA9IFtdXG5cbiAgICAgICAgICAgICAgICAjINC00LvRjyDRgtC10LrRg9GJ0LXQs9C+INC/0YDQsNCy0LjQu9CwLCDQv9GA0L7QudGC0LjRgdGMINC/0L4g0LLRgdC10Lwg0L/QvtGB0LvQtdC00YPRjtGJ0LjQvCDQv9GA0LDQstC40LvQsNC8XG4gICAgICAgICAgICAgICAgZm9yIHN1YnNlcXVlbnQgaW4gW2luZGV4Li5ydWxlcy5sZW5ndGhdXG4gICAgICAgICAgICAgICAgICAgICMgaW5kZXgg0LzQvtC20LXRgiDQsdGL0YLRjCDRgNCw0LLQtdC9IHJ1bGVzLmxlbmd0aCwg0LIg0LLRi9GA0L7QttC00LXQvdC90L7QvCDRgdC70YPRh9Cw0LUuXG4gICAgICAgICAgICAgICAgICAgICMg0L/QvtGN0YLQvtC80YMg0LfQtNC10YHRjCDRgdGC0L7QuNGCINGN0YLQvtGCIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGlmIHN1YnNlcXVlbnQgPT0gaW5kZXhcblxuICAgICAgICAgICAgICAgICAgICAjINC+0YfQtdGA0LXQtNC90L7QtSBcItC/0L7RgdC70LXQtNGD0Y7RidC10LVcIiDQv9GA0LDQstC40LvQvlxuICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50X3J1bGUgPSBydWxlc1tzdWJzZXF1ZW50IC0gMV1cblxuICAgICAgICAgICAgICAgICAgICAjINC00L7QsdCw0LLQuNGC0Ywg0LXQs9C+INCyINGB0L/QuNGB0L7QuiBcItC/0YDQvtC80LXQttGD0YLQvtGH0L3Ri9GFXCIg0L/RgNCw0LLQuNC7XG4gICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZV9ydWxlcy5wdXNoKHN1YnNlcXVlbnRfcnVsZSlcblxuICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INC/0YDQsNCy0LjQu9CwINC+0LTQuNC90LDQutC+0LLRi9C1XG4gICAgICAgICAgICAgICAgICAgIGlmIGFuZ3VsYXIuZXF1YWxzKHJ1bGUsIHN1YnNlcXVlbnRfcnVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICMg0YPQtNCw0LvQuNGC0Ywg0LTRg9Cx0LvQuNC60LDRglxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXMucmVtb3ZlX2F0KHN1YnNlcXVlbnQgLSAxKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC60L7Qv9C40L/QsNGB0YLQsFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INGN0YLQviDQsdGL0LvQviDQv9C+0YHQu9C10LTQvdC10LUg0L/RgNCw0LLQuNC70L4g0LIg0YHQv9C40YHQutC1LCDRgtC+INC30LDQutC+0L3Rh9C40LvQuFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW5kZXggPiBydWxlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXNcblxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQuNC90LDRh9C1IC0g0L/RgNC+0LTQvtC70LbQuNGC0Ywg0YDQtdC60YPRgNGB0LjQstC90L4sINGBINGD0YfRkdGC0L7QvCDQvtCx0L3QvtCy0LvRkdC90L3QvtCz0L4g0L3QsNCx0L7RgNCwINC/0YDQsNCy0LjQu1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJ1bGUubWVyZ2UocnVsZXMsIGluZGV4KVxuXG4gICAgICAgICAgICAgICAgICAgICMg0LXRgdC70Lgg0L/RgNCw0LLQuNC70LAg0L7QtNC40L3QsNC60L7QstGL0LUsINCx0LXQtyDRg9GH0ZHRgtCwINCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7Qsiwg0YLQviBcbiAgICAgICAgICAgICAgICAgICAgIyDQvNC+0LbQvdC+INC/0L7Qv9GA0L7QsdC+0LLQsNGC0Ywg0YHQu9C40YLRjCDQuNGFINCyINC+0LTQvdC+INC/0YDQsNCy0LjQu9C+XG4gICAgICAgICAgICAgICAgICAgICNcbiAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDRgyDRjdGC0LjRhSDQv9GA0LDQstC40Lsg0L3QtdGCINC+0LHRidC40YUg0LLRhdC+0LTQvdGL0YUg0L/QvtGA0YLQvtCyXG4gICAgICAgICAgICAgICAgICAgIGlmIHJ1bGUuaW5wdXRzLmludGVyc2VjdChzdWJzZXF1ZW50X3J1bGUuaW5wdXRzKS5pc19lbXB0eSgpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVfY29weSA9IGFuZ3VsYXIuY29weShydWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkoc3Vic2VxdWVudF9ydWxlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcnVsZV9jb3B5LmlucHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNlcXVlbnRfcnVsZV9jb3B5LmlucHV0c1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INC/0YDQsNCy0LjQu9CwINC+0LTQuNC90LDQutC+0LLRi9C1LCDQsdC10Lcg0YPRh9GR0YLQsCDQstGF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LIsINGC0L4gXG4gICAgICAgICAgICAgICAgICAgICAgICAjINC80L7QttC90L4g0L/QvtC/0YDQvtCx0L7QstCw0YLRjCDRgdC70LjRgtGMINC40YUg0LIg0L7QtNC90L4g0L/RgNCw0LLQuNC70L5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFuZ3VsYXIuZXF1YWxzKHJ1bGVfY29weSwgc3Vic2VxdWVudF9ydWxlX2NvcHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQstC30Y/RgtGMINCy0YHQtSDQstGF0L7QtNC90YvQtSDQv9C+0YDRgtGLINCy0YLQvtGA0L7Qs9C+INC/0YDQsNCy0LjQu9CwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBhYmxlX3BvcnRzID0gYW5ndWxhci5jb3B5KHN1YnNlcXVlbnRfcnVsZS5pbnB1dHMpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC4INGD0LHRgNCw0YLRjCDQuNC3INGB0L/QuNGB0LrQsCDRgtC1INC40Lcg0L3QuNGFLCDQutC+0YLQvtGA0YvQtSDQv9C+0Y/QstC70Y/RjtGC0YHRjyDQsiDQv9GA0L7QvNC10LbRg9GC0L7Rh9C90YvRhSDQv9GA0LDQstC40LvQsNGFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGludGVybWVkaWF0ZV9ydWxlIGluIGludGVybWVkaWF0ZV9ydWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBpbnRlcm1lZGlhdGVfcnVsZSA9PSBzdWJzZXF1ZW50X3J1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGdyb3VwYWJsZV9wb3J0IGluIGFuZ3VsYXIuY29weShncm91cGFibGVfcG9ydHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbnRlcm1lZGlhdGVfcnVsZS5pbnB1dHMuaGFzKGdyb3VwYWJsZV9wb3J0KSB8fCBpbnRlcm1lZGlhdGVfcnVsZS5vdXRwdXRzLmhhcyhncm91cGFibGVfcG9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cGFibGVfcG9ydHMucmVtb3ZlKGdyb3VwYWJsZV9wb3J0KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQsiDRgdC/0LjRgdC60LUg0L/QvtGB0LvQtSDQvtGC0LHQvtGA0LAg0L7RgdGC0LDQu9C40YHRjCDQtdGJ0ZEg0LrQsNC60LjQtS3QvdC40LHRg9C00Ywg0L/QvtGA0YLRi1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdyb3VwYWJsZV9wb3J0cy5ub3RfZW1wdHkoKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0L/QtdGA0LXQvdC10YHRgtC4INCy0YHQtSDRjdGC0Lgg0L/QvtGA0YLRiyDQuNC3INCy0YLQvtGA0L7Qs9C+INC/0YDQsNCy0LjQu9CwINCyINC/0LXRgNCy0L7QtSDQv9GA0LDQstC40LvQvlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZ3JvdXBhYmxlX3BvcnQgaW4gZ3JvdXBhYmxlX3BvcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLmlucHV0cy5wdXNoKGdyb3VwYWJsZV9wb3J0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlLmlucHV0cy5yZW1vdmUoZ3JvdXBhYmxlX3BvcnQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDRg9C/0L7RgNGP0LTQvtGH0LjRgtGMINC+0LHQvdC+0LLQu9GR0L3QvdGL0LUg0L/QvtGA0YLRiyDQv9C10YDQstC+0LPQviDQv9GA0LDQstC40LvQsCDQv9C+INCy0L7Qt9GA0LDRgdGC0LDQvdC40Y5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5pbnB1dHMuc29ydCAoYSwgYikgLT4gYSAtIGJcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INCy0L4g0LLRgtC+0YDQvtC8INC/0YDQsNCy0LjQu9C1INC/0L4g0LjRgtC+0LPRgyDQvdC1INC+0YHRgtCw0LvQvtGB0Ywg0LLRhdC+0LTQvdGL0YUg0L/QvtGA0YLQvtCyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINGD0LTQsNC70LjRgtGMINC10LPQvlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzdWJzZXF1ZW50X3J1bGUuaW5wdXRzLmlzX2VtcHR5KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzLnJlbW92ZV9hdChzdWJzZXF1ZW50IC0gMSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC60L7Qv9C40L/QsNGB0YLQsFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LXRgdC70Lgg0Y3RgtC+INCx0YvQu9C+INC/0L7RgdC70LXQtNC90LXQtSDQv9GA0LDQstC40LvQviDQsiDRgdC/0LjRgdC60LUsINGC0L4g0LfQsNC60L7QvdGH0LjQu9C4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluZGV4ID4gcnVsZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXNcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC40L3QsNGH0LUgLSDQv9GA0L7QtNC+0LvQttC40YLRjCDRgNC10LrRg9GA0YHQuNCy0L3Qviwg0YEg0YPRh9GR0YLQvtC8INC+0LHQvdC+0LLQu9GR0L3QvdC+0LPQviDQvdCw0LHQvtGA0LAg0L/RgNCw0LLQuNC7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSdWxlLm1lcmdlKHJ1bGVzLCBpbmRleClcblxuICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INC+0LHQsCDQv9GA0LDQstC40LvQsCAtINC90LAgbWlycm9yaW5nLCDQuCDQstGL0YXQvtC00L3Ri9C1INC/0L7RgNGC0Ysg0L7QtNC40L3QsNC60L7QstGL0LUsXG4gICAgICAgICAgICAgICAgICAgICMg0YLQviDQvNC+0LbQvdC+INC/0L7Qv9GA0L7QsdC+0LLQsNGC0Ywg0YHQu9C40YLRjCDQuNGFINCyINC+0LTQvdC+INC/0YDQsNCy0LjQu9C+IG1pcnJvcmluZyfQsFxuICAgICAgICAgICAgICAgICAgICBpZiBydWxlLmFjdGlvbiA9PSAnbWlycm9yJyAmJiBzdWJzZXF1ZW50X3J1bGUuYWN0aW9uID09ICdtaXJyb3InXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBhbmd1bGFyLmVxdWFscyhydWxlLm91dHB1dHMsIHN1YnNlcXVlbnRfcnVsZS5vdXRwdXRzKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZV9jb3B5ID0gYW5ndWxhci5jb3B5KHJ1bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkoc3Vic2VxdWVudF9ydWxlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJ1bGVfY29weS5pbnB1dHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3Vic2VxdWVudF9ydWxlX2NvcHkuaW5wdXRzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INC/0YDQsNCy0LjQu9CwINC+0LTQuNC90LDQutC+0LLRi9C1LCDQsdC10Lcg0YPRh9GR0YLQsCDQstGF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LIsINGC0L4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQvNC+0LbQvdC+INC/0L7Qv9GA0L7QsdC+0LLQsNGC0Ywg0YHQu9C40YLRjCDQuNGFINCyINC+0LTQvdC+INC/0YDQsNCy0LjQu9C+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW5ndWxhci5lcXVhbHMocnVsZV9jb3B5LCBzdWJzZXF1ZW50X3J1bGVfY29weSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINGD0YfQsNGB0YLQstGD0Y7RgiDQu9C4INCy0YXQvtC00Ysg0Y3RgtC40YUg0L/RgNCw0LLQuNC7INCyINC60LDQutC+0Lwt0L3QuNCx0YPQtNGMINC40Lcg0L/RgNC+0LzQtdC20YPRgtC+0YfQvdGL0YUg0L/RgNCw0LLQuNC7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0gbm9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC+0LHRitC10LTQuNC90ZHQvdC90YvQuSDQvdCw0LHQvtGAINCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7QsiDQv9C10YDQstC+0LPQviDQuCDQstGC0L7RgNC+0LPQviDQv9GA0LDQstC40LtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnRfaW5wdXRzID0gYW5ndWxhci5jb3B5KHJ1bGUuaW5wdXRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaW5wdXQgaW4gc3Vic2VxdWVudF9ydWxlLmlucHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGpvaW50X2lucHV0cy5oYXMoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnRfaW5wdXRzLnB1c2goaW5wdXQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDRhdC+0YLRjyDQsdGLINC+0LTQuNC9INC40Lcg0LLRhdC+0LTQvdGL0YUg0L/QvtGA0YLQvtCyINC+0LHQvtC40YUg0L/RgNCw0LLQuNC7INC/0YDQuNGB0YPRgtGB0YLQstGD0LXRgiDQs9C00LUt0L3QuNCx0YPQtNGMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LIg0L/RgNC+0LzQtdC20YPRgtC+0YfQvdGL0YUg0L/RgNCw0LLQuNC70LDRhSAtINGC0L4g0L3QtSDQvtCx0YrQtdC00LjQvdGP0YLRjCAo0LTQu9GPINGD0L/RgNC+0YnQtdC90LjRjyDQsNC70LPQvtGA0LjRgtC80LApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbnRlcm1lZGlhdGVfcnVsZSBpbiBpbnRlcm1lZGlhdGVfcnVsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGlmIGludGVybWVkaWF0ZV9ydWxlID09IHN1YnNlcXVlbnRfcnVsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW50ZXJtZWRpYXRlX3J1bGUuaW5wdXRzLmludGVyc2VjdChqb2ludF9pbnB1dHMpLm5vdF9lbXB0eSgpIHx8IGludGVybWVkaWF0ZV9ydWxlLm91dHB1dHMuaW50ZXJzZWN0KGpvaW50X2lucHV0cykubm90X2VtcHR5KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2VlbiA9IHllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQvdC1INGD0YfQsNGB0YLQstGD0Y7RgiAtINC80L7QttC90L4g0YHQu9C40YLRjCDQtNCy0LAg0L/RgNCw0LLQuNC70LAg0LIg0L7QtNC90L5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC/0LXRgNC10LzQtdGB0YLQuNGC0Ywg0LLRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiyDQstGC0L7RgNC+0LPQviDQv9GA0LDQstC40LvQsCDQsiDQv9C10YDQstC+0LUg0L/RgNCw0LLQuNC70L5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaW5wdXRzID0gam9pbnRfaW5wdXRzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0YPQv9C+0YDRj9C00L7Rh9C40YLRjCDQvtCx0L3QvtCy0LvRkdC90L3Ri9C1INCy0YvRhdC+0LTQvdGL0LUg0L/QvtGA0YLRiyDQv9C10YDQstC+0LPQviDQv9GA0LDQstC40LvQsCDQv9C+INCy0L7Qt9GA0LDRgdGC0LDQvdC40Y5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuaW5wdXRzLnNvcnQgKGEsIGIpIC0+IGEgLSBiXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0YPQtNCw0LvQuNGC0Ywg0LLRgtC+0YDQvtC1INC/0YDQsNCy0LjQu9C+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcy5yZW1vdmVfYXQoc3Vic2VxdWVudCAtIDEpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LrQvtC/0LjQv9Cw0YHRgtCwXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LXRgdC70Lgg0Y3RgtC+INCx0YvQu9C+INC/0L7RgdC70LXQtNC90LXQtSDQv9GA0LDQstC40LvQviDQsiDRgdC/0LjRgdC60LUsINGC0L4g0LfQsNC60L7QvdGH0LjQu9C4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbmRleCA+IHJ1bGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC40L3QsNGH0LUgLSDQv9GA0L7QtNC+0LvQttC40YLRjCDRgNC10LrRg9GA0YHQuNCy0L3Qviwg0YEg0YPRh9GR0YLQvtC8INC+0LHQvdC+0LLQu9GR0L3QvdC+0LPQviDQvdCw0LHQvtGA0LAg0L/RgNCw0LLQuNC7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUnVsZS5tZXJnZShydWxlcywgaW5kZXgpXG5cbiAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQv9C10YDQstC+0LUg0L/RgNCw0LLQuNC70L4gLSDQvdCwIG1pcnJvcmluZywg0Lgg0LLRgtC+0YDQvtC1IC0g0L3QsCDRh9GC0L4t0YLQviDQtNGA0YPQs9C+0LUsINGC0L4g0LzQvtC20L3QviBcbiAgICAgICAgICAgICAgICAgICAgIyDQv9C+0L/RgNC+0LHQvtCy0LDRgtGMINC+0LHRitC10LTQuNC90LjRgtGMXG4gICAgICAgICAgICAgICAgICAgIGlmIHJ1bGUuYWN0aW9uID09ICdtaXJyb3InICYmIHN1YnNlcXVlbnRfcnVsZS5hY3Rpb24gIT0gJ21pcnJvcidcblxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQstGL0YXQvtC00Ysg0L/RgNCw0LLQuNC7INC80L7Qs9GD0YIg0LHRi9GC0Ywg0YDQsNC30L3Ri9C80LgsIFxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQsCDQstGF0L7QtNGLIC0g0L/RgNC40LzQtdC8INGB0YLRgNC+0LPQviDQvtC00LjQvdCw0LrQvtCy0YvQvNC4ICjQtNC70Y8g0YPQv9GA0L7RidC10L3QuNGPINCw0LvQs9C+0YDQuNGC0LzQsClcblxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZV9jb3B5ID0gYW5ndWxhci5jb3B5KHJ1bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50X3J1bGVfY29weSA9IGFuZ3VsYXIuY29weShzdWJzZXF1ZW50X3J1bGUpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBydWxlX2NvcHkub3V0cHV0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNlcXVlbnRfcnVsZV9jb3B5Lm91dHB1dHNcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJ1bGVfY29weS5hY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzdWJzZXF1ZW50X3J1bGVfY29weS5hY3Rpb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQstGC0L7RgNC+0LUg0L/RgNCw0LLQuNC70L4gLSDQvdCwINCx0LDQu9Cw0L3RgdC40YDQvtCy0LrRg1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNlcXVlbnRfcnVsZV9jb3B5Lmhhc2hpbmdfcHJvZmlsZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAjINCy0L4g0LLRgdGR0Lwg0L7RgdGC0LDQu9GM0L3QvtC8LCDQutGA0L7QvNC1INCy0YvRhdC+0LTQvtCyINC4IGFjdGlvbifQvtCyLCDQv9GA0LDQstC40LvQsCDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0L7QtNC40L3QsNC60L7QstGL0LzQuFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW5ndWxhci5lcXVhbHMocnVsZV9jb3B5LCBzdWJzZXF1ZW50X3J1bGVfY29weSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0YPRh9Cw0YHRgtCy0YPRjtGCINC70Lgg0LLRhdC+0LTRiyDRjdGC0LjRhSDQv9GA0LDQstC40Lsg0LIg0LrQsNC60L7QvC3QvdC40LHRg9C00Ywg0LjQtyDQv9GA0L7QvNC10LbRg9GC0L7Rh9C90YvRhSDQv9GA0LDQstC40LtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2VlbiA9IG5vXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INGF0L7RgtGPINCx0Ysg0L7QtNC40L0g0LjQtyDQstGF0L7QtNC90YvRhSDQv9C+0YDRgtC+0LIg0L7QsdC+0LjRhSDQv9GA0LDQstC40Lsg0L/RgNC40YHRg9GC0YHRgtCy0YPQtdGCINCz0LTQtS3QvdC40LHRg9C00YxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINCyINC/0YDQvtC80LXQttGD0YLQvtGH0L3Ri9GFINC/0YDQsNCy0LjQu9Cw0YUgLSDRgtC+INC90LUg0L7QsdGK0LXQtNC40L3Rj9GC0YwgKNC00LvRjyDRg9C/0YDQvtGJ0LXQvdC40Y8g0LDQu9Cz0L7RgNC40YLQvNCwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbnRlcm1lZGlhdGVfcnVsZSBpbiBpbnRlcm1lZGlhdGVfcnVsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgaWYgaW50ZXJtZWRpYXRlX3J1bGUgPT0gc3Vic2VxdWVudF9ydWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGludGVybWVkaWF0ZV9ydWxlLmlucHV0cy5pbnRlcnNlY3QocnVsZS5pbnB1dHMpLm5vdF9lbXB0eSgpIHx8IGludGVybWVkaWF0ZV9ydWxlLm91dHB1dHMuaW50ZXJzZWN0KHJ1bGUuaW5wdXRzKS5ub3RfZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfcG9ydHNfYXJlX2ZvdW5kX2luX2JldHdlZW4gPSB5ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC90LUg0YPRh9Cw0YHRgtCy0YPRjtGCIC0g0LzQvtC20L3QviDRgdC70LjRgtGMINC00LLQsCDQv9GA0LDQstC40LvQsCDQsiDQvtC00L3QvlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2VlblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubWlycm9yX3RvID0gcnVsZS5vdXRwdXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINGD0L/QvtGA0Y/QtNC+0YfQuNGC0Ywg0L/QvtGA0YLRiyDQvdCw0LfQvdCw0YfQtdC90LjRjyDQutC+0L/QuNGA0L7QstCw0L3QuNGPINC/0L4g0LLQvtC30YDQsNGB0YLQsNC90LjRjlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLm1pcnJvcl90by5zb3J0IChhLCBiKSAtPiBhIC0gYlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHJ1bGUsIHN1YnNlcXVlbnRfcnVsZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINGD0LTQsNC70LjRgtGMINCy0YLQvtGA0L7QtSDQv9GA0LDQstC40LvQvlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlcy5yZW1vdmVfYXQoc3Vic2VxdWVudCAtIDEpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQutC+0L/QuNC/0LDRgdGC0LBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC10YHQu9C4INGN0YLQviDQsdGL0LvQviDQv9C+0YHQu9C10LTQvdC10LUg0L/RgNCw0LLQuNC70L4g0LIg0YHQv9C40YHQutC1LCDRgtC+INC30LDQutC+0L3Rh9C40LvQuFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbmRleCA+IHJ1bGVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQuNC90LDRh9C1IC0g0L/RgNC+0LTQvtC70LbQuNGC0Ywg0YDQtdC60YPRgNGB0LjQstC90L4sINGBINGD0YfRkdGC0L7QvCDQvtCx0L3QvtCy0LvRkdC90L3QvtCz0L4g0L3QsNCx0L7RgNCwINC/0YDQsNCy0LjQu1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUnVsZS5tZXJnZShydWxlcywgaW5kZXgpXG5cbiAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDQvtCx0LAg0L/RgNCw0LLQuNC70LAgLSDQvdCwIG1pcnJvcmluZywg0YLQviDQvNC+0LbQvdC+IFxuICAgICAgICAgICAgICAgICAgICAjINC/0L7Qv9GA0L7QsdC+0LLQsNGC0Ywg0L7QsdGK0LXQtNC40L3QuNGC0YxcbiAgICAgICAgICAgICAgICAgICAgaWYgcnVsZS5hY3Rpb24gPT0gJ21pcnJvcicgJiYgc3Vic2VxdWVudF9ydWxlLmFjdGlvbiA9PSAnbWlycm9yJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAjINCy0YvRhdC+0LTRiyDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0YDQsNC30L3Ri9C80LhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJ1bGUub3V0cHV0cy5pbnRlcnNlY3Qoc3Vic2VxdWVudF9ydWxlLm91dHB1dHMpLmlzX2VtcHR5KClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LAg0LLRhdC+0LTRiyAtINC/0YDQuNC80LXQvCDRgdGC0YDQvtCz0L4g0L7QtNC40L3QsNC60L7QstGL0LzQuCAo0LTQu9GPINGD0L/RgNC+0YnQtdC90LjRjyDQsNC70LPQvtGA0LjRgtC80LApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50X3J1bGVfY29weSA9IGFuZ3VsYXIuY29weShzdWJzZXF1ZW50X3J1bGUpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcnVsZV9jb3B5Lm91dHB1dHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3Vic2VxdWVudF9ydWxlX2NvcHkub3V0cHV0c1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQstC+INCy0YHRkdC8INC+0YHRgtCw0LvRjNC90L7QvCwg0LrRgNC+0LzQtSDQstGL0YXQvtC00L7Qsiwg0L/RgNCw0LLQuNC70LAg0LTQvtC70LbQvdGLINCx0YvRgtGMINC+0LTQuNC90LDQutC+0LLRi9C80LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBhbmd1bGFyLmVxdWFscyhydWxlX2NvcHksIHN1YnNlcXVlbnRfcnVsZV9jb3B5KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0YPRh9Cw0YHRgtCy0YPRjtGCINC70Lgg0LLRhdC+0LTRiyDRjdGC0LjRhSDQv9GA0LDQstC40Lsg0LIg0LrQsNC60L7QvC3QvdC40LHRg9C00Ywg0LjQtyDQv9GA0L7QvNC10LbRg9GC0L7Rh9C90YvRhSDQv9GA0LDQstC40LtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfcG9ydHNfYXJlX2ZvdW5kX2luX2JldHdlZW4gPSBub1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LXRgdC70Lgg0YXQvtGC0Y8g0LHRiyDQvtC00LjQvSDQuNC3INCy0YXQvtC00L3Ri9GFINC/0L7RgNGC0L7QsiDQvtCx0L7QuNGFINC/0YDQsNCy0LjQuyDQv9GA0LjRgdGD0YLRgdGC0LLRg9C10YIg0LPQtNC1LdC90LjQsdGD0LTRjFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINCyINC/0YDQvtC80LXQttGD0YLQvtGH0L3Ri9GFINC/0YDQsNCy0LjQu9Cw0YUgLSDRgtC+INC90LUg0L7QsdGK0LXQtNC40L3Rj9GC0YwgKNC00LvRjyDRg9C/0YDQvtGJ0LXQvdC40Y8g0LDQu9Cz0L7RgNC40YLQvNCwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaW50ZXJtZWRpYXRlX3J1bGUgaW4gaW50ZXJtZWRpYXRlX3J1bGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBpbnRlcm1lZGlhdGVfcnVsZSA9PSBzdWJzZXF1ZW50X3J1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGludGVybWVkaWF0ZV9ydWxlLmlucHV0cy5pbnRlcnNlY3QocnVsZS5pbnB1dHMpLm5vdF9lbXB0eSgpIHx8IGludGVybWVkaWF0ZV9ydWxlLm91dHB1dHMuaW50ZXJzZWN0KHJ1bGUuaW5wdXRzKS5ub3RfZW1wdHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0geWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjINC90LUg0YPRh9Cw0YHRgtCy0YPRjtGCIC0g0LzQvtC20L3QviDRgdC70LjRgtGMINC00LLQsCDQv9GA0LDQstC40LvQsCDQsiDQvtC00L3QvlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaW5wdXRfcG9ydHNfYXJlX2ZvdW5kX2luX2JldHdlZW5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5vdXRwdXRzID0gcnVsZS5vdXRwdXRzLmNvbmNhdChzdWJzZXF1ZW50X3J1bGUub3V0cHV0cylcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDRg9C00LDQu9C40YLRjCDQstGC0L7RgNC+0LUg0L/RgNCw0LLQuNC70L5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzLnJlbW92ZV9hdChzdWJzZXF1ZW50IC0gMSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQutC+0L/QuNC/0LDRgdGC0LBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyDQtdGB0LvQuCDRjdGC0L4g0LHRi9C70L4g0L/QvtGB0LvQtdC00L3QtdC1INC/0YDQsNCy0LjQu9C+INCyINGB0L/QuNGB0LrQtSwg0YLQviDQt9Cw0LrQvtC90YfQuNC70LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluZGV4ID4gcnVsZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMg0LjQvdCw0YfQtSAtINC/0YDQvtC00L7Qu9C20LjRgtGMINGA0LXQutGD0YDRgdC40LLQvdC+LCDRgSDRg9GH0ZHRgtC+0Lwg0L7QsdC90L7QstC70ZHQvdC90L7Qs9C+INC90LDQsdC+0YDQsCDQv9GA0LDQstC40LtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSdWxlLm1lcmdlKHJ1bGVzLCBpbmRleClcblxuICAgICAgICAgICAgcmV0dXJuIHJ1bGVzXG5cbiAgICAgICAgIyDQmtC+0LPQtNCwINC/0L7RgNGCIFwi0LLRi9GC0LDRidC10L1cIiDQuNC3IFwi0LrQvtC90YLQtdC50L3QtdGA0LBcIiDQuCBcItCx0YDQvtGI0LXQvVwiINCy0L7QstC90LUgLSBcbiAgICAgICAgIyDQvtC9INGD0LTQsNC70Y/QtdGC0YHRjyDQuNC3INGB0L/QuNGB0LrQsFxuICAgICAgICAjICjQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LIgaW5kZXguaHRtbClcbiAgICAgICAgcmVtb3ZlX3BvcnQ6IChwb3J0X2lkLCBwb3J0X3R5cGUpIC0+XG4gICAgICAgICAgICBwb3J0ID0gUG9ydC5ieV9pZChwb3J0X2lkKVxuICAgICAgICAgICAgcnVsZSA9IFJ1bGUuY3VycmVudCgpXG5cbiAgICAgICAgICAgIHJldHVybiBpZiBub3QgcnVsZVxuICAgICAgICAgICAgIyDRgdCx0YDQvtGB0LjRgtGMIFwi0YLQtdC60YPRidC10LVcIiDQv9GA0LDQstC40LvQvlxuICAgICAgICAgICAgUnVsZS5jdXJyZW50KG5vKVxuXG4gICAgICAgICAgICAjINGN0YLQvtGCINC/0L7RgNGC0Ysg0LHRi9C7INCy0YXQvtC00L3Ri9C8INC70LjQsdC+INCy0YvRhdC+0LTQvdGL0LwsXG4gICAgICAgICAgICAjINGB0L7QvtGC0LLQtdGC0YHRgtCy0LXQvdC90L4sINGD0LHRgNCw0YLRjCDQtdCz0L4g0LjQtyDQstGF0L7QtNC+0LIg0LvQuNCx0L4g0LLRi9GF0L7QtNC+0LJcbiAgICAgICAgICAgIHN3aXRjaCBwb3J0X3R5cGVcbiAgICAgICAgICAgICAgICAjINGD0LHRgNCw0YLRjCDQuNC3INCy0YXQvtC00L7QslxuICAgICAgICAgICAgICAgIHdoZW4gJ2lucHV0J1xuICAgICAgICAgICAgICAgICAgICBydWxlLmlucHV0cy5yZW1vdmUocG9ydClcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LnNldCgkcm9vdFNjb3BlLnZpZXcucG9ydHMsIHBvcnQuaWQsICdzZWxlY3RlZEluJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgIyDRg9Cx0YDQsNGC0Ywg0LjQtyDQstGL0YXQvtC00L7QslxuICAgICAgICAgICAgICAgIHdoZW4gJ291dHB1dCdcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5vdXRwdXRzLnJlbW92ZShwb3J0KVxuICAgICAgICAgICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkT3V0JywgZmFsc2UpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGEtcG9ydC10eXBlOiAje3BvcnRfdHlwZX1cIilcblxuICAgICAgICAgICAgcmV0dXJuIHJ1bGUiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdSdWxlJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgYXBpLCBQb3J0LCBEZXZpY2Vfcm91dGluZykge1xuICAgIHZhciBSdWxlO1xuICAgIHJldHVybiBSdWxlID0ge1xuICAgICAgY3VycmVudDogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICBpZiAocnVsZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuY3VycmVudF9ydWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcm9vdFNjb3BlLmN1cnJlbnRfcnVsZSA9IHJ1bGU7XG4gICAgICB9LFxuICAgICAgY29weTogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICB2YXIgY29weSwgaSwgaiwgbGVuLCBsZW4xLCBwb3J0LCByZWYsIHJlZjE7XG4gICAgICAgIGNvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSk7XG4gICAgICAgIGNvcHkuaW5wdXRzID0gW107XG4gICAgICAgIHJlZiA9IHJ1bGUuaW5wdXRzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBwb3J0ID0gcmVmW2ldO1xuICAgICAgICAgIGNvcHkuaW5wdXRzLnB1c2gocG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgY29weS5vdXRwdXRzID0gW107XG4gICAgICAgIHJlZjEgPSBydWxlLm91dHB1dHM7XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIHBvcnQgPSByZWYxW2pdO1xuICAgICAgICAgIGNvcHkub3V0cHV0cy5wdXNoKHBvcnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfSxcbiAgICAgIHNhbml0aXplOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHZhciBmaWx0ZXIsIGksIGxlbiwgcmVmO1xuICAgICAgICBkZWxldGUgcnVsZS4kJGhhc2hLZXk7XG4gICAgICAgIHJlZiA9IHJ1bGUuZmlsdGVycztcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgZmlsdGVyID0gcmVmW2ldO1xuICAgICAgICAgIGRlbGV0ZSBmaWx0ZXIuJCRzaG93X21hc2s7XG4gICAgICAgICAgZGVsZXRlIGZpbHRlci4kJGludGVydmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlLmZpbHRlcnMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIGxlbjEsIHJlZjEsIHJlc3VsdHM7XG4gICAgICAgICAgcmVmMSA9IHJ1bGUuZmlsdGVycztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSByZWYxW2pdO1xuICAgICAgICAgICAgaWYgKCFEZXZpY2Vfcm91dGluZy5GaWx0ZXIuaXNfZW1wdHkoZmlsdGVyKSkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH0pKCk7XG4gICAgICB9LFxuICAgICAgc2VyaWFsaXplOiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIHZhciBwb3J0O1xuICAgICAgICBydWxlID0gYW5ndWxhci5jb3B5KHJ1bGUpO1xuICAgICAgICBydWxlLmlucHV0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgICAgcmVmID0gcnVsZS5pbnB1dHM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcG9ydCA9IHJlZltpXTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChwb3J0LmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJ1bGUub3V0cHV0cyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgICAgcmVmID0gcnVsZS5vdXRwdXRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHBvcnQgPSByZWZbaV07XG4gICAgICAgICAgICByZXN1bHRzLnB1c2gocG9ydC5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KSgpO1xuICAgICAgICBSdWxlLnNhbml0aXplKHJ1bGUpO1xuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH0sXG4gICAgICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICB2YXIgcG9ydF9pZDtcbiAgICAgICAgcnVsZSA9IGFuZ3VsYXIuY29weShydWxlKTtcbiAgICAgICAgcnVsZS5pbnB1dHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlZiA9IHJ1bGUuaW5wdXRzO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHBvcnRfaWQgPSByZWZbaV07XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goUG9ydC5ieV9pZChwb3J0X2lkKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9KSgpO1xuICAgICAgICBydWxlLm91dHB1dHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgIHJlZiA9IHJ1bGUub3V0cHV0cztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBwb3J0X2lkID0gcmVmW2ldO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFBvcnQuYnlfaWQocG9ydF9pZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkoKTtcbiAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgICB9LFxuICAgICAgbWVyZ2U6IGZ1bmN0aW9uKHJ1bGVzLCBzdGFydF9mcm9tKSB7XG4gICAgICAgIHZhciBncm91cGFibGVfcG9ydCwgZ3JvdXBhYmxlX3BvcnRzLCBpLCBpbmRleCwgaW5wdXQsIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuLCBpbnRlcm1lZGlhdGVfcnVsZSwgaW50ZXJtZWRpYXRlX3J1bGVzLCBqLCBqb2ludF9pbnB1dHMsIGssIGwsIGxlbiwgbGVuMSwgbGVuMiwgbGVuMywgbGVuNCwgbGVuNSwgbGVuNiwgbSwgbiwgbywgcCwgcSwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByZWY1LCBydWxlLCBydWxlX2NvcHksIHN1YnNlcXVlbnQsIHN1YnNlcXVlbnRfcnVsZSwgc3Vic2VxdWVudF9ydWxlX2NvcHk7XG4gICAgICAgIGlmIChydWxlcy5pc19lbXB0eSgpKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydF9mcm9tID09IG51bGwpIHtcbiAgICAgICAgICBzdGFydF9mcm9tID0gMTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGluZGV4ID0gaSA9IHJlZiA9IHN0YXJ0X2Zyb20sIHJlZjEgPSBydWxlcy5sZW5ndGg7IHJlZiA8PSByZWYxID8gaSA8PSByZWYxIDogaSA+PSByZWYxOyBpbmRleCA9IHJlZiA8PSByZWYxID8gKytpIDogLS1pKSB7XG4gICAgICAgICAgcnVsZSA9IHJ1bGVzW2luZGV4IC0gMV07XG4gICAgICAgICAgaW50ZXJtZWRpYXRlX3J1bGVzID0gW107XG4gICAgICAgICAgZm9yIChzdWJzZXF1ZW50ID0gaiA9IHJlZjIgPSBpbmRleCwgcmVmMyA9IHJ1bGVzLmxlbmd0aDsgcmVmMiA8PSByZWYzID8gaiA8PSByZWYzIDogaiA+PSByZWYzOyBzdWJzZXF1ZW50ID0gcmVmMiA8PSByZWYzID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgICBpZiAoc3Vic2VxdWVudCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzZXF1ZW50X3J1bGUgPSBydWxlc1tzdWJzZXF1ZW50IC0gMV07XG4gICAgICAgICAgICBpbnRlcm1lZGlhdGVfcnVsZXMucHVzaChzdWJzZXF1ZW50X3J1bGUpO1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKHJ1bGUsIHN1YnNlcXVlbnRfcnVsZSkpIHtcbiAgICAgICAgICAgICAgcnVsZXMucmVtb3ZlX2F0KHN1YnNlcXVlbnQgLSAxKTtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBSdWxlLm1lcmdlKHJ1bGVzLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVsZS5pbnB1dHMuaW50ZXJzZWN0KHN1YnNlcXVlbnRfcnVsZS5pbnB1dHMpLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgcnVsZV9jb3B5ID0gYW5ndWxhci5jb3B5KHJ1bGUpO1xuICAgICAgICAgICAgICBzdWJzZXF1ZW50X3J1bGVfY29weSA9IGFuZ3VsYXIuY29weShzdWJzZXF1ZW50X3J1bGUpO1xuICAgICAgICAgICAgICBkZWxldGUgcnVsZV9jb3B5LmlucHV0cztcbiAgICAgICAgICAgICAgZGVsZXRlIHN1YnNlcXVlbnRfcnVsZV9jb3B5LmlucHV0cztcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKHJ1bGVfY29weSwgc3Vic2VxdWVudF9ydWxlX2NvcHkpKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBhYmxlX3BvcnRzID0gYW5ndWxhci5jb3B5KHN1YnNlcXVlbnRfcnVsZS5pbnB1dHMpO1xuICAgICAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbiA9IGludGVybWVkaWF0ZV9ydWxlcy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlX3J1bGUgPSBpbnRlcm1lZGlhdGVfcnVsZXNba107XG4gICAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlX3J1bGUgPT09IHN1YnNlcXVlbnRfcnVsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJlZjQgPSBhbmd1bGFyLmNvcHkoZ3JvdXBhYmxlX3BvcnRzKTtcbiAgICAgICAgICAgICAgICAgIGZvciAobCA9IDAsIGxlbjEgPSByZWY0Lmxlbmd0aDsgbCA8IGxlbjE7IGwrKykge1xuICAgICAgICAgICAgICAgICAgICBncm91cGFibGVfcG9ydCA9IHJlZjRbbF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVfcnVsZS5pbnB1dHMuaGFzKGdyb3VwYWJsZV9wb3J0KSB8fCBpbnRlcm1lZGlhdGVfcnVsZS5vdXRwdXRzLmhhcyhncm91cGFibGVfcG9ydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBncm91cGFibGVfcG9ydHMucmVtb3ZlKGdyb3VwYWJsZV9wb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBhYmxlX3BvcnRzLm5vdF9lbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKG0gPSAwLCBsZW4yID0gZ3JvdXBhYmxlX3BvcnRzLmxlbmd0aDsgbSA8IGxlbjI7IG0rKykge1xuICAgICAgICAgICAgICAgICAgICBncm91cGFibGVfcG9ydCA9IGdyb3VwYWJsZV9wb3J0c1ttXTtcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5pbnB1dHMucHVzaChncm91cGFibGVfcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNlcXVlbnRfcnVsZS5pbnB1dHMucmVtb3ZlKGdyb3VwYWJsZV9wb3J0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJ1bGUuaW5wdXRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGlmIChzdWJzZXF1ZW50X3J1bGUuaW5wdXRzLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMucmVtb3ZlX2F0KHN1YnNlcXVlbnQgLSAxKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IHJ1bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUnVsZS5tZXJnZShydWxlcywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bGUuYWN0aW9uID09PSAnbWlycm9yJyAmJiBzdWJzZXF1ZW50X3J1bGUuYWN0aW9uID09PSAnbWlycm9yJykge1xuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMocnVsZS5vdXRwdXRzLCBzdWJzZXF1ZW50X3J1bGUub3V0cHV0cykpIHtcbiAgICAgICAgICAgICAgICBydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSk7XG4gICAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkoc3Vic2VxdWVudF9ydWxlKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcnVsZV9jb3B5LmlucHV0cztcbiAgICAgICAgICAgICAgICBkZWxldGUgc3Vic2VxdWVudF9ydWxlX2NvcHkuaW5wdXRzO1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhydWxlX2NvcHksIHN1YnNlcXVlbnRfcnVsZV9jb3B5KSkge1xuICAgICAgICAgICAgICAgICAgaW5wdXRfcG9ydHNfYXJlX2ZvdW5kX2luX2JldHdlZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIGpvaW50X2lucHV0cyA9IGFuZ3VsYXIuY29weShydWxlLmlucHV0cyk7XG4gICAgICAgICAgICAgICAgICByZWY1ID0gc3Vic2VxdWVudF9ydWxlLmlucHV0cztcbiAgICAgICAgICAgICAgICAgIGZvciAobiA9IDAsIGxlbjMgPSByZWY1Lmxlbmd0aDsgbiA8IGxlbjM7IG4rKykge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IHJlZjVbbl07XG4gICAgICAgICAgICAgICAgICAgIGlmICgham9pbnRfaW5wdXRzLmhhcyhpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBqb2ludF9pbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvciAobyA9IDAsIGxlbjQgPSBpbnRlcm1lZGlhdGVfcnVsZXMubGVuZ3RoOyBvIDwgbGVuNDsgbysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZV9ydWxlID0gaW50ZXJtZWRpYXRlX3J1bGVzW29dO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlX3J1bGUgPT09IHN1YnNlcXVlbnRfcnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVfcnVsZS5pbnB1dHMuaW50ZXJzZWN0KGpvaW50X2lucHV0cykubm90X2VtcHR5KCkgfHwgaW50ZXJtZWRpYXRlX3J1bGUub3V0cHV0cy5pbnRlcnNlY3Qoam9pbnRfaW5wdXRzKS5ub3RfZW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2Vlbikge1xuICAgICAgICAgICAgICAgICAgICBydWxlLmlucHV0cyA9IGpvaW50X2lucHV0cztcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5pbnB1dHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMucmVtb3ZlX2F0KHN1YnNlcXVlbnQgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSdWxlLm1lcmdlKHJ1bGVzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVsZS5hY3Rpb24gPT09ICdtaXJyb3InICYmIHN1YnNlcXVlbnRfcnVsZS5hY3Rpb24gIT09ICdtaXJyb3InKSB7XG4gICAgICAgICAgICAgIHJ1bGVfY29weSA9IGFuZ3VsYXIuY29weShydWxlKTtcbiAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkoc3Vic2VxdWVudF9ydWxlKTtcbiAgICAgICAgICAgICAgZGVsZXRlIHJ1bGVfY29weS5vdXRwdXRzO1xuICAgICAgICAgICAgICBkZWxldGUgc3Vic2VxdWVudF9ydWxlX2NvcHkub3V0cHV0cztcbiAgICAgICAgICAgICAgZGVsZXRlIHJ1bGVfY29weS5hY3Rpb247XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdWJzZXF1ZW50X3J1bGVfY29weS5hY3Rpb247XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdWJzZXF1ZW50X3J1bGVfY29weS5oYXNoaW5nX3Byb2ZpbGU7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhydWxlX2NvcHksIHN1YnNlcXVlbnRfcnVsZV9jb3B5KSkge1xuICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChwID0gMCwgbGVuNSA9IGludGVybWVkaWF0ZV9ydWxlcy5sZW5ndGg7IHAgPCBsZW41OyBwKyspIHtcbiAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZV9ydWxlID0gaW50ZXJtZWRpYXRlX3J1bGVzW3BdO1xuICAgICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZV9ydWxlID09PSBzdWJzZXF1ZW50X3J1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlX3J1bGUuaW5wdXRzLmludGVyc2VjdChydWxlLmlucHV0cykubm90X2VtcHR5KCkgfHwgaW50ZXJtZWRpYXRlX3J1bGUub3V0cHV0cy5pbnRlcnNlY3QocnVsZS5pbnB1dHMpLm5vdF9lbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaW5wdXRfcG9ydHNfYXJlX2ZvdW5kX2luX2JldHdlZW4pIHtcbiAgICAgICAgICAgICAgICAgIHJ1bGUubWlycm9yX3RvID0gcnVsZS5vdXRwdXRzO1xuICAgICAgICAgICAgICAgICAgcnVsZS5taXJyb3JfdG8uc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQocnVsZSwgc3Vic2VxdWVudF9ydWxlKTtcbiAgICAgICAgICAgICAgICAgIHJ1bGVzLnJlbW92ZV9hdChzdWJzZXF1ZW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiBydWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFJ1bGUubWVyZ2UocnVsZXMsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydWxlLmFjdGlvbiA9PT0gJ21pcnJvcicgJiYgc3Vic2VxdWVudF9ydWxlLmFjdGlvbiA9PT0gJ21pcnJvcicpIHtcbiAgICAgICAgICAgICAgaWYgKHJ1bGUub3V0cHV0cy5pbnRlcnNlY3Qoc3Vic2VxdWVudF9ydWxlLm91dHB1dHMpLmlzX2VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkocnVsZSk7XG4gICAgICAgICAgICAgICAgc3Vic2VxdWVudF9ydWxlX2NvcHkgPSBhbmd1bGFyLmNvcHkoc3Vic2VxdWVudF9ydWxlKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcnVsZV9jb3B5Lm91dHB1dHM7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNlcXVlbnRfcnVsZV9jb3B5Lm91dHB1dHM7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKHJ1bGVfY29weSwgc3Vic2VxdWVudF9ydWxlX2NvcHkpKSB7XG4gICAgICAgICAgICAgICAgICBpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2VlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgZm9yIChxID0gMCwgbGVuNiA9IGludGVybWVkaWF0ZV9ydWxlcy5sZW5ndGg7IHEgPCBsZW42OyBxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlX3J1bGUgPSBpbnRlcm1lZGlhdGVfcnVsZXNbcV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVfcnVsZSA9PT0gc3Vic2VxdWVudF9ydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZV9ydWxlLmlucHV0cy5pbnRlcnNlY3QocnVsZS5pbnB1dHMpLm5vdF9lbXB0eSgpIHx8IGludGVybWVkaWF0ZV9ydWxlLm91dHB1dHMuaW50ZXJzZWN0KHJ1bGUuaW5wdXRzKS5ub3RfZW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlucHV0X3BvcnRzX2FyZV9mb3VuZF9pbl9iZXR3ZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dF9wb3J0c19hcmVfZm91bmRfaW5fYmV0d2Vlbikge1xuICAgICAgICAgICAgICAgICAgICBydWxlLm91dHB1dHMgPSBydWxlLm91dHB1dHMuY29uY2F0KHN1YnNlcXVlbnRfcnVsZS5vdXRwdXRzKTtcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMucmVtb3ZlX2F0KHN1YnNlcXVlbnQgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gcnVsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSdWxlLm1lcmdlKHJ1bGVzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0sXG4gICAgICByZW1vdmVfcG9ydDogZnVuY3Rpb24ocG9ydF9pZCwgcG9ydF90eXBlKSB7XG4gICAgICAgIHZhciBwb3J0LCBydWxlO1xuICAgICAgICBwb3J0ID0gUG9ydC5ieV9pZChwb3J0X2lkKTtcbiAgICAgICAgcnVsZSA9IFJ1bGUuY3VycmVudCgpO1xuICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgUnVsZS5jdXJyZW50KGZhbHNlKTtcbiAgICAgICAgc3dpdGNoIChwb3J0X3R5cGUpIHtcbiAgICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgICBydWxlLmlucHV0cy5yZW1vdmUocG9ydCk7XG4gICAgICAgICAgICBPYmplY3Quc2V0KCRyb290U2NvcGUudmlldy5wb3J0cywgcG9ydC5pZCwgJ3NlbGVjdGVkSW4nLCBmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvdXRwdXQnOlxuICAgICAgICAgICAgcnVsZS5vdXRwdXRzLnJlbW92ZShwb3J0KTtcbiAgICAgICAgICAgIE9iamVjdC5zZXQoJHJvb3RTY29wZS52aWV3LnBvcnRzLCBwb3J0LmlkLCAnc2VsZWN0ZWRPdXQnLCBmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhLXBvcnQtdHlwZTogXCIgKyBwb3J0X3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiYXBwLmZhY3RvcnkgJ1N0YXR1cycsICgkcm9vdFNjb3BlLCB0cmFuc2xhdGUpIC0+XG4gIFN0YXR1cyA9XG4gICAgc3RhdHVzZXM6XG4gICAgICBidXN5OiAnYnVzeSdcbiAgICAgIHByb2dyZXNzOiAncHJvZ3Jlc3MnXG4gICAgICBpZGxlOiAnaWRsZSdcblxuICAgIHNldDogKHN0YXR1cywgbWVzc2FnZSwgb3B0aW9ucykgLT5cblxuICAgICAgc3RhdHVzX2RhdGEgPSBTdGF0dXMuc3RhdHVzX2RhdGEoc3RhdHVzLCBtZXNzYWdlLCBvcHRpb25zKVxuXG4gICAgICAjINC10YHQu9C4INGB0YLQsNGC0YPRgSDQvdC1INC40LfQvNC10L3QuNC70YHRjyAtINC90LjRh9C10LPQviDQvdC1INC00LXQu9Cw0YLRjFxuICAgICAgaWYgJHJvb3RTY29wZS5zdGF0dXNcblxuICAgICAgICBjdXJyZW50X3N0YXR1c19kYXRhID0gYW5ndWxhci5jb3B5KCRyb290U2NvcGUuc3RhdHVzKVxuICAgICAgICBkZWxldGUgY3VycmVudF9zdGF0dXNfZGF0YS5pZFxuXG4gICAgICAgIHJldHVybiBpZiBhbmd1bGFyLmVxdWFscyhzdGF0dXNfZGF0YSwgY3VycmVudF9zdGF0dXNfZGF0YSlcblxuICAgICAgIyDQuNC90LDRh9C1LCDQtdGB0LvQuCDRgdGC0LDRgtGD0YEg0LjQt9C80LXQvdC40LvRgdGPIC0g0L/QvtC60LDQt9Cw0YLRjCDQtdCz0L5cblxuICAgICAgaWQgPSBpZiAkcm9vdFNjb3BlLnN0YXR1cyB0aGVuICRyb290U2NvcGUuc3RhdHVzLmlkICsgMSBlbHNlIDFcblxuICAgICAgJHJvb3RTY29wZS5zYWZlQXBwbHkgLT5cbiAgICAgICAgJHJvb3RTY29wZS5zdGF0dXMgPSBhbmd1bGFyLmV4dGVuZChzdGF0dXNfZGF0YSxcbiAgICAgICAge1xuICAgICAgICAgICMgaWQgcHJvcGVydHkgdHJpZ2dlcnMgYW5ndWxhcmpzIHdhdGNoXG4gICAgICAgICAgaWQgOiBpZFxuICAgICAgICB9KVxuXG4gICAgc3RhdHVzX2RhdGE6IChzdGF0dXMsIG1lc3NhZ2UsIG9wdGlvbnMpIC0+XG4gICAgICBzdGF0dXNfZGF0YSA9XG4gICAgICAgIGNvZGUgICAgOiBzdGF0dXNcbiAgICAgICAgbWVzc2FnZSA6IG1lc3NhZ2UgfHwgJydcbiAgICAgICAgc3RpY2t5ICA6IG9wdGlvbnMgJiYgb3B0aW9ucy5zdGlja3lcblxuICAgIGJ1c3k6IChtZXNzYWdlKSAtPlxuICAgICAgQHNldChAc3RhdHVzZXMuYnVzeSwgbWVzc2FnZSwgeyBzdGlja3k6IHllcyB9KVxuXG4gICAgIyDQtdGB0LvQuCDQsdGL0LsgU3RhdHVzIGJ1c3kgLSDRg9Cx0YDQsNGC0Ywg0Y3RgtGDINC60YDRg9GC0LjQu9C60YNcbiAgICBub3RfYnVzeTogLT5cbiAgICAgIHJldHVybiBpZiBub3QgJHJvb3RTY29wZS5zdGF0dXNcbiAgICAgIGlmICRyb290U2NvcGUuc3RhdHVzLmNvZGUgPT0gQHN0YXR1c2VzLmJ1c3lcbiAgICAgICAgU3RhdHVzLmlkbGUoKVxuXG4gICAgcHJvZ3Jlc3M6IChtZXNzYWdlKSAtPlxuICAgICAgQHNldChAc3RhdHVzZXMucHJvZ3Jlc3MsIG1lc3NhZ2UsIHsgc3RpY2t5OiB5ZXMgfSlcblxuICAgIGlkbGU6IChtZXNzYWdlLCBvcHRpb25zKSAtPlxuICAgICAgQHNldChAc3RhdHVzZXMuaWRsZSwgbWVzc2FnZSwgb3B0aW9ucylcblxuICAgIGluZm86IChtZXNzYWdlLCBvcHRpb25zKSAtPlxuICAgICAgQGlkbGUobWVzc2FnZSwgb3B0aW9ucylcblxuICAgIGVycm9yOiAobWVzc2FnZSwgb3B0aW9ucykgLT5cbiAgICAgIGNvbnNvbGUuZXJyb3IgbWVzc2FnZS5zdGFjayB8fCBtZXNzYWdlXG5cbiAgICAgICMgaWYgSmF2YXNjcmlwdCBlcnJvclxuICAgICAgaWYgbWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLm1lc3NhZ2VcblxuICAgICAgIyBpZiBKc29uIFJwYyBlcnJvclxuICAgICAgaWYgbWVzc2FnZS5jb2RlICYmIG1lc3NhZ2UubWVzc2FnZVxuICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlXG5cbiAgICAgICMgaWYgR3VpIGlzIG5vdCB5ZXQgbG9hZGVkLCBhbGVydCB0aGUgZXJyb3JcbiAgICAgIGlmIG5vdCAkcm9vdFNjb3BlLmFwcGxpY2F0aW9uX3ZpZXdfcmVhZHkgfHwgJHJvb3RTY29wZS50aGlzX3BhZ2Uuc3RhdHVzID09IG5vIHx8ICRyb290U2NvcGUudGhpc19wYWdlLnBhZ2UgPT0gJ2RlYnVnJ1xuICAgICAgICAjINC10YHQu9C4INC/0LXRgNC10LLQvtC00Ysg0LXRidGRINC90LAg0LfQsNCz0YDRg9C30LjQu9C40YHRjCAtINC/0L7QutCw0LfQsNGC0Ywg0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0LHQtdC3INC/0LXRgNC10LLQvtC00L7QslxuICAgICAgICBpZiAodHJhbnNsYXRlKCdlcnJvci5nZW5lcmljJykpID09ICdlcnJvci5nZW5lcmljJ1xuICAgICAgICAgIGFsZXJ0KCdFcnJvcjpcXG5cXG4nICsgbWVzc2FnZSlcbiAgICAgICAgIyDQv9C+0LrQsNC30LDRgtGMINGC0LXQutGB0YIg0L7RiNC40LHQutC4INGBINC/0LXRgNC10LLQvtC00L7QvFxuICAgICAgICBlbHNlXG4gICAgICAgICAgYWxlcnQodHJhbnNsYXRlKCdlcnJvci5nZW5lcmljJywgeyBtZXNzYWdlOiBtZXNzYWdlIH0pKVxuXG4gICAgICBAc2V0KCdlcnJvcicsIG1lc3NhZ2UsIG9wdGlvbnMpXG5cbiAgICBub3RfYXV0aGVudGljYXRlZDogLT5cbiAgICAgICMg0LXRgdC70Lgg0LIg0YHRgtCw0YLRg9GB0LUg0LrRgNGD0YLQuNGC0YHRjyDQutGA0YPRgtC40LvQutCwIFwi0LbQtNC40YLQtVwiLCDRgtC+INGD0LHRgNCw0YLRjCDRjdGC0L7RgiDRgdGC0LDRgtGD0YFcbiAgICAgIGlmICRyb290U2NvcGUuc3RhdHVzICYmICRyb290U2NvcGUuc3RhdHVzLmNvZGUgPT0gJ2J1c3knXG4gICAgICAgIEBpZGxlKClcbiAgICAgICMg0L7RgdGC0LDQu9GM0L3Ri9C1INGB0YLQsNGC0YPRgdGLICjQvdC1INC60YDRg9GC0LjQu9C60LApIC0g0LrQvtC90LXRh9C90YvQtSDQstC+INCy0YDQtdC80LXQvdC4LCDQuCDRgdCw0LzQuCDQv9GA0L7QudC00YPRglxuXG4gICAgcGxhY2U6ICh3aGVyZSkgLT5cbiAgICAgICRlbGVtZW50ID0gJCgnLnN0YXR1cycpXG5cbiAgICAgIGlmIHdoZXJlXG4gICAgICAgIHJldHVybiAkZWxlbWVudC5hcHBlbmRUbygnLicgKyB3aGVyZSArICctc3RhdHVzLXBsYWNlJylcblxuICAgICAgaWYgJCgnLnByZWZlcnJlZC1zdGF0dXMtcGxhY2UnKVswXVxuICAgICAgICByZXR1cm4gJGVsZW1lbnQuYXBwZW5kVG8oJCgnLnByZWZlcnJlZC1zdGF0dXMtcGxhY2UnKSlcblxuICAgICAgJGVsZW1lbnQuYXBwZW5kVG8oJCgnLmRlZmF1bHQtc3RhdHVzLXBsYWNlJykpXG5cbiAgICB0ZXN0OiAtPlxuICAgICAgU3RhdHVzLmJ1c3koJ1Rlc3RpbmcgYnVzeScpXG4gICAgICAoLT4gU3RhdHVzLmVycm9yKCdUZXN0aW5nIGVycm9yJykpLmRlbGF5KDMwMDApXG4gICAgICAoLT4gU3RhdHVzLmlkbGUoJ1Rlc3RpbmcgaWRsZScpKS5kZWxheSg2MDAwKSIsIihmdW5jdGlvbigpIHtcbiAgYXBwLmZhY3RvcnkoJ1N0YXR1cycsIGZ1bmN0aW9uKCRyb290U2NvcGUsIHRyYW5zbGF0ZSkge1xuICAgIHZhciBTdGF0dXM7XG4gICAgcmV0dXJuIFN0YXR1cyA9IHtcbiAgICAgIHN0YXR1c2VzOiB7XG4gICAgICAgIGJ1c3k6ICdidXN5JyxcbiAgICAgICAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgICAgIGlkbGU6ICdpZGxlJ1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24oc3RhdHVzLCBtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBjdXJyZW50X3N0YXR1c19kYXRhLCBpZCwgc3RhdHVzX2RhdGE7XG4gICAgICAgIHN0YXR1c19kYXRhID0gU3RhdHVzLnN0YXR1c19kYXRhKHN0YXR1cywgbWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgICAgIGlmICgkcm9vdFNjb3BlLnN0YXR1cykge1xuICAgICAgICAgIGN1cnJlbnRfc3RhdHVzX2RhdGEgPSBhbmd1bGFyLmNvcHkoJHJvb3RTY29wZS5zdGF0dXMpO1xuICAgICAgICAgIGRlbGV0ZSBjdXJyZW50X3N0YXR1c19kYXRhLmlkO1xuICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhzdGF0dXNfZGF0YSwgY3VycmVudF9zdGF0dXNfZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWQgPSAkcm9vdFNjb3BlLnN0YXR1cyA/ICRyb290U2NvcGUuc3RhdHVzLmlkICsgMSA6IDE7XG4gICAgICAgIHJldHVybiAkcm9vdFNjb3BlLnNhZmVBcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5zdGF0dXMgPSBhbmd1bGFyLmV4dGVuZChzdGF0dXNfZGF0YSwge1xuICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHN0YXR1c19kYXRhOiBmdW5jdGlvbihzdGF0dXMsIG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHN0YXR1c19kYXRhO1xuICAgICAgICByZXR1cm4gc3RhdHVzX2RhdGEgPSB7XG4gICAgICAgICAgY29kZTogc3RhdHVzLFxuICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgJycsXG4gICAgICAgICAgc3RpY2t5OiBvcHRpb25zICYmIG9wdGlvbnMuc3RpY2t5XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgYnVzeTogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXQodGhpcy5zdGF0dXNlcy5idXN5LCBtZXNzYWdlLCB7XG4gICAgICAgICAgc3RpY2t5OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG5vdF9idXN5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLnN0YXR1cykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHJvb3RTY29wZS5zdGF0dXMuY29kZSA9PT0gdGhpcy5zdGF0dXNlcy5idXN5KSB7XG4gICAgICAgICAgcmV0dXJuIFN0YXR1cy5pZGxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmVzczogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXQodGhpcy5zdGF0dXNlcy5wcm9ncmVzcywgbWVzc2FnZSwge1xuICAgICAgICAgIHN0aWNreTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBpZGxlOiBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldCh0aGlzLnN0YXR1c2VzLmlkbGUsIG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIGluZm86IGZ1bmN0aW9uKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRsZShtZXNzYWdlLCBvcHRpb25zKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2Uuc3RhY2sgfHwgbWVzc2FnZSk7XG4gICAgICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNvZGUgJiYgbWVzc2FnZS5tZXNzYWdlKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISRyb290U2NvcGUuYXBwbGljYXRpb25fdmlld19yZWFkeSB8fCAkcm9vdFNjb3BlLnRoaXNfcGFnZS5zdGF0dXMgPT09IGZhbHNlIHx8ICRyb290U2NvcGUudGhpc19wYWdlLnBhZ2UgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICBpZiAoKHRyYW5zbGF0ZSgnZXJyb3IuZ2VuZXJpYycpKSA9PT0gJ2Vycm9yLmdlbmVyaWMnKSB7XG4gICAgICAgICAgICBhbGVydCgnRXJyb3I6XFxuXFxuJyArIG1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGVydCh0cmFuc2xhdGUoJ2Vycm9yLmdlbmVyaWMnLCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KCdlcnJvcicsIG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgICAgfSxcbiAgICAgIG5vdF9hdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCRyb290U2NvcGUuc3RhdHVzICYmICRyb290U2NvcGUuc3RhdHVzLmNvZGUgPT09ICdidXN5Jykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmlkbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBsYWNlOiBmdW5jdGlvbih3aGVyZSkge1xuICAgICAgICB2YXIgJGVsZW1lbnQ7XG4gICAgICAgICRlbGVtZW50ID0gJCgnLnN0YXR1cycpO1xuICAgICAgICBpZiAod2hlcmUpIHtcbiAgICAgICAgICByZXR1cm4gJGVsZW1lbnQuYXBwZW5kVG8oJy4nICsgd2hlcmUgKyAnLXN0YXR1cy1wbGFjZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkKCcucHJlZmVycmVkLXN0YXR1cy1wbGFjZScpWzBdKSB7XG4gICAgICAgICAgcmV0dXJuICRlbGVtZW50LmFwcGVuZFRvKCQoJy5wcmVmZXJyZWQtc3RhdHVzLXBsYWNlJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZWxlbWVudC5hcHBlbmRUbygkKCcuZGVmYXVsdC1zdGF0dXMtcGxhY2UnKSk7XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIFN0YXR1cy5idXN5KCdUZXN0aW5nIGJ1c3knKTtcbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBTdGF0dXMuZXJyb3IoJ1Rlc3RpbmcgZXJyb3InKTtcbiAgICAgICAgfSkuZGVsYXkoMzAwMCk7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFN0YXR1cy5pZGxlKCdUZXN0aW5nIGlkbGUnKTtcbiAgICAgICAgfSkuZGVsYXkoNjAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAndHJhbnNsYXRlJywgKCR0cmFuc2xhdGUpIC0+XG4gIHRyYW5zbGF0ZSA9IC0+XG4gICAgJHRyYW5zbGF0ZS5pbnN0YW50LmFwcGx5KEAsIGFyZ3VtZW50cykiLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCd0cmFuc2xhdGUnLCBmdW5jdGlvbigkdHJhbnNsYXRlKSB7XG4gICAgdmFyIHRyYW5zbGF0ZTtcbiAgICByZXR1cm4gdHJhbnNsYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJHRyYW5zbGF0ZS5pbnN0YW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJhcHAuZmFjdG9yeSAnVXRpbGl0aWVzJywgLT5cblx0VXRpbGl0aWVzID0gXG5cdFx0IyBjb252ZXJ0cyBoZXggc3RyaW5nIHRvIG51bWJlclxuXHRcdCMgKGhhcyBhIHBvc3NpYmlsaXR5IG9mIG51bWJlciBvdmVyZmxvdylcblx0XHRoZXhfc3RyaW5nX3RvX251bWJlcjogKG1hc2spIC0+IHBhcnNlSW50KG1hc2ssIDE2KVxuXG5cdFx0IyBjb252ZXJ0cyBudW1iZXIgdG8gaGV4IHN0cmluZ1xuXHRcdG51bWJlcl90b19oZXhfc3RyaW5nOiAobWFzaykgLT4gbWFzay50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuXG5cdFx0aGV4X3N0cmluZ190b19udW1iZXJfYXJyYXk6IChoZXgpIC0+XG5cdFx0XHQjINC10YHQu9C4INC60L7Qu9C40YfQtdGB0YLQstC+INGB0LjQvNCy0L7Qu9C+0LIg0LIg0YHRgtGA0L7QutC1INC90LXRh9GR0YLQvdC+IC0g0LTQvtC/0L7Qu9C90LjRgtGMINC90YPQu9GR0Lwg0YHQu9C10LLQsFxuXHRcdFx0aWYgaGV4Lmxlbmd0aCAlIDJcblx0XHRcdFx0aGV4ID0gJzAnICsgaGV4XG5cblx0XHRcdGhleC5tYXRjaCgvLnsxLDJ9L2cpLm1hcCAoY2hhcmFjdGVyKSAtPiBVdGlsaXRpZXMuaGV4X3N0cmluZ190b19udW1iZXIoY2hhcmFjdGVyKVxuXG5cdFx0bnVtYmVyX2FycmF5X3RvX2hleF9zdHJpbmc6IChhcnJheSkgLT5cblx0XHRcdGFycmF5ID0gYXJyYXkuY2xvbmUoKVxuXG5cdFx0XHQjIHdoaWxlIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdID09IDBcblx0XHRcdCMgXHRhcnJheS5wb3AoKVxuXG5cdFx0XHRhcnJheS5tYXAgKG51bWJlcikgLT4gXG5cdFx0XHRcdGhleCA9IFV0aWxpdGllcy5udW1iZXJfdG9faGV4X3N0cmluZyhudW1iZXIpXG5cdFx0XHRcdGlmIGhleC5sZW5ndGggPT0gMVxuXHRcdFx0XHRcdGhleCA9ICcwJyArIGhleFxuXHRcdFx0XHRoZXhcblx0XHRcdC5qb2luKCcnKVxuXG5cdFx0IyDQv9GA0LXQvtCx0YDQsNC30YPQtdGCINGI0LXRgdGC0L3QsNC00YbQsNGC0LXRgNC40YfQvdGL0Lkg0LrQvtC0LCDQsiDQutC+0YLQvtGA0L7QvCDQutGD0YDRgdC+0YAg0YHRgtC+0LjRgiDQvdCwINC/0L7Qt9C40YbQuNC4IHBvc2l0aW9uLFxuXHRcdCMg0LIgXCLQutGA0LDRgdC40LLRi9C5XCIg0YjQtdGB0YLQvdCw0LTRhtCw0YLQtdGA0LjRh9C90YvQuSDQutC+0LQsINC4INGA0LDRgdGB0YfQuNGC0YvQstCw0LXRgiDRgdC00LLQuNCzINC00LvRjyDQv9C10YDQstC+0L3QsNGH0LDQu9GM0L3QvtC5INC/0L7Qt9C40YbQuNC4INC60YPRgNGB0L7RgNCwLlxuXHRcdCNcblx0XHQjINGE0L7RgNC80LDRgjogMDAgMDAgMDAgMDAgIDAwIDAwIDAwIDAwICAxMSAxMSAxMSAxMSAgMTEgMTEgMTEgMTFcXG4yMiAyMiAyMiAyMi4uLlxuXHRcdCNcblx0XHQjIGhleCAtINGN0YLQviDRiNC10YHRgtC90LDQtNGG0LDRgtC10YDQuNGH0L3Ri9C5INC60L7QtCDQsiDQutCw0LrQvtC8INGD0LPQvtC00L3QviDQstC40LTQtSAo0YEg0L/RgNC+0LHQtdC70LDQvNC4LCDQsdC10Lcg0L/RgNC+0LHQtdC70L7QsikuXG5cdFx0IyBwb3NpdGlvbiAtINC/0L7Qt9C40YbQuNGPINC60YPRgNGB0L7RgNCwLCDQvtGC0YHRh9C40YLRi9Cy0LDQtdGC0YHRjyDQutCw0LogXCIwLCDQutC+0LPQtNCwINGB0YLQvtC40YIg0L/QtdGA0LXQtCDQv9C10YDQstGL0Lwg0YHQuNC80LLQvtC70L7QvFwiXG5cdFx0aGV4X3ByZXR0eV9wcmludDogKGhleCwgcG9zaXRpb24pIC0+XG5cdFx0XHQjIGlmIG1heF9sZW5ndGhcblx0XHRcdCMgXHRpZiB0ZXh0Lmxlbmd0aCA+IG1heF9sZW5ndGhcblx0XHRcdCMgXHRcdHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBtYXhfbGVuZ3RoKVxuXG5cdFx0XHRvcmlnaW5hbCA9IGhleFxuXG5cdFx0XHQjINGC0LXQutGB0YIg0LTQviDQutGD0YDRgdC+0YDQsFxuXHRcdFx0YmVmb3JlID0gaGV4LnN1YnN0cmluZygwLCBwb3NpdGlvbilcblxuXHRcdFx0IyDQv9C10YDQtdGB0YfQuNGC0LDRgtGMINC/0L7Qt9C40YbQuNGOINC60YPRgNGB0L7RgNCwINC00LvRjyDRgtCw0LrQvtCz0L4g0LbQtSBcItC/0LvQvtGC0L3QvtCz0L5cIiBoZXgn0LBcblx0XHRcdGRlbHRhX3Bvc2l0aW9uID0gYmVmb3JlLmxlbmd0aCAtIGJlZm9yZS5yZXBsYWNlKC9cXHMvZywgJycpLmxlbmd0aFxuXHRcdFx0cG9zaXRpb24gLT0gZGVsdGFfcG9zaXRpb25cblxuXHRcdFx0aGV4ID0gaGV4LnJlcGxhY2UoL1xccy9nLCAnJykudG9VcHBlckNhc2UoKVxuXG5cdFx0XHRmb3Vyc19pbl9saW5lID0gNFxuXG5cdFx0XHQjINGA0LDRgdGB0YfQuNGC0YvQstCw0LXRgiDRgdC00LLQuNCzINC60YPRgNGB0L7RgNCwLCDQstGL0LfQstCw0L3QvdGL0Lkg0L/RgNC10L7QsdGA0LDQt9C+0LLQsNC90LjQtdC8INC40LcgXCLQv9C70L7RgtC90L7Qs9C+XCIgaGV4INCyIFwi0LrRgNCw0YHQuNCy0YvQuVwiLlxuXHRcdFx0IyBieXRlX2luZGV4INC90LDRh9C40L3QsNC10YLRgdGPINGBIDBcblx0XHRcdGNhbGN1bGF0ZV9zaGlmdCA9IChieXRlX2luZGV4KSAtPlxuXHRcdFx0XHQjINGB0LrQvtC70YzQutC+INGG0LXQu9GL0YUg0YfQtdGC0LLRkdGA0L7QuiDQsdCw0LnRgtC+0LIg0YDQsNGB0L/QvtC70L7QttC10L3QviDQtNC+INGN0YLQvtCz0L4g0LHQsNC50YLQsFxuXHRcdFx0XHRmb3VycyA9IE1hdGguZmxvb3IoYnl0ZV9pbmRleCAvIDQpXG5cdFx0XHRcdCMg0YHQutC+0LvRjNC60L4g0YHRgtGA0L7QuiDQv9C10YDQtdC0INGN0YLQuNC8INCx0LDQudGC0L7QvFxuXHRcdFx0XHRsaW5lc19iZWZvcmUgPSBNYXRoLmZsb29yKGZvdXJzIC8gZm91cnNfaW5fbGluZSlcblx0XHRcdFx0IyDQv9GA0L7QsdC10Lsg0L/QvtGB0LvQtSDQutCw0LbQtNC+0LPQviDQsdCw0LnRgtCwXG5cdFx0XHRcdCMgKyDQv9C+0YHQu9C1INC60LDQttC00L7QuSDRh9C10YLQstGR0YDQutC4INCx0LDQudGC0L7QsiAtINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0Lkg0L/RgNC+0LHQtdC7XG5cdFx0XHRcdCMgLSDQsiDQutC+0L3RhtC1INGB0YLRgNC+0LrQuCDRgdC40LzQstC+0Lsg0L3QvtCy0L7QuSDRgdGC0YDQvtC60Lgg0LLQvNC10YHRgtC+INC00LLRg9GFINC/0YDQvtCx0LXQu9C+0LIgKNCy0YDQvtC00LUg0LHRiywgXFxuKVxuXHRcdFx0XHRyZXR1cm4gYnl0ZV9pbmRleCArIGZvdXJzIC0gbGluZXNfYmVmb3JlICogJ1xcbicubGVuZ3RoXG5cblx0XHRcdGJ5dGVzID0gaGV4Lm1hdGNoKC8uezEsMn0vZylcblxuXHRcdFx0IyDQtdGB0LvQuCDQvNC10L3QtdC1INC00LLRg9GFINGB0LjQvNCy0L7Qu9C+0LIgLSDQvdC40YfQtdCz0L4g0L3QtSDQtNC10LvQsNGC0Yxcblx0XHRcdGlmIG5vdCBieXRlc1xuXHRcdFx0XHRyZXR1cm4gW29yaWdpbmFsLCAwXVxuXG5cdFx0XHRzaGlmdCA9IG51bGxcblxuXHRcdFx0cHJpbnRlZCA9ICcnXG5cdFx0XHRieXRlX2luZGV4ID0gMFxuXHRcdFx0d2hpbGUgYnl0ZV9pbmRleCA8IGJ5dGVzLmxlbmd0aFxuXHRcdFx0XHRieXRlID0gYnl0ZXNbYnl0ZV9pbmRleF1cblxuXHRcdFx0XHQjINC10YHQu9C4INGB0LTQstC40LMg0LrRg9GA0YHQvtGA0LAg0LIg0L3QvtCy0L7QvCDRgtC10LrRgdGC0LUg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INGB0YLQsNGA0L7Qs9C+INGC0LXQutGB0YLQsCDQtdGJ0ZEg0L3QtSDQvtC/0YDQtdC00LXQu9GRLFxuXHRcdFx0XHQjINC/0L7Qv9GA0L7QsdC+0LLQsNGC0Ywg0L7Qv9GA0LXQtNC10LvQuNGC0Ywg0LXQs9C+ICjQsiDRgdC70YPRh9Cw0LUsINC60L7Qs9C00LAgcG9zaXRpb24g0YHRgtCw0L3QtdGCINGA0LDQstC90L7QuSDQuNC70Lgg0LzQtdC90YzRiNC10LkgMClcblx0XHRcdFx0aWYgbm90IHNoaWZ0P1xuXHRcdFx0XHRcdHBvc2l0aW9uIC09IDJcblx0XHRcdFx0XHRpZiBwb3NpdGlvbiA8PSAwXG5cdFx0XHRcdFx0XHRzaGlmdCA9IGNhbGN1bGF0ZV9zaGlmdChieXRlX2luZGV4KVxuXHRcdFxuXHRcdFx0XHRwcmludGVkICs9IGJ5dGVcblxuXHRcdFx0XHQjINC10YHQu9C4INC10YHRgtGMINC10YnRkSDQsdCw0LnRgtGLXG5cdFx0XHRcdGlmIGJ5dGVfaW5kZXggKyAxIDwgYnl0ZXMubGVuZ3RoXG5cdFx0XHRcdFx0IyDQtdGB0LvQuCDRjdGC0L4g0L3QvtCy0LDRjyDRgdGC0YDQvtC60LAgLSDRgtC+INC/0LXRgNC10LLQtdGB0YLQuCDQvdCwINC90L7QstGD0Y4g0YHRgtGA0L7QutGDXG5cdFx0XHRcdFx0aWYgYnl0ZV9pbmRleCAhPSAwICYmIChieXRlX2luZGV4ICsgMSkgJSAoNCAqIGZvdXJzX2luX2xpbmUpID09IDBcblx0XHRcdFx0XHRcdHByaW50ZWQgKz0gJ1xcbidcblx0XHRcdFx0XHQjINC40L3QsNGH0LUsINC10YHQu9C4INCyINGB0LXRgNC10LTQuNC90LUg0YHRgtGA0L7QutC4IC0g0YLQviDQtNC+0LHQsNCy0LjRgtGMINC00LLQsCDQv9GA0L7QsdC10LvQsFxuXHRcdFx0XHRcdGVsc2UgaWYgYnl0ZV9pbmRleCAhPSAwICYmIChieXRlX2luZGV4ICsgMSkgJSA0ID09IDBcblx0XHRcdFx0XHRcdHByaW50ZWQgKz0gJyAgJ1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHByaW50ZWQgKz0gJyAnXG5cblx0XHRcdFx0Ynl0ZV9pbmRleCsrXG5cblx0XHRcdHJldHVybiBbcHJpbnRlZCwgaWYgc2hpZnQ/IHRoZW4gc2hpZnQgLSBkZWx0YV9wb3NpdGlvbiBlbHNlIDBdXG5cblx0XHQjINGD0LTQsNC70LjRgtGMINCy0YHQtSBYYNGLINGB0L/RgNCw0LLQsFxuXHRcdHRyaW1fbWFza2VkX2hleDogKGhleCkgLT5cblx0XHRcdHJldHVybiBpZiBub3QgaGV4P1xuXG5cdFx0XHRoZXggPSBoZXgucmVwbGFjZSgvW1xcc1hdKyQvLCAnJylcblx0XHRcdGlmIGhleC5yZXBsYWNlKC9cXHMvZywgJycpLmxlbmd0aCAlIDJcblx0XHRcdFx0aGV4ID0gaGV4ICsgJ1gnXG5cblx0XHRcdHJldHVybiBoZXhcblxuXHRcdCMg0LLQvtC30LLRgNCw0YnQsNC10YIg0YLQtSDRh9Cw0YHRgtC4IHRvLCDQutC+0YLQvtGA0YvQtSDQuNC30LzQtdC90LjQu9C40YHRjCwg0LIg0YHRgNCw0LLQvdC10L3QuNC4INGBIGZyb21cblx0XHQjIFV0aWxpdGllcy5kaWZmZXJlbmNlKGZyb20sIHRvKVxuXHRcdGRpZmZlcmVuY2U6IChmcm9tLCB0bywgZGlmZiwgcGF0aCkgLT5cblx0XHRcdGlmIG5vdCBkaWZmPyAmJiBub3QgcGF0aD9cblx0XHRcdFx0ZGlmZiA9IHt9XG5cdFx0XHRcdHBhdGggPSAnJ1xuXG5cdFx0XHRpZiB0eXBlb2YgZnJvbSA9PSAnb2JqZWN0J1xuXHRcdFx0XHRpZiB0eXBlb2YgdG8gIT0gJ29iamVjdCdcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuZXF1aXZhbGVudCBvYmplY3QgdHJlZXMuIExlYXZlczonLCBmcm9tLCB0bylcblxuXHRcdFx0XHRmb3Iga2V5LCB2YWx1ZSBvZiBmcm9tXG5cdFx0XHRcdFx0VXRpbGl0aWVzLmRpZmZlcmVuY2UoZnJvbVtrZXldLCB0b1trZXldLCBkaWZmLCBpZiBwYXRoID09ICcnIHRoZW4ga2V5IGVsc2UgXCIje3BhdGh9LiN7a2V5fVwiKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpZiB0eXBlb2YgdG8gPT0gJ29iamVjdCdcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuZXF1aXZhbGVudCBvYmplY3QgdHJlZXMuIExlYXZlczonLCBmcm9tLCB0bylcblxuXHRcdFx0XHRpZiBub3QgYW5ndWxhci5lcXVhbHMoZnJvbSwgdG8pXG5cdFx0XHRcdFx0T2JqZWN0LnNldChkaWZmLCBwYXRoLCB0bylcblxuXHRcdFx0cmV0dXJuIGRpZmZcblxuXHRcdCMg0LLRi9C90LXRgdGC0Lgg0YHRjtC00LAg0LzQvtC20L3QviBpc19lbXB0eV9tYWMsIGlzX2VtcHR5X2lwXG4iLCIoZnVuY3Rpb24oKSB7XG4gIGFwcC5mYWN0b3J5KCdVdGlsaXRpZXMnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgVXRpbGl0aWVzO1xuICAgIHJldHVybiBVdGlsaXRpZXMgPSB7XG4gICAgICBoZXhfc3RyaW5nX3RvX251bWJlcjogZnVuY3Rpb24obWFzaykge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQobWFzaywgMTYpO1xuICAgICAgfSxcbiAgICAgIG51bWJlcl90b19oZXhfc3RyaW5nOiBmdW5jdGlvbihtYXNrKSB7XG4gICAgICAgIHJldHVybiBtYXNrLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSxcbiAgICAgIGhleF9zdHJpbmdfdG9fbnVtYmVyX2FycmF5OiBmdW5jdGlvbihoZXgpIHtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgaGV4ID0gJzAnICsgaGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXgubWF0Y2goLy57MSwyfS9nKS5tYXAoZnVuY3Rpb24oY2hhcmFjdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIFV0aWxpdGllcy5oZXhfc3RyaW5nX3RvX251bWJlcihjaGFyYWN0ZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBudW1iZXJfYXJyYXlfdG9faGV4X3N0cmluZzogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgYXJyYXkgPSBhcnJheS5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gYXJyYXkubWFwKGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgIHZhciBoZXg7XG4gICAgICAgICAgaGV4ID0gVXRpbGl0aWVzLm51bWJlcl90b19oZXhfc3RyaW5nKG51bWJlcik7XG4gICAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGhleCA9ICcwJyArIGhleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhleDtcbiAgICAgICAgfSkuam9pbignJyk7XG4gICAgICB9LFxuICAgICAgaGV4X3ByZXR0eV9wcmludDogZnVuY3Rpb24oaGV4LCBwb3NpdGlvbikge1xuICAgICAgICB2YXIgYmVmb3JlLCBieXRlLCBieXRlX2luZGV4LCBieXRlcywgY2FsY3VsYXRlX3NoaWZ0LCBkZWx0YV9wb3NpdGlvbiwgZm91cnNfaW5fbGluZSwgb3JpZ2luYWwsIHByaW50ZWQsIHNoaWZ0O1xuICAgICAgICBvcmlnaW5hbCA9IGhleDtcbiAgICAgICAgYmVmb3JlID0gaGV4LnN1YnN0cmluZygwLCBwb3NpdGlvbik7XG4gICAgICAgIGRlbHRhX3Bvc2l0aW9uID0gYmVmb3JlLmxlbmd0aCAtIGJlZm9yZS5yZXBsYWNlKC9cXHMvZywgJycpLmxlbmd0aDtcbiAgICAgICAgcG9zaXRpb24gLT0gZGVsdGFfcG9zaXRpb247XG4gICAgICAgIGhleCA9IGhleC5yZXBsYWNlKC9cXHMvZywgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGZvdXJzX2luX2xpbmUgPSA0O1xuICAgICAgICBjYWxjdWxhdGVfc2hpZnQgPSBmdW5jdGlvbihieXRlX2luZGV4KSB7XG4gICAgICAgICAgdmFyIGZvdXJzLCBsaW5lc19iZWZvcmU7XG4gICAgICAgICAgZm91cnMgPSBNYXRoLmZsb29yKGJ5dGVfaW5kZXggLyA0KTtcbiAgICAgICAgICBsaW5lc19iZWZvcmUgPSBNYXRoLmZsb29yKGZvdXJzIC8gZm91cnNfaW5fbGluZSk7XG4gICAgICAgICAgcmV0dXJuIGJ5dGVfaW5kZXggKyBmb3VycyAtIGxpbmVzX2JlZm9yZSAqICdcXG4nLmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgYnl0ZXMgPSBoZXgubWF0Y2goLy57MSwyfS9nKTtcbiAgICAgICAgaWYgKCFieXRlcykge1xuICAgICAgICAgIHJldHVybiBbb3JpZ2luYWwsIDBdO1xuICAgICAgICB9XG4gICAgICAgIHNoaWZ0ID0gbnVsbDtcbiAgICAgICAgcHJpbnRlZCA9ICcnO1xuICAgICAgICBieXRlX2luZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJ5dGVfaW5kZXggPCBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBieXRlID0gYnl0ZXNbYnl0ZV9pbmRleF07XG4gICAgICAgICAgaWYgKHNoaWZ0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uIC09IDI7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPD0gMCkge1xuICAgICAgICAgICAgICBzaGlmdCA9IGNhbGN1bGF0ZV9zaGlmdChieXRlX2luZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJpbnRlZCArPSBieXRlO1xuICAgICAgICAgIGlmIChieXRlX2luZGV4ICsgMSA8IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGJ5dGVfaW5kZXggIT09IDAgJiYgKGJ5dGVfaW5kZXggKyAxKSAlICg0ICogZm91cnNfaW5fbGluZSkgPT09IDApIHtcbiAgICAgICAgICAgICAgcHJpbnRlZCArPSAnXFxuJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnl0ZV9pbmRleCAhPT0gMCAmJiAoYnl0ZV9pbmRleCArIDEpICUgNCA9PT0gMCkge1xuICAgICAgICAgICAgICBwcmludGVkICs9ICcgICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcmludGVkICs9ICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnl0ZV9pbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbcHJpbnRlZCwgc2hpZnQgIT0gbnVsbCA/IHNoaWZ0IC0gZGVsdGFfcG9zaXRpb24gOiAwXTtcbiAgICAgIH0sXG4gICAgICB0cmltX21hc2tlZF9oZXg6IGZ1bmN0aW9uKGhleCkge1xuICAgICAgICBpZiAoaGV4ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2UoL1tcXHNYXSskLywgJycpO1xuICAgICAgICBpZiAoaGV4LnJlcGxhY2UoL1xccy9nLCAnJykubGVuZ3RoICUgMikge1xuICAgICAgICAgIGhleCA9IGhleCArICdYJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4O1xuICAgICAgfSxcbiAgICAgIGRpZmZlcmVuY2U6IGZ1bmN0aW9uKGZyb20sIHRvLCBkaWZmLCBwYXRoKSB7XG4gICAgICAgIHZhciBrZXksIHZhbHVlO1xuICAgICAgICBpZiAoKGRpZmYgPT0gbnVsbCkgJiYgKHBhdGggPT0gbnVsbCkpIHtcbiAgICAgICAgICBkaWZmID0ge307XG4gICAgICAgICAgcGF0aCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZnJvbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmVxdWl2YWxlbnQgb2JqZWN0IHRyZWVzLiBMZWF2ZXM6JywgZnJvbSwgdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGtleSBpbiBmcm9tKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZyb21ba2V5XTtcbiAgICAgICAgICAgIFV0aWxpdGllcy5kaWZmZXJlbmNlKGZyb21ba2V5XSwgdG9ba2V5XSwgZGlmZiwgcGF0aCA9PT0gJycgPyBrZXkgOiBwYXRoICsgXCIuXCIgKyBrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmVxdWl2YWxlbnQgb2JqZWN0IHRyZWVzLiBMZWF2ZXM6JywgZnJvbSwgdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKGZyb20sIHRvKSkge1xuICAgICAgICAgICAgT2JqZWN0LnNldChkaWZmLCBwYXRoLCB0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiYXBwLmZhY3RvcnkgJ1ZlcnNpb24nLCAtPiBWZXJzaW9uIiwiKGZ1bmN0aW9uKCkge1xuICBhcHAuZmFjdG9yeSgnVmVyc2lvbicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBWZXJzaW9uO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIkBWZXJzaW9uID0gKHZlcnNpb24pIC0+XG5cdGlmIG5vdCAvXFxkK1xcLlxcZCtcXC5cXGQrLy50ZXN0KHZlcnNpb24pXG5cdFx0IyB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmVyc2lvbiBmb3JtYXQnKVxuXHRcdHZlcnNpb24gPSAnMS4wLjAnXG5cblx0dG9fcGFydHMgPSAodmVyc2lvbikgLT4gdmVyc2lvbi5zcGxpdCgnLicpLm1hcCgoeCkgLT4gcGFyc2VJbnQoeCkpXG5cblx0YXBpID0gXG5cdFx0Y29tcGFyZTogKGFub3RoZXJfdmVyc2lvbikgLT5cblx0XHRcdHBhcnRzICAgICAgICAgPSB0b19wYXJ0cyh2ZXJzaW9uKVxuXHRcdFx0YW5vdGhlcl9wYXJ0cyA9IHRvX3BhcnRzKGFub3RoZXJfdmVyc2lvbilcblxuXHRcdFx0d2hpbGUgcGFydHMubm90X2VtcHR5KClcblx0XHRcdFx0cGFydCAgICAgICAgID0gcGFydHMuc2hpZnQoKVxuXHRcdFx0XHRhbm90aGVyX3BhcnQgPSBhbm90aGVyX3BhcnRzLnNoaWZ0KClcblxuXHRcdFx0XHRpZiBwYXJ0IDwgYW5vdGhlcl9wYXJ0XG5cdFx0XHRcdFx0cmV0dXJuIC0xXG5cdFx0XHRcdGVsc2UgaWYgcGFydCA+IGFub3RoZXJfcGFydFxuXHRcdFx0XHRcdHJldHVybiAxXG5cblx0XHRcdHJldHVybiAwXG5cblx0XHRiZWZvcmUgICAgICAgICAgIDogKGFub3RoZXJfdmVyc2lvbikgLT4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA8IDBcblx0XHRhZnRlciAgICAgICAgICAgIDogKGFub3RoZXJfdmVyc2lvbikgLT4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA+IDBcblx0XHRzdGFydGluZ19mcm9tICAgIDogKGFub3RoZXJfdmVyc2lvbikgLT4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA+PSAwXG5cdFx0Z3JlYXRlcl9vcl9lcXVhbCA6IChhbm90aGVyX3ZlcnNpb24pIC0+IGFwaS5jb21wYXJlKGFub3RoZXJfdmVyc2lvbikgPj0gMFxuXHRcdG5vX2hpZ2hlcl90aGFuICAgOiAoYW5vdGhlcl92ZXJzaW9uKSAtPiBhcGkuY29tcGFyZShhbm90aGVyX3ZlcnNpb24pIDw9IDBcblx0XHRsZXNzX29yX2VxdWFsICAgIDogKGFub3RoZXJfdmVyc2lvbikgLT4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA8PSAwXG5cblx0XHR0b1N0cmluZzogLT4gdmVyc2lvbiIsIihmdW5jdGlvbigpIHtcbiAgdGhpcy5WZXJzaW9uID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgIHZhciBhcGksIHRvX3BhcnRzO1xuICAgIGlmICghL1xcZCtcXC5cXGQrXFwuXFxkKy8udGVzdCh2ZXJzaW9uKSkge1xuICAgICAgdmVyc2lvbiA9ICcxLjAuMCc7XG4gICAgfVxuICAgIHRvX3BhcnRzID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgICAgcmV0dXJuIHZlcnNpb24uc3BsaXQoJy4nKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoeCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBhcGkgPSB7XG4gICAgICBjb21wYXJlOiBmdW5jdGlvbihhbm90aGVyX3ZlcnNpb24pIHtcbiAgICAgICAgdmFyIGFub3RoZXJfcGFydCwgYW5vdGhlcl9wYXJ0cywgcGFydCwgcGFydHM7XG4gICAgICAgIHBhcnRzID0gdG9fcGFydHModmVyc2lvbik7XG4gICAgICAgIGFub3RoZXJfcGFydHMgPSB0b19wYXJ0cyhhbm90aGVyX3ZlcnNpb24pO1xuICAgICAgICB3aGlsZSAocGFydHMubm90X2VtcHR5KCkpIHtcbiAgICAgICAgICBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgICBhbm90aGVyX3BhcnQgPSBhbm90aGVyX3BhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgaWYgKHBhcnQgPCBhbm90aGVyX3BhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPiBhbm90aGVyX3BhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0sXG4gICAgICBiZWZvcmU6IGZ1bmN0aW9uKGFub3RoZXJfdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA8IDA7XG4gICAgICB9LFxuICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKGFub3RoZXJfdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA+IDA7XG4gICAgICB9LFxuICAgICAgc3RhcnRpbmdfZnJvbTogZnVuY3Rpb24oYW5vdGhlcl92ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBhcGkuY29tcGFyZShhbm90aGVyX3ZlcnNpb24pID49IDA7XG4gICAgICB9LFxuICAgICAgZ3JlYXRlcl9vcl9lcXVhbDogZnVuY3Rpb24oYW5vdGhlcl92ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBhcGkuY29tcGFyZShhbm90aGVyX3ZlcnNpb24pID49IDA7XG4gICAgICB9LFxuICAgICAgbm9faGlnaGVyX3RoYW46IGZ1bmN0aW9uKGFub3RoZXJfdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA8PSAwO1xuICAgICAgfSxcbiAgICAgIGxlc3Nfb3JfZXF1YWw6IGZ1bmN0aW9uKGFub3RoZXJfdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gYXBpLmNvbXBhcmUoYW5vdGhlcl92ZXJzaW9uKSA8PSAwO1xuICAgICAgfSxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
